

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Apr 23 11:47:01 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30     0000                     
    31                           ; Generated 09/02/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F887 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65     0000                     	;# 
    66     0001                     	;# 
    67     0002                     	;# 
    68     0003                     	;# 
    69     0004                     	;# 
    70     0005                     	;# 
    71     0006                     	;# 
    72     0007                     	;# 
    73     0008                     	;# 
    74     0009                     	;# 
    75     000A                     	;# 
    76     000B                     	;# 
    77     000C                     	;# 
    78     000D                     	;# 
    79     000E                     	;# 
    80     000E                     	;# 
    81     000F                     	;# 
    82     0010                     	;# 
    83     0011                     	;# 
    84     0012                     	;# 
    85     0013                     	;# 
    86     0014                     	;# 
    87     0015                     	;# 
    88     0015                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     0019                     	;# 
    93     001A                     	;# 
    94     001B                     	;# 
    95     001B                     	;# 
    96     001C                     	;# 
    97     001D                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     0086                     	;# 
   103     0087                     	;# 
   104     0088                     	;# 
   105     0089                     	;# 
   106     008C                     	;# 
   107     008D                     	;# 
   108     008E                     	;# 
   109     008F                     	;# 
   110     0090                     	;# 
   111     0091                     	;# 
   112     0092                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0093                     	;# 
   116     0094                     	;# 
   117     0095                     	;# 
   118     0096                     	;# 
   119     0097                     	;# 
   120     0098                     	;# 
   121     0099                     	;# 
   122     009A                     	;# 
   123     009B                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009E                     	;# 
   127     009F                     	;# 
   128     0105                     	;# 
   129     0107                     	;# 
   130     0108                     	;# 
   131     0109                     	;# 
   132     010C                     	;# 
   133     010C                     	;# 
   134     010D                     	;# 
   135     010E                     	;# 
   136     010F                     	;# 
   137     0185                     	;# 
   138     0187                     	;# 
   139     0188                     	;# 
   140     0189                     	;# 
   141     018C                     	;# 
   142     018D                     	;# 
   143     0000                     	;# 
   144     0001                     	;# 
   145     0002                     	;# 
   146     0003                     	;# 
   147     0004                     	;# 
   148     0005                     	;# 
   149     0006                     	;# 
   150     0007                     	;# 
   151     0008                     	;# 
   152     0009                     	;# 
   153     000A                     	;# 
   154     000B                     	;# 
   155     000C                     	;# 
   156     000D                     	;# 
   157     000E                     	;# 
   158     000E                     	;# 
   159     000F                     	;# 
   160     0010                     	;# 
   161     0011                     	;# 
   162     0012                     	;# 
   163     0013                     	;# 
   164     0014                     	;# 
   165     0015                     	;# 
   166     0015                     	;# 
   167     0016                     	;# 
   168     0017                     	;# 
   169     0018                     	;# 
   170     0019                     	;# 
   171     001A                     	;# 
   172     001B                     	;# 
   173     001B                     	;# 
   174     001C                     	;# 
   175     001D                     	;# 
   176     001E                     	;# 
   177     001F                     	;# 
   178     0081                     	;# 
   179     0085                     	;# 
   180     0086                     	;# 
   181     0087                     	;# 
   182     0088                     	;# 
   183     0089                     	;# 
   184     008C                     	;# 
   185     008D                     	;# 
   186     008E                     	;# 
   187     008F                     	;# 
   188     0090                     	;# 
   189     0091                     	;# 
   190     0092                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0093                     	;# 
   194     0094                     	;# 
   195     0095                     	;# 
   196     0096                     	;# 
   197     0097                     	;# 
   198     0098                     	;# 
   199     0099                     	;# 
   200     009A                     	;# 
   201     009B                     	;# 
   202     009C                     	;# 
   203     009D                     	;# 
   204     009E                     	;# 
   205     009F                     	;# 
   206     0105                     	;# 
   207     0107                     	;# 
   208     0108                     	;# 
   209     0109                     	;# 
   210     010C                     	;# 
   211     010C                     	;# 
   212     010D                     	;# 
   213     010E                     	;# 
   214     010F                     	;# 
   215     0185                     	;# 
   216     0187                     	;# 
   217     0188                     	;# 
   218     0189                     	;# 
   219     018C                     	;# 
   220     018D                     	;# 
   221     0000                     	;# 
   222     0001                     	;# 
   223     0002                     	;# 
   224     0003                     	;# 
   225     0004                     	;# 
   226     0005                     	;# 
   227     0006                     	;# 
   228     0007                     	;# 
   229     0008                     	;# 
   230     0009                     	;# 
   231     000A                     	;# 
   232     000B                     	;# 
   233     000C                     	;# 
   234     000D                     	;# 
   235     000E                     	;# 
   236     000E                     	;# 
   237     000F                     	;# 
   238     0010                     	;# 
   239     0011                     	;# 
   240     0012                     	;# 
   241     0013                     	;# 
   242     0014                     	;# 
   243     0015                     	;# 
   244     0015                     	;# 
   245     0016                     	;# 
   246     0017                     	;# 
   247     0018                     	;# 
   248     0019                     	;# 
   249     001A                     	;# 
   250     001B                     	;# 
   251     001B                     	;# 
   252     001C                     	;# 
   253     001D                     	;# 
   254     001E                     	;# 
   255     001F                     	;# 
   256     0081                     	;# 
   257     0085                     	;# 
   258     0086                     	;# 
   259     0087                     	;# 
   260     0088                     	;# 
   261     0089                     	;# 
   262     008C                     	;# 
   263     008D                     	;# 
   264     008E                     	;# 
   265     008F                     	;# 
   266     0090                     	;# 
   267     0091                     	;# 
   268     0092                     	;# 
   269     0093                     	;# 
   270     0093                     	;# 
   271     0093                     	;# 
   272     0094                     	;# 
   273     0095                     	;# 
   274     0096                     	;# 
   275     0097                     	;# 
   276     0098                     	;# 
   277     0099                     	;# 
   278     009A                     	;# 
   279     009B                     	;# 
   280     009C                     	;# 
   281     009D                     	;# 
   282     009E                     	;# 
   283     009F                     	;# 
   284     0105                     	;# 
   285     0107                     	;# 
   286     0108                     	;# 
   287     0109                     	;# 
   288     010C                     	;# 
   289     010C                     	;# 
   290     010D                     	;# 
   291     010E                     	;# 
   292     010F                     	;# 
   293     0185                     	;# 
   294     0187                     	;# 
   295     0188                     	;# 
   296     0189                     	;# 
   297     018C                     	;# 
   298     018D                     	;# 
   299     0000                     	;# 
   300     0001                     	;# 
   301     0002                     	;# 
   302     0003                     	;# 
   303     0004                     	;# 
   304     0005                     	;# 
   305     0006                     	;# 
   306     0007                     	;# 
   307     0008                     	;# 
   308     0009                     	;# 
   309     000A                     	;# 
   310     000B                     	;# 
   311     000C                     	;# 
   312     000D                     	;# 
   313     000E                     	;# 
   314     000E                     	;# 
   315     000F                     	;# 
   316     0010                     	;# 
   317     0011                     	;# 
   318     0012                     	;# 
   319     0013                     	;# 
   320     0014                     	;# 
   321     0015                     	;# 
   322     0015                     	;# 
   323     0016                     	;# 
   324     0017                     	;# 
   325     0018                     	;# 
   326     0019                     	;# 
   327     001A                     	;# 
   328     001B                     	;# 
   329     001B                     	;# 
   330     001C                     	;# 
   331     001D                     	;# 
   332     001E                     	;# 
   333     001F                     	;# 
   334     0081                     	;# 
   335     0085                     	;# 
   336     0086                     	;# 
   337     0087                     	;# 
   338     0088                     	;# 
   339     0089                     	;# 
   340     008C                     	;# 
   341     008D                     	;# 
   342     008E                     	;# 
   343     008F                     	;# 
   344     0090                     	;# 
   345     0091                     	;# 
   346     0092                     	;# 
   347     0093                     	;# 
   348     0093                     	;# 
   349     0093                     	;# 
   350     0094                     	;# 
   351     0095                     	;# 
   352     0096                     	;# 
   353     0097                     	;# 
   354     0098                     	;# 
   355     0099                     	;# 
   356     009A                     	;# 
   357     009B                     	;# 
   358     009C                     	;# 
   359     009D                     	;# 
   360     009E                     	;# 
   361     009F                     	;# 
   362     0105                     	;# 
   363     0107                     	;# 
   364     0108                     	;# 
   365     0109                     	;# 
   366     010C                     	;# 
   367     010C                     	;# 
   368     010D                     	;# 
   369     010E                     	;# 
   370     010F                     	;# 
   371     0185                     	;# 
   372     0187                     	;# 
   373     0188                     	;# 
   374     0189                     	;# 
   375     018C                     	;# 
   376     018D                     	;# 
   377     0000                     	;# 
   378     0001                     	;# 
   379     0002                     	;# 
   380     0003                     	;# 
   381     0004                     	;# 
   382     0005                     	;# 
   383     0006                     	;# 
   384     0007                     	;# 
   385     0008                     	;# 
   386     0009                     	;# 
   387     000A                     	;# 
   388     000B                     	;# 
   389     000C                     	;# 
   390     000D                     	;# 
   391     000E                     	;# 
   392     000E                     	;# 
   393     000F                     	;# 
   394     0010                     	;# 
   395     0011                     	;# 
   396     0012                     	;# 
   397     0013                     	;# 
   398     0014                     	;# 
   399     0015                     	;# 
   400     0015                     	;# 
   401     0016                     	;# 
   402     0017                     	;# 
   403     0018                     	;# 
   404     0019                     	;# 
   405     001A                     	;# 
   406     001B                     	;# 
   407     001B                     	;# 
   408     001C                     	;# 
   409     001D                     	;# 
   410     001E                     	;# 
   411     001F                     	;# 
   412     0081                     	;# 
   413     0085                     	;# 
   414     0086                     	;# 
   415     0087                     	;# 
   416     0088                     	;# 
   417     0089                     	;# 
   418     008C                     	;# 
   419     008D                     	;# 
   420     008E                     	;# 
   421     008F                     	;# 
   422     0090                     	;# 
   423     0091                     	;# 
   424     0092                     	;# 
   425     0093                     	;# 
   426     0093                     	;# 
   427     0093                     	;# 
   428     0094                     	;# 
   429     0095                     	;# 
   430     0096                     	;# 
   431     0097                     	;# 
   432     0098                     	;# 
   433     0099                     	;# 
   434     009A                     	;# 
   435     009B                     	;# 
   436     009C                     	;# 
   437     009D                     	;# 
   438     009E                     	;# 
   439     009F                     	;# 
   440     0105                     	;# 
   441     0107                     	;# 
   442     0108                     	;# 
   443     0109                     	;# 
   444     010C                     	;# 
   445     010C                     	;# 
   446     010D                     	;# 
   447     010E                     	;# 
   448     010F                     	;# 
   449     0185                     	;# 
   450     0187                     	;# 
   451     0188                     	;# 
   452     0189                     	;# 
   453     018C                     	;# 
   454     018D                     	;# 
   455     0000                     	;# 
   456     0001                     	;# 
   457     0002                     	;# 
   458     0003                     	;# 
   459     0004                     	;# 
   460     0005                     	;# 
   461     0006                     	;# 
   462     0007                     	;# 
   463     0008                     	;# 
   464     0009                     	;# 
   465     000A                     	;# 
   466     000B                     	;# 
   467     000C                     	;# 
   468     000D                     	;# 
   469     000E                     	;# 
   470     000E                     	;# 
   471     000F                     	;# 
   472     0010                     	;# 
   473     0011                     	;# 
   474     0012                     	;# 
   475     0013                     	;# 
   476     0014                     	;# 
   477     0015                     	;# 
   478     0015                     	;# 
   479     0016                     	;# 
   480     0017                     	;# 
   481     0018                     	;# 
   482     0019                     	;# 
   483     001A                     	;# 
   484     001B                     	;# 
   485     001B                     	;# 
   486     001C                     	;# 
   487     001D                     	;# 
   488     001E                     	;# 
   489     001F                     	;# 
   490     0081                     	;# 
   491     0085                     	;# 
   492     0086                     	;# 
   493     0087                     	;# 
   494     0088                     	;# 
   495     0089                     	;# 
   496     008C                     	;# 
   497     008D                     	;# 
   498     008E                     	;# 
   499     008F                     	;# 
   500     0090                     	;# 
   501     0091                     	;# 
   502     0092                     	;# 
   503     0093                     	;# 
   504     0093                     	;# 
   505     0093                     	;# 
   506     0094                     	;# 
   507     0095                     	;# 
   508     0096                     	;# 
   509     0097                     	;# 
   510     0098                     	;# 
   511     0099                     	;# 
   512     009A                     	;# 
   513     009B                     	;# 
   514     009C                     	;# 
   515     009D                     	;# 
   516     009E                     	;# 
   517     009F                     	;# 
   518     0105                     	;# 
   519     0107                     	;# 
   520     0108                     	;# 
   521     0109                     	;# 
   522     010C                     	;# 
   523     010C                     	;# 
   524     010D                     	;# 
   525     010E                     	;# 
   526     010F                     	;# 
   527     0185                     	;# 
   528     0187                     	;# 
   529     0188                     	;# 
   530     0189                     	;# 
   531     018C                     	;# 
   532     018D                     	;# 
   533                           
   534                           	psect	idataBANK0
   535     0326                     __pidataBANK0:
   536                           
   537                           ;initializer for _buffer
   538     0326  3420               	retlw	32
   539     0327  3400               	retlw	0
   540     0328  3400               	retlw	0
   541     0329  3400               	retlw	0
   542     032A  3400               	retlw	0
   543     032B  3400               	retlw	0
   544     032C  3400               	retlw	0
   545     032D  3400               	retlw	0
   546     032E  3400               	retlw	0
   547     032F  3400               	retlw	0
   548     0330  3400               	retlw	0
   549     0331  3400               	retlw	0
   550     0332  3400               	retlw	0
   551     0333  3400               	retlw	0
   552     0334  3400               	retlw	0
   553     0335  3400               	retlw	0
   554     0336  3400               	retlw	0
   555     0337  3400               	retlw	0
   556     0338  3400               	retlw	0
   557     0339  3400               	retlw	0
   558                           
   559                           	psect	strings
   560     0294                     __pstrings:
   561     0294                     stringtab:
   562     0294                     __stringtab:
   563     0294                     stringcode:	
   564                           ;	String table - string pointers are 1 byte each
   565                           
   566     0294                     stringdir:
   567     0294  3002               	movlw	high stringdir
   568     0295  008A               	movwf	10
   569     0296  0804               	movf	4,w
   570     0297  0A84               	incf	4,f
   571     0298  0782               	addwf	2,f
   572     0299                     __stringbase:
   573     0299  3400               	retlw	0
   574     029A                     __end_of__stringtab:
   575     029A                     _dpowers:
   576     029A  3401               	retlw	1
   577     029B  3400               	retlw	0
   578     029C  3400               	retlw	0
   579     029D  3400               	retlw	0
   580     029E  340A               	retlw	10
   581     029F  3400               	retlw	0
   582     02A0  3400               	retlw	0
   583     02A1  3400               	retlw	0
   584     02A2  3464               	retlw	100
   585     02A3  3400               	retlw	0
   586     02A4  3400               	retlw	0
   587     02A5  3400               	retlw	0
   588     02A6  34E8               	retlw	232
   589     02A7  3403               	retlw	3
   590     02A8  3400               	retlw	0
   591     02A9  3400               	retlw	0
   592     02AA  3410               	retlw	16
   593     02AB  3427               	retlw	39
   594     02AC  3400               	retlw	0
   595     02AD  3400               	retlw	0
   596     02AE  34A0               	retlw	160
   597     02AF  3486               	retlw	134
   598     02B0  3401               	retlw	1
   599     02B1  3400               	retlw	0
   600     02B2  3440               	retlw	64
   601     02B3  3442               	retlw	66
   602     02B4  340F               	retlw	15
   603     02B5  3400               	retlw	0
   604     02B6  3480               	retlw	128
   605     02B7  3496               	retlw	150
   606     02B8  3498               	retlw	152
   607     02B9  3400               	retlw	0
   608     02BA  3400               	retlw	0
   609     02BB  34E1               	retlw	225
   610     02BC  34F5               	retlw	245
   611     02BD  3405               	retlw	5
   612     02BE  3400               	retlw	0
   613     02BF  34CA               	retlw	202
   614     02C0  349A               	retlw	154
   615     02C1  343B               	retlw	59
   616     02C2                     __end_of_dpowers:
   617     0019                     _TXREG	set	25
   618     0018                     _RCSTA	set	24
   619     0018                     _RCSTAbits	set	24
   620     000B                     _INTCONbits	set	11
   621     000C                     _PIR1bits	set	12
   622     000E                     _TMR1L	set	14
   623     000F                     _TMR1H	set	15
   624     0010                     _T1CONbits	set	16
   625     001E                     _ADRESH	set	30
   626     001F                     _ADCON0bits	set	31
   627     0064                     _TXIF	set	100
   628     0099                     _SPBRG	set	153
   629     0098                     _TXSTAbits	set	152
   630     0087                     _TRISCbits	set	135
   631     0089                     _TRISE	set	137
   632     0088                     _TRISD	set	136
   633     008F                     _OSCCONbits	set	143
   634     008C                     _PIE1bits	set	140
   635     009E                     _ADRESL	set	158
   636     009F                     _ADCON1bits	set	159
   637     0085                     _TRISAbits	set	133
   638     04C5                     _TXEN	set	1221
   639     0187                     _BAUDCTLbits	set	391
   640     0189                     _ANSELH	set	393
   641     0188                     _ANSEL	set	392
   642     0188                     _ANSELbits	set	392
   643     02C2                     STR_1:
   644     02C2  3420               	retlw	32	;' '
   645     02C3  3420               	retlw	32	;' '
   646     02C4  3420               	retlw	32	;' '
   647     02C5  3400               	retlw	0
   648     02C6                     STR_2:
   649     02C6  3425               	retlw	37	;'%'
   650     02C7  346C               	retlw	108	;'l'
   651     02C8  3464               	retlw	100	;'d'
   652     02C9  3400               	retlw	0
   653                           
   654                           	psect	cinit
   655     0013                     start_initialization:	
   656                           ; #config settings
   657                           
   658     0013                     __initialization:
   659                           
   660                           ; Initialize objects allocated to BANK0
   661     0013  1383               	bcf	3,7	;select IRP bank0
   662     0014  3061               	movlw	low (__pdataBANK0+20)
   663     0015  00FD               	movwf	btemp+-1
   664     0016  3003               	movlw	high __pidataBANK0
   665     0017  00FE               	movwf	btemp
   666     0018  3026               	movlw	low __pidataBANK0
   667     0019  00FF               	movwf	btemp+1
   668     001A  304D               	movlw	low __pdataBANK0
   669     001B  0084               	movwf	4
   670     001C  120A  118A  2352  120A  118A  	fcall	init_ram0
   671                           
   672                           ; Clear objects allocated to BANK1
   673     0021  30A0               	movlw	low __pbssBANK1
   674     0022  0084               	movwf	4
   675     0023  30F0               	movlw	low (__pbssBANK1+80)
   676     0024  120A  118A  2385   	fcall	clear_ram0
   677                           
   678                           ; Clear objects allocated to BANK0
   679     0027  01E1               	clrf	__pbssBANK0& (0+127)
   680     0028                     end_of_initialization:	
   681                           ;End of C runtime variable initialization code
   682                           
   683     0028                     __end_of__initialization:
   684     0028  0183               	clrf	3
   685     0029  120A  118A  294D   	ljmp	_main	;jump to C main() function
   686                           
   687                           	psect	bssBANK0
   688     0061                     __pbssBANK0:
   689     0061                     _contador:
   690     0061                     	ds	1
   691                           
   692                           	psect	dataBANK0
   693     004D                     __pdataBANK0:
   694     004D                     _buffer:
   695     004D                     	ds	20
   696                           
   697                           	psect	bssBANK1
   698     00A0                     __pbssBANK1:
   699     00A0                     _muestras:
   700     00A0                     	ds	80
   701                           
   702                           	psect	inittext
   703     034E                     init_fetch0:	
   704                           ;	Called with low address in FSR and high address in W
   705                           
   706     034E  087E               	movf	126,w
   707     034F  008A               	movwf	10
   708     0350  087F               	movf	127,w
   709     0351  0082               	movwf	2
   710     0352                     init_ram0:	
   711                           ;Called with:
   712                           ;	high address of idata address in btemp 
   713                           ;	low address of idata address in btemp+1 
   714                           ;	low address of data in FSR
   715                           ;	high address + 1 of data in btemp-1
   716                           
   717     0352  234E  120A  118A   	fcall	init_fetch0
   718     0355  0080               	movwf	0
   719     0356  0A84               	incf	4,f
   720     0357  0804               	movf	4,w
   721     0358  067D               	xorwf	125,w
   722     0359  1903               	btfsc	3,2
   723     035A  3400               	retlw	0
   724     035B  0AFF               	incf	127,f
   725     035C  1903               	btfsc	3,2
   726     035D  0AFE               	incf	126,f
   727     035E  2B52               	goto	init_ram0
   728                           
   729                           	psect	clrtext
   730     0385                     clear_ram0:	
   731                           ;	Called with FSR containing the base address, and
   732                           ;	W with the last address+1
   733                           
   734     0385  0064               	clrwdt	;clear the watchdog before getting into this loop
   735     0386                     clrloop0:
   736     0386  0180               	clrf	0	;clear RAM location pointed to by FSR
   737     0387  0A84               	incf	4,f	;increment pointer
   738     0388  0604               	xorwf	4,w	;XOR with final address
   739     0389  1903               	btfsc	3,2	;have we reached the end yet?
   740     038A  3400               	retlw	0	;all done for this memory range, return
   741     038B  0604               	xorwf	4,w	;XOR again to restore value
   742     038C  2B86               	goto	clrloop0	;do the next byte
   743                           
   744                           	psect	cstackCOMMON
   745     0070                     __pcstackCOMMON:
   746     0070                     ?_set_CHANNEL:
   747     0070                     ?_config_HAL:	
   748                           ; 1 bytes @ 0x0
   749                           
   750     0070                     ?_uart_init:	
   751                           ; 1 bytes @ 0x0
   752                           
   753     0070                     ?_uart_send_text:	
   754                           ; 1 bytes @ 0x0
   755                           
   756     0070                     ?_init_ADC:	
   757                           ; 1 bytes @ 0x0
   758                           
   759     0070                     ?_init_inttimer:	
   760                           ; 1 bytes @ 0x0
   761                           
   762     0070                     ?_TMR1_ISR:	
   763                           ; 1 bytes @ 0x0
   764                           
   765     0070                     ??_TMR1_ISR:	
   766                           ; 1 bytes @ 0x0
   767                           
   768     0070                     ?_uart_send:	
   769                           ; 1 bytes @ 0x0
   770                           
   771     0070                     ?_main:	
   772                           ; 1 bytes @ 0x0
   773                           
   774                           
   775                           ; 2 bytes @ 0x0
   776     0070                     	ds	13
   777                           
   778                           	psect	cstackBANK0
   779     0020                     __pcstackBANK0:
   780     0020                     ??_set_CHANNEL:
   781     0020                     ??_config_HAL:	
   782                           ; 1 bytes @ 0x0
   783                           
   784     0020                     ??_uart_init:	
   785                           ; 1 bytes @ 0x0
   786                           
   787     0020                     ?_strcpy:	
   788                           ; 1 bytes @ 0x0
   789                           
   790     0020                     ??_init_inttimer:	
   791                           ; 1 bytes @ 0x0
   792                           
   793     0020                     ??_uart_send:	
   794                           ; 1 bytes @ 0x0
   795                           
   796     0020                     ?___lldiv:	
   797                           ; 1 bytes @ 0x0
   798                           
   799     0020                     uart_send@data:	
   800                           ; 4 bytes @ 0x0
   801                           
   802     0020                     strcpy@from:	
   803                           ; 1 bytes @ 0x0
   804                           
   805     0020                     ___lldiv@divisor:	
   806                           ; 1 bytes @ 0x0
   807                           
   808                           
   809                           ; 4 bytes @ 0x0
   810     0020                     	ds	1
   811     0021                     ??_strcpy:
   812     0021                     ??_uart_send_text:	
   813                           ; 1 bytes @ 0x1
   814                           
   815     0021                     set_CHANNEL@channel:	
   816                           ; 1 bytes @ 0x1
   817                           
   818     0021                     uart_send_text@aux:	
   819                           ; 1 bytes @ 0x1
   820                           
   821     0021                     strcpy@to:	
   822                           ; 1 bytes @ 0x1
   823                           
   824                           
   825                           ; 1 bytes @ 0x1
   826     0021                     	ds	1
   827     0022                     ??_init_ADC:
   828     0022                     uart_send_text@buffer:	
   829                           ; 1 bytes @ 0x2
   830                           
   831     0022                     strcpy@cp:	
   832                           ; 1 bytes @ 0x2
   833                           
   834                           
   835                           ; 1 bytes @ 0x2
   836     0022                     	ds	2
   837     0024                     ___lldiv@dividend:
   838                           
   839                           ; 4 bytes @ 0x4
   840     0024                     	ds	4
   841     0028                     ??___lldiv:
   842                           
   843                           ; 1 bytes @ 0x8
   844     0028                     	ds	1
   845     0029                     ___lldiv@quotient:
   846                           
   847                           ; 4 bytes @ 0x9
   848     0029                     	ds	4
   849     002D                     ___lldiv@counter:
   850                           
   851                           ; 1 bytes @ 0xD
   852     002D                     	ds	1
   853     002E                     ?___llmod:
   854     002E                     ___llmod@divisor:	
   855                           ; 4 bytes @ 0xE
   856                           
   857                           
   858                           ; 4 bytes @ 0xE
   859     002E                     	ds	4
   860     0032                     ___llmod@dividend:
   861                           
   862                           ; 4 bytes @ 0x12
   863     0032                     	ds	4
   864     0036                     ??___llmod:
   865                           
   866                           ; 1 bytes @ 0x16
   867     0036                     	ds	1
   868     0037                     ___llmod@counter:
   869                           
   870                           ; 1 bytes @ 0x17
   871     0037                     	ds	1
   872     0038                     ?_sprintf:
   873     0038                     sprintf@f:	
   874                           ; 2 bytes @ 0x18
   875                           
   876                           
   877                           ; 1 bytes @ 0x18
   878     0038                     	ds	3
   879     003B                     ??_sprintf:
   880                           
   881                           ; 1 bytes @ 0x1B
   882     003B                     	ds	5
   883     0040                     sprintf@prec:
   884                           
   885                           ; 2 bytes @ 0x20
   886     0040                     	ds	2
   887     0042                     sprintf@ap:
   888                           
   889                           ; 1 bytes @ 0x22
   890     0042                     	ds	1
   891     0043                     sprintf@flag:
   892                           
   893                           ; 1 bytes @ 0x23
   894     0043                     	ds	1
   895     0044                     sprintf@val:
   896                           
   897                           ; 4 bytes @ 0x24
   898     0044                     	ds	4
   899     0048                     sprintf@sp:
   900                           
   901                           ; 1 bytes @ 0x28
   902     0048                     	ds	1
   903     0049                     sprintf@c:
   904                           
   905                           ; 1 bytes @ 0x29
   906     0049                     	ds	1
   907     004A                     ??_main:
   908                           
   909                           ; 1 bytes @ 0x2A
   910     004A                     	ds	1
   911     004B                     main@i:
   912                           
   913                           ; 2 bytes @ 0x2B
   914     004B                     	ds	2
   915                           
   916                           	psect	maintext
   917     014D                     __pmaintext:	
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 15 in file "newmain.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  i               2   43[BANK0 ] int 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  2   92[None  ] int 
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : B00/0
   934 ;;		On exit  : 300/100
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   937 ;;      Params:         0       0       0       0       0
   938 ;;      Locals:         0       2       0       0       0
   939 ;;      Temps:          0       1       0       0       0
   940 ;;      Totals:         0       3       0       0       0
   941 ;;Total ram usage:        3 bytes
   942 ;; Hardware stack levels required when called: 3
   943 ;; This function calls:
   944 ;;		_config_HAL
   945 ;;		_init_ADC
   946 ;;		_init_inttimer
   947 ;;		_sprintf
   948 ;;		_strcpy
   949 ;;		_uart_init
   950 ;;		_uart_send_text
   951 ;; This function is called by:
   952 ;;		Startup code after reset
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956     014D                     _main:	
   957                           ;psect for function _main
   958                           
   959                           
   960                           ;newmain.c: 18: OSCCONbits.IRCF = 0b110;
   961                           
   962                           ;incstack = 0
   963                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   964     014D  1683               	bsf	3,5	;RP0=1, select bank1
   965     014E  080F               	movf	15,w	;volatile
   966     014F  398F               	andlw	-113
   967     0150  3860               	iorlw	96
   968     0151  008F               	movwf	15	;volatile
   969                           
   970                           ;newmain.c: 20: config_HAL();
   971     0152  120A  118A  238D  120A  118A  	fcall	_config_HAL
   972                           
   973                           ;newmain.c: 21: init_ADC();
   974     0157  120A  118A  22EB  120A  118A  	fcall	_init_ADC
   975                           
   976                           ;newmain.c: 22: uart_init();
   977     015C  120A  118A  235F  120A  118A  	fcall	_uart_init
   978                           
   979                           ;newmain.c: 23: init_inttimer();
   980     0161  120A  118A  233A  120A  118A  	fcall	_init_inttimer
   981     0166                     l1180:
   982                           
   983                           ;newmain.c: 26: {;newmain.c: 27: ADCON0bits.GO = 1;
   984     0166  1283               	bcf	3,5	;RP0=0, select bank0
   985     0167  149F               	bsf	31,1	;volatile
   986     0168                     l1182:	
   987                           ;newmain.c: 29: while (contador < 40);
   988                           
   989     0168  3028               	movlw	40
   990     0169  0261               	subwf	_contador,w	;volatile
   991     016A  1C03               	skipc
   992     016B  2968               	goto	l1182
   993                           
   994                           ;newmain.c: 30: PIE1bits.TMR1IE = 0;
   995     016C  1683               	bsf	3,5	;RP0=1, select bank1
   996     016D  100C               	bcf	12,0	;volatile
   997                           
   998                           ;newmain.c: 31: PIE1bits.ADIE = 0;
   999     016E  130C               	bcf	12,6	;volatile
  1000                           
  1001                           ;newmain.c: 33: for(int i=0; i<=40; i++){
  1002     016F  1283               	bcf	3,5	;RP0=0, select bank0
  1003     0170  01CB               	clrf	main@i
  1004     0171  01CC               	clrf	main@i+1
  1005     0172                     l1190:
  1006                           
  1007                           ;newmain.c: 34: strcpy(buffer,"   ");
  1008     0172  3029               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1009     0173  1283               	bcf	3,5	;RP0=0, select bank0
  1010     0174  1303               	bcf	3,6	;RP1=0, select bank0
  1011     0175  00A0               	movwf	strcpy@from
  1012     0176  304D               	movlw	(low (_buffer| 0))& (0+255)
  1013     0177  120A  118A  230A  120A  118A  	fcall	_strcpy
  1014                           
  1015                           ;newmain.c: 35: sprintf(buffer, "%ld", muestras[i]);
  1016     017C  302D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1017     017D  00B8               	movwf	sprintf@f
  1018     017E  084B               	movf	main@i,w
  1019     017F  00CA               	movwf	??_main
  1020     0180  074A               	addwf	??_main,w
  1021     0181  3EA0               	addlw	(low (_muestras| 0))& (0+255)
  1022     0182  0084               	movwf	4
  1023     0183  0800               	movf	0,w
  1024     0184  00B9               	movwf	?_sprintf+1
  1025     0185  0A84               	incf	4,f
  1026     0186  0800               	movf	0,w
  1027     0187  00BA               	movwf	?_sprintf+2
  1028     0188  304D               	movlw	(low (_buffer| 0))& (0+255)
  1029     0189  120A  118A  202C  120A  118A  	fcall	_sprintf
  1030                           
  1031                           ;newmain.c: 36: buffer[19] = ';';
  1032     018E  303B               	movlw	59
  1033     018F  00E0               	movwf	_buffer+19
  1034                           
  1035                           ;newmain.c: 37: uart_send_text(buffer);
  1036     0190  304D               	movlw	(low (_buffer| 0))& (0+255)
  1037     0191  120A  118A  22CA  120A  118A  	fcall	_uart_send_text
  1038     0196  3001               	movlw	1
  1039     0197  07CB               	addwf	main@i,f
  1040     0198  1803               	skipnc
  1041     0199  0ACC               	incf	main@i+1,f
  1042     019A  3000               	movlw	0
  1043     019B  07CC               	addwf	main@i+1,f
  1044     019C  084C               	movf	main@i+1,w
  1045     019D  3A80               	xorlw	128
  1046     019E  00FF               	movwf	127
  1047     019F  3080               	movlw	128
  1048     01A0  027F               	subwf	127,w
  1049     01A1  1D03               	skipz
  1050     01A2  29A5               	goto	u585
  1051     01A3  3029               	movlw	41
  1052     01A4  024B               	subwf	main@i,w
  1053     01A5                     u585:
  1054     01A5  1C03               	skipc
  1055     01A6  2972               	goto	l1190
  1056                           
  1057                           ;newmain.c: 38: };newmain.c: 42: contador = 0;
  1058     01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1059     01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1060     01A9  01E1               	clrf	_contador	;volatile
  1061                           
  1062                           ;newmain.c: 43: ADCON0bits.GO = 1;
  1063     01AA  149F               	bsf	31,1	;volatile
  1064                           
  1065                           ;newmain.c: 44: PIE1bits.TMR1IE = 1;
  1066     01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1067     01AC  140C               	bsf	12,0	;volatile
  1068                           
  1069                           ;newmain.c: 45: PIE1bits.ADIE = 1;
  1070     01AD  170C               	bsf	12,6	;volatile
  1071     01AE  2966               	goto	l1180
  1072     01AF                     __end_of_main:
  1073                           
  1074                           	psect	text1
  1075     02CA                     __ptext1:	
  1076 ;; *************** function _uart_send_text *****************
  1077 ;; Defined at:
  1078 ;;		line 89 in file "uart.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;  buffer          1    wreg     PTR unsigned char 
  1081 ;;		 -> buffer(20), 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  buffer          1    2[BANK0 ] PTR unsigned char 
  1084 ;;		 -> buffer(20), 
  1085 ;;  aux             1    1[BANK0 ] unsigned char 
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : B00/0
  1092 ;;		On exit  : 300/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1095 ;;      Params:         0       0       0       0       0
  1096 ;;      Locals:         0       2       0       0       0
  1097 ;;      Temps:          0       0       0       0       0
  1098 ;;      Totals:         0       2       0       0       0
  1099 ;;Total ram usage:        2 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; Hardware stack levels required when called: 2
  1102 ;; This function calls:
  1103 ;;		_uart_send
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109     02CA                     _uart_send_text:	
  1110                           ;psect for function _uart_send_text
  1111                           
  1112                           
  1113                           ;incstack = 0
  1114                           ; Regs used in _uart_send_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1115                           ;uart_send_text@buffer stored from wreg
  1116     02CA  00A2               	movwf	uart_send_text@buffer
  1117     02CB                     l172:	
  1118                           ;uart.c: 91: char aux;;uart.c: 92: do{
  1119                           
  1120                           
  1121                           ;uart.c: 93: aux = *buffer;
  1122     02CB  0822               	movf	uart_send_text@buffer,w
  1123     02CC  0084               	movwf	4
  1124     02CD  0800               	movf	0,w
  1125     02CE  00A1               	movwf	uart_send_text@aux
  1126                           
  1127                           ;uart.c: 94: uart_send(aux);
  1128     02CF  0821               	movf	uart_send_text@aux,w
  1129     02D0  120A  118A  237C  120A  118A  	fcall	_uart_send
  1130                           
  1131                           ;uart.c: 95: buffer++;
  1132     02D5  3001               	movlw	1
  1133     02D6  00FF               	movwf	127
  1134     02D7  087F               	movf	127,w
  1135     02D8  07A2               	addwf	uart_send_text@buffer,f
  1136                           
  1137                           ;uart.c: 96: }while(*buffer != ';');
  1138     02D9  0822               	movf	uart_send_text@buffer,w
  1139     02DA  0084               	movwf	4
  1140     02DB  303B               	movlw	59
  1141     02DC  1383               	bcf	3,7	;select IRP bank0
  1142     02DD  0600               	xorwf	0,w
  1143     02DE  1D03               	btfss	3,2
  1144     02DF  2ACB               	goto	l172
  1145                           
  1146                           ;uart.c: 97: uart_send('\r');
  1147     02E0  300D               	movlw	13
  1148     02E1  120A  118A  237C  120A  118A  	fcall	_uart_send
  1149                           
  1150                           ;uart.c: 98: uart_send('\n');
  1151     02E6  300A               	movlw	10
  1152     02E7  120A  118A  237C   	fcall	_uart_send
  1153     02EA  0008               	return
  1154     02EB                     __end_of_uart_send_text:
  1155                           
  1156                           	psect	text2
  1157     037C                     __ptext2:	
  1158 ;; *************** function _uart_send *****************
  1159 ;; Defined at:
  1160 ;;		line 66 in file "uart.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;  data            1    wreg     unsigned char 
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;  data            1    0[BANK0 ] unsigned char 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  1    wreg      void 
  1167 ;; Registers used:
  1168 ;;		wreg
  1169 ;; Tracked objects:
  1170 ;;		On entry : 300/0
  1171 ;;		On exit  : 300/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         0       0       0       0       0
  1175 ;;      Locals:         0       1       0       0       0
  1176 ;;      Temps:          0       0       0       0       0
  1177 ;;      Totals:         0       1       0       0       0
  1178 ;;Total ram usage:        1 bytes
  1179 ;; Hardware stack levels used: 1
  1180 ;; Hardware stack levels required when called: 1
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_uart_send_text
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188     037C                     _uart_send:	
  1189                           ;psect for function _uart_send
  1190                           
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _uart_send: [wreg]
  1194                           ;uart_send@data stored from wreg
  1195     037C  00A0               	movwf	uart_send@data
  1196                           
  1197                           ;uart.c: 68: TXEN = 1;
  1198     037D  1683               	bsf	3,5	;RP0=1, select bank1
  1199     037E  1698               	bsf	24,5	;volatile
  1200     037F                     l158:	
  1201                           ;uart.c: 69: while (TXIF == 0);
  1202                           
  1203     037F  1283               	bcf	3,5	;RP0=0, select bank0
  1204     0380  1E0C               	btfss	12,4	;volatile
  1205     0381  2B7F               	goto	l158
  1206                           
  1207                           ;uart.c: 70: TXREG = data;
  1208     0382  0820               	movf	uart_send@data,w
  1209     0383  0099               	movwf	25	;volatile
  1210     0384  0008               	return
  1211     0385                     __end_of_uart_send:
  1212                           
  1213                           	psect	text3
  1214     035F                     __ptext3:	
  1215 ;; *************** function _uart_init *****************
  1216 ;; Defined at:
  1217 ;;		line 3 in file "uart.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;		None
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;		None
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/300
  1228 ;;		On exit  : 300/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1231 ;;      Params:         0       0       0       0       0
  1232 ;;      Locals:         0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0
  1234 ;;      Totals:         0       0       0       0       0
  1235 ;;Total ram usage:        0 bytes
  1236 ;; Hardware stack levels used: 1
  1237 ;; Hardware stack levels required when called: 1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245     035F                     _uart_init:	
  1246                           ;psect for function _uart_init
  1247                           
  1248                           
  1249                           ;uart.c: 6: TRISCbits.TRISC6 = 0;
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in _uart_init: [wreg]
  1253     035F  1683               	bsf	3,5	;RP0=1, select bank1
  1254     0360  1303               	bcf	3,6	;RP1=0, select bank1
  1255     0361  1307               	bcf	7,6	;volatile
  1256                           
  1257                           ;uart.c: 7: TRISCbits.TRISC7 = 1;
  1258     0362  1787               	bsf	7,7	;volatile
  1259                           
  1260                           ;uart.c: 8: TXSTAbits.BRGH = 0;
  1261     0363  1118               	bcf	24,2	;volatile
  1262                           
  1263                           ;uart.c: 9: BAUDCTLbits.BRG16 = 1;
  1264     0364  1703               	bsf	3,6	;RP1=1, select bank3
  1265     0365  1587               	bsf	7,3	;volatile
  1266                           
  1267                           ;uart.c: 20: SPBRG = 25;
  1268     0366  3019               	movlw	25
  1269     0367  1303               	bcf	3,6	;RP1=0, select bank1
  1270     0368  0099               	movwf	25	;volatile
  1271                           
  1272                           ;uart.c: 21: TXSTAbits.SYNC = 0;
  1273     0369  1218               	bcf	24,4	;volatile
  1274                           
  1275                           ;uart.c: 22: RCSTAbits.SPEN = 1;
  1276     036A  1283               	bcf	3,5	;RP0=0, select bank0
  1277     036B  1798               	bsf	24,7	;volatile
  1278                           
  1279                           ;uart.c: 23: RCSTA = 0b10010000;
  1280     036C  3090               	movlw	144
  1281     036D  0098               	movwf	24	;volatile
  1282     036E  0008               	return
  1283     036F                     __end_of_uart_init:
  1284                           
  1285                           	psect	text4
  1286     030A                     __ptext4:	
  1287 ;; *************** function _strcpy *****************
  1288 ;; Defined at:
  1289 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1290 ;; Parameters:    Size  Location     Type
  1291 ;;  to              1    wreg     PTR unsigned char 
  1292 ;;		 -> buffer(20), 
  1293 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  1294 ;;		 -> STR_1(4), 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  to              1    1[BANK0 ] PTR unsigned char 
  1297 ;;		 -> buffer(20), 
  1298 ;;  cp              1    2[BANK0 ] PTR unsigned char 
  1299 ;;		 -> buffer(20), 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      PTR unsigned char 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1304 ;; Tracked objects:
  1305 ;;		On entry : 300/0
  1306 ;;		On exit  : B00/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       1       0       0       0
  1310 ;;      Locals:         0       2       0       0       0
  1311 ;;      Temps:          0       0       0       0       0
  1312 ;;      Totals:         0       3       0       0       0
  1313 ;;Total ram usage:        3 bytes
  1314 ;; Hardware stack levels used: 2
  1315 ;; Hardware stack levels required when called: 1
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323     030A                     _strcpy:	
  1324                           ;psect for function _strcpy
  1325                           
  1326                           
  1327                           ;incstack = 0
  1328                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1329                           ;strcpy@to stored from wreg
  1330     030A  00A1               	movwf	strcpy@to
  1331     030B  0821               	movf	strcpy@to,w
  1332     030C  00A2               	movwf	strcpy@cp
  1333     030D                     l1094:
  1334     030D  0820               	movf	strcpy@from,w
  1335     030E  0084               	movwf	4
  1336     030F  120A  118A  2294  120A  118A  	fcall	stringdir
  1337     0314  00FF               	movwf	127
  1338     0315  0822               	movf	strcpy@cp,w
  1339     0316  0084               	movwf	4
  1340     0317  087F               	movf	127,w
  1341     0318  1383               	bcf	3,7	;select IRP bank0
  1342     0319  0080               	movwf	0
  1343     031A  0800               	movf	0,w
  1344     031B  1903               	btfsc	3,2
  1345     031C  0008               	return
  1346     031D  3001               	movlw	1
  1347     031E  00FF               	movwf	127
  1348     031F  087F               	movf	127,w
  1349     0320  07A2               	addwf	strcpy@cp,f
  1350     0321  3001               	movlw	1
  1351     0322  00FF               	movwf	127
  1352     0323  087F               	movf	127,w
  1353     0324  07A0               	addwf	strcpy@from,f
  1354     0325  2B0D               	goto	l1094
  1355     0326                     __end_of_strcpy:
  1356                           
  1357                           	psect	text5
  1358     002C                     __ptext5:	
  1359 ;; *************** function _sprintf *****************
  1360 ;; Defined at:
  1361 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  sp              1    wreg     PTR unsigned char 
  1364 ;;		 -> buffer(20), 
  1365 ;;  f               1   24[BANK0 ] PTR const unsigned char 
  1366 ;;		 -> STR_2(4), 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  sp              1   40[BANK0 ] PTR unsigned char 
  1369 ;;		 -> buffer(20), 
  1370 ;;  val             4   36[BANK0 ] unsigned long 
  1371 ;;  tmpval          4    0        struct .
  1372 ;;  prec            2   32[BANK0 ] int 
  1373 ;;  cp              2    0        PTR const unsigned char 
  1374 ;;  len             2    0        unsigned int 
  1375 ;;  c               1   41[BANK0 ] unsigned char 
  1376 ;;  flag            1   35[BANK0 ] unsigned char 
  1377 ;;  ap              1   34[BANK0 ] PTR void [1]
  1378 ;;		 -> ?_sprintf(2), 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  2   24[BANK0 ] int 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : B00/0
  1385 ;;		On exit  : B00/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       3       0       0       0
  1389 ;;      Locals:         0      10       0       0       0
  1390 ;;      Temps:          0       5       0       0       0
  1391 ;;      Totals:         0      18       0       0       0
  1392 ;;Total ram usage:       18 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 2
  1395 ;; This function calls:
  1396 ;;		___lldiv
  1397 ;;		___llmod
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403     002C                     _sprintf:	
  1404                           ;psect for function _sprintf
  1405                           
  1406                           
  1407                           ;incstack = 0
  1408                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1409                           ;sprintf@sp stored from wreg
  1410     002C  00C8               	movwf	sprintf@sp
  1411                           
  1412                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 517: int prec;;doprnt.c: 52
      +                          5: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;doprnt.c:
      +                           542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long val;;doprnt.c:
      +                           546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_start();
  1413     002D  3039               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1414     002E  00C2               	movwf	sprintf@ap
  1415     002F                     l1154:	
  1416                           ;doprnt.c: 553: while((c = *f++)) {
  1417                           
  1418     002F  3001               	movlw	1
  1419     0030  07B8               	addwf	sprintf@f,f
  1420     0031  30FF               	movlw	-1
  1421     0032  0738               	addwf	sprintf@f,w
  1422     0033  0084               	movwf	4
  1423     0034  120A  118A  2294  120A  118A  	fcall	stringdir
  1424     0039  00C9               	movwf	sprintf@c
  1425     003A  0849               	movf	sprintf@c,w
  1426     003B  1903               	btfsc	3,2
  1427     003C  2949               	goto	l1156
  1428                           
  1429                           ;doprnt.c: 555: if(c != '%')
  1430     003D  3025               	movlw	37
  1431     003E  0649               	xorwf	sprintf@c,w
  1432     003F  1903               	btfsc	3,2
  1433     0040  284A               	goto	l1104
  1434                           
  1435                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1436     0041  0848               	movf	sprintf@sp,w
  1437     0042  0084               	movwf	4
  1438     0043  0849               	movf	sprintf@c,w
  1439     0044  0080               	movwf	0
  1440     0045  3001               	movlw	1
  1441     0046  00FF               	movwf	127
  1442     0047  087F               	movf	127,w
  1443     0048  07C8               	addwf	sprintf@sp,f
  1444                           
  1445                           ;doprnt.c: 559: continue;
  1446     0049  282F               	goto	l1154
  1447     004A                     l1104:
  1448                           
  1449                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1450     004A  01C3               	clrf	sprintf@flag
  1451     004B  284D               	goto	l1108
  1452     004C                     l275:	
  1453                           ;doprnt.c: 667: case 'l':
  1454                           
  1455                           
  1456                           ;doprnt.c: 669: flag |= 0x10;
  1457     004C  1643               	bsf	sprintf@flag,4
  1458     004D                     l1108:	
  1459                           ;doprnt.c: 670: goto loop;
  1460                           
  1461     004D  3001               	movlw	1
  1462     004E  07B8               	addwf	sprintf@f,f
  1463     004F  30FF               	movlw	-1
  1464     0050  0738               	addwf	sprintf@f,w
  1465     0051  0084               	movwf	4
  1466     0052  120A  118A  2294  120A  118A  	fcall	stringdir
  1467     0057  00C9               	movwf	sprintf@c
  1468                           
  1469                           ; Switch size 1, requested type "simple"
  1470                           ; Number of cases is 4, Range of values is 0 to 108
  1471                           ; switch strategies available:
  1472                           ; Name         Instructions Cycles
  1473                           ; simple_byte           13     7 (average)
  1474                           ; jumptable            260     6 (fixed)
  1475                           ;	Chosen strategy is simple_byte
  1476     0058  3A00               	xorlw	0	; case 0
  1477     0059  1903               	skipnz
  1478     005A  2949               	goto	l1156
  1479     005B  3A64               	xorlw	100	; case 100
  1480     005C  1903               	skipnz
  1481     005D  2865               	goto	l278
  1482     005E  3A0D               	xorlw	13	; case 105
  1483     005F  1903               	skipnz
  1484     0060  2865               	goto	l278
  1485     0061  3A05               	xorlw	5	; case 108
  1486     0062  1903               	skipnz
  1487     0063  284C               	goto	l275
  1488     0064  282F               	goto	l1154
  1489     0065                     l278:
  1490                           
  1491                           ;doprnt.c: 1279: {;doprnt.c: 1281: if(flag & 0x10)
  1492     0065  1E43               	btfss	sprintf@flag,4
  1493     0066  2876               	goto	l1114
  1494                           
  1495                           ;doprnt.c: 1282: val = (unsigned long)(*(long *)__va_arg((*(long **)ap), (long)0));
  1496     0067  0842               	movf	sprintf@ap,w
  1497     0068  0084               	movwf	4
  1498     0069  0800               	movf	0,w
  1499     006A  00C4               	movwf	sprintf@val
  1500     006B  0A84               	incf	4,f
  1501     006C  0800               	movf	0,w
  1502     006D  00C5               	movwf	sprintf@val+1
  1503     006E  0A84               	incf	4,f
  1504     006F  0800               	movf	0,w
  1505     0070  00C6               	movwf	sprintf@val+2
  1506     0071  0A84               	incf	4,f
  1507     0072  0800               	movf	0,w
  1508     0073  00C7               	movwf	sprintf@val+3
  1509     0074  3004               	movlw	4
  1510     0075  2887               	goto	L1
  1511     0076                     l1114:
  1512                           
  1513                           ;doprnt.c: 1283: else;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_arg((*(int **)a
      +                          p), (int)0));
  1514     0076  0842               	movf	sprintf@ap,w
  1515     0077  0084               	movwf	4
  1516     0078  0800               	movf	0,w
  1517     0079  00BB               	movwf	??_sprintf
  1518     007A  0A84               	incf	4,f
  1519     007B  0800               	movf	0,w
  1520     007C  00BC               	movwf	??_sprintf+1
  1521     007D  083B               	movf	??_sprintf,w
  1522     007E  00C4               	movwf	sprintf@val
  1523     007F  083C               	movf	??_sprintf+1,w
  1524     0080  00C5               	movwf	sprintf@val+1
  1525     0081  3000               	movlw	0
  1526     0082  1BC5               	btfsc	sprintf@val+1,7
  1527     0083  30FF               	movlw	255
  1528     0084  00C6               	movwf	sprintf@val+2
  1529     0085  00C7               	movwf	sprintf@val+3
  1530     0086  3002               	movlw	2
  1531     0087                     L1:
  1532     0087  00FF               	movwf	127
  1533     0088  087F               	movf	127,w
  1534     0089  07C2               	addwf	sprintf@ap,f
  1535                           
  1536                           ;doprnt.c: 1287: if((long)val < 0) {
  1537     008A  1FC7               	btfss	sprintf@val+3,7
  1538     008B  289B               	goto	l1124
  1539                           
  1540                           ;doprnt.c: 1288: flag |= 0x03;
  1541     008C  3003               	movlw	3
  1542     008D  00FF               	movwf	127
  1543     008E  087F               	movf	127,w
  1544     008F  04C3               	iorwf	sprintf@flag,f
  1545                           
  1546                           ;doprnt.c: 1289: val = -val;
  1547     0090  09C4               	comf	sprintf@val,f
  1548     0091  09C5               	comf	sprintf@val+1,f
  1549     0092  09C6               	comf	sprintf@val+2,f
  1550     0093  09C7               	comf	sprintf@val+3,f
  1551     0094  0AC4               	incf	sprintf@val,f
  1552     0095  1903               	skipnz
  1553     0096  0AC5               	incf	sprintf@val+1,f
  1554     0097  1903               	skipnz
  1555     0098  0AC6               	incf	sprintf@val+2,f
  1556     0099  1903               	skipnz
  1557     009A  0AC7               	incf	sprintf@val+3,f
  1558     009B                     l1124:
  1559                           
  1560                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1561     009B  01C9               	clrf	sprintf@c
  1562     009C  0AC9               	incf	sprintf@c,f
  1563     009D                     l1130:
  1564                           
  1565                           ;doprnt.c: 1332: if(val < dpowers[c])
  1566     009D  0849               	movf	sprintf@c,w
  1567     009E  00BB               	movwf	??_sprintf
  1568     009F  3001               	movlw	1
  1569     00A0                     u495:
  1570     00A0  1003               	clrc
  1571     00A1  0DBB               	rlf	??_sprintf,f
  1572     00A2  3EFF               	addlw	-1
  1573     00A3  1D03               	skipz
  1574     00A4  28A0               	goto	u495
  1575     00A5  1003               	clrc
  1576     00A6  0D3B               	rlf	??_sprintf,w
  1577     00A7  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1578     00A8  0084               	movwf	4
  1579     00A9  120A  118A  2294  120A  118A  	fcall	stringdir
  1580     00AE  00BC               	movwf	??_sprintf+1
  1581     00AF  120A  118A  2294  120A  118A  	fcall	stringdir
  1582     00B4  00BD               	movwf	??_sprintf+2
  1583     00B5  120A  118A  2294  120A  118A  	fcall	stringdir
  1584     00BA  00BE               	movwf	??_sprintf+3
  1585     00BB  120A  118A  2294  120A  118A  	fcall	stringdir
  1586     00C0  00BF               	movwf	??_sprintf+4
  1587     00C1  083F               	movf	??_sprintf+4,w
  1588     00C2  0247               	subwf	sprintf@val+3,w
  1589     00C3  1D03               	skipz
  1590     00C4  28CF               	goto	u505
  1591     00C5  083E               	movf	??_sprintf+3,w
  1592     00C6  0246               	subwf	sprintf@val+2,w
  1593     00C7  1D03               	skipz
  1594     00C8  28CF               	goto	u505
  1595     00C9  083D               	movf	??_sprintf+2,w
  1596     00CA  0245               	subwf	sprintf@val+1,w
  1597     00CB  1D03               	skipz
  1598     00CC  28CF               	goto	u505
  1599     00CD  083C               	movf	??_sprintf+1,w
  1600     00CE  0244               	subwf	sprintf@val,w
  1601     00CF                     u505:
  1602     00CF  1C03               	btfss	3,0
  1603     00D0  28D9               	goto	l1138
  1604     00D1  3001               	movlw	1
  1605     00D2  00FF               	movwf	127
  1606     00D3  087F               	movf	127,w
  1607     00D4  07C9               	addwf	sprintf@c,f
  1608     00D5  300A               	movlw	10
  1609     00D6  0649               	xorwf	sprintf@c,w
  1610     00D7  1D03               	btfss	3,2
  1611     00D8  289D               	goto	l1130
  1612     00D9                     l1138:
  1613                           
  1614                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  1615     00D9  0843               	movf	sprintf@flag,w
  1616     00DA  3903               	andlw	3
  1617     00DB  1903               	btfsc	3,2
  1618     00DC  28E5               	goto	l1144
  1619                           
  1620                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  1621     00DD  0848               	movf	sprintf@sp,w
  1622     00DE  0084               	movwf	4
  1623     00DF  302D               	movlw	45
  1624     00E0  0080               	movwf	0
  1625     00E1  3001               	movlw	1
  1626     00E2  00FF               	movwf	127
  1627     00E3  087F               	movf	127,w
  1628     00E4  07C8               	addwf	sprintf@sp,f
  1629     00E5                     l1144:
  1630                           
  1631                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1632     00E5  0849               	movf	sprintf@c,w
  1633     00E6  00BB               	movwf	??_sprintf
  1634     00E7  01BC               	clrf	??_sprintf+1
  1635     00E8  083B               	movf	??_sprintf,w
  1636     00E9  00C0               	movwf	sprintf@prec
  1637     00EA  083C               	movf	??_sprintf+1,w
  1638     00EB  00C1               	movwf	sprintf@prec+1
  1639     00EC                     l1152:	
  1640                           ;doprnt.c: 1500: while(prec--) {
  1641                           
  1642     00EC  30FF               	movlw	255
  1643     00ED  07C0               	addwf	sprintf@prec,f
  1644     00EE  1803               	skipnc
  1645     00EF  0AC1               	incf	sprintf@prec+1,f
  1646     00F0  30FF               	movlw	255
  1647     00F1  07C1               	addwf	sprintf@prec+1,f
  1648     00F2  0A40               	incf	sprintf@prec,w
  1649     00F3  1903               	btfsc	3,2
  1650     00F4  0A41               	incf	sprintf@prec+1,w
  1651     00F5  1903               	btfsc	3,2
  1652     00F6  282F               	goto	l1154
  1653                           
  1654                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
  1655     00F7  3000               	movlw	0
  1656     00F8  00B1               	movwf	___llmod@divisor+3
  1657     00F9  3000               	movlw	0
  1658     00FA  00B0               	movwf	___llmod@divisor+2
  1659     00FB  3000               	movlw	0
  1660     00FC  00AF               	movwf	___llmod@divisor+1
  1661     00FD  300A               	movlw	10
  1662     00FE  00AE               	movwf	___llmod@divisor
  1663     00FF  0840               	movf	sprintf@prec,w
  1664     0100  00BB               	movwf	??_sprintf
  1665     0101  3001               	movlw	1
  1666     0102                     u535:
  1667     0102  1003               	clrc
  1668     0103  0DBB               	rlf	??_sprintf,f
  1669     0104  3EFF               	addlw	-1
  1670     0105  1D03               	skipz
  1671     0106  2902               	goto	u535
  1672     0107  1003               	clrc
  1673     0108  0D3B               	rlf	??_sprintf,w
  1674     0109  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1675     010A  0084               	movwf	4
  1676     010B  120A  118A  2294  120A  118A  	fcall	stringdir
  1677     0110  00A0               	movwf	___lldiv@divisor
  1678     0111  120A  118A  2294  120A  118A  	fcall	stringdir
  1679     0116  00A1               	movwf	___lldiv@divisor+1
  1680     0117  120A  118A  2294  120A  118A  	fcall	stringdir
  1681     011C  00A2               	movwf	___lldiv@divisor+2
  1682     011D  120A  118A  2294  120A  118A  	fcall	stringdir
  1683     0122  00A3               	movwf	___lldiv@divisor+3
  1684     0123  0847               	movf	sprintf@val+3,w
  1685     0124  00A7               	movwf	___lldiv@dividend+3
  1686     0125  0846               	movf	sprintf@val+2,w
  1687     0126  00A6               	movwf	___lldiv@dividend+2
  1688     0127  0845               	movf	sprintf@val+1,w
  1689     0128  00A5               	movwf	___lldiv@dividend+1
  1690     0129  0844               	movf	sprintf@val,w
  1691     012A  00A4               	movwf	___lldiv@dividend
  1692     012B  120A  118A  21AF  120A  118A  	fcall	___lldiv
  1693     0130  0823               	movf	?___lldiv+3,w
  1694     0131  00B5               	movwf	___llmod@dividend+3
  1695     0132  0822               	movf	?___lldiv+2,w
  1696     0133  00B4               	movwf	___llmod@dividend+2
  1697     0134  0821               	movf	?___lldiv+1,w
  1698     0135  00B3               	movwf	___llmod@dividend+1
  1699     0136  0820               	movf	?___lldiv,w
  1700     0137  00B2               	movwf	___llmod@dividend
  1701     0138  120A  118A  220D  120A  118A  	fcall	___llmod
  1702     013D  082E               	movf	?___llmod,w
  1703     013E  3E30               	addlw	48
  1704     013F  00C9               	movwf	sprintf@c
  1705                           
  1706                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  1707     0140  0848               	movf	sprintf@sp,w
  1708     0141  0084               	movwf	4
  1709     0142  0849               	movf	sprintf@c,w
  1710     0143  0080               	movwf	0
  1711     0144  3001               	movlw	1
  1712     0145  00FF               	movwf	127
  1713     0146  087F               	movf	127,w
  1714     0147  07C8               	addwf	sprintf@sp,f
  1715     0148  28EC               	goto	l1152
  1716     0149                     l1156:
  1717                           
  1718                           ;doprnt.c: 1564: *sp = 0;
  1719     0149  0848               	movf	sprintf@sp,w
  1720     014A  0084               	movwf	4
  1721     014B  0180               	clrf	0
  1722     014C  0008               	return
  1723     014D                     __end_of_sprintf:
  1724                           
  1725                           	psect	text6
  1726     020D                     __ptext6:	
  1727 ;; *************** function ___llmod *****************
  1728 ;; Defined at:
  1729 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  divisor         4   14[BANK0 ] unsigned long 
  1732 ;;  dividend        4   18[BANK0 ] unsigned long 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  counter         1   23[BANK0 ] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  4   14[BANK0 ] unsigned long 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, btemp+1
  1739 ;; Tracked objects:
  1740 ;;		On entry : B00/0
  1741 ;;		On exit  : B00/0
  1742 ;;		Unchanged: 800/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1744 ;;      Params:         0       8       0       0       0
  1745 ;;      Locals:         0       1       0       0       0
  1746 ;;      Temps:          0       1       0       0       0
  1747 ;;      Totals:         0      10       0       0       0
  1748 ;;Total ram usage:       10 bytes
  1749 ;; Hardware stack levels used: 1
  1750 ;; Hardware stack levels required when called: 1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_sprintf
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758     020D                     ___llmod:	
  1759                           ;psect for function ___llmod
  1760                           
  1761                           
  1762                           ;incstack = 0
  1763                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  1764     020D  0831               	movf	___llmod@divisor+3,w
  1765     020E  0430               	iorwf	___llmod@divisor+2,w
  1766     020F  042F               	iorwf	___llmod@divisor+1,w
  1767     0210  042E               	iorwf	___llmod@divisor,w
  1768     0211  1903               	skipnz
  1769     0212  2A50               	goto	l1036
  1770     0213  01B7               	clrf	___llmod@counter
  1771     0214  0AB7               	incf	___llmod@counter,f
  1772     0215                     l1026:
  1773     0215  1BB1               	btfsc	___llmod@divisor+3,7
  1774     0216  2A25               	goto	l1028
  1775     0217  3001               	movlw	1
  1776     0218  00B6               	movwf	??___llmod
  1777     0219                     u405:
  1778     0219  1003               	clrc
  1779     021A  0DAE               	rlf	___llmod@divisor,f
  1780     021B  0DAF               	rlf	___llmod@divisor+1,f
  1781     021C  0DB0               	rlf	___llmod@divisor+2,f
  1782     021D  0DB1               	rlf	___llmod@divisor+3,f
  1783     021E  0BB6               	decfsz	??___llmod,f
  1784     021F  2A19               	goto	u405
  1785     0220  3001               	movlw	1
  1786     0221  00FF               	movwf	127
  1787     0222  087F               	movf	127,w
  1788     0223  07B7               	addwf	___llmod@counter,f
  1789     0224  2A15               	goto	l1026
  1790     0225                     l1028:
  1791     0225  0831               	movf	___llmod@divisor+3,w
  1792     0226  0235               	subwf	___llmod@dividend+3,w
  1793     0227  1D03               	skipz
  1794     0228  2A33               	goto	u425
  1795     0229  0830               	movf	___llmod@divisor+2,w
  1796     022A  0234               	subwf	___llmod@dividend+2,w
  1797     022B  1D03               	skipz
  1798     022C  2A33               	goto	u425
  1799     022D  082F               	movf	___llmod@divisor+1,w
  1800     022E  0233               	subwf	___llmod@dividend+1,w
  1801     022F  1D03               	skipz
  1802     0230  2A33               	goto	u425
  1803     0231  082E               	movf	___llmod@divisor,w
  1804     0232  0232               	subwf	___llmod@dividend,w
  1805     0233                     u425:
  1806     0233  1C03               	skipc
  1807     0234  2A43               	goto	l1032
  1808     0235  082E               	movf	___llmod@divisor,w
  1809     0236  02B2               	subwf	___llmod@dividend,f
  1810     0237  082F               	movf	___llmod@divisor+1,w
  1811     0238  1C03               	skipc
  1812     0239  0F2F               	incfsz	___llmod@divisor+1,w
  1813     023A  02B3               	subwf	___llmod@dividend+1,f
  1814     023B  0830               	movf	___llmod@divisor+2,w
  1815     023C  1C03               	skipc
  1816     023D  0F30               	incfsz	___llmod@divisor+2,w
  1817     023E  02B4               	subwf	___llmod@dividend+2,f
  1818     023F  0831               	movf	___llmod@divisor+3,w
  1819     0240  1C03               	skipc
  1820     0241  0F31               	incfsz	___llmod@divisor+3,w
  1821     0242  02B5               	subwf	___llmod@dividend+3,f
  1822     0243                     l1032:
  1823     0243  3001               	movlw	1
  1824     0244                     u435:
  1825     0244  1003               	clrc
  1826     0245  0CB1               	rrf	___llmod@divisor+3,f
  1827     0246  0CB0               	rrf	___llmod@divisor+2,f
  1828     0247  0CAF               	rrf	___llmod@divisor+1,f
  1829     0248  0CAE               	rrf	___llmod@divisor,f
  1830     0249  3EFF               	addlw	-1
  1831     024A  1D03               	skipz
  1832     024B  2A44               	goto	u435
  1833     024C  3001               	movlw	1
  1834     024D  02B7               	subwf	___llmod@counter,f
  1835     024E  1D03               	btfss	3,2
  1836     024F  2A25               	goto	l1028
  1837     0250                     l1036:
  1838     0250  0835               	movf	___llmod@dividend+3,w
  1839     0251  00B1               	movwf	?___llmod+3
  1840     0252  0834               	movf	___llmod@dividend+2,w
  1841     0253  00B0               	movwf	?___llmod+2
  1842     0254  0833               	movf	___llmod@dividend+1,w
  1843     0255  00AF               	movwf	?___llmod+1
  1844     0256  0832               	movf	___llmod@dividend,w
  1845     0257  00AE               	movwf	?___llmod
  1846     0258  0008               	return
  1847     0259                     __end_of___llmod:
  1848                           
  1849                           	psect	text7
  1850     01AF                     __ptext7:	
  1851 ;; *************** function ___lldiv *****************
  1852 ;; Defined at:
  1853 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  divisor         4    0[BANK0 ] unsigned long 
  1856 ;;  dividend        4    4[BANK0 ] unsigned long 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  quotient        4    9[BANK0 ] unsigned long 
  1859 ;;  counter         1   13[BANK0 ] unsigned char 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  4    0[BANK0 ] unsigned long 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, btemp+1
  1864 ;; Tracked objects:
  1865 ;;		On entry : B00/0
  1866 ;;		On exit  : B00/0
  1867 ;;		Unchanged: 800/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1869 ;;      Params:         0       8       0       0       0
  1870 ;;      Locals:         0       5       0       0       0
  1871 ;;      Temps:          0       1       0       0       0
  1872 ;;      Totals:         0      14       0       0       0
  1873 ;;Total ram usage:       14 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; Hardware stack levels required when called: 1
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_sprintf
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883     01AF                     ___lldiv:	
  1884                           ;psect for function ___lldiv
  1885                           
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  1889     01AF  3000               	movlw	0
  1890     01B0  00AC               	movwf	___lldiv@quotient+3
  1891     01B1  3000               	movlw	0
  1892     01B2  00AB               	movwf	___lldiv@quotient+2
  1893     01B3  3000               	movlw	0
  1894     01B4  00AA               	movwf	___lldiv@quotient+1
  1895     01B5  3000               	movlw	0
  1896     01B6  00A9               	movwf	___lldiv@quotient
  1897     01B7  0823               	movf	___lldiv@divisor+3,w
  1898     01B8  0422               	iorwf	___lldiv@divisor+2,w
  1899     01B9  0421               	iorwf	___lldiv@divisor+1,w
  1900     01BA  0420               	iorwf	___lldiv@divisor,w
  1901     01BB  1903               	skipnz
  1902     01BC  2A04               	goto	l1014
  1903     01BD  01AD               	clrf	___lldiv@counter
  1904     01BE  0AAD               	incf	___lldiv@counter,f
  1905     01BF                     l1000:
  1906     01BF  1BA3               	btfsc	___lldiv@divisor+3,7
  1907     01C0  29CF               	goto	l1002
  1908     01C1  3001               	movlw	1
  1909     01C2  00A8               	movwf	??___lldiv
  1910     01C3                     u335:
  1911     01C3  1003               	clrc
  1912     01C4  0DA0               	rlf	___lldiv@divisor,f
  1913     01C5  0DA1               	rlf	___lldiv@divisor+1,f
  1914     01C6  0DA2               	rlf	___lldiv@divisor+2,f
  1915     01C7  0DA3               	rlf	___lldiv@divisor+3,f
  1916     01C8  0BA8               	decfsz	??___lldiv,f
  1917     01C9  29C3               	goto	u335
  1918     01CA  3001               	movlw	1
  1919     01CB  00FF               	movwf	127
  1920     01CC  087F               	movf	127,w
  1921     01CD  07AD               	addwf	___lldiv@counter,f
  1922     01CE  29BF               	goto	l1000
  1923     01CF                     l1002:
  1924     01CF  3001               	movlw	1
  1925     01D0  00A8               	movwf	??___lldiv
  1926     01D1                     u355:
  1927     01D1  1003               	clrc
  1928     01D2  0DA9               	rlf	___lldiv@quotient,f
  1929     01D3  0DAA               	rlf	___lldiv@quotient+1,f
  1930     01D4  0DAB               	rlf	___lldiv@quotient+2,f
  1931     01D5  0DAC               	rlf	___lldiv@quotient+3,f
  1932     01D6  0BA8               	decfsz	??___lldiv,f
  1933     01D7  29D1               	goto	u355
  1934     01D8  0823               	movf	___lldiv@divisor+3,w
  1935     01D9  0227               	subwf	___lldiv@dividend+3,w
  1936     01DA  1D03               	skipz
  1937     01DB  29E6               	goto	u365
  1938     01DC  0822               	movf	___lldiv@divisor+2,w
  1939     01DD  0226               	subwf	___lldiv@dividend+2,w
  1940     01DE  1D03               	skipz
  1941     01DF  29E6               	goto	u365
  1942     01E0  0821               	movf	___lldiv@divisor+1,w
  1943     01E1  0225               	subwf	___lldiv@dividend+1,w
  1944     01E2  1D03               	skipz
  1945     01E3  29E6               	goto	u365
  1946     01E4  0820               	movf	___lldiv@divisor,w
  1947     01E5  0224               	subwf	___lldiv@dividend,w
  1948     01E6                     u365:
  1949     01E6  1C03               	skipc
  1950     01E7  29F7               	goto	l1010
  1951     01E8  0820               	movf	___lldiv@divisor,w
  1952     01E9  02A4               	subwf	___lldiv@dividend,f
  1953     01EA  0821               	movf	___lldiv@divisor+1,w
  1954     01EB  1C03               	skipc
  1955     01EC  0F21               	incfsz	___lldiv@divisor+1,w
  1956     01ED  02A5               	subwf	___lldiv@dividend+1,f
  1957     01EE  0822               	movf	___lldiv@divisor+2,w
  1958     01EF  1C03               	skipc
  1959     01F0  0F22               	incfsz	___lldiv@divisor+2,w
  1960     01F1  02A6               	subwf	___lldiv@dividend+2,f
  1961     01F2  0823               	movf	___lldiv@divisor+3,w
  1962     01F3  1C03               	skipc
  1963     01F4  0F23               	incfsz	___lldiv@divisor+3,w
  1964     01F5  02A7               	subwf	___lldiv@dividend+3,f
  1965     01F6  1429               	bsf	___lldiv@quotient,0
  1966     01F7                     l1010:
  1967     01F7  3001               	movlw	1
  1968     01F8                     u375:
  1969     01F8  1003               	clrc
  1970     01F9  0CA3               	rrf	___lldiv@divisor+3,f
  1971     01FA  0CA2               	rrf	___lldiv@divisor+2,f
  1972     01FB  0CA1               	rrf	___lldiv@divisor+1,f
  1973     01FC  0CA0               	rrf	___lldiv@divisor,f
  1974     01FD  3EFF               	addlw	-1
  1975     01FE  1D03               	skipz
  1976     01FF  29F8               	goto	u375
  1977     0200  3001               	movlw	1
  1978     0201  02AD               	subwf	___lldiv@counter,f
  1979     0202  1D03               	btfss	3,2
  1980     0203  29CF               	goto	l1002
  1981     0204                     l1014:
  1982     0204  082C               	movf	___lldiv@quotient+3,w
  1983     0205  00A3               	movwf	?___lldiv+3
  1984     0206  082B               	movf	___lldiv@quotient+2,w
  1985     0207  00A2               	movwf	?___lldiv+2
  1986     0208  082A               	movf	___lldiv@quotient+1,w
  1987     0209  00A1               	movwf	?___lldiv+1
  1988     020A  0829               	movf	___lldiv@quotient,w
  1989     020B  00A0               	movwf	?___lldiv
  1990     020C  0008               	return
  1991     020D                     __end_of___lldiv:
  1992                           
  1993                           	psect	text8
  1994     033A                     __ptext8:	
  1995 ;; *************** function _init_inttimer *****************
  1996 ;; Defined at:
  1997 ;;		line 4 in file "inttimer.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;		None
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;		None
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0
  2006 ;; Tracked objects:
  2007 ;;		On entry : 300/0
  2008 ;;		On exit  : 300/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2011 ;;      Params:         0       0       0       0       0
  2012 ;;      Locals:         0       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0
  2014 ;;      Totals:         0       0       0       0       0
  2015 ;;Total ram usage:        0 bytes
  2016 ;; Hardware stack levels used: 1
  2017 ;; Hardware stack levels required when called: 1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025     033A                     _init_inttimer:	
  2026                           ;psect for function _init_inttimer
  2027                           
  2028                           
  2029                           ;inttimer.c: 6: T1CONbits.TMR1CS = 0;
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in _init_inttimer: [wreg+status,2+status,0]
  2033     033A  1090               	bcf	16,1	;volatile
  2034                           
  2035                           ;inttimer.c: 7: T1CONbits.T1CKPS = 0b00;
  2036     033B  30CF               	movlw	-49
  2037     033C  0590               	andwf	16,f	;volatile
  2038                           
  2039                           ;inttimer.c: 8: T1CONbits.T1SYNC = 0;
  2040     033D  1110               	bcf	16,2	;volatile
  2041                           
  2042                           ;inttimer.c: 9: TMR1H = 0xFF;
  2043     033E  30FF               	movlw	255
  2044     033F  008F               	movwf	15	;volatile
  2045                           
  2046                           ;inttimer.c: 10: TMR1L = 0xE7;
  2047     0340  30E7               	movlw	231
  2048     0341  008E               	movwf	14	;volatile
  2049                           
  2050                           ;inttimer.c: 11: PIR1bits.TMR1IF = 0;
  2051     0342  100C               	bcf	12,0	;volatile
  2052                           
  2053                           ;inttimer.c: 12: PIE1bits.TMR1IE = 1;
  2054     0343  1683               	bsf	3,5	;RP0=1, select bank1
  2055     0344  140C               	bsf	12,0	;volatile
  2056                           
  2057                           ;inttimer.c: 13: PIR1bits.ADIF = 0;
  2058     0345  1283               	bcf	3,5	;RP0=0, select bank0
  2059     0346  130C               	bcf	12,6	;volatile
  2060                           
  2061                           ;inttimer.c: 14: PIE1bits.ADIE = 1;
  2062     0347  1683               	bsf	3,5	;RP0=1, select bank1
  2063     0348  170C               	bsf	12,6	;volatile
  2064                           
  2065                           ;inttimer.c: 15: INTCONbits.PEIE = 1;
  2066     0349  170B               	bsf	11,6	;volatile
  2067                           
  2068                           ;inttimer.c: 16: INTCONbits.GIE = 1;
  2069     034A  178B               	bsf	11,7	;volatile
  2070                           
  2071                           ;inttimer.c: 17: T1CONbits.TMR1ON = 1;
  2072     034B  1283               	bcf	3,5	;RP0=0, select bank0
  2073     034C  1410               	bsf	16,0	;volatile
  2074     034D  0008               	return
  2075     034E                     __end_of_init_inttimer:
  2076                           
  2077                           	psect	text9
  2078     02EB                     __ptext9:	
  2079 ;; *************** function _init_ADC *****************
  2080 ;; Defined at:
  2081 ;;		line 3 in file "adc.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0, pclath, cstack
  2090 ;; Tracked objects:
  2091 ;;		On entry : B00/300
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2095 ;;      Params:         0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0
  2097 ;;      Temps:          0       2       0       0       0
  2098 ;;      Totals:         0       2       0       0       0
  2099 ;;Total ram usage:        2 bytes
  2100 ;; Hardware stack levels used: 1
  2101 ;; Hardware stack levels required when called: 2
  2102 ;; This function calls:
  2103 ;;		_set_CHANNEL
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109     02EB                     _init_ADC:	
  2110                           ;psect for function _init_ADC
  2111                           
  2112                           
  2113                           ;adc.c: 7: TRISAbits.TRISA0 = 1;
  2114                           
  2115                           ;incstack = 0
  2116                           ; Regs used in _init_ADC: [wreg+status,2+status,0+pclath+cstack]
  2117     02EB  1303               	bcf	3,6	;RP1=0, select bank1
  2118     02EC  1405               	bsf	5,0	;volatile
  2119                           
  2120                           ;adc.c: 8: ANSELbits.ANS0 = 1;
  2121     02ED  1703               	bsf	3,6	;RP1=1, select bank3
  2122     02EE  1408               	bsf	8,0	;volatile
  2123                           
  2124                           ;adc.c: 9: set_CHANNEL(0);
  2125     02EF  3000               	movlw	0
  2126     02F0  120A  118A  236F  120A  118A  	fcall	_set_CHANNEL
  2127                           
  2128                           ;adc.c: 10: ADCON0bits.ADCS = 0b010;
  2129     02F5  081F               	movf	31,w	;volatile
  2130     02F6  393F               	andlw	-193
  2131     02F7  3880               	iorlw	128
  2132     02F8  009F               	movwf	31	;volatile
  2133                           
  2134                           ;adc.c: 11: ADCON1bits.ADFM = 1;
  2135     02F9  1683               	bsf	3,5	;RP0=1, select bank1
  2136     02FA  179F               	bsf	31,7	;volatile
  2137                           
  2138                           ;adc.c: 12: ADCON1bits.VCFG1 = 0;
  2139     02FB  129F               	bcf	31,5	;volatile
  2140                           
  2141                           ;adc.c: 13: ADCON1bits.VCFG0 = 0;
  2142     02FC  121F               	bcf	31,4	;volatile
  2143                           
  2144                           ;adc.c: 14: ADCON0bits.ADON = 1;
  2145     02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2146     02FE  141F               	bsf	31,0	;volatile
  2147                           
  2148                           ;adc.c: 16: _delay((unsigned long)((100)*(4000000/4000.0)));
  2149     02FF  3082               	movlw	130
  2150     0300  1283               	bcf	3,5	;RP0=0, select bank0
  2151     0301  1303               	bcf	3,6	;RP1=0, select bank0
  2152     0302  00A3               	movwf	??_init_ADC+1
  2153     0303  30DD               	movlw	221
  2154     0304  00A2               	movwf	??_init_ADC
  2155     0305                     u617:
  2156     0305  0BA2               	decfsz	??_init_ADC,f
  2157     0306  2B05               	goto	u617
  2158     0307  0BA3               	decfsz	??_init_ADC+1,f
  2159     0308  2B05               	goto	u617
  2160     0309  0008               	return
  2161     030A                     __end_of_init_ADC:
  2162                           
  2163                           	psect	text10
  2164     036F                     __ptext10:	
  2165 ;; *************** function _set_CHANNEL *****************
  2166 ;; Defined at:
  2167 ;;		line 19 in file "adc.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  channel         1    wreg     unsigned char 
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  channel         1    1[BANK0 ] unsigned char 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2, status,0
  2176 ;; Tracked objects:
  2177 ;;		On entry : B00/300
  2178 ;;		On exit  : B00/0
  2179 ;;		Unchanged: 800/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         0       0       0       0       0
  2182 ;;      Locals:         0       1       0       0       0
  2183 ;;      Temps:          0       1       0       0       0
  2184 ;;      Totals:         0       2       0       0       0
  2185 ;;Total ram usage:        2 bytes
  2186 ;; Hardware stack levels used: 1
  2187 ;; Hardware stack levels required when called: 1
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_init_ADC
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195     036F                     _set_CHANNEL:	
  2196                           ;psect for function _set_CHANNEL
  2197                           
  2198                           
  2199                           ;incstack = 0
  2200                           ; Regs used in _set_CHANNEL: [wreg+status,2+status,0]
  2201                           ;set_CHANNEL@channel stored from wreg
  2202     036F  1283               	bcf	3,5	;RP0=0, select bank0
  2203     0370  1303               	bcf	3,6	;RP1=0, select bank0
  2204     0371  00A1               	movwf	set_CHANNEL@channel
  2205                           
  2206                           ;adc.c: 22: {;adc.c: 23: ADCON0bits.CHS = channel;
  2207     0372  0821               	movf	set_CHANNEL@channel,w
  2208     0373  00A0               	movwf	??_set_CHANNEL
  2209     0374  0DA0               	rlf	??_set_CHANNEL,f
  2210     0375  0DA0               	rlf	??_set_CHANNEL,f
  2211     0376  081F               	movf	31,w	;volatile
  2212     0377  0620               	xorwf	??_set_CHANNEL,w
  2213     0378  39C3               	andlw	-61
  2214     0379  0620               	xorwf	??_set_CHANNEL,w
  2215     037A  009F               	movwf	31	;volatile
  2216                           
  2217                           ;adc.c: 24: }else
  2218     037B  0008               	return
  2219     037C                     __end_of_set_CHANNEL:
  2220                           
  2221                           	psect	text11
  2222     038D                     __ptext11:	
  2223 ;; *************** function _config_HAL *****************
  2224 ;; Defined at:
  2225 ;;		line 64 in file "newmain.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;		None
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		status,2
  2234 ;; Tracked objects:
  2235 ;;		On entry : B00/100
  2236 ;;		On exit  : B00/300
  2237 ;;		Unchanged: 800/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       0       0       0       0
  2240 ;;      Locals:         0       0       0       0       0
  2241 ;;      Temps:          0       0       0       0       0
  2242 ;;      Totals:         0       0       0       0       0
  2243 ;;Total ram usage:        0 bytes
  2244 ;; Hardware stack levels used: 1
  2245 ;; Hardware stack levels required when called: 1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253     038D                     _config_HAL:	
  2254                           ;psect for function _config_HAL
  2255                           
  2256                           
  2257                           ;newmain.c: 66: TRISD = 0x00;
  2258                           
  2259                           ;incstack = 0
  2260                           ; Regs used in _config_HAL: [status,2]
  2261     038D  0188               	clrf	8	;volatile
  2262                           
  2263                           ;newmain.c: 67: TRISE = 0x00;
  2264     038E  0189               	clrf	9	;volatile
  2265                           
  2266                           ;newmain.c: 68: ANSEL = 0x00;
  2267     038F  1703               	bsf	3,6	;RP1=1, select bank3
  2268     0390  0188               	clrf	8	;volatile
  2269                           
  2270                           ;newmain.c: 69: ANSELH = 0x00;
  2271     0391  0189               	clrf	9	;volatile
  2272     0392  0008               	return
  2273     0393                     __end_of_config_HAL:
  2274                           
  2275                           	psect	text12
  2276     0259                     __ptext12:	
  2277 ;; *************** function _TMR1_ISR *****************
  2278 ;; Defined at:
  2279 ;;		line 51 in file "newmain.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 300/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2293 ;;      Params:         0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0
  2295 ;;      Temps:         13       0       0       0       0
  2296 ;;      Totals:        13       0       0       0       0
  2297 ;;Total ram usage:       13 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; This function calls:
  2300 ;;		Nothing
  2301 ;; This function is called by:
  2302 ;;		Interrupt level 1
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306     0259                     _TMR1_ISR:	
  2307                           ;psect for function _TMR1_ISR
  2308                           
  2309                           
  2310                           ;newmain.c: 52: if (PIR1bits.ADIF) {
  2311     0259  1283               	bcf	3,5	;RP0=0, select bank0
  2312     025A  1303               	bcf	3,6	;RP1=0, select bank0
  2313     025B  1F0C               	btfss	12,6	;volatile
  2314     025C  2A88               	goto	i1l106
  2315                           
  2316                           ;newmain.c: 53: PIR1bits.ADIF = 0;
  2317     025D  130C               	bcf	12,6	;volatile
  2318                           
  2319                           ;newmain.c: 54: muestras[contador] = ((ADRESH << 8) & 0b1100000000) | ADRESL;
  2320     025E  1683               	bsf	3,5	;RP0=1, select bank1
  2321     025F  081E               	movf	30,w	;volatile
  2322     0260  00F0               	movwf	??_TMR1_ISR
  2323     0261  01F1               	clrf	??_TMR1_ISR+1
  2324     0262  1283               	bcf	3,5	;RP0=0, select bank0
  2325     0263  081E               	movf	30,w	;volatile
  2326     0264  00F2               	movwf	??_TMR1_ISR+2
  2327     0265  01F3               	clrf	??_TMR1_ISR+3
  2328     0266  0872               	movf	??_TMR1_ISR+2,w
  2329     0267  00F3               	movwf	??_TMR1_ISR+3
  2330     0268  01F2               	clrf	??_TMR1_ISR+2
  2331     0269  3000               	movlw	0
  2332     026A  0572               	andwf	??_TMR1_ISR+2,w
  2333     026B  00F4               	movwf	??_TMR1_ISR+4
  2334     026C  3003               	movlw	3
  2335     026D  0573               	andwf	??_TMR1_ISR+3,w
  2336     026E  00F5               	movwf	??_TMR1_ISR+5
  2337     026F  0870               	movf	??_TMR1_ISR,w
  2338     0270  0474               	iorwf	??_TMR1_ISR+4,w
  2339     0271  00F6               	movwf	??_TMR1_ISR+6
  2340     0272  0871               	movf	??_TMR1_ISR+1,w
  2341     0273  0475               	iorwf	??_TMR1_ISR+5,w
  2342     0274  00F7               	movwf	??_TMR1_ISR+7
  2343     0275  0861               	movf	_contador,w	;volatile
  2344     0276  00F8               	movwf	??_TMR1_ISR+8
  2345     0277  0778               	addwf	??_TMR1_ISR+8,w
  2346     0278  3EA0               	addlw	(low (_muestras| 0))& (0+255)
  2347     0279  0084               	movwf	4
  2348     027A  0876               	movf	??_TMR1_ISR+6,w
  2349     027B  1383               	bcf	3,7	;select IRP bank1
  2350     027C  0080               	movwf	0
  2351     027D  0A84               	incf	4,f
  2352     027E  0877               	movf	??_TMR1_ISR+7,w
  2353     027F  0080               	movwf	0
  2354                           
  2355                           ;newmain.c: 56: contador++;
  2356     0280  3001               	movlw	1
  2357     0281  00FF               	movwf	127
  2358     0282  087F               	movf	127,w
  2359     0283  07E1               	addwf	_contador,f	;volatile
  2360                           
  2361                           ;newmain.c: 57: if (contador < 40) {
  2362     0284  3028               	movlw	40
  2363     0285  0261               	subwf	_contador,w	;volatile
  2364     0286  1C03               	btfss	3,0
  2365                           
  2366                           ;newmain.c: 58: ADCON0bits.GO = 1;
  2367     0287  149F               	bsf	31,1	;volatile
  2368     0288                     i1l106:
  2369                           
  2370                           ;newmain.c: 59: };newmain.c: 60: };newmain.c: 61: PIR1bits.TMR1IF = 0;
  2371     0288  100C               	bcf	12,0	;volatile
  2372     0289  087C               	movf	??_TMR1_ISR+12,w
  2373     028A  00FF               	movwf	127
  2374     028B  087B               	movf	??_TMR1_ISR+11,w
  2375     028C  008A               	movwf	10
  2376     028D  087A               	movf	??_TMR1_ISR+10,w
  2377     028E  0084               	movwf	4
  2378     028F  0E79               	swapf	??_TMR1_ISR+9,w
  2379     0290  0083               	movwf	3
  2380     0291  0EFE               	swapf	126,f
  2381     0292  0E7E               	swapf	126,w
  2382     0293  0009               	retfie
  2383     0294                     __end_of_TMR1_ISR:
  2384     007E                     btemp	set	126	;btemp
  2385     007E                     wtemp0	set	126
  2386                           
  2387                           	psect	intentry
  2388     0004                     __pintentry:	
  2389                           ;incstack = 0
  2390                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  2391                           
  2392     0004                     interrupt_function:
  2393     007E                     saved_w	set	btemp
  2394     0004  00FE               	movwf	btemp
  2395     0005  0E03               	swapf	3,w
  2396     0006  00F9               	movwf	??_TMR1_ISR+9
  2397     0007  0804               	movf	4,w
  2398     0008  00FA               	movwf	??_TMR1_ISR+10
  2399     0009  080A               	movf	10,w
  2400     000A  00FB               	movwf	??_TMR1_ISR+11
  2401     000B  087F               	movf	btemp+1,w
  2402     000C  00FC               	movwf	??_TMR1_ISR+12
  2403     000D  120A  118A  2A59   	ljmp	_TMR1_ISR
  2404                           
  2405                           	psect	config
  2406                           
  2407                           ;Config register CONFIG1 @ 0x2007
  2408                           ;	Oscillator Selection bits
  2409                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2410                           ;	Watchdog Timer Enable bit
  2411                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2412                           ;	Power-up Timer Enable bit
  2413                           ;	PWRTE = OFF, PWRT disabled
  2414                           ;	RE3/MCLR pin function select bit
  2415                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2416                           ;	Code Protection bit
  2417                           ;	CP = OFF, Program memory code protection is disabled
  2418                           ;	Data Code Protection bit
  2419                           ;	CPD = OFF, Data memory code protection is disabled
  2420                           ;	Brown Out Reset Selection bits
  2421                           ;	BOREN = OFF, BOR disabled
  2422                           ;	Internal External Switchover bit
  2423                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2424                           ;	Fail-Safe Clock Monitor Enabled bit
  2425                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2426                           ;	Low Voltage Programming Enable bit
  2427                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2428                           ;	In-Circuit Debugger Mode bit
  2429                           ;	DEBUG = 0x1, unprogrammed default
  2430     2007                     	org	8199
  2431     2007  20D4               	dw	8404
  2432                           
  2433                           ;Config register CONFIG2 @ 0x2008
  2434                           ;	Brown-out Reset Selection bit
  2435                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2436                           ;	Flash Program Memory Self Write Enable bits
  2437                           ;	WRT = OFF, Write protection off
  2438     2008                     	org	8200
  2439     2008  3FFF               	dw	16383

Data Sizes:
    Strings     8
    Constant    40
    Data        20
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     45      66
    BANK1            80      0      80
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_text@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _TMR1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _uart_send_text->_uart_send
    _sprintf->___llmod
    ___llmod->___lldiv
    _init_ADC->_set_CHANNEL

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1574
                                             42 BANK0      3     3      0
                         _config_HAL
                           _init_ADC
                      _init_inttimer
                            _sprintf
                             _strcpy
                          _uart_init
                     _uart_send_text
 ---------------------------------------------------------------------------------
 (1) _uart_send_text                                       2     2      0     120
                                              1 BANK0      2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     169
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             26    23      3    1195
                                             24 BANK0     18    15      3
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     287
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     290
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _init_inttimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             2     2      0      22
                                              2 BANK0      2     2      0
                        _set_CHANNEL
 ---------------------------------------------------------------------------------
 (2) _set_CHANNEL                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_HAL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _TMR1_ISR                                            13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_HAL
   _init_ADC
     _set_CHANNEL
   _init_inttimer
   _sprintf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
   _strcpy
   _uart_init
   _uart_send_text
     _uart_send

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      42       5       82.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9F      12        0.0%
ABS                  0      0      9F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Apr 23 11:47:01 2023

                      pc 0002                       fsr 0004                      l172 02CB  
                    l158 037F                      l275 004C                      l278 0065  
                    u405 0219                      u335 01C3                      u425 0233  
                    u505 00CF                      u355 01D1                      u435 0244  
                    u365 01E6                      u375 01F8                      u535 0102  
                    u617 0305                      u495 00A0                      u585 01A5  
                    fsr0 0004                      indf 0000                     l1000 01BF  
                   l1010 01F7                     l1002 01CF                     l1014 0204  
                   l1032 0243                     l1104 004A                     l1026 0215  
                   l1130 009D                     l1114 0076                     l1028 0225  
                   l1036 0250                     l1124 009B                     l1108 004D  
                   l1152 00EC                     l1144 00E5                     l1138 00D9  
                   l1154 002F                     l1156 0149                     l1180 0166  
                   l1094 030D                     l1190 0172                     l1182 0168  
                   STR_1 02C2                     STR_2 02C6                     _TXEN 04C5  
                   _TXIF 0064                     _main 014D                     btemp 007E  
                   start 0010         ??_uart_send_text 0021                    ?_main 0070  
                  _ANSEL 0188          __end_of___lldiv 020D          __end_of___llmod 0259  
                  i1l106 0288                    _RCSTA 0018                    _TMR1H 000F  
                  _TMR1L 000E                    _SPBRG 0099                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019         __end_of_TMR1_ISR 0294  
        __end_of_dpowers 02C2                    main@i 004B                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 014D  
           ?_set_CHANNEL 0070          __initialization 0013             __end_of_main 01AF  
                 ??_main 004A         ___llmod@dividend 0032                   _ADRESH 001E  
                 _ADRESL 009E                   _ANSELH 0189                ??___lldiv 0028  
              ??___llmod 0036         __end_of_init_ADC 030A                   _buffer 004D  
                 _strcpy 030A                   saved_w 007E                ??_sprintf 003B  
__end_of__initialization 0028           __pcstackCOMMON 0070             __pidataBANK0 0326  
              ?_TMR1_ISR 0070     uart_send_text@buffer 0022               __pbssBANK0 0061  
             __pbssBANK1 00A0            _init_inttimer 033A               __pmaintext 014D  
             ??_TMR1_ISR 0070               __pintentry 0004                  ?_strcpy 0020  
             _config_HAL 038D               __stringtab 0294           ?_init_inttimer 0070  
              ?_init_ADC 0070                  ___lldiv 01AF                  ___llmod 020D  
      uart_send_text@aux 0021                _ANSELbits 0188                  __ptext1 02CA  
                __ptext2 037C                  __ptext3 035F                  __ptext4 030A  
                __ptext5 002C                  __ptext6 020D                  __ptext7 01AF  
                __ptext8 033A                  __ptext9 02EB                _T1CONbits 0010  
                _dpowers 029A                  _sprintf 002C                  clrloop0 0386  
   end_of_initialization 0028               ??_init_ADC 0022        __end_of_uart_init 036F  
      __end_of_uart_send 0385          ___lldiv@divisor 0020          ___lldiv@counter 002D  
              _RCSTAbits 0018              ?_config_HAL 0070                _TRISAbits 0085  
              _TRISCbits 0087          ??_init_inttimer 0020                _TXSTAbits 0098  
            _BAUDCTLbits 0187           __end_of_strcpy 0326      start_initialization 0013  
        ___llmod@divisor 002E          ___llmod@counter 0037               init_fetch0 034E  
            __pdataBANK0 004D                 ??_strcpy 0021                ___latbits 0002  
          __pcstackBANK0 0020              sprintf@flag 0043            ??_set_CHANNEL 0020  
            sprintf@prec 0040                 ?___lldiv 0020                 ?___llmod 002E  
              __pstrings 0294           _uart_send_text 02CA                 ?_sprintf 0038  
      interrupt_function 0004                clear_ram0 0385                 _PIE1bits 008C  
               _PIR1bits 000C      __end_of_set_CHANNEL 037C                _uart_init 035F  
              _uart_send 037C                 _TMR1_ISR 0259   __end_of_uart_send_text 02EB  
             _ADCON0bits 001F              __stringbase 0299               _ADCON1bits 009F  
           ??_config_HAL 0020       __end_of_config_HAL 0393               ?_uart_init 0070  
             ?_uart_send 0070       __end_of__stringtab 029A          ?_uart_send_text 0070  
             sprintf@val 0044       set_CHANNEL@channel 0021                 __ptext10 036F  
               __ptext11 038D                 __ptext12 0259                 _contador 0061  
  __end_of_init_inttimer 034E               strcpy@from 0020                 _init_ADC 02EB  
            _set_CHANNEL 036F                 _muestras 00A0               _INTCONbits 000B  
               init_ram0 0352                 intlevel1 0000                sprintf@ap 0042  
              sprintf@sp 0048         ___lldiv@dividend 0024                stringcode 0294  
             _OSCCONbits 008F              ??_uart_init 0020              ??_uart_send 0020  
          uart_send@data 0020                 sprintf@c 0049                 sprintf@f 0038  
       ___lldiv@quotient 0029                 strcpy@cp 0022                 strcpy@to 0021  
               stringdir 0294                 stringtab 0294  
