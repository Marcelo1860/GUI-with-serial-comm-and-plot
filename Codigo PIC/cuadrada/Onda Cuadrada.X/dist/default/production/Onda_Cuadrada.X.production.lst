

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat May 06 16:15:37 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	dabs	1,0x7E,2
    52     0000                     
    53                           ; Generated 09/02/2023 GMT
    54                           ; 
    55                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87     0000                     	;# 
    88     0001                     	;# 
    89     0002                     	;# 
    90     0003                     	;# 
    91     0004                     	;# 
    92     0005                     	;# 
    93     0006                     	;# 
    94     0007                     	;# 
    95     0008                     	;# 
    96     0009                     	;# 
    97     000A                     	;# 
    98     000B                     	;# 
    99     000C                     	;# 
   100     000D                     	;# 
   101     000E                     	;# 
   102     000E                     	;# 
   103     000F                     	;# 
   104     0010                     	;# 
   105     0011                     	;# 
   106     0012                     	;# 
   107     0013                     	;# 
   108     0014                     	;# 
   109     0015                     	;# 
   110     0015                     	;# 
   111     0016                     	;# 
   112     0017                     	;# 
   113     0018                     	;# 
   114     0019                     	;# 
   115     001A                     	;# 
   116     001B                     	;# 
   117     001B                     	;# 
   118     001C                     	;# 
   119     001D                     	;# 
   120     001E                     	;# 
   121     001F                     	;# 
   122     0081                     	;# 
   123     0085                     	;# 
   124     0086                     	;# 
   125     0087                     	;# 
   126     0088                     	;# 
   127     0089                     	;# 
   128     008C                     	;# 
   129     008D                     	;# 
   130     008E                     	;# 
   131     008F                     	;# 
   132     0090                     	;# 
   133     0091                     	;# 
   134     0092                     	;# 
   135     0093                     	;# 
   136     0093                     	;# 
   137     0093                     	;# 
   138     0094                     	;# 
   139     0095                     	;# 
   140     0096                     	;# 
   141     0097                     	;# 
   142     0098                     	;# 
   143     0099                     	;# 
   144     009A                     	;# 
   145     009B                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     0105                     	;# 
   151     0107                     	;# 
   152     0108                     	;# 
   153     0109                     	;# 
   154     010C                     	;# 
   155     010C                     	;# 
   156     010D                     	;# 
   157     010E                     	;# 
   158     010F                     	;# 
   159     0185                     	;# 
   160     0187                     	;# 
   161     0188                     	;# 
   162     0189                     	;# 
   163     018C                     	;# 
   164     018D                     	;# 
   165     0000                     	;# 
   166     0001                     	;# 
   167     0002                     	;# 
   168     0003                     	;# 
   169     0004                     	;# 
   170     0005                     	;# 
   171     0006                     	;# 
   172     0007                     	;# 
   173     0008                     	;# 
   174     0009                     	;# 
   175     000A                     	;# 
   176     000B                     	;# 
   177     000C                     	;# 
   178     000D                     	;# 
   179     000E                     	;# 
   180     000E                     	;# 
   181     000F                     	;# 
   182     0010                     	;# 
   183     0011                     	;# 
   184     0012                     	;# 
   185     0013                     	;# 
   186     0014                     	;# 
   187     0015                     	;# 
   188     0015                     	;# 
   189     0016                     	;# 
   190     0017                     	;# 
   191     0018                     	;# 
   192     0019                     	;# 
   193     001A                     	;# 
   194     001B                     	;# 
   195     001B                     	;# 
   196     001C                     	;# 
   197     001D                     	;# 
   198     001E                     	;# 
   199     001F                     	;# 
   200     0081                     	;# 
   201     0085                     	;# 
   202     0086                     	;# 
   203     0087                     	;# 
   204     0088                     	;# 
   205     0089                     	;# 
   206     008C                     	;# 
   207     008D                     	;# 
   208     008E                     	;# 
   209     008F                     	;# 
   210     0090                     	;# 
   211     0091                     	;# 
   212     0092                     	;# 
   213     0093                     	;# 
   214     0093                     	;# 
   215     0093                     	;# 
   216     0094                     	;# 
   217     0095                     	;# 
   218     0096                     	;# 
   219     0097                     	;# 
   220     0098                     	;# 
   221     0099                     	;# 
   222     009A                     	;# 
   223     009B                     	;# 
   224     009C                     	;# 
   225     009D                     	;# 
   226     009E                     	;# 
   227     009F                     	;# 
   228     0105                     	;# 
   229     0107                     	;# 
   230     0108                     	;# 
   231     0109                     	;# 
   232     010C                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     0185                     	;# 
   238     0187                     	;# 
   239     0188                     	;# 
   240     0189                     	;# 
   241     018C                     	;# 
   242     018D                     	;# 
   243     0000                     	;# 
   244     0001                     	;# 
   245     0002                     	;# 
   246     0003                     	;# 
   247     0004                     	;# 
   248     0005                     	;# 
   249     0006                     	;# 
   250     0007                     	;# 
   251     0008                     	;# 
   252     0009                     	;# 
   253     000A                     	;# 
   254     000B                     	;# 
   255     000C                     	;# 
   256     000D                     	;# 
   257     000E                     	;# 
   258     000E                     	;# 
   259     000F                     	;# 
   260     0010                     	;# 
   261     0011                     	;# 
   262     0012                     	;# 
   263     0013                     	;# 
   264     0014                     	;# 
   265     0015                     	;# 
   266     0015                     	;# 
   267     0016                     	;# 
   268     0017                     	;# 
   269     0018                     	;# 
   270     0019                     	;# 
   271     001A                     	;# 
   272     001B                     	;# 
   273     001B                     	;# 
   274     001C                     	;# 
   275     001D                     	;# 
   276     001E                     	;# 
   277     001F                     	;# 
   278     0081                     	;# 
   279     0085                     	;# 
   280     0086                     	;# 
   281     0087                     	;# 
   282     0088                     	;# 
   283     0089                     	;# 
   284     008C                     	;# 
   285     008D                     	;# 
   286     008E                     	;# 
   287     008F                     	;# 
   288     0090                     	;# 
   289     0091                     	;# 
   290     0092                     	;# 
   291     0093                     	;# 
   292     0093                     	;# 
   293     0093                     	;# 
   294     0094                     	;# 
   295     0095                     	;# 
   296     0096                     	;# 
   297     0097                     	;# 
   298     0098                     	;# 
   299     0099                     	;# 
   300     009A                     	;# 
   301     009B                     	;# 
   302     009C                     	;# 
   303     009D                     	;# 
   304     009E                     	;# 
   305     009F                     	;# 
   306     0105                     	;# 
   307     0107                     	;# 
   308     0108                     	;# 
   309     0109                     	;# 
   310     010C                     	;# 
   311     010C                     	;# 
   312     010D                     	;# 
   313     010E                     	;# 
   314     010F                     	;# 
   315     0185                     	;# 
   316     0187                     	;# 
   317     0188                     	;# 
   318     0189                     	;# 
   319     018C                     	;# 
   320     018D                     	;# 
   321     0000                     	;# 
   322     0001                     	;# 
   323     0002                     	;# 
   324     0003                     	;# 
   325     0004                     	;# 
   326     0005                     	;# 
   327     0006                     	;# 
   328     0007                     	;# 
   329     0008                     	;# 
   330     0009                     	;# 
   331     000A                     	;# 
   332     000B                     	;# 
   333     000C                     	;# 
   334     000D                     	;# 
   335     000E                     	;# 
   336     000E                     	;# 
   337     000F                     	;# 
   338     0010                     	;# 
   339     0011                     	;# 
   340     0012                     	;# 
   341     0013                     	;# 
   342     0014                     	;# 
   343     0015                     	;# 
   344     0015                     	;# 
   345     0016                     	;# 
   346     0017                     	;# 
   347     0018                     	;# 
   348     0019                     	;# 
   349     001A                     	;# 
   350     001B                     	;# 
   351     001B                     	;# 
   352     001C                     	;# 
   353     001D                     	;# 
   354     001E                     	;# 
   355     001F                     	;# 
   356     0081                     	;# 
   357     0085                     	;# 
   358     0086                     	;# 
   359     0087                     	;# 
   360     0088                     	;# 
   361     0089                     	;# 
   362     008C                     	;# 
   363     008D                     	;# 
   364     008E                     	;# 
   365     008F                     	;# 
   366     0090                     	;# 
   367     0091                     	;# 
   368     0092                     	;# 
   369     0093                     	;# 
   370     0093                     	;# 
   371     0093                     	;# 
   372     0094                     	;# 
   373     0095                     	;# 
   374     0096                     	;# 
   375     0097                     	;# 
   376     0098                     	;# 
   377     0099                     	;# 
   378     009A                     	;# 
   379     009B                     	;# 
   380     009C                     	;# 
   381     009D                     	;# 
   382     009E                     	;# 
   383     009F                     	;# 
   384     0105                     	;# 
   385     0107                     	;# 
   386     0108                     	;# 
   387     0109                     	;# 
   388     010C                     	;# 
   389     010C                     	;# 
   390     010D                     	;# 
   391     010E                     	;# 
   392     010F                     	;# 
   393     0185                     	;# 
   394     0187                     	;# 
   395     0188                     	;# 
   396     0189                     	;# 
   397     018C                     	;# 
   398     018D                     	;# 
   399     0000                     	;# 
   400     0001                     	;# 
   401     0002                     	;# 
   402     0003                     	;# 
   403     0004                     	;# 
   404     0005                     	;# 
   405     0006                     	;# 
   406     0007                     	;# 
   407     0008                     	;# 
   408     0009                     	;# 
   409     000A                     	;# 
   410     000B                     	;# 
   411     000C                     	;# 
   412     000D                     	;# 
   413     000E                     	;# 
   414     000E                     	;# 
   415     000F                     	;# 
   416     0010                     	;# 
   417     0011                     	;# 
   418     0012                     	;# 
   419     0013                     	;# 
   420     0014                     	;# 
   421     0015                     	;# 
   422     0015                     	;# 
   423     0016                     	;# 
   424     0017                     	;# 
   425     0018                     	;# 
   426     0019                     	;# 
   427     001A                     	;# 
   428     001B                     	;# 
   429     001B                     	;# 
   430     001C                     	;# 
   431     001D                     	;# 
   432     001E                     	;# 
   433     001F                     	;# 
   434     0081                     	;# 
   435     0085                     	;# 
   436     0086                     	;# 
   437     0087                     	;# 
   438     0088                     	;# 
   439     0089                     	;# 
   440     008C                     	;# 
   441     008D                     	;# 
   442     008E                     	;# 
   443     008F                     	;# 
   444     0090                     	;# 
   445     0091                     	;# 
   446     0092                     	;# 
   447     0093                     	;# 
   448     0093                     	;# 
   449     0093                     	;# 
   450     0094                     	;# 
   451     0095                     	;# 
   452     0096                     	;# 
   453     0097                     	;# 
   454     0098                     	;# 
   455     0099                     	;# 
   456     009A                     	;# 
   457     009B                     	;# 
   458     009C                     	;# 
   459     009D                     	;# 
   460     009E                     	;# 
   461     009F                     	;# 
   462     0105                     	;# 
   463     0107                     	;# 
   464     0108                     	;# 
   465     0109                     	;# 
   466     010C                     	;# 
   467     010C                     	;# 
   468     010D                     	;# 
   469     010E                     	;# 
   470     010F                     	;# 
   471     0185                     	;# 
   472     0187                     	;# 
   473     0188                     	;# 
   474     0189                     	;# 
   475     018C                     	;# 
   476     018D                     	;# 
   477     0000                     	;# 
   478     0001                     	;# 
   479     0002                     	;# 
   480     0003                     	;# 
   481     0004                     	;# 
   482     0005                     	;# 
   483     0006                     	;# 
   484     0007                     	;# 
   485     0008                     	;# 
   486     0009                     	;# 
   487     000A                     	;# 
   488     000B                     	;# 
   489     000C                     	;# 
   490     000D                     	;# 
   491     000E                     	;# 
   492     000E                     	;# 
   493     000F                     	;# 
   494     0010                     	;# 
   495     0011                     	;# 
   496     0012                     	;# 
   497     0013                     	;# 
   498     0014                     	;# 
   499     0015                     	;# 
   500     0015                     	;# 
   501     0016                     	;# 
   502     0017                     	;# 
   503     0018                     	;# 
   504     0019                     	;# 
   505     001A                     	;# 
   506     001B                     	;# 
   507     001B                     	;# 
   508     001C                     	;# 
   509     001D                     	;# 
   510     001E                     	;# 
   511     001F                     	;# 
   512     0081                     	;# 
   513     0085                     	;# 
   514     0086                     	;# 
   515     0087                     	;# 
   516     0088                     	;# 
   517     0089                     	;# 
   518     008C                     	;# 
   519     008D                     	;# 
   520     008E                     	;# 
   521     008F                     	;# 
   522     0090                     	;# 
   523     0091                     	;# 
   524     0092                     	;# 
   525     0093                     	;# 
   526     0093                     	;# 
   527     0093                     	;# 
   528     0094                     	;# 
   529     0095                     	;# 
   530     0096                     	;# 
   531     0097                     	;# 
   532     0098                     	;# 
   533     0099                     	;# 
   534     009A                     	;# 
   535     009B                     	;# 
   536     009C                     	;# 
   537     009D                     	;# 
   538     009E                     	;# 
   539     009F                     	;# 
   540     0105                     	;# 
   541     0107                     	;# 
   542     0108                     	;# 
   543     0109                     	;# 
   544     010C                     	;# 
   545     010C                     	;# 
   546     010D                     	;# 
   547     010E                     	;# 
   548     010F                     	;# 
   549     0185                     	;# 
   550     0187                     	;# 
   551     0188                     	;# 
   552     0189                     	;# 
   553     018C                     	;# 
   554     018D                     	;# 
   555                           
   556                           	psect	idataBANK0
   557     16B3                     __pidataBANK0:
   558                           
   559                           ;initializer for _stop
   560     16B3  3400               	retlw	0
   561     16B4  3480               	retlw	128
   562     16B5  343F               	retlw	63
   563                           
   564                           	psect	idataBANK1
   565     172B                     __pidataBANK1:
   566                           
   567                           ;initializer for _buffer
   568     172B  3420               	retlw	32
   569     172C  3400               	retlw	0
   570     172D  3400               	retlw	0
   571     172E  3400               	retlw	0
   572     172F  3400               	retlw	0
   573     1730  3400               	retlw	0
   574     1731  3400               	retlw	0
   575     1732  3400               	retlw	0
   576     1733  3400               	retlw	0
   577     1734  3400               	retlw	0
   578     1735  3400               	retlw	0
   579     1736  3400               	retlw	0
   580     1737  3400               	retlw	0
   581     1738  3400               	retlw	0
   582     1739  3400               	retlw	0
   583     173A  3400               	retlw	0
   584     173B  3400               	retlw	0
   585     173C  3400               	retlw	0
   586     173D  3400               	retlw	0
   587     173E  3400               	retlw	0
   588                           
   589                           	psect	strings
   590     0800                     __pstrings:
   591     0800                     stringtab:
   592     0800                     __stringtab:
   593     0800                     stringcode:	
   594                           ;	String table - string pointers are 1 byte each
   595                           
   596     0800                     stringdir:
   597     0800  3008               	movlw	high stringdir
   598     0801  008A               	movwf	10
   599     0802  0804               	movf	4,w
   600     0803  0A84               	incf	4,f
   601     0804  0782               	addwf	2,f
   602     0805                     __stringbase:
   603     0805  3400               	retlw	0
   604     0806                     __end_of__stringtab:
   605     0806                     __powers_:
   606     0806  3400               	retlw	0
   607     0807  3480               	retlw	128
   608     0808  343F               	retlw	63
   609     0809  3400               	retlw	0
   610     080A  3420               	retlw	32
   611     080B  3441               	retlw	65
   612     080C  3400               	retlw	0
   613     080D  34C8               	retlw	200
   614     080E  3442               	retlw	66
   615     080F  3400               	retlw	0
   616     0810  347A               	retlw	122
   617     0811  3444               	retlw	68
   618     0812  3440               	retlw	64
   619     0813  341C               	retlw	28
   620     0814  3446               	retlw	70
   621     0815  3450               	retlw	80
   622     0816  34C3               	retlw	195
   623     0817  3447               	retlw	71
   624     0818  3424               	retlw	36
   625     0819  3474               	retlw	116
   626     081A  3449               	retlw	73
   627     081B  3497               	retlw	151
   628     081C  3418               	retlw	24
   629     081D  344B               	retlw	75
   630     081E  34BC               	retlw	188
   631     081F  34BE               	retlw	190
   632     0820  344C               	retlw	76
   633     0821  346B               	retlw	107
   634     0822  346E               	retlw	110
   635     0823  344E               	retlw	78
   636     0824  3403               	retlw	3
   637     0825  3415               	retlw	21
   638     0826  3450               	retlw	80
   639     0827  3479               	retlw	121
   640     0828  34AD               	retlw	173
   641     0829  3460               	retlw	96
   642     082A  34F3               	retlw	243
   643     082B  3449               	retlw	73
   644     082C  3471               	retlw	113
   645     082D                     __end_of__powers_:
   646     082D                     __npowers_:
   647     082D  3400               	retlw	0
   648     082E  3480               	retlw	128
   649     082F  343F               	retlw	63
   650     0830  34CD               	retlw	205
   651     0831  34CC               	retlw	204
   652     0832  343D               	retlw	61
   653     0833  34D7               	retlw	215
   654     0834  3423               	retlw	35
   655     0835  343C               	retlw	60
   656     0836  3412               	retlw	18
   657     0837  3483               	retlw	131
   658     0838  343A               	retlw	58
   659     0839  34B7               	retlw	183
   660     083A  34D1               	retlw	209
   661     083B  3438               	retlw	56
   662     083C  34C6               	retlw	198
   663     083D  3427               	retlw	39
   664     083E  3437               	retlw	55
   665     083F  3438               	retlw	56
   666     0840  3486               	retlw	134
   667     0841  3435               	retlw	53
   668     0842  34C0               	retlw	192
   669     0843  34D6               	retlw	214
   670     0844  3433               	retlw	51
   671     0845  34CC               	retlw	204
   672     0846  342B               	retlw	43
   673     0847  3432               	retlw	50
   674     0848  3470               	retlw	112
   675     0849  3489               	retlw	137
   676     084A  3430               	retlw	48
   677     084B  34E7               	retlw	231
   678     084C  34DB               	retlw	219
   679     084D  342E               	retlw	46
   680     084E  34E5               	retlw	229
   681     084F  343C               	retlw	60
   682     0850  341E               	retlw	30
   683     0851  3442               	retlw	66
   684     0852  34A2               	retlw	162
   685     0853  340D               	retlw	13
   686     0854                     __end_of__npowers_:
   687     0854                     _dpowers:
   688     0854  3401               	retlw	1
   689     0855  3400               	retlw	0
   690     0856  3400               	retlw	0
   691     0857  3400               	retlw	0
   692     0858  340A               	retlw	10
   693     0859  3400               	retlw	0
   694     085A  3400               	retlw	0
   695     085B  3400               	retlw	0
   696     085C  3464               	retlw	100
   697     085D  3400               	retlw	0
   698     085E  3400               	retlw	0
   699     085F  3400               	retlw	0
   700     0860  34E8               	retlw	232
   701     0861  3403               	retlw	3
   702     0862  3400               	retlw	0
   703     0863  3400               	retlw	0
   704     0864  3410               	retlw	16
   705     0865  3427               	retlw	39
   706     0866  3400               	retlw	0
   707     0867  3400               	retlw	0
   708     0868  34A0               	retlw	160
   709     0869  3486               	retlw	134
   710     086A  3401               	retlw	1
   711     086B  3400               	retlw	0
   712     086C  3440               	retlw	64
   713     086D  3442               	retlw	66
   714     086E  340F               	retlw	15
   715     086F  3400               	retlw	0
   716     0870  3480               	retlw	128
   717     0871  3496               	retlw	150
   718     0872  3498               	retlw	152
   719     0873  3400               	retlw	0
   720     0874  3400               	retlw	0
   721     0875  34E1               	retlw	225
   722     0876  34F5               	retlw	245
   723     0877  3405               	retlw	5
   724     0878  3400               	retlw	0
   725     0879  34CA               	retlw	202
   726     087A  349A               	retlw	154
   727     087B  343B               	retlw	59
   728     087C                     __end_of_dpowers:
   729     0019                     _TXREG	set	25
   730     0018                     _RCSTA	set	24
   731     0018                     _RCSTAbits	set	24
   732     000B                     _INTCONbits	set	11
   733     000C                     _PIR1bits	set	12
   734     000E                     _TMR1L	set	14
   735     000F                     _TMR1H	set	15
   736     0010                     _T1CONbits	set	16
   737     001E                     _ADRESH	set	30
   738     001F                     _ADCON0bits	set	31
   739     0064                     _TXIF	set	100
   740     0099                     _SPBRG	set	153
   741     0098                     _TXSTAbits	set	152
   742     0087                     _TRISCbits	set	135
   743     0089                     _TRISE	set	137
   744     0088                     _TRISD	set	136
   745     008F                     _OSCCONbits	set	143
   746     008C                     _PIE1bits	set	140
   747     009E                     _ADRESL	set	158
   748     009F                     _ADCON1bits	set	159
   749     0085                     _TRISAbits	set	133
   750     04C5                     _TXEN	set	1221
   751     0187                     _BAUDCTLbits	set	391
   752     0189                     _ANSELH	set	393
   753     0188                     _ANSEL	set	392
   754     0188                     _ANSELbits	set	392
   755     087C                     STR_1:
   756     087C  3420               	retlw	32	;' '
   757     087D  3420               	retlw	32	;' '
   758     087E  3420               	retlw	32	;' '
   759     087F  3400               	retlw	0
   760     0880                     STR_2:
   761     0880  3425               	retlw	37	;'%'
   762     0881  3466               	retlw	102	;'f'
   763     0882  3400               	retlw	0
   764                           
   765                           	psect	cinit
   766     0013                     start_initialization:	
   767                           ; #config settings
   768                           
   769     0013                     __initialization:
   770                           
   771                           ; Initialize objects allocated to BANK1
   772     0013  1383               	bcf	3,7	;select IRP bank0
   773     0014  30CB               	movlw	low (__pdataBANK1+20)
   774     0015  00FD               	movwf	btemp+-1
   775     0016  3017               	movlw	high __pidataBANK1
   776     0017  00FE               	movwf	btemp
   777     0018  302B               	movlw	low __pidataBANK1
   778     0019  00FF               	movwf	btemp+1
   779     001A  30B7               	movlw	low __pdataBANK1
   780     001B  0084               	movwf	4
   781     001C  160A  118A  270C  120A  118A  	fcall	init_ram0
   782                           
   783                           ; Initialize objects allocated to BANK0
   784     0021  3070               	movlw	low (__pdataBANK0+3)
   785     0022  00FD               	movwf	btemp+-1
   786     0023  3016               	movlw	high __pidataBANK0
   787     0024  00FE               	movwf	btemp
   788     0025  30B3               	movlw	low __pidataBANK0
   789     0026  00FF               	movwf	btemp+1
   790     0027  306D               	movlw	low __pdataBANK0
   791     0028  0084               	movwf	4
   792     0029  160A  118A  270C  120A  118A  	fcall	init_ram0
   793                           
   794                           ; Clear objects allocated to BANK3
   795     002E  1783               	bsf	3,7	;select IRP bank2
   796     002F  3090               	movlw	low __pbssBANK3
   797     0030  0084               	movwf	4
   798     0031  30E0               	movlw	low (__pbssBANK3+80)
   799     0032  160A  118A  26C4   	fcall	clear_ram0
   800                           
   801                           ; Clear objects allocated to BANK0
   802     0035  01E9               	clrf	__pbssBANK0& (0+127)
   803     0036  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   804     0037  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   805     0038  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   806     0039                     end_of_initialization:	
   807                           ;End of C runtime variable initialization code
   808                           
   809     0039                     __end_of__initialization:
   810     0039  0183               	clrf	3
   811     003A  120A  158A  2AE9   	ljmp	_main	;jump to C main() function
   812                           
   813                           	psect	bssBANK0
   814     0069                     __pbssBANK0:
   815     0069                     _datoenv:
   816     0069                     	ds	3
   817     006C                     _contador:
   818     006C                     	ds	1
   819                           
   820                           	psect	dataBANK0
   821     006D                     __pdataBANK0:
   822     006D                     _stop:
   823     006D                     	ds	3
   824                           
   825                           	psect	dataBANK1
   826     00B7                     __pdataBANK1:
   827     00B7                     _buffer:
   828     00B7                     	ds	20
   829                           
   830                           	psect	bssBANK3
   831     0190                     __pbssBANK3:
   832     0190                     _muestras:
   833     0190                     	ds	80
   834                           
   835                           	psect	inittext
   836     1708                     init_fetch0:	
   837                           ;	Called with low address in FSR and high address in W
   838                           
   839     1708  087E               	movf	126,w
   840     1709  008A               	movwf	10
   841     170A  087F               	movf	127,w
   842     170B  0082               	movwf	2
   843     170C                     init_ram0:	
   844                           ;Called with:
   845                           ;	high address of idata address in btemp 
   846                           ;	low address of idata address in btemp+1 
   847                           ;	low address of data in FSR
   848                           ;	high address + 1 of data in btemp-1
   849                           
   850     170C  2708  160A  118A   	fcall	init_fetch0
   851     170F  0080               	movwf	0
   852     1710  0A84               	incf	4,f
   853     1711  0804               	movf	4,w
   854     1712  067D               	xorwf	125,w
   855     1713  1903               	btfsc	3,2
   856     1714  3400               	retlw	0
   857     1715  0AFF               	incf	127,f
   858     1716  1903               	btfsc	3,2
   859     1717  0AFE               	incf	126,f
   860     1718  2F0C               	goto	init_ram0
   861                           
   862                           	psect	clrtext
   863     16C4                     clear_ram0:	
   864                           ;	Called with FSR containing the base address, and
   865                           ;	W with the last address+1
   866                           
   867     16C4  0064               	clrwdt	;clear the watchdog before getting into this loop
   868     16C5                     clrloop0:
   869     16C5  0180               	clrf	0	;clear RAM location pointed to by FSR
   870     16C6  0A84               	incf	4,f	;increment pointer
   871     16C7  0604               	xorwf	4,w	;XOR with final address
   872     16C8  1903               	btfsc	3,2	;have we reached the end yet?
   873     16C9  3400               	retlw	0	;all done for this memory range, return
   874     16CA  0604               	xorwf	4,w	;XOR again to restore value
   875     16CB  2EC5               	goto	clrloop0	;do the next byte
   876                           
   877                           	psect	cstackBANK1
   878     00A0                     __pcstackBANK1:
   879     00A0                     _sprintf$1259:
   880                           
   881                           ; 3 bytes @ 0x0
   882     00A0                     	ds	3
   883     00A3                     sprintf@ap:
   884                           
   885                           ; 1 bytes @ 0x3
   886     00A3                     	ds	1
   887     00A4                     sprintf@flag:
   888                           
   889                           ; 2 bytes @ 0x4
   890     00A4                     	ds	2
   891     00A6                     sprintf@prec:
   892                           
   893                           ; 2 bytes @ 0x6
   894     00A6                     	ds	2
   895     00A8                     sprintf@val:
   896                           
   897                           ; 4 bytes @ 0x8
   898     00A8                     	ds	4
   899     00AC                     sprintf@eexp:
   900                           
   901                           ; 2 bytes @ 0xC
   902     00AC                     	ds	2
   903     00AE                     sprintf@tmpval:
   904                           
   905                           ; 4 bytes @ 0xE
   906     00AE                     	ds	4
   907     00B2                     sprintf@sp:
   908                           
   909                           ; 1 bytes @ 0x12
   910     00B2                     	ds	1
   911     00B3                     sprintf@fval:
   912                           
   913                           ; 3 bytes @ 0x13
   914     00B3                     	ds	3
   915     00B6                     sprintf@c:
   916                           
   917                           ; 1 bytes @ 0x16
   918     00B6                     	ds	1
   919                           
   920                           	psect	cstackCOMMON
   921     0070                     __pcstackCOMMON:
   922     0070                     ?_set_CHANNEL:
   923     0070                     ?_config_HAL:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     0070                     ?_uart_init:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     0070                     ?_uart_send_text:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     0070                     ?_init_ADC:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     0070                     ?_init_inttimer:	
   936                           ; 1 bytes @ 0x0
   937                           
   938     0070                     ?_TMR1_ISR:	
   939                           ; 1 bytes @ 0x0
   940                           
   941     0070                     ??_TMR1_ISR:	
   942                           ; 1 bytes @ 0x0
   943                           
   944     0070                     ?_uart_send:	
   945                           ; 1 bytes @ 0x0
   946                           
   947     0070                     ?_main:	
   948                           ; 1 bytes @ 0x0
   949                           
   950                           
   951                           ; 2 bytes @ 0x0
   952     0070                     	ds	13
   953                           
   954                           	psect	cstackBANK0
   955     0020                     __pcstackBANK0:
   956     0020                     ?___ftge:
   957     0020                     ??_set_CHANNEL:	
   958                           ; 1 bit 
   959                           
   960     0020                     ??_config_HAL:	
   961                           ; 1 bytes @ 0x0
   962                           
   963     0020                     ??_uart_init:	
   964                           ; 1 bytes @ 0x0
   965                           
   966     0020                     ?_strcpy:	
   967                           ; 1 bytes @ 0x0
   968                           
   969     0020                     ??_init_inttimer:	
   970                           ; 1 bytes @ 0x0
   971                           
   972     0020                     ??_uart_send:	
   973                           ; 1 bytes @ 0x0
   974                           
   975     0020                     ?___lbmod:	
   976                           ; 1 bytes @ 0x0
   977                           
   978     0020                     ?___wmul:	
   979                           ; 1 bytes @ 0x0
   980                           
   981     0020                     ?___awmod:	
   982                           ; 2 bytes @ 0x0
   983                           
   984     0020                     ?___ftpack:	
   985                           ; 2 bytes @ 0x0
   986                           
   987     0020                     ?___ftneg:	
   988                           ; 3 bytes @ 0x0
   989                           
   990     0020                     ?__tdiv_to_l_:	
   991                           ; 3 bytes @ 0x0
   992                           
   993     0020                     ?__div_to_l_:	
   994                           ; 4 bytes @ 0x0
   995                           
   996     0020                     ?___lldiv:	
   997                           ; 4 bytes @ 0x0
   998                           
   999     0020                     ?___llmod:	
  1000                           ; 4 bytes @ 0x0
  1001                           
  1002     0020                     uart_send@data:	
  1003                           ; 4 bytes @ 0x0
  1004                           
  1005     0020                     ___lbmod@divisor:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008     0020                     strcpy@from:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011     0020                     ___wmul@multiplier:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014     0020                     ___awmod@divisor:	
  1015                           ; 2 bytes @ 0x0
  1016                           
  1017     0020                     __div_to_l_@f1:	
  1018                           ; 2 bytes @ 0x0
  1019                           
  1020     0020                     ___ftpack@arg:	
  1021                           ; 3 bytes @ 0x0
  1022                           
  1023     0020                     __tdiv_to_l_@f1:	
  1024                           ; 3 bytes @ 0x0
  1025                           
  1026     0020                     ___ftge@ff1:	
  1027                           ; 3 bytes @ 0x0
  1028                           
  1029     0020                     ___ftneg@f1:	
  1030                           ; 3 bytes @ 0x0
  1031                           
  1032     0020                     ___lldiv@divisor:	
  1033                           ; 3 bytes @ 0x0
  1034                           
  1035     0020                     ___llmod@divisor:	
  1036                           ; 4 bytes @ 0x0
  1037                           
  1038                           
  1039                           ; 4 bytes @ 0x0
  1040     0020                     	ds	1
  1041     0021                     ??_strcpy:
  1042     0021                     ??_uart_send_text:	
  1043                           ; 1 bytes @ 0x1
  1044                           
  1045     0021                     ??___lbmod:	
  1046                           ; 1 bytes @ 0x1
  1047                           
  1048     0021                     set_CHANNEL@channel:	
  1049                           ; 1 bytes @ 0x1
  1050                           
  1051     0021                     uart_send_text@aux:	
  1052                           ; 1 bytes @ 0x1
  1053                           
  1054     0021                     strcpy@to:	
  1055                           ; 1 bytes @ 0x1
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0x1
  1059     0021                     	ds	1
  1060     0022                     ??_init_ADC:
  1061     0022                     uart_send_text@buffer:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064     0022                     strcpy@cp:	
  1065                           ; 1 bytes @ 0x2
  1066                           
  1067     0022                     ___wmul@multiplicand:	
  1068                           ; 1 bytes @ 0x2
  1069                           
  1070     0022                     ___awmod@dividend:	
  1071                           ; 2 bytes @ 0x2
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075     0022                     	ds	1
  1076     0023                     ??___ftneg:
  1077     0023                     ___ftpack@exp:	
  1078                           ; 1 bytes @ 0x3
  1079                           
  1080     0023                     ___lbmod@dividend:	
  1081                           ; 1 bytes @ 0x3
  1082                           
  1083     0023                     __div_to_l_@f2:	
  1084                           ; 1 bytes @ 0x3
  1085                           
  1086     0023                     __tdiv_to_l_@f2:	
  1087                           ; 3 bytes @ 0x3
  1088                           
  1089     0023                     ___ftge@ff2:	
  1090                           ; 3 bytes @ 0x3
  1091                           
  1092                           
  1093                           ; 3 bytes @ 0x3
  1094     0023                     	ds	1
  1095     0024                     ??___wmul:
  1096     0024                     ??___awmod:	
  1097                           ; 1 bytes @ 0x4
  1098                           
  1099     0024                     ___awmod@counter:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102     0024                     ___ftpack@sign:	
  1103                           ; 1 bytes @ 0x4
  1104                           
  1105     0024                     ___lbmod@counter:	
  1106                           ; 1 bytes @ 0x4
  1107                           
  1108     0024                     ___wmul@product:	
  1109                           ; 1 bytes @ 0x4
  1110                           
  1111     0024                     ___lldiv@dividend:	
  1112                           ; 2 bytes @ 0x4
  1113                           
  1114     0024                     ___llmod@dividend:	
  1115                           ; 4 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 4 bytes @ 0x4
  1119     0024                     	ds	1
  1120     0025                     ??___ftpack:
  1121     0025                     ___awmod@sign:	
  1122                           ; 1 bytes @ 0x5
  1123                           
  1124     0025                     ___lbmod@rem:	
  1125                           ; 1 bytes @ 0x5
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x5
  1129     0025                     	ds	1
  1130     0026                     ??__tdiv_to_l_:
  1131     0026                     ??__div_to_l_:	
  1132                           ; 1 bytes @ 0x6
  1133                           
  1134     0026                     ??___ftge:	
  1135                           ; 1 bytes @ 0x6
  1136                           
  1137     0026                     ?___lbdiv:	
  1138                           ; 1 bytes @ 0x6
  1139                           
  1140     0026                     ?___awdiv:	
  1141                           ; 1 bytes @ 0x6
  1142                           
  1143     0026                     ___lbdiv@divisor:	
  1144                           ; 2 bytes @ 0x6
  1145                           
  1146     0026                     ___awdiv@divisor:	
  1147                           ; 1 bytes @ 0x6
  1148                           
  1149                           
  1150                           ; 2 bytes @ 0x6
  1151     0026                     	ds	1
  1152     0027                     ??___lbdiv:
  1153     0027                     ___lbdiv@dividend:	
  1154                           ; 1 bytes @ 0x7
  1155                           
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158     0027                     	ds	1
  1159     0028                     ??___lldiv:
  1160     0028                     ??___llmod:	
  1161                           ; 1 bytes @ 0x8
  1162                           
  1163     0028                     ?___lltoft:	
  1164                           ; 1 bytes @ 0x8
  1165                           
  1166     0028                     ?___lwtoft:	
  1167                           ; 3 bytes @ 0x8
  1168                           
  1169     0028                     ___lbdiv@counter:	
  1170                           ; 3 bytes @ 0x8
  1171                           
  1172     0028                     ___awdiv@dividend:	
  1173                           ; 1 bytes @ 0x8
  1174                           
  1175     0028                     ___lwtoft@c:	
  1176                           ; 2 bytes @ 0x8
  1177                           
  1178     0028                     ___lltoft@c:	
  1179                           ; 2 bytes @ 0x8
  1180                           
  1181                           
  1182                           ; 4 bytes @ 0x8
  1183     0028                     	ds	1
  1184     0029                     ___lbdiv@quotient:
  1185     0029                     ___llmod@counter:	
  1186                           ; 1 bytes @ 0x9
  1187                           
  1188     0029                     ___lldiv@quotient:	
  1189                           ; 1 bytes @ 0x9
  1190                           
  1191     0029                     __tdiv_to_l_@quot:	
  1192                           ; 4 bytes @ 0x9
  1193                           
  1194                           
  1195                           ; 4 bytes @ 0x9
  1196     0029                     	ds	1
  1197     002A                     ??___awdiv:
  1198     002A                     ___awdiv@counter:	
  1199                           ; 1 bytes @ 0xA
  1200                           
  1201                           
  1202                           ; 1 bytes @ 0xA
  1203     002A                     	ds	1
  1204     002B                     ??___lwtoft:
  1205     002B                     ___awdiv@sign:	
  1206                           ; 1 bytes @ 0xB
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0xB
  1210     002B                     	ds	1
  1211     002C                     ??___lltoft:
  1212     002C                     ___lltoft@exp:	
  1213                           ; 1 bytes @ 0xC
  1214                           
  1215     002C                     ___awdiv@quotient:	
  1216                           ; 1 bytes @ 0xC
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0xC
  1220     002C                     	ds	1
  1221     002D                     ___lldiv@counter:
  1222     002D                     __tdiv_to_l_@cntr:	
  1223                           ; 1 bytes @ 0xD
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0xD
  1227     002D                     	ds	1
  1228     002E                     ?___bmul:
  1229     002E                     ___bmul@multiplicand:	
  1230                           ; 1 bytes @ 0xE
  1231                           
  1232     002E                     __tdiv_to_l_@exp1:	
  1233                           ; 1 bytes @ 0xE
  1234                           
  1235     002E                     __div_to_l_@quot:	
  1236                           ; 1 bytes @ 0xE
  1237                           
  1238                           
  1239                           ; 4 bytes @ 0xE
  1240     002E                     	ds	1
  1241     002F                     ??___bmul:
  1242     002F                     ___bmul@product:	
  1243                           ; 1 bytes @ 0xF
  1244                           
  1245                           
  1246                           ; 1 bytes @ 0xF
  1247     002F                     	ds	1
  1248     0030                     ___bmul@multiplier:
  1249                           
  1250                           ; 1 bytes @ 0x10
  1251     0030                     	ds	1
  1252     0031                     ?___ftmul:
  1253     0031                     ___ftmul@f1:	
  1254                           ; 3 bytes @ 0x11
  1255                           
  1256                           
  1257                           ; 3 bytes @ 0x11
  1258     0031                     	ds	1
  1259     0032                     __div_to_l_@cntr:
  1260                           
  1261                           ; 1 bytes @ 0x12
  1262     0032                     	ds	1
  1263     0033                     __div_to_l_@exp1:
  1264                           
  1265                           ; 1 bytes @ 0x13
  1266     0033                     	ds	1
  1267     0034                     ___ftmul@f2:
  1268                           
  1269                           ; 3 bytes @ 0x14
  1270     0034                     	ds	3
  1271     0037                     ??___ftmul:
  1272                           
  1273                           ; 1 bytes @ 0x17
  1274     0037                     	ds	3
  1275     003A                     ___ftmul@exp:
  1276                           
  1277                           ; 1 bytes @ 0x1A
  1278     003A                     	ds	1
  1279     003B                     ___ftmul@f3_as_product:
  1280                           
  1281                           ; 3 bytes @ 0x1B
  1282     003B                     	ds	3
  1283     003E                     ___ftmul@cntr:
  1284                           
  1285                           ; 1 bytes @ 0x1E
  1286     003E                     	ds	1
  1287     003F                     ___ftmul@sign:
  1288                           
  1289                           ; 1 bytes @ 0x1F
  1290     003F                     	ds	1
  1291     0040                     ?_fround:
  1292     0040                     ?_scale:	
  1293                           ; 3 bytes @ 0x20
  1294                           
  1295                           
  1296                           ; 3 bytes @ 0x20
  1297     0040                     	ds	3
  1298     0043                     ??_fround:
  1299     0043                     ??_scale:	
  1300                           ; 1 bytes @ 0x23
  1301                           
  1302     0043                     _fround$1257:	
  1303                           ; 1 bytes @ 0x23
  1304                           
  1305     0043                     _scale$1258:	
  1306                           ; 3 bytes @ 0x23
  1307                           
  1308                           
  1309                           ; 3 bytes @ 0x23
  1310     0043                     	ds	3
  1311     0046                     scale@scl:
  1312     0046                     _fround$1256:	
  1313                           ; 1 bytes @ 0x26
  1314                           
  1315                           
  1316                           ; 3 bytes @ 0x26
  1317     0046                     	ds	1
  1318     0047                     ?___fttol:
  1319     0047                     ___fttol@f1:	
  1320                           ; 4 bytes @ 0x27
  1321                           
  1322                           
  1323                           ; 3 bytes @ 0x27
  1324     0047                     	ds	2
  1325     0049                     fround@prec:
  1326                           
  1327                           ; 1 bytes @ 0x29
  1328     0049                     	ds	1
  1329     004A                     ?___ftadd:
  1330     004A                     ___ftadd@f1:	
  1331                           ; 3 bytes @ 0x2A
  1332                           
  1333                           
  1334                           ; 3 bytes @ 0x2A
  1335     004A                     	ds	1
  1336     004B                     ??___fttol:
  1337                           
  1338                           ; 1 bytes @ 0x2B
  1339     004B                     	ds	2
  1340     004D                     ___ftadd@f2:
  1341                           
  1342                           ; 3 bytes @ 0x2D
  1343     004D                     	ds	1
  1344     004E                     ___fttol@sign1:
  1345                           
  1346                           ; 1 bytes @ 0x2E
  1347     004E                     	ds	1
  1348     004F                     ___fttol@lval:
  1349                           
  1350                           ; 4 bytes @ 0x2F
  1351     004F                     	ds	1
  1352     0050                     ??___ftadd:
  1353                           
  1354                           ; 1 bytes @ 0x30
  1355     0050                     	ds	3
  1356     0053                     ___ftadd@sign:
  1357     0053                     ___fttol@exp1:	
  1358                           ; 1 bytes @ 0x33
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x33
  1362     0053                     	ds	1
  1363     0054                     ___ftadd@exp2:
  1364                           
  1365                           ; 1 bytes @ 0x34
  1366     0054                     	ds	1
  1367     0055                     ___ftadd@exp1:
  1368                           
  1369                           ; 1 bytes @ 0x35
  1370     0055                     	ds	1
  1371     0056                     ?___ftsub:
  1372     0056                     ___ftsub@f2:	
  1373                           ; 3 bytes @ 0x36
  1374                           
  1375                           
  1376                           ; 3 bytes @ 0x36
  1377     0056                     	ds	3
  1378     0059                     ___ftsub@f1:
  1379                           
  1380                           ; 3 bytes @ 0x39
  1381     0059                     	ds	3
  1382     005C                     ??___ftsub:
  1383     005C                     ?_sprintf:	
  1384                           ; 1 bytes @ 0x3C
  1385                           
  1386     005C                     sprintf@f:	
  1387                           ; 2 bytes @ 0x3C
  1388                           
  1389                           
  1390                           ; 1 bytes @ 0x3C
  1391     005C                     	ds	4
  1392     0060                     ??_sprintf:
  1393                           
  1394                           ; 1 bytes @ 0x40
  1395     0060                     	ds	6
  1396     0066                     ??_main:
  1397                           
  1398                           ; 1 bytes @ 0x46
  1399     0066                     	ds	1
  1400     0067                     main@i:
  1401                           
  1402                           ; 2 bytes @ 0x47
  1403     0067                     	ds	2
  1404                           
  1405                           	psect	maintext
  1406     0AE9                     __pmaintext:	
  1407 ;;
  1408 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1409 ;;
  1410 ;; *************** function _main *****************
  1411 ;; Defined at:
  1412 ;;		line 16 in file "newmain.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  i               2   71[BANK0 ] int 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  2   96[None  ] int 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : B00/0
  1423 ;;		On exit  : 300/100
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         0       0       0       0       0
  1427 ;;      Locals:         0       2       0       0       0
  1428 ;;      Temps:          0       1       0       0       0
  1429 ;;      Totals:         0       3       0       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels required when called: 5
  1432 ;; This function calls:
  1433 ;;		___ftmul
  1434 ;;		___lwtoft
  1435 ;;		_config_HAL
  1436 ;;		_init_ADC
  1437 ;;		_init_inttimer
  1438 ;;		_sprintf
  1439 ;;		_strcpy
  1440 ;;		_uart_init
  1441 ;;		_uart_send_text
  1442 ;; This function is called by:
  1443 ;;		Startup code after reset
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447     0AE9                     _main:	
  1448                           ;psect for function _main
  1449                           
  1450                           
  1451                           ;newmain.c: 20: OSCCONbits.OSTS = 1;
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1455     0AE9  1683               	bsf	3,5	;RP0=1, select bank1
  1456     0AEA  158F               	bsf	15,3	;volatile
  1457                           
  1458                           ;newmain.c: 21: OSCCONbits.HTS = 0;
  1459     0AEB  110F               	bcf	15,2	;volatile
  1460                           
  1461                           ;newmain.c: 22: OSCCONbits.HTS = 0;
  1462     0AEC  110F               	bcf	15,2	;volatile
  1463                           
  1464                           ;newmain.c: 23: OSCCONbits.SCS = 0;
  1465     0AED  100F               	bcf	15,0	;volatile
  1466                           
  1467                           ;newmain.c: 24: config_HAL();
  1468     0AEE  160A  118A  26B6  120A  158A  	fcall	_config_HAL
  1469                           
  1470                           ;newmain.c: 25: init_ADC();
  1471     0AF3  160A  118A  27DC  120A  158A  	fcall	_init_ADC
  1472                           
  1473                           ;newmain.c: 26: uart_init();
  1474     0AF8  160A  118A  26E7  120A  158A  	fcall	_uart_init
  1475                           
  1476                           ;newmain.c: 27: init_inttimer();
  1477     0AFD  160A  118A  26D9  120A  158A  	fcall	_init_inttimer
  1478                           
  1479                           ;newmain.c: 28: ADCON0bits.GO = 1;
  1480     0B02  1283               	bcf	3,5	;RP0=0, select bank0
  1481     0B03  149F               	bsf	31,1	;volatile
  1482     0B04                     l2660:
  1483     0B04  3029               	movlw	41
  1484     0B05  1283               	bcf	3,5	;RP0=0, select bank0
  1485     0B06  026C               	subwf	_contador,w	;volatile
  1486     0B07  1C03               	skipc
  1487     0B08  2B04               	goto	l2660
  1488                           
  1489                           ;newmain.c: 36: PIE1bits.ADIE = 0;
  1490     0B09  1683               	bsf	3,5	;RP0=1, select bank1
  1491     0B0A  130C               	bcf	12,6	;volatile
  1492                           
  1493                           ;newmain.c: 38: for(int i=0; i<=40; i++){
  1494     0B0B  1283               	bcf	3,5	;RP0=0, select bank0
  1495     0B0C  01E7               	clrf	main@i
  1496     0B0D  01E8               	clrf	main@i+1
  1497     0B0E                     l2668:
  1498                           
  1499                           ;newmain.c: 39: strcpy(buffer,"   ");
  1500     0B0E  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1501     0B0F  1283               	bcf	3,5	;RP0=0, select bank0
  1502     0B10  1303               	bcf	3,6	;RP1=0, select bank0
  1503     0B11  00A0               	movwf	strcpy@from
  1504     0B12  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1505     0B13  160A  118A  273F  120A  158A  	fcall	_strcpy
  1506                           
  1507                           ;newmain.c: 40: datoenv = muestras[i]*(1.0/1023.0);
  1508     0B18  3020               	movlw	32
  1509     0B19  00B1               	movwf	___ftmul@f1
  1510     0B1A  3080               	movlw	128
  1511     0B1B  00B2               	movwf	___ftmul@f1+1
  1512     0B1C  303A               	movlw	58
  1513     0B1D  00B3               	movwf	___ftmul@f1+2
  1514     0B1E  0867               	movf	main@i,w
  1515     0B1F  00E6               	movwf	??_main
  1516     0B20  0766               	addwf	??_main,w
  1517     0B21  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  1518     0B22  0084               	movwf	4
  1519     0B23  1783               	bsf	3,7	;select IRP bank3
  1520     0B24  0800               	movf	0,w
  1521     0B25  00A8               	movwf	___lwtoft@c
  1522     0B26  0A84               	incf	4,f
  1523     0B27  0800               	movf	0,w
  1524     0B28  00A9               	movwf	___lwtoft@c+1
  1525     0B29  160A  118A  2719  120A  158A  	fcall	___lwtoft
  1526     0B2E  0828               	movf	?___lwtoft,w
  1527     0B2F  00B4               	movwf	___ftmul@f2
  1528     0B30  0829               	movf	?___lwtoft+1,w
  1529     0B31  00B5               	movwf	___ftmul@f2+1
  1530     0B32  082A               	movf	?___lwtoft+2,w
  1531     0B33  00B6               	movwf	___ftmul@f2+2
  1532     0B34  120A  158A  240E  120A  158A  	fcall	___ftmul
  1533     0B39  0831               	movf	?___ftmul,w
  1534     0B3A  00E9               	movwf	_datoenv	;volatile
  1535     0B3B  0832               	movf	?___ftmul+1,w
  1536     0B3C  00EA               	movwf	_datoenv+1	;volatile
  1537     0B3D  0833               	movf	?___ftmul+2,w
  1538     0B3E  00EB               	movwf	_datoenv+2	;volatile
  1539                           
  1540                           ;newmain.c: 41: sprintf(buffer, "%f", datoenv);
  1541     0B3F  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1542     0B40  00DC               	movwf	sprintf@f
  1543     0B41  0869               	movf	_datoenv,w	;volatile
  1544     0B42  00DD               	movwf	?_sprintf+1
  1545     0B43  086A               	movf	_datoenv+1,w	;volatile
  1546     0B44  00DE               	movwf	?_sprintf+2
  1547     0B45  086B               	movf	_datoenv+2,w	;volatile
  1548     0B46  00DF               	movwf	?_sprintf+3
  1549     0B47  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1550     0B48  120A  118A  203D  120A  158A  	fcall	_sprintf
  1551                           
  1552                           ;newmain.c: 42: buffer[19] = ';';
  1553     0B4D  303B               	movlw	59
  1554     0B4E  00CA               	movwf	(_buffer^(0+128)+19)
  1555                           
  1556                           ;newmain.c: 43: uart_send_text(buffer);
  1557     0B4F  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1558     0B50  160A  118A  27BA  120A  158A  	fcall	_uart_send_text
  1559     0B55  3001               	movlw	1
  1560     0B56  07E7               	addwf	main@i,f
  1561     0B57  1803               	skipnc
  1562     0B58  0AE8               	incf	main@i+1,f
  1563     0B59  3000               	movlw	0
  1564     0B5A  07E8               	addwf	main@i+1,f
  1565     0B5B  0868               	movf	main@i+1,w
  1566     0B5C  3A80               	xorlw	128
  1567     0B5D  00FF               	movwf	127
  1568     0B5E  3080               	movlw	128
  1569     0B5F  027F               	subwf	127,w
  1570     0B60  1D03               	skipz
  1571     0B61  2B64               	goto	u3515
  1572     0B62  3029               	movlw	41
  1573     0B63  0267               	subwf	main@i,w
  1574     0B64                     u3515:
  1575     0B64  1C03               	skipc
  1576     0B65  2B0E               	goto	l2668
  1577                           
  1578                           ;newmain.c: 44: };newmain.c: 52: contador = 0;
  1579     0B66  1283               	bcf	3,5	;RP0=0, select bank0
  1580     0B67  1303               	bcf	3,6	;RP1=0, select bank0
  1581     0B68  01EC               	clrf	_contador	;volatile
  1582                           
  1583                           ;newmain.c: 53: ADCON0bits.GO = 1;
  1584     0B69  149F               	bsf	31,1	;volatile
  1585                           
  1586                           ;newmain.c: 55: PIE1bits.ADIE = 1;
  1587     0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  1588     0B6B  170C               	bsf	12,6	;volatile
  1589     0B6C  2B04               	goto	l2660
  1590     0B6D                     __end_of_main:
  1591                           
  1592                           	psect	text1
  1593     17BA                     __ptext1:	
  1594 ;; *************** function _uart_send_text *****************
  1595 ;; Defined at:
  1596 ;;		line 89 in file "uart.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  buffer          1    wreg     PTR unsigned char 
  1599 ;;		 -> buffer(20), 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  buffer          1    2[BANK0 ] PTR unsigned char 
  1602 ;;		 -> buffer(20), 
  1603 ;;  aux             1    1[BANK0 ] unsigned char 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : B00/100
  1610 ;;		On exit  : 300/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       2       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         0       2       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 2
  1620 ;; This function calls:
  1621 ;;		_uart_send
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627     17BA                     _uart_send_text:	
  1628                           ;psect for function _uart_send_text
  1629                           
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _uart_send_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1633                           ;uart_send_text@buffer stored from wreg
  1634     17BA  1283               	bcf	3,5	;RP0=0, select bank0
  1635     17BB  00A2               	movwf	uart_send_text@buffer
  1636     17BC                     l175:	
  1637                           ;uart.c: 91: char aux;;uart.c: 92: do{
  1638                           
  1639                           
  1640                           ;uart.c: 93: aux = *buffer;
  1641     17BC  0822               	movf	uart_send_text@buffer,w
  1642     17BD  0084               	movwf	4
  1643     17BE  0800               	movf	0,w
  1644     17BF  00A1               	movwf	uart_send_text@aux
  1645                           
  1646                           ;uart.c: 94: uart_send(aux);
  1647     17C0  0821               	movf	uart_send_text@aux,w
  1648     17C1  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1649                           
  1650                           ;uart.c: 95: buffer++;
  1651     17C6  3001               	movlw	1
  1652     17C7  00FF               	movwf	127
  1653     17C8  087F               	movf	127,w
  1654     17C9  07A2               	addwf	uart_send_text@buffer,f
  1655                           
  1656                           ;uart.c: 96: }while(*buffer != ';');
  1657     17CA  0822               	movf	uart_send_text@buffer,w
  1658     17CB  0084               	movwf	4
  1659     17CC  303B               	movlw	59
  1660     17CD  1383               	bcf	3,7	;select IRP bank0
  1661     17CE  0600               	xorwf	0,w
  1662     17CF  1D03               	btfss	3,2
  1663     17D0  2FBC               	goto	l175
  1664                           
  1665                           ;uart.c: 97: uart_send('\r');
  1666     17D1  300D               	movlw	13
  1667     17D2  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1668                           
  1669                           ;uart.c: 98: uart_send('\n');
  1670     17D7  300A               	movlw	10
  1671     17D8  120A  118A  27F7   	fcall	_uart_send
  1672     17DB  0008               	return
  1673     17DC                     __end_of_uart_send_text:
  1674                           
  1675                           	psect	text2
  1676     07F7                     __ptext2:	
  1677 ;; *************** function _uart_send *****************
  1678 ;; Defined at:
  1679 ;;		line 66 in file "uart.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;  data            1    wreg     unsigned char 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  data            1    0[BANK0 ] unsigned char 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      void 
  1686 ;; Registers used:
  1687 ;;		wreg
  1688 ;; Tracked objects:
  1689 ;;		On entry : 300/0
  1690 ;;		On exit  : 300/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1693 ;;      Params:         0       0       0       0       0
  1694 ;;      Locals:         0       1       0       0       0
  1695 ;;      Temps:          0       0       0       0       0
  1696 ;;      Totals:         0       1       0       0       0
  1697 ;;Total ram usage:        1 bytes
  1698 ;; Hardware stack levels used: 1
  1699 ;; Hardware stack levels required when called: 1
  1700 ;; This function calls:
  1701 ;;		Nothing
  1702 ;; This function is called by:
  1703 ;;		_uart_send_text
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707     07F7                     _uart_send:	
  1708                           ;psect for function _uart_send
  1709                           
  1710                           
  1711                           ;incstack = 0
  1712                           ; Regs used in _uart_send: [wreg]
  1713                           ;uart_send@data stored from wreg
  1714     07F7  00A0               	movwf	uart_send@data
  1715                           
  1716                           ;uart.c: 68: TXEN = 1;
  1717     07F8  1683               	bsf	3,5	;RP0=1, select bank1
  1718     07F9  1698               	bsf	24,5	;volatile
  1719     07FA                     l161:	
  1720                           ;uart.c: 69: while (TXIF == 0);
  1721                           
  1722     07FA  1283               	bcf	3,5	;RP0=0, select bank0
  1723     07FB  1E0C               	btfss	12,4	;volatile
  1724     07FC  2FFA               	goto	l161
  1725                           
  1726                           ;uart.c: 70: TXREG = data;
  1727     07FD  0820               	movf	uart_send@data,w
  1728     07FE  0099               	movwf	25	;volatile
  1729     07FF  0008               	return
  1730     0800                     __end_of_uart_send:
  1731                           
  1732                           	psect	text3
  1733     16E7                     __ptext3:	
  1734 ;; *************** function _uart_init *****************
  1735 ;; Defined at:
  1736 ;;		line 3 in file "uart.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/300
  1747 ;;		On exit  : 300/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0
  1753 ;;      Totals:         0       0       0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels used: 1
  1756 ;; Hardware stack levels required when called: 1
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764     16E7                     _uart_init:	
  1765                           ;psect for function _uart_init
  1766                           
  1767                           
  1768                           ;uart.c: 6: TRISCbits.TRISC6 = 0;
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _uart_init: [wreg]
  1772     16E7  1683               	bsf	3,5	;RP0=1, select bank1
  1773     16E8  1303               	bcf	3,6	;RP1=0, select bank1
  1774     16E9  1307               	bcf	7,6	;volatile
  1775                           
  1776                           ;uart.c: 7: TRISCbits.TRISC7 = 1;
  1777     16EA  1787               	bsf	7,7	;volatile
  1778                           
  1779                           ;uart.c: 8: TXSTAbits.BRGH = 0;
  1780     16EB  1118               	bcf	24,2	;volatile
  1781                           
  1782                           ;uart.c: 9: BAUDCTLbits.BRG16 = 1;
  1783     16EC  1703               	bsf	3,6	;RP1=1, select bank3
  1784     16ED  1587               	bsf	7,3	;volatile
  1785                           
  1786                           ;uart.c: 20: SPBRG = 51;
  1787     16EE  3033               	movlw	51
  1788     16EF  1303               	bcf	3,6	;RP1=0, select bank1
  1789     16F0  0099               	movwf	25	;volatile
  1790                           
  1791                           ;uart.c: 21: TXSTAbits.SYNC = 0;
  1792     16F1  1218               	bcf	24,4	;volatile
  1793                           
  1794                           ;uart.c: 22: RCSTAbits.SPEN = 1;
  1795     16F2  1283               	bcf	3,5	;RP0=0, select bank0
  1796     16F3  1798               	bsf	24,7	;volatile
  1797                           
  1798                           ;uart.c: 23: RCSTA = 0b10010000;
  1799     16F4  3090               	movlw	144
  1800     16F5  0098               	movwf	24	;volatile
  1801     16F6  0008               	return
  1802     16F7                     __end_of_uart_init:
  1803                           
  1804                           	psect	text4
  1805     173F                     __ptext4:	
  1806 ;; *************** function _strcpy *****************
  1807 ;; Defined at:
  1808 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  to              1    wreg     PTR unsigned char 
  1811 ;;		 -> buffer(20), 
  1812 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  1813 ;;		 -> STR_1(4), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  to              1    1[BANK0 ] PTR unsigned char 
  1816 ;;		 -> buffer(20), 
  1817 ;;  cp              1    2[BANK0 ] PTR unsigned char 
  1818 ;;		 -> buffer(20), 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      PTR unsigned char 
  1821 ;; Registers used:
  1822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1823 ;; Tracked objects:
  1824 ;;		On entry : 300/0
  1825 ;;		On exit  : B00/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1828 ;;      Params:         0       1       0       0       0
  1829 ;;      Locals:         0       2       0       0       0
  1830 ;;      Temps:          0       0       0       0       0
  1831 ;;      Totals:         0       3       0       0       0
  1832 ;;Total ram usage:        3 bytes
  1833 ;; Hardware stack levels used: 2
  1834 ;; Hardware stack levels required when called: 1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842     173F                     _strcpy:	
  1843                           ;psect for function _strcpy
  1844                           
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1848                           ;strcpy@to stored from wreg
  1849     173F  00A1               	movwf	strcpy@to
  1850     1740  0821               	movf	strcpy@to,w
  1851     1741  00A2               	movwf	strcpy@cp
  1852     1742                     l2460:
  1853     1742  0820               	movf	strcpy@from,w
  1854     1743  0084               	movwf	4
  1855     1744  120A  158A  2000  160A  118A  	fcall	stringdir
  1856     1749  00FF               	movwf	127
  1857     174A  0822               	movf	strcpy@cp,w
  1858     174B  0084               	movwf	4
  1859     174C  087F               	movf	127,w
  1860     174D  1383               	bcf	3,7	;select IRP bank0
  1861     174E  0080               	movwf	0
  1862     174F  0800               	movf	0,w
  1863     1750  1903               	btfsc	3,2
  1864     1751  0008               	return
  1865     1752  3001               	movlw	1
  1866     1753  00FF               	movwf	127
  1867     1754  087F               	movf	127,w
  1868     1755  07A2               	addwf	strcpy@cp,f
  1869     1756  3001               	movlw	1
  1870     1757  00FF               	movwf	127
  1871     1758  087F               	movf	127,w
  1872     1759  07A0               	addwf	strcpy@from,f
  1873     175A  2F42               	goto	l2460
  1874     175B                     __end_of_strcpy:
  1875                           
  1876                           	psect	text5
  1877     003D                     __ptext5:	
  1878 ;; *************** function _sprintf *****************
  1879 ;; Defined at:
  1880 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  sp              1    wreg     PTR unsigned char 
  1883 ;;		 -> buffer(20), 
  1884 ;;  f               1   60[BANK0 ] PTR const unsigned char 
  1885 ;;		 -> STR_2(3), 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1888 ;;		 -> buffer(20), 
  1889 ;;  tmpval          4   14[BANK1 ] struct .
  1890 ;;  val             4    8[BANK1 ] unsigned long 
  1891 ;;  fval            3   19[BANK1 ] unsigned long 
  1892 ;;  eexp            2   12[BANK1 ] int 
  1893 ;;  prec            2    6[BANK1 ] int 
  1894 ;;  flag            2    4[BANK1 ] unsigned short 
  1895 ;;  cp              2    0        PTR const unsigned char 
  1896 ;;  len             2    0        unsigned int 
  1897 ;;  width           2    0        int 
  1898 ;;  c               1   22[BANK1 ] unsigned char 
  1899 ;;  ap              1    3[BANK1 ] PTR void [1]
  1900 ;;		 -> ?_sprintf(2), 
  1901 ;;  d               1    0        unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2   60[BANK0 ] int 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 300/800
  1908 ;;		On exit  : B00/100
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1911 ;;      Params:         0       4       0       0       0
  1912 ;;      Locals:         0       0      23       0       0
  1913 ;;      Temps:          0       6       0       0       0
  1914 ;;      Totals:         0      10      23       0       0
  1915 ;;Total ram usage:       33 bytes
  1916 ;; Hardware stack levels used: 1
  1917 ;; Hardware stack levels required when called: 4
  1918 ;; This function calls:
  1919 ;;		___awdiv
  1920 ;;		___ftadd
  1921 ;;		___ftge
  1922 ;;		___ftmul
  1923 ;;		___ftneg
  1924 ;;		___ftsub
  1925 ;;		___fttol
  1926 ;;		___lldiv
  1927 ;;		___llmod
  1928 ;;		___lltoft
  1929 ;;		___wmul
  1930 ;;		__div_to_l_
  1931 ;;		__tdiv_to_l_
  1932 ;;		_fround
  1933 ;;		_scale
  1934 ;; This function is called by:
  1935 ;;		_main
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939     003D                     _sprintf:	
  1940                           ;psect for function _sprintf
  1941                           
  1942                           
  1943                           ;incstack = 0
  1944                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1945                           ;sprintf@sp stored from wreg
  1946     003D  1683               	bsf	3,5	;RP0=1, select bank1
  1947     003E  00B2               	movwf	sprintf@sp^(0+128)
  1948                           
  1949                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1950     003F  305D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1951     0040  00A3               	movwf	sprintf@ap^(0+128)
  1952     0041                     l2628:	
  1953                           ;doprnt.c: 553: while((c = *f++)) {
  1954                           
  1955     0041  3001               	movlw	1
  1956     0042  1283               	bcf	3,5	;RP0=0, select bank0
  1957     0043  07DC               	addwf	sprintf@f,f
  1958     0044  30FF               	movlw	-1
  1959     0045  075C               	addwf	sprintf@f,w
  1960     0046  0084               	movwf	4
  1961     0047  120A  158A  2000  120A  118A  	fcall	stringdir
  1962     004C  1683               	bsf	3,5	;RP0=1, select bank1
  1963     004D  00B6               	movwf	sprintf@c^(0+128)
  1964     004E  0836               	movf	sprintf@c^(0+128),w
  1965     004F  1903               	btfsc	3,2
  1966     0050  2D23               	goto	l2630
  1967                           
  1968                           ;doprnt.c: 555: if(c != '%')
  1969     0051  3025               	movlw	37
  1970     0052  0636               	xorwf	sprintf@c^(0+128),w
  1971     0053  1903               	btfsc	3,2
  1972     0054  2859               	goto	l2470
  1973                           
  1974                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1975     0055  0832               	movf	sprintf@sp^(0+128),w
  1976     0056  0084               	movwf	4
  1977     0057  0836               	movf	sprintf@c^(0+128),w
  1978     0058  2D1C               	goto	L4
  1979     0059                     l2470:	
  1980                           ;doprnt.c: 559: continue;
  1981                           
  1982                           
  1983                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1984     0059  01A4               	clrf	sprintf@flag^(0+128)
  1985     005A  01A5               	clrf	(sprintf@flag+1)^(0+128)
  1986                           
  1987                           ;doprnt.c: 661: switch(c = *f++) {
  1988     005B  285E               	goto	l2474
  1989     005C                     l301:	
  1990                           ;doprnt.c: 688: case 'f':
  1991                           
  1992                           
  1993                           ;doprnt.c: 689: flag |= 0x400;
  1994     005C  1525               	bsf	(sprintf@flag^(0+128)+1),2
  1995                           
  1996                           ;doprnt.c: 690: break;
  1997     005D  2872               	goto	l2476
  1998     005E                     l2474:
  1999     005E  3001               	movlw	1
  2000     005F  1283               	bcf	3,5	;RP0=0, select bank0
  2001     0060  07DC               	addwf	sprintf@f,f
  2002     0061  30FF               	movlw	-1
  2003     0062  075C               	addwf	sprintf@f,w
  2004     0063  0084               	movwf	4
  2005     0064  120A  158A  2000  120A  118A  	fcall	stringdir
  2006     0069  1683               	bsf	3,5	;RP0=1, select bank1
  2007     006A  00B6               	movwf	sprintf@c^(0+128)
  2008                           
  2009                           ; Switch size 1, requested type "simple"
  2010                           ; Number of cases is 2, Range of values is 0 to 102
  2011                           ; switch strategies available:
  2012                           ; Name         Instructions Cycles
  2013                           ; simple_byte            7     4 (average)
  2014                           ; jumptable            260     6 (fixed)
  2015                           ;	Chosen strategy is simple_byte
  2016     006B  3A00               	xorlw	0	; case 0
  2017     006C  1903               	skipnz
  2018     006D  2D23               	goto	l2630
  2019     006E  3A66               	xorlw	102	; case 102
  2020     006F  1903               	skipnz
  2021     0070  285C               	goto	l301
  2022     0071  2841               	goto	l2628
  2023     0072                     l2476:
  2024                           
  2025                           ;doprnt.c: 851: if(flag & (0x700)) {
  2026     0072  3000               	movlw	0
  2027     0073  0524               	andwf	sprintf@flag^(0+128),w
  2028     0074  1283               	bcf	3,5	;RP0=0, select bank0
  2029     0075  00E0               	movwf	??_sprintf
  2030     0076  3007               	movlw	7
  2031     0077  1683               	bsf	3,5	;RP0=1, select bank1
  2032     0078  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2033     0079  1283               	bcf	3,5	;RP0=0, select bank0
  2034     007A  00E1               	movwf	??_sprintf+1
  2035     007B  0860               	movf	??_sprintf,w
  2036     007C  0461               	iorwf	??_sprintf+1,w
  2037     007D  1903               	btfsc	3,2
  2038     007E  2D14               	goto	l2622
  2039                           
  2040                           ;doprnt.c: 855: prec = 6;
  2041     007F  3006               	movlw	6
  2042     0080  1683               	bsf	3,5	;RP0=1, select bank1
  2043     0081  00A6               	movwf	sprintf@prec^(0+128)
  2044     0082  3000               	movlw	0
  2045     0083  00A7               	movwf	(sprintf@prec^(0+128)+1)
  2046                           
  2047                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2048     0084  0823               	movf	sprintf@ap^(0+128),w
  2049     0085  0084               	movwf	4
  2050     0086  1383               	bcf	3,7	;select IRP bank0
  2051     0087  0800               	movf	0,w
  2052     0088  00B3               	movwf	sprintf@fval^(0+128)
  2053     0089  0A84               	incf	4,f
  2054     008A  0800               	movf	0,w
  2055     008B  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2056     008C  0A84               	incf	4,f
  2057     008D  0800               	movf	0,w
  2058     008E  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2059     008F  3003               	movlw	3
  2060     0090  00FF               	movwf	127
  2061     0091  087F               	movf	127,w
  2062     0092  07A3               	addwf	sprintf@ap^(0+128),f
  2063                           
  2064                           ;doprnt.c: 857: if(fval < 0.0) {
  2065     0093  0833               	movf	sprintf@fval^(0+128),w
  2066     0094  1283               	bcf	3,5	;RP0=0, select bank0
  2067     0095  00A0               	movwf	___ftge@ff1
  2068     0096  1683               	bsf	3,5	;RP0=1, select bank1
  2069     0097  0834               	movf	(sprintf@fval+1)^(0+128),w
  2070     0098  1283               	bcf	3,5	;RP0=0, select bank0
  2071     0099  00A1               	movwf	___ftge@ff1+1
  2072     009A  1683               	bsf	3,5	;RP0=1, select bank1
  2073     009B  0835               	movf	(sprintf@fval+2)^(0+128),w
  2074     009C  1283               	bcf	3,5	;RP0=0, select bank0
  2075     009D  00A2               	movwf	___ftge@ff1+2
  2076     009E  3000               	movlw	0
  2077     009F  00A3               	movwf	___ftge@ff2
  2078     00A0  3000               	movlw	0
  2079     00A1  00A4               	movwf	___ftge@ff2+1
  2080     00A2  3000               	movlw	0
  2081     00A3  00A5               	movwf	___ftge@ff2+2
  2082     00A4  120A  158A  20CA  120A  118A  	fcall	___ftge
  2083     00A9  1803               	btfsc	3,0
  2084     00AA  28CB               	goto	l2490
  2085                           
  2086                           ;doprnt.c: 858: fval = -fval;
  2087     00AB  1683               	bsf	3,5	;RP0=1, select bank1
  2088     00AC  0833               	movf	sprintf@fval^(0+128),w
  2089     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2090     00AE  00A0               	movwf	___ftneg@f1
  2091     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  2092     00B0  0834               	movf	(sprintf@fval+1)^(0+128),w
  2093     00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2094     00B2  00A1               	movwf	___ftneg@f1+1
  2095     00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2096     00B4  0835               	movf	(sprintf@fval+2)^(0+128),w
  2097     00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2098     00B6  00A2               	movwf	___ftneg@f1+2
  2099     00B7  160A  118A  26BC  120A  118A  	fcall	___ftneg
  2100     00BC  0820               	movf	?___ftneg,w
  2101     00BD  1683               	bsf	3,5	;RP0=1, select bank1
  2102     00BE  00B3               	movwf	sprintf@fval^(0+128)
  2103     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  2104     00C0  0821               	movf	?___ftneg+1,w
  2105     00C1  1683               	bsf	3,5	;RP0=1, select bank1
  2106     00C2  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2107     00C3  1283               	bcf	3,5	;RP0=0, select bank0
  2108     00C4  0822               	movf	?___ftneg+2,w
  2109     00C5  1683               	bsf	3,5	;RP0=1, select bank1
  2110     00C6  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2111                           
  2112                           ;doprnt.c: 859: flag |= 0x03;
  2113     00C7  3003               	movlw	3
  2114     00C8  04A4               	iorwf	sprintf@flag^(0+128),f
  2115     00C9  3000               	movlw	0
  2116     00CA  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  2117     00CB                     l2490:
  2118                           
  2119                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2120     00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2121     00CC  01AC               	clrf	sprintf@eexp^(0+128)
  2122     00CD  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2123                           
  2124                           ;doprnt.c: 862: if( fval!=0) {
  2125     00CE  0835               	movf	(sprintf@fval+2)^(0+128),w
  2126     00CF  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2127     00D0  0433               	iorwf	sprintf@fval^(0+128),w
  2128     00D1  1903               	skipnz
  2129     00D2  29B4               	goto	l2520
  2130                           
  2131                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2132     00D3  30B3               	movlw	low (sprintf@fval| 0)
  2133     00D4  0084               	movwf	4
  2134     00D5  1383               	bcf	3,7	;select IRP bank1
  2135     00D6  0800               	movf	0,w
  2136     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2137     00D8  00E0               	movwf	??_sprintf
  2138     00D9  0A84               	incf	4,f
  2139     00DA  0800               	movf	0,w
  2140     00DB  00E1               	movwf	??_sprintf+1
  2141     00DC  0A84               	incf	4,f
  2142     00DD  0800               	movf	0,w
  2143     00DE  00E2               	movwf	??_sprintf+2
  2144     00DF  0A84               	incf	4,f
  2145     00E0  0800               	movf	0,w
  2146     00E1  00E3               	movwf	??_sprintf+3
  2147     00E2  300F               	movlw	15
  2148     00E3                     u3255:
  2149     00E3  1003               	clrc
  2150     00E4  0CE3               	rrf	??_sprintf+3,f
  2151     00E5  0CE2               	rrf	??_sprintf+2,f
  2152     00E6  0CE1               	rrf	??_sprintf+1,f
  2153     00E7  0CE0               	rrf	??_sprintf,f
  2154     00E8  3EFF               	addlw	-1
  2155     00E9  1D03               	skipz
  2156     00EA  28E3               	goto	u3255
  2157     00EB  30FF               	movlw	255
  2158     00EC  0560               	andwf	??_sprintf,w
  2159     00ED  00E4               	movwf	??_sprintf+4
  2160     00EE  3000               	movlw	0
  2161     00EF  0561               	andwf	??_sprintf+1,w
  2162     00F0  00E5               	movwf	??_sprintf+5
  2163     00F1  0864               	movf	??_sprintf+4,w
  2164     00F2  3E82               	addlw	130
  2165     00F3  1683               	bsf	3,5	;RP0=1, select bank1
  2166     00F4  00AC               	movwf	sprintf@eexp^(0+128)
  2167     00F5  1283               	bcf	3,5	;RP0=0, select bank0
  2168     00F6  0865               	movf	??_sprintf+5,w
  2169     00F7  1803               	skipnc
  2170     00F8  3E01               	addlw	1
  2171     00F9  3EFF               	addlw	255
  2172     00FA  1683               	bsf	3,5	;RP0=1, select bank1
  2173     00FB  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2174                           
  2175                           ;doprnt.c: 864: eexp--;
  2176     00FC  30FF               	movlw	255
  2177     00FD  07AC               	addwf	sprintf@eexp^(0+128),f
  2178     00FE  1803               	skipnc
  2179     00FF  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2180     0100  30FF               	movlw	255
  2181     0101  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2182                           
  2183                           ;doprnt.c: 865: eexp *= 3;
  2184     0102  3003               	movlw	3
  2185     0103  1283               	bcf	3,5	;RP0=0, select bank0
  2186     0104  00A0               	movwf	___wmul@multiplier
  2187     0105  3000               	movlw	0
  2188     0106  00A1               	movwf	___wmul@multiplier+1
  2189     0107  1683               	bsf	3,5	;RP0=1, select bank1
  2190     0108  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2191     0109  1283               	bcf	3,5	;RP0=0, select bank0
  2192     010A  00A3               	movwf	___wmul@multiplicand+1
  2193     010B  1683               	bsf	3,5	;RP0=1, select bank1
  2194     010C  082C               	movf	sprintf@eexp^(0+128),w
  2195     010D  1283               	bcf	3,5	;RP0=0, select bank0
  2196     010E  00A2               	movwf	___wmul@multiplicand
  2197     010F  160A  118A  2778  120A  118A  	fcall	___wmul
  2198     0114  0821               	movf	?___wmul+1,w
  2199     0115  1683               	bsf	3,5	;RP0=1, select bank1
  2200     0116  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2201     0117  1283               	bcf	3,5	;RP0=0, select bank0
  2202     0118  0820               	movf	?___wmul,w
  2203     0119  1683               	bsf	3,5	;RP0=1, select bank1
  2204     011A  00AC               	movwf	sprintf@eexp^(0+128)
  2205                           
  2206                           ;doprnt.c: 866: eexp /= 10;
  2207     011B  300A               	movlw	10
  2208     011C  1283               	bcf	3,5	;RP0=0, select bank0
  2209     011D  00A6               	movwf	___awdiv@divisor
  2210     011E  3000               	movlw	0
  2211     011F  00A7               	movwf	___awdiv@divisor+1
  2212     0120  1683               	bsf	3,5	;RP0=1, select bank1
  2213     0121  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2214     0122  1283               	bcf	3,5	;RP0=0, select bank0
  2215     0123  00A9               	movwf	___awdiv@dividend+1
  2216     0124  1683               	bsf	3,5	;RP0=1, select bank1
  2217     0125  082C               	movf	sprintf@eexp^(0+128),w
  2218     0126  1283               	bcf	3,5	;RP0=0, select bank0
  2219     0127  00A8               	movwf	___awdiv@dividend
  2220     0128  120A  158A  21C6  120A  118A  	fcall	___awdiv
  2221     012D  0827               	movf	?___awdiv+1,w
  2222     012E  1683               	bsf	3,5	;RP0=1, select bank1
  2223     012F  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2224     0130  1283               	bcf	3,5	;RP0=0, select bank0
  2225     0131  0826               	movf	?___awdiv,w
  2226     0132  1683               	bsf	3,5	;RP0=1, select bank1
  2227     0133  00AC               	movwf	sprintf@eexp^(0+128)
  2228                           
  2229                           ;doprnt.c: 867: if(eexp < 0)
  2230     0134  1FAD               	btfss	(sprintf@eexp+1)^(0+128),7
  2231     0135  293C               	goto	l2506
  2232                           
  2233                           ;doprnt.c: 868: eexp--;
  2234     0136  30FF               	movlw	255
  2235     0137  07AC               	addwf	sprintf@eexp^(0+128),f
  2236     0138  1803               	skipnc
  2237     0139  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2238     013A  30FF               	movlw	255
  2239     013B  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2240     013C                     l2506:
  2241                           
  2242                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2243     013C  032C               	decf	sprintf@eexp^(0+128),w
  2244     013D  3AFF               	xorlw	255
  2245     013E  120A  118A  2528  120A  118A  	fcall	_scale
  2246     0143  0840               	movf	?_scale,w
  2247     0144  1683               	bsf	3,5	;RP0=1, select bank1
  2248     0145  00AE               	movwf	sprintf@tmpval^(0+128)
  2249     0146  1283               	bcf	3,5	;RP0=0, select bank0
  2250     0147  0841               	movf	?_scale+1,w
  2251     0148  1683               	bsf	3,5	;RP0=1, select bank1
  2252     0149  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2253     014A  1283               	bcf	3,5	;RP0=0, select bank0
  2254     014B  0842               	movf	?_scale+2,w
  2255     014C  1683               	bsf	3,5	;RP0=1, select bank1
  2256     014D  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2257                           
  2258                           ;doprnt.c: 873: tmpval.integ *= fval;
  2259     014E  0833               	movf	sprintf@fval^(0+128),w
  2260     014F  1283               	bcf	3,5	;RP0=0, select bank0
  2261     0150  00B1               	movwf	___ftmul@f1
  2262     0151  1683               	bsf	3,5	;RP0=1, select bank1
  2263     0152  0834               	movf	(sprintf@fval+1)^(0+128),w
  2264     0153  1283               	bcf	3,5	;RP0=0, select bank0
  2265     0154  00B2               	movwf	___ftmul@f1+1
  2266     0155  1683               	bsf	3,5	;RP0=1, select bank1
  2267     0156  0835               	movf	(sprintf@fval+2)^(0+128),w
  2268     0157  1283               	bcf	3,5	;RP0=0, select bank0
  2269     0158  00B3               	movwf	___ftmul@f1+2
  2270     0159  1683               	bsf	3,5	;RP0=1, select bank1
  2271     015A  082E               	movf	sprintf@tmpval^(0+128),w
  2272     015B  1283               	bcf	3,5	;RP0=0, select bank0
  2273     015C  00B4               	movwf	___ftmul@f2
  2274     015D  1683               	bsf	3,5	;RP0=1, select bank1
  2275     015E  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2276     015F  1283               	bcf	3,5	;RP0=0, select bank0
  2277     0160  00B5               	movwf	___ftmul@f2+1
  2278     0161  1683               	bsf	3,5	;RP0=1, select bank1
  2279     0162  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2280     0163  1283               	bcf	3,5	;RP0=0, select bank0
  2281     0164  00B6               	movwf	___ftmul@f2+2
  2282     0165  120A  158A  240E  120A  118A  	fcall	___ftmul
  2283     016A  0831               	movf	?___ftmul,w
  2284     016B  1683               	bsf	3,5	;RP0=1, select bank1
  2285     016C  00AE               	movwf	sprintf@tmpval^(0+128)
  2286     016D  1283               	bcf	3,5	;RP0=0, select bank0
  2287     016E  0832               	movf	?___ftmul+1,w
  2288     016F  1683               	bsf	3,5	;RP0=1, select bank1
  2289     0170  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2290     0171  1283               	bcf	3,5	;RP0=0, select bank0
  2291     0172  0833               	movf	?___ftmul+2,w
  2292     0173  1683               	bsf	3,5	;RP0=1, select bank1
  2293     0174  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2294                           
  2295                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2296     0175  082E               	movf	sprintf@tmpval^(0+128),w
  2297     0176  1283               	bcf	3,5	;RP0=0, select bank0
  2298     0177  00A0               	movwf	___ftge@ff1
  2299     0178  1683               	bsf	3,5	;RP0=1, select bank1
  2300     0179  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2301     017A  1283               	bcf	3,5	;RP0=0, select bank0
  2302     017B  00A1               	movwf	___ftge@ff1+1
  2303     017C  1683               	bsf	3,5	;RP0=1, select bank1
  2304     017D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2305     017E  1283               	bcf	3,5	;RP0=0, select bank0
  2306     017F  00A2               	movwf	___ftge@ff1+2
  2307     0180  3000               	movlw	0
  2308     0181  00A3               	movwf	___ftge@ff2
  2309     0182  3080               	movlw	128
  2310     0183  00A4               	movwf	___ftge@ff2+1
  2311     0184  303F               	movlw	63
  2312     0185  00A5               	movwf	___ftge@ff2+2
  2313     0186  120A  158A  20CA  120A  118A  	fcall	___ftge
  2314     018B  1803               	btfsc	3,0
  2315     018C  2994               	goto	l2514
  2316                           
  2317                           ;doprnt.c: 875: eexp--;
  2318     018D  30FF               	movlw	255
  2319     018E  1683               	bsf	3,5	;RP0=1, select bank1
  2320     018F  07AC               	addwf	sprintf@eexp^(0+128),f
  2321     0190  1803               	skipnc
  2322     0191  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2323     0192  30FF               	movlw	255
  2324     0193  29B3               	goto	L5
  2325     0194                     l2514:
  2326                           
  2327                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2328     0194  1683               	bsf	3,5	;RP0=1, select bank1
  2329     0195  082E               	movf	sprintf@tmpval^(0+128),w
  2330     0196  1283               	bcf	3,5	;RP0=0, select bank0
  2331     0197  00A0               	movwf	___ftge@ff1
  2332     0198  1683               	bsf	3,5	;RP0=1, select bank1
  2333     0199  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2334     019A  1283               	bcf	3,5	;RP0=0, select bank0
  2335     019B  00A1               	movwf	___ftge@ff1+1
  2336     019C  1683               	bsf	3,5	;RP0=1, select bank1
  2337     019D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2338     019E  1283               	bcf	3,5	;RP0=0, select bank0
  2339     019F  00A2               	movwf	___ftge@ff1+2
  2340     01A0  3000               	movlw	0
  2341     01A1  00A3               	movwf	___ftge@ff2
  2342     01A2  3020               	movlw	32
  2343     01A3  00A4               	movwf	___ftge@ff2+1
  2344     01A4  3041               	movlw	65
  2345     01A5  00A5               	movwf	___ftge@ff2+2
  2346     01A6  120A  158A  20CA  120A  118A  	fcall	___ftge
  2347     01AB  1C03               	btfss	3,0
  2348     01AC  29B4               	goto	l2520
  2349                           
  2350                           ;doprnt.c: 877: eexp++;
  2351     01AD  3001               	movlw	1
  2352     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2353     01AF  07AC               	addwf	sprintf@eexp^(0+128),f
  2354     01B0  1803               	skipnc
  2355     01B1  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2356     01B2  3000               	movlw	0
  2357     01B3                     L5:
  2358     01B3  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2359     01B4                     l2520:	
  2360                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2361                           
  2362                           
  2363                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2364     01B4  3006               	movlw	6
  2365     01B5  120A  158A  26C1  120A  118A  	fcall	_fround
  2366     01BA  0840               	movf	?_fround,w
  2367     01BB  00CA               	movwf	___ftadd@f1
  2368     01BC  0841               	movf	?_fround+1,w
  2369     01BD  00CB               	movwf	___ftadd@f1+1
  2370     01BE  0842               	movf	?_fround+2,w
  2371     01BF  00CC               	movwf	___ftadd@f1+2
  2372     01C0  1683               	bsf	3,5	;RP0=1, select bank1
  2373     01C1  0833               	movf	sprintf@fval^(0+128),w
  2374     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  2375     01C3  00CD               	movwf	___ftadd@f2
  2376     01C4  1683               	bsf	3,5	;RP0=1, select bank1
  2377     01C5  0834               	movf	(sprintf@fval+1)^(0+128),w
  2378     01C6  1283               	bcf	3,5	;RP0=0, select bank0
  2379     01C7  00CE               	movwf	___ftadd@f2+1
  2380     01C8  1683               	bsf	3,5	;RP0=1, select bank1
  2381     01C9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2382     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2383     01CB  00CF               	movwf	___ftadd@f2+2
  2384     01CC  120A  158A  24B3  120A  118A  	fcall	___ftadd
  2385     01D1  084A               	movf	?___ftadd,w
  2386     01D2  1683               	bsf	3,5	;RP0=1, select bank1
  2387     01D3  00B3               	movwf	sprintf@fval^(0+128)
  2388     01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2389     01D5  084B               	movf	?___ftadd+1,w
  2390     01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2391     01D7  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2392     01D8  1283               	bcf	3,5	;RP0=0, select bank0
  2393     01D9  084C               	movf	?___ftadd+2,w
  2394     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  2395     01DB  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2396                           
  2397                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2398     01DC  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2399     01DD  3A80               	xorlw	128
  2400     01DE  00FF               	movwf	127
  2401     01DF  3080               	movlw	128
  2402     01E0  027F               	subwf	127,w
  2403     01E1  1D03               	skipz
  2404     01E2  29E5               	goto	u3295
  2405     01E3  300A               	movlw	10
  2406     01E4  022C               	subwf	sprintf@eexp^(0+128),w
  2407     01E5                     u3295:
  2408     01E5  1803               	skipnc
  2409     01E6  2A10               	goto	l2530
  2410     01E7  1683               	bsf	3,5	;RP0=1, select bank1
  2411     01E8  1303               	bcf	3,6	;RP1=0, select bank1
  2412     01E9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2413     01EA  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2414     01EB  0433               	iorwf	sprintf@fval^(0+128),w
  2415     01EC  1903               	skipnz
  2416     01ED  2A76               	goto	l2544
  2417     01EE  0833               	movf	sprintf@fval^(0+128),w
  2418     01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2419     01F0  00C7               	movwf	___fttol@f1
  2420     01F1  1683               	bsf	3,5	;RP0=1, select bank1
  2421     01F2  0834               	movf	(sprintf@fval+1)^(0+128),w
  2422     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2423     01F4  00C8               	movwf	___fttol@f1+1
  2424     01F5  1683               	bsf	3,5	;RP0=1, select bank1
  2425     01F6  0835               	movf	(sprintf@fval+2)^(0+128),w
  2426     01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2427     01F8  00C9               	movwf	___fttol@f1+2
  2428     01F9  120A  118A  2780  120A  118A  	fcall	___fttol
  2429     01FE  084A               	movf	?___fttol+3,w
  2430     01FF  0449               	iorwf	?___fttol+2,w
  2431     0200  0448               	iorwf	?___fttol+1,w
  2432     0201  0447               	iorwf	?___fttol,w
  2433     0202  1D03               	skipz
  2434     0203  2A76               	goto	l2544
  2435     0204  1683               	bsf	3,5	;RP0=1, select bank1
  2436     0205  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2437     0206  3A80               	xorlw	128
  2438     0207  00FF               	movwf	127
  2439     0208  3080               	movlw	128
  2440     0209  027F               	subwf	127,w
  2441     020A  1D03               	skipz
  2442     020B  2A0E               	goto	u3325
  2443     020C  3002               	movlw	2
  2444     020D  022C               	subwf	sprintf@eexp^(0+128),w
  2445     020E                     u3325:
  2446     020E  1C03               	skipc
  2447     020F  2A76               	goto	l2544
  2448     0210                     l2530:
  2449                           
  2450                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2451     0210  1683               	bsf	3,5	;RP0=1, select bank1
  2452     0211  1303               	bcf	3,6	;RP1=0, select bank1
  2453     0212  082E               	movf	sprintf@tmpval^(0+128),w
  2454     0213  1283               	bcf	3,5	;RP0=0, select bank0
  2455     0214  00A0               	movwf	___ftge@ff1
  2456     0215  1683               	bsf	3,5	;RP0=1, select bank1
  2457     0216  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2458     0217  1283               	bcf	3,5	;RP0=0, select bank0
  2459     0218  00A1               	movwf	___ftge@ff1+1
  2460     0219  1683               	bsf	3,5	;RP0=1, select bank1
  2461     021A  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2462     021B  1283               	bcf	3,5	;RP0=0, select bank0
  2463     021C  00A2               	movwf	___ftge@ff1+2
  2464     021D  3070               	movlw	112
  2465     021E  00A3               	movwf	___ftge@ff2
  2466     021F  3089               	movlw	137
  2467     0220  00A4               	movwf	___ftge@ff2+1
  2468     0221  3040               	movlw	64
  2469     0222  00A5               	movwf	___ftge@ff2+2
  2470     0223  120A  158A  20CA  120A  118A  	fcall	___ftge
  2471     0228  1803               	btfsc	3,0
  2472     0229  2A2C               	goto	l2534
  2473                           
  2474                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2475     022A  30F7               	movlw	247
  2476     022B  2A2D               	goto	L1
  2477     022C                     l2534:	
  2478                           ;doprnt.c: 1148: }else{
  2479                           
  2480                           
  2481                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2482     022C  30F8               	movlw	248
  2483     022D                     L1:
  2484     022D  1683               	bsf	3,5	;RP0=1, select bank1
  2485     022E  07AC               	addwf	sprintf@eexp^(0+128),f
  2486     022F  1803               	skipnc
  2487     0230  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2488     0231  30FF               	movlw	255
  2489     0232  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2490                           
  2491                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2492     0233  082C               	movf	sprintf@eexp^(0+128),w
  2493     0234  120A  118A  2528  120A  118A  	fcall	_scale
  2494     0239  0840               	movf	?_scale,w
  2495     023A  1683               	bsf	3,5	;RP0=1, select bank1
  2496     023B  00AE               	movwf	sprintf@tmpval^(0+128)
  2497     023C  1283               	bcf	3,5	;RP0=0, select bank0
  2498     023D  0841               	movf	?_scale+1,w
  2499     023E  1683               	bsf	3,5	;RP0=1, select bank1
  2500     023F  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2501     0240  1283               	bcf	3,5	;RP0=0, select bank0
  2502     0241  0842               	movf	?_scale+2,w
  2503     0242  1683               	bsf	3,5	;RP0=1, select bank1
  2504     0243  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2505                           
  2506                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2507     0244  0833               	movf	sprintf@fval^(0+128),w
  2508     0245  1283               	bcf	3,5	;RP0=0, select bank0
  2509     0246  00A0               	movwf	__tdiv_to_l_@f1
  2510     0247  1683               	bsf	3,5	;RP0=1, select bank1
  2511     0248  0834               	movf	(sprintf@fval+1)^(0+128),w
  2512     0249  1283               	bcf	3,5	;RP0=0, select bank0
  2513     024A  00A1               	movwf	__tdiv_to_l_@f1+1
  2514     024B  1683               	bsf	3,5	;RP0=1, select bank1
  2515     024C  0835               	movf	(sprintf@fval+2)^(0+128),w
  2516     024D  1283               	bcf	3,5	;RP0=0, select bank0
  2517     024E  00A2               	movwf	__tdiv_to_l_@f1+2
  2518     024F  1683               	bsf	3,5	;RP0=1, select bank1
  2519     0250  082E               	movf	sprintf@tmpval^(0+128),w
  2520     0251  1283               	bcf	3,5	;RP0=0, select bank0
  2521     0252  00A3               	movwf	__tdiv_to_l_@f2
  2522     0253  1683               	bsf	3,5	;RP0=1, select bank1
  2523     0254  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2524     0255  1283               	bcf	3,5	;RP0=0, select bank0
  2525     0256  00A4               	movwf	__tdiv_to_l_@f2+1
  2526     0257  1683               	bsf	3,5	;RP0=1, select bank1
  2527     0258  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2528     0259  1283               	bcf	3,5	;RP0=0, select bank0
  2529     025A  00A5               	movwf	__tdiv_to_l_@f2+2
  2530     025B  120A  158A  236D  120A  118A  	fcall	__tdiv_to_l_
  2531     0260  0823               	movf	?__tdiv_to_l_+3,w
  2532     0261  1683               	bsf	3,5	;RP0=1, select bank1
  2533     0262  00AB               	movwf	(sprintf@val+3)^(0+128)
  2534     0263  1283               	bcf	3,5	;RP0=0, select bank0
  2535     0264  0822               	movf	?__tdiv_to_l_+2,w
  2536     0265  1683               	bsf	3,5	;RP0=1, select bank1
  2537     0266  00AA               	movwf	(sprintf@val+2)^(0+128)
  2538     0267  1283               	bcf	3,5	;RP0=0, select bank0
  2539     0268  0821               	movf	?__tdiv_to_l_+1,w
  2540     0269  1683               	bsf	3,5	;RP0=1, select bank1
  2541     026A  00A9               	movwf	(sprintf@val+1)^(0+128)
  2542     026B  1283               	bcf	3,5	;RP0=0, select bank0
  2543     026C  0820               	movf	?__tdiv_to_l_,w
  2544     026D  1683               	bsf	3,5	;RP0=1, select bank1
  2545     026E  00A8               	movwf	sprintf@val^(0+128)
  2546                           
  2547                           ;doprnt.c: 1155: fval = 0.0;
  2548     026F  3000               	movlw	0
  2549     0270  00B3               	movwf	sprintf@fval^(0+128)
  2550     0271  3000               	movlw	0
  2551     0272  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2552     0273  3000               	movlw	0
  2553     0274  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2554                           
  2555                           ;doprnt.c: 1156: } else {
  2556     0275  2ACF               	goto	l2548
  2557     0276                     l2544:
  2558                           
  2559                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2560     0276  1683               	bsf	3,5	;RP0=1, select bank1
  2561     0277  1303               	bcf	3,6	;RP1=0, select bank1
  2562     0278  0833               	movf	sprintf@fval^(0+128),w
  2563     0279  1283               	bcf	3,5	;RP0=0, select bank0
  2564     027A  00C7               	movwf	___fttol@f1
  2565     027B  1683               	bsf	3,5	;RP0=1, select bank1
  2566     027C  0834               	movf	(sprintf@fval+1)^(0+128),w
  2567     027D  1283               	bcf	3,5	;RP0=0, select bank0
  2568     027E  00C8               	movwf	___fttol@f1+1
  2569     027F  1683               	bsf	3,5	;RP0=1, select bank1
  2570     0280  0835               	movf	(sprintf@fval+2)^(0+128),w
  2571     0281  1283               	bcf	3,5	;RP0=0, select bank0
  2572     0282  00C9               	movwf	___fttol@f1+2
  2573     0283  120A  118A  2780  120A  118A  	fcall	___fttol
  2574     0288  084A               	movf	?___fttol+3,w
  2575     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2576     028A  00AB               	movwf	(sprintf@val+3)^(0+128)
  2577     028B  1283               	bcf	3,5	;RP0=0, select bank0
  2578     028C  0849               	movf	?___fttol+2,w
  2579     028D  1683               	bsf	3,5	;RP0=1, select bank1
  2580     028E  00AA               	movwf	(sprintf@val+2)^(0+128)
  2581     028F  1283               	bcf	3,5	;RP0=0, select bank0
  2582     0290  0848               	movf	?___fttol+1,w
  2583     0291  1683               	bsf	3,5	;RP0=1, select bank1
  2584     0292  00A9               	movwf	(sprintf@val+1)^(0+128)
  2585     0293  1283               	bcf	3,5	;RP0=0, select bank0
  2586     0294  0847               	movf	?___fttol,w
  2587     0295  1683               	bsf	3,5	;RP0=1, select bank1
  2588     0296  00A8               	movwf	sprintf@val^(0+128)
  2589                           
  2590                           ;doprnt.c: 1158: fval -= (double)val;
  2591     0297  082B               	movf	(sprintf@val+3)^(0+128),w
  2592     0298  1283               	bcf	3,5	;RP0=0, select bank0
  2593     0299  00AB               	movwf	___lltoft@c+3
  2594     029A  1683               	bsf	3,5	;RP0=1, select bank1
  2595     029B  082A               	movf	(sprintf@val+2)^(0+128),w
  2596     029C  1283               	bcf	3,5	;RP0=0, select bank0
  2597     029D  00AA               	movwf	___lltoft@c+2
  2598     029E  1683               	bsf	3,5	;RP0=1, select bank1
  2599     029F  0829               	movf	(sprintf@val+1)^(0+128),w
  2600     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2601     02A1  00A9               	movwf	___lltoft@c+1
  2602     02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2603     02A3  0828               	movf	sprintf@val^(0+128),w
  2604     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2605     02A5  00A8               	movwf	___lltoft@c
  2606     02A6  120A  158A  20A3  120A  118A  	fcall	___lltoft
  2607     02AB  0828               	movf	?___lltoft,w
  2608     02AC  00D6               	movwf	___ftsub@f2
  2609     02AD  0829               	movf	?___lltoft+1,w
  2610     02AE  00D7               	movwf	___ftsub@f2+1
  2611     02AF  082A               	movf	?___lltoft+2,w
  2612     02B0  00D8               	movwf	___ftsub@f2+2
  2613     02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2614     02B2  0833               	movf	sprintf@fval^(0+128),w
  2615     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2616     02B4  00D9               	movwf	___ftsub@f1
  2617     02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2618     02B6  0834               	movf	(sprintf@fval+1)^(0+128),w
  2619     02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2620     02B8  00DA               	movwf	___ftsub@f1+1
  2621     02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2622     02BA  0835               	movf	(sprintf@fval+2)^(0+128),w
  2623     02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2624     02BC  00DB               	movwf	___ftsub@f1+2
  2625     02BD  160A  118A  275B  120A  118A  	fcall	___ftsub
  2626     02C2  0856               	movf	?___ftsub,w
  2627     02C3  1683               	bsf	3,5	;RP0=1, select bank1
  2628     02C4  00B3               	movwf	sprintf@fval^(0+128)
  2629     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2630     02C6  0857               	movf	?___ftsub+1,w
  2631     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2632     02C8  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2633     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2634     02CA  0858               	movf	?___ftsub+2,w
  2635     02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2636     02CC  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2637                           
  2638                           ;doprnt.c: 1159: eexp = 0;
  2639     02CD  01AC               	clrf	sprintf@eexp^(0+128)
  2640     02CE  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2641     02CF                     l2548:
  2642                           
  2643                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2644     02CF  01B6               	clrf	sprintf@c^(0+128)
  2645     02D0  0AB6               	incf	sprintf@c^(0+128),f
  2646     02D1                     l2554:
  2647                           
  2648                           ;doprnt.c: 1163: if(val < dpowers[c])
  2649     02D1  0836               	movf	sprintf@c^(0+128),w
  2650     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2651     02D3  00E0               	movwf	??_sprintf
  2652     02D4  3001               	movlw	1
  2653     02D5                     u3345:
  2654     02D5  1003               	clrc
  2655     02D6  0DE0               	rlf	??_sprintf,f
  2656     02D7  3EFF               	addlw	-1
  2657     02D8  1D03               	skipz
  2658     02D9  2AD5               	goto	u3345
  2659     02DA  1003               	clrc
  2660     02DB  0D60               	rlf	??_sprintf,w
  2661     02DC  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2662     02DD  0084               	movwf	4
  2663     02DE  120A  158A  2000  120A  118A  	fcall	stringdir
  2664     02E3  00E1               	movwf	??_sprintf+1
  2665     02E4  120A  158A  2000  120A  118A  	fcall	stringdir
  2666     02E9  00E2               	movwf	??_sprintf+2
  2667     02EA  120A  158A  2000  120A  118A  	fcall	stringdir
  2668     02EF  00E3               	movwf	??_sprintf+3
  2669     02F0  120A  158A  2000  120A  118A  	fcall	stringdir
  2670     02F5  00E4               	movwf	??_sprintf+4
  2671     02F6  0864               	movf	??_sprintf+4,w
  2672     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2673     02F8  022B               	subwf	(sprintf@val+3)^(0+128),w
  2674     02F9  1D03               	skipz
  2675     02FA  2B0B               	goto	u3355
  2676     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2677     02FC  0863               	movf	??_sprintf+3,w
  2678     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2679     02FE  022A               	subwf	(sprintf@val+2)^(0+128),w
  2680     02FF  1D03               	skipz
  2681     0300  2B0B               	goto	u3355
  2682     0301  1283               	bcf	3,5	;RP0=0, select bank0
  2683     0302  0862               	movf	??_sprintf+2,w
  2684     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2685     0304  0229               	subwf	(sprintf@val+1)^(0+128),w
  2686     0305  1D03               	skipz
  2687     0306  2B0B               	goto	u3355
  2688     0307  1283               	bcf	3,5	;RP0=0, select bank0
  2689     0308  0861               	movf	??_sprintf+1,w
  2690     0309  1683               	bsf	3,5	;RP0=1, select bank1
  2691     030A  0228               	subwf	sprintf@val^(0+128),w
  2692     030B                     u3355:
  2693     030B  1C03               	btfss	3,0
  2694     030C  2B15               	goto	l2562
  2695     030D  3001               	movlw	1
  2696     030E  00FF               	movwf	127
  2697     030F  087F               	movf	127,w
  2698     0310  07B6               	addwf	sprintf@c^(0+128),f
  2699     0311  300A               	movlw	10
  2700     0312  0636               	xorwf	sprintf@c^(0+128),w
  2701     0313  1D03               	btfss	3,2
  2702     0314  2AD1               	goto	l2554
  2703     0315                     l2562:
  2704                           
  2705                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2706     0315  0824               	movf	sprintf@flag^(0+128),w
  2707     0316  3903               	andlw	3
  2708     0317  1903               	btfsc	3,2
  2709     0318  2B22               	goto	l2576
  2710                           
  2711                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2712     0319  0832               	movf	sprintf@sp^(0+128),w
  2713     031A  0084               	movwf	4
  2714     031B  302D               	movlw	45
  2715     031C                     L6:
  2716     031C  1383               	bcf	3,7	;select IRP bank0
  2717     031D  0080               	movwf	0
  2718     031E  3001               	movlw	1
  2719     031F  00FF               	movwf	127
  2720     0320  087F               	movf	127,w
  2721     0321  07B2               	addwf	sprintf@sp^(0+128),f
  2722     0322                     l2576:
  2723     0322  3001               	movlw	1
  2724     0323  02B6               	subwf	sprintf@c^(0+128),f
  2725     0324  0A36               	incf	sprintf@c^(0+128),w
  2726     0325  1903               	btfsc	3,2
  2727     0326  2BB3               	goto	l2584
  2728                           
  2729                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2730     0327  0836               	movf	sprintf@c^(0+128),w
  2731     0328  1283               	bcf	3,5	;RP0=0, select bank0
  2732     0329  00E0               	movwf	??_sprintf
  2733     032A  3001               	movlw	1
  2734     032B                     u3385:
  2735     032B  1003               	clrc
  2736     032C  0DE0               	rlf	??_sprintf,f
  2737     032D  3EFF               	addlw	-1
  2738     032E  1D03               	skipz
  2739     032F  2B2B               	goto	u3385
  2740     0330  1003               	clrc
  2741     0331  0D60               	rlf	??_sprintf,w
  2742     0332  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2743     0333  0084               	movwf	4
  2744     0334  120A  158A  2000  120A  118A  	fcall	stringdir
  2745     0339  00A0               	movwf	___lldiv@divisor
  2746     033A  120A  158A  2000  120A  118A  	fcall	stringdir
  2747     033F  00A1               	movwf	___lldiv@divisor+1
  2748     0340  120A  158A  2000  120A  118A  	fcall	stringdir
  2749     0345  00A2               	movwf	___lldiv@divisor+2
  2750     0346  120A  158A  2000  120A  118A  	fcall	stringdir
  2751     034B  00A3               	movwf	___lldiv@divisor+3
  2752     034C  1683               	bsf	3,5	;RP0=1, select bank1
  2753     034D  082B               	movf	(sprintf@val+3)^(0+128),w
  2754     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2755     034F  00A7               	movwf	___lldiv@dividend+3
  2756     0350  1683               	bsf	3,5	;RP0=1, select bank1
  2757     0351  082A               	movf	(sprintf@val+2)^(0+128),w
  2758     0352  1283               	bcf	3,5	;RP0=0, select bank0
  2759     0353  00A6               	movwf	___lldiv@dividend+2
  2760     0354  1683               	bsf	3,5	;RP0=1, select bank1
  2761     0355  0829               	movf	(sprintf@val+1)^(0+128),w
  2762     0356  1283               	bcf	3,5	;RP0=0, select bank0
  2763     0357  00A5               	movwf	___lldiv@dividend+1
  2764     0358  1683               	bsf	3,5	;RP0=1, select bank1
  2765     0359  0828               	movf	sprintf@val^(0+128),w
  2766     035A  1283               	bcf	3,5	;RP0=0, select bank0
  2767     035B  00A4               	movwf	___lldiv@dividend
  2768     035C  120A  158A  221F  120A  118A  	fcall	___lldiv
  2769     0361  0823               	movf	?___lldiv+3,w
  2770     0362  1683               	bsf	3,5	;RP0=1, select bank1
  2771     0363  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2772     0364  1283               	bcf	3,5	;RP0=0, select bank0
  2773     0365  0822               	movf	?___lldiv+2,w
  2774     0366  1683               	bsf	3,5	;RP0=1, select bank1
  2775     0367  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2776     0368  1283               	bcf	3,5	;RP0=0, select bank0
  2777     0369  0821               	movf	?___lldiv+1,w
  2778     036A  1683               	bsf	3,5	;RP0=1, select bank1
  2779     036B  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2780     036C  1283               	bcf	3,5	;RP0=0, select bank0
  2781     036D  0820               	movf	?___lldiv,w
  2782     036E  1683               	bsf	3,5	;RP0=1, select bank1
  2783     036F  00AE               	movwf	sprintf@tmpval^(0+128)
  2784                           
  2785                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2786     0370  3000               	movlw	0
  2787     0371  1283               	bcf	3,5	;RP0=0, select bank0
  2788     0372  00A3               	movwf	___llmod@divisor+3
  2789     0373  3000               	movlw	0
  2790     0374  00A2               	movwf	___llmod@divisor+2
  2791     0375  3000               	movlw	0
  2792     0376  00A1               	movwf	___llmod@divisor+1
  2793     0377  300A               	movlw	10
  2794     0378  00A0               	movwf	___llmod@divisor
  2795     0379  1683               	bsf	3,5	;RP0=1, select bank1
  2796     037A  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  2797     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2798     037C  00A7               	movwf	___llmod@dividend+3
  2799     037D  1683               	bsf	3,5	;RP0=1, select bank1
  2800     037E  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2801     037F  1283               	bcf	3,5	;RP0=0, select bank0
  2802     0380  00A6               	movwf	___llmod@dividend+2
  2803     0381  1683               	bsf	3,5	;RP0=1, select bank1
  2804     0382  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2805     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2806     0384  00A5               	movwf	___llmod@dividend+1
  2807     0385  1683               	bsf	3,5	;RP0=1, select bank1
  2808     0386  082E               	movf	sprintf@tmpval^(0+128),w
  2809     0387  1283               	bcf	3,5	;RP0=0, select bank0
  2810     0388  00A4               	movwf	___llmod@dividend
  2811     0389  120A  158A  217A  120A  118A  	fcall	___llmod
  2812     038E  0823               	movf	?___llmod+3,w
  2813     038F  1683               	bsf	3,5	;RP0=1, select bank1
  2814     0390  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2815     0391  1283               	bcf	3,5	;RP0=0, select bank0
  2816     0392  0822               	movf	?___llmod+2,w
  2817     0393  1683               	bsf	3,5	;RP0=1, select bank1
  2818     0394  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2819     0395  1283               	bcf	3,5	;RP0=0, select bank0
  2820     0396  0821               	movf	?___llmod+1,w
  2821     0397  1683               	bsf	3,5	;RP0=1, select bank1
  2822     0398  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2823     0399  1283               	bcf	3,5	;RP0=0, select bank0
  2824     039A  0820               	movf	?___llmod,w
  2825     039B  1683               	bsf	3,5	;RP0=1, select bank1
  2826     039C  00AE               	movwf	sprintf@tmpval^(0+128)
  2827                           
  2828                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2829     039D  0832               	movf	sprintf@sp^(0+128),w
  2830     039E  0084               	movwf	4
  2831     039F  082E               	movf	sprintf@tmpval^(0+128),w
  2832     03A0  3E30               	addlw	48
  2833     03A1  2B1C               	goto	L6
  2834     03A2                     l2578:
  2835                           
  2836                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2837     03A2  1683               	bsf	3,5	;RP0=1, select bank1
  2838     03A3  1303               	bcf	3,6	;RP1=0, select bank1
  2839     03A4  0832               	movf	sprintf@sp^(0+128),w
  2840     03A5  0084               	movwf	4
  2841     03A6  3030               	movlw	48
  2842     03A7  1383               	bcf	3,7	;select IRP bank0
  2843     03A8  0080               	movwf	0
  2844     03A9  3001               	movlw	1
  2845     03AA  00FF               	movwf	127
  2846     03AB  087F               	movf	127,w
  2847     03AC  07B2               	addwf	sprintf@sp^(0+128),f
  2848                           
  2849                           ;doprnt.c: 1235: eexp--;
  2850     03AD  30FF               	movlw	255
  2851     03AE  07AC               	addwf	sprintf@eexp^(0+128),f
  2852     03AF  1803               	skipnc
  2853     03B0  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2854     03B1  30FF               	movlw	255
  2855     03B2  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2856     03B3                     l2584:
  2857     03B3  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2858     03B4  3A80               	xorlw	128
  2859     03B5  00FF               	movwf	127
  2860     03B6  3080               	movlw	128
  2861     03B7  027F               	subwf	127,w
  2862     03B8  1D03               	skipz
  2863     03B9  2BBC               	goto	u3405
  2864     03BA  3001               	movlw	1
  2865     03BB  022C               	subwf	sprintf@eexp^(0+128),w
  2866     03BC                     u3405:
  2867     03BC  1803               	skipnc
  2868     03BD  2BA2               	goto	l2578
  2869                           
  2870                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2871     03BE  1683               	bsf	3,5	;RP0=1, select bank1
  2872     03BF  1303               	bcf	3,6	;RP1=0, select bank1
  2873     03C0  0827               	movf	(sprintf@prec+1)^(0+128),w
  2874     03C1  3A80               	xorlw	128
  2875     03C2  00FF               	movwf	127
  2876     03C3  3080               	movlw	128
  2877     03C4  027F               	subwf	127,w
  2878     03C5  1D03               	skipz
  2879     03C6  2BC9               	goto	u3415
  2880     03C7  3009               	movlw	9
  2881     03C8  0226               	subwf	sprintf@prec^(0+128),w
  2882     03C9                     u3415:
  2883     03C9  1C03               	skipc
  2884     03CA  2BCF               	goto	l2590
  2885                           
  2886                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2887     03CB  3008               	movlw	8
  2888     03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2889     03CD  1303               	bcf	3,6	;RP1=0, select bank1
  2890     03CE  2BD2               	goto	L2
  2891     03CF                     l2590:
  2892                           
  2893                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2894     03CF  1683               	bsf	3,5	;RP0=1, select bank1
  2895     03D0  1303               	bcf	3,6	;RP1=0, select bank1
  2896     03D1  0826               	movf	sprintf@prec^(0+128),w
  2897     03D2                     L2:
  2898     03D2  00B6               	movwf	sprintf@c^(0+128)
  2899                           
  2900                           ;doprnt.c: 1241: prec -= (int)c;
  2901     03D3  0836               	movf	sprintf@c^(0+128),w
  2902     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2903     03D5  00E0               	movwf	??_sprintf
  2904     03D6  01E1               	clrf	??_sprintf+1
  2905     03D7  0860               	movf	??_sprintf,w
  2906     03D8  1683               	bsf	3,5	;RP0=1, select bank1
  2907     03D9  02A6               	subwf	sprintf@prec^(0+128),f
  2908     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2909     03DB  0861               	movf	??_sprintf+1,w
  2910     03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2911     03DD  1C03               	skipc
  2912     03DE  03A7               	decf	(sprintf@prec+1)^(0+128),f
  2913     03DF  02A7               	subwf	(sprintf@prec+1)^(0+128),f
  2914                           
  2915                           ;doprnt.c: 1245: if(c)
  2916     03E0  0836               	movf	sprintf@c^(0+128),w
  2917     03E1  1903               	btfsc	3,2
  2918     03E2  2BEC               	goto	l2598
  2919                           
  2920                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2921     03E3  0832               	movf	sprintf@sp^(0+128),w
  2922     03E4  0084               	movwf	4
  2923     03E5  302E               	movlw	46
  2924     03E6  1383               	bcf	3,7	;select IRP bank0
  2925     03E7  0080               	movwf	0
  2926     03E8  3001               	movlw	1
  2927     03E9  00FF               	movwf	127
  2928     03EA  087F               	movf	127,w
  2929     03EB  07B2               	addwf	sprintf@sp^(0+128),f
  2930     03EC                     l2598:
  2931                           
  2932                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2933     03EC  0836               	movf	sprintf@c^(0+128),w
  2934     03ED  120A  118A  2528  120A  118A  	fcall	_scale
  2935     03F2  0840               	movf	?_scale,w
  2936     03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2937     03F4  00A0               	movwf	_sprintf$1259^(0+128)
  2938     03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2939     03F6  0841               	movf	?_scale+1,w
  2940     03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2941     03F8  00A1               	movwf	(_sprintf$1259+1)^(0+128)
  2942     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2943     03FA  0842               	movf	?_scale+2,w
  2944     03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2945     03FC  00A2               	movwf	(_sprintf$1259+2)^(0+128)
  2946                           
  2947                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2948     03FD  0820               	movf	_sprintf$1259^(0+128),w
  2949     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2950     03FF  00B4               	movwf	___ftmul@f2
  2951     0400  1683               	bsf	3,5	;RP0=1, select bank1
  2952     0401  0821               	movf	(_sprintf$1259+1)^(0+128),w
  2953     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2954     0403  00B5               	movwf	___ftmul@f2+1
  2955     0404  1683               	bsf	3,5	;RP0=1, select bank1
  2956     0405  0822               	movf	(_sprintf$1259+2)^(0+128),w
  2957     0406  1283               	bcf	3,5	;RP0=0, select bank0
  2958     0407  00B6               	movwf	___ftmul@f2+2
  2959     0408  1683               	bsf	3,5	;RP0=1, select bank1
  2960     0409  0833               	movf	sprintf@fval^(0+128),w
  2961     040A  1283               	bcf	3,5	;RP0=0, select bank0
  2962     040B  00B1               	movwf	___ftmul@f1
  2963     040C  1683               	bsf	3,5	;RP0=1, select bank1
  2964     040D  0834               	movf	(sprintf@fval+1)^(0+128),w
  2965     040E  1283               	bcf	3,5	;RP0=0, select bank0
  2966     040F  00B2               	movwf	___ftmul@f1+1
  2967     0410  1683               	bsf	3,5	;RP0=1, select bank1
  2968     0411  0835               	movf	(sprintf@fval+2)^(0+128),w
  2969     0412  1283               	bcf	3,5	;RP0=0, select bank0
  2970     0413  00B3               	movwf	___ftmul@f1+2
  2971     0414  120A  158A  240E  120A  118A  	fcall	___ftmul
  2972     0419  0831               	movf	?___ftmul,w
  2973     041A  00C7               	movwf	___fttol@f1
  2974     041B  0832               	movf	?___ftmul+1,w
  2975     041C  00C8               	movwf	___fttol@f1+1
  2976     041D  0833               	movf	?___ftmul+2,w
  2977     041E  00C9               	movwf	___fttol@f1+2
  2978     041F  120A  118A  2780  120A  118A  	fcall	___fttol
  2979     0424  084A               	movf	?___fttol+3,w
  2980     0425  1683               	bsf	3,5	;RP0=1, select bank1
  2981     0426  00AB               	movwf	(sprintf@val+3)^(0+128)
  2982     0427  1283               	bcf	3,5	;RP0=0, select bank0
  2983     0428  0849               	movf	?___fttol+2,w
  2984     0429  1683               	bsf	3,5	;RP0=1, select bank1
  2985     042A  00AA               	movwf	(sprintf@val+2)^(0+128)
  2986     042B  1283               	bcf	3,5	;RP0=0, select bank0
  2987     042C  0848               	movf	?___fttol+1,w
  2988     042D  1683               	bsf	3,5	;RP0=1, select bank1
  2989     042E  00A9               	movwf	(sprintf@val+1)^(0+128)
  2990     042F  1283               	bcf	3,5	;RP0=0, select bank0
  2991     0430  0847               	movf	?___fttol,w
  2992     0431                     L3:
  2993     0431  1683               	bsf	3,5	;RP0=1, select bank1
  2994     0432  00A8               	movwf	sprintf@val^(0+128)
  2995     0433  3001               	movlw	1
  2996     0434  02B6               	subwf	sprintf@c^(0+128),f
  2997     0435  0A36               	incf	sprintf@c^(0+128),w
  2998     0436  1903               	btfsc	3,2
  2999     0437  2D0F               	goto	l2620
  3000                           
  3001                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3002                           
  3003                           ;doprnt.c: 1254: while(c--) {
  3004     0438  0836               	movf	sprintf@c^(0+128),w
  3005     0439  1283               	bcf	3,5	;RP0=0, select bank0
  3006     043A  00E0               	movwf	??_sprintf
  3007     043B  3001               	movlw	1
  3008     043C                     u3435:
  3009     043C  1003               	clrc
  3010     043D  0DE0               	rlf	??_sprintf,f
  3011     043E  3EFF               	addlw	-1
  3012     043F  1D03               	skipz
  3013     0440  2C3C               	goto	u3435
  3014     0441  1003               	clrc
  3015     0442  0D60               	rlf	??_sprintf,w
  3016     0443  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3017     0444  0084               	movwf	4
  3018     0445  120A  158A  2000  120A  118A  	fcall	stringdir
  3019     044A  00A0               	movwf	___lldiv@divisor
  3020     044B  120A  158A  2000  120A  118A  	fcall	stringdir
  3021     0450  00A1               	movwf	___lldiv@divisor+1
  3022     0451  120A  158A  2000  120A  118A  	fcall	stringdir
  3023     0456  00A2               	movwf	___lldiv@divisor+2
  3024     0457  120A  158A  2000  120A  118A  	fcall	stringdir
  3025     045C  00A3               	movwf	___lldiv@divisor+3
  3026     045D  1683               	bsf	3,5	;RP0=1, select bank1
  3027     045E  082B               	movf	(sprintf@val+3)^(0+128),w
  3028     045F  1283               	bcf	3,5	;RP0=0, select bank0
  3029     0460  00A7               	movwf	___lldiv@dividend+3
  3030     0461  1683               	bsf	3,5	;RP0=1, select bank1
  3031     0462  082A               	movf	(sprintf@val+2)^(0+128),w
  3032     0463  1283               	bcf	3,5	;RP0=0, select bank0
  3033     0464  00A6               	movwf	___lldiv@dividend+2
  3034     0465  1683               	bsf	3,5	;RP0=1, select bank1
  3035     0466  0829               	movf	(sprintf@val+1)^(0+128),w
  3036     0467  1283               	bcf	3,5	;RP0=0, select bank0
  3037     0468  00A5               	movwf	___lldiv@dividend+1
  3038     0469  1683               	bsf	3,5	;RP0=1, select bank1
  3039     046A  0828               	movf	sprintf@val^(0+128),w
  3040     046B  1283               	bcf	3,5	;RP0=0, select bank0
  3041     046C  00A4               	movwf	___lldiv@dividend
  3042     046D  120A  158A  221F  120A  118A  	fcall	___lldiv
  3043     0472  0823               	movf	?___lldiv+3,w
  3044     0473  1683               	bsf	3,5	;RP0=1, select bank1
  3045     0474  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3046     0475  1283               	bcf	3,5	;RP0=0, select bank0
  3047     0476  0822               	movf	?___lldiv+2,w
  3048     0477  1683               	bsf	3,5	;RP0=1, select bank1
  3049     0478  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3050     0479  1283               	bcf	3,5	;RP0=0, select bank0
  3051     047A  0821               	movf	?___lldiv+1,w
  3052     047B  1683               	bsf	3,5	;RP0=1, select bank1
  3053     047C  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3054     047D  1283               	bcf	3,5	;RP0=0, select bank0
  3055     047E  0820               	movf	?___lldiv,w
  3056     047F  1683               	bsf	3,5	;RP0=1, select bank1
  3057     0480  00AE               	movwf	sprintf@tmpval^(0+128)
  3058                           
  3059                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3060     0481  3000               	movlw	0
  3061     0482  1283               	bcf	3,5	;RP0=0, select bank0
  3062     0483  00A3               	movwf	___llmod@divisor+3
  3063     0484  3000               	movlw	0
  3064     0485  00A2               	movwf	___llmod@divisor+2
  3065     0486  3000               	movlw	0
  3066     0487  00A1               	movwf	___llmod@divisor+1
  3067     0488  300A               	movlw	10
  3068     0489  00A0               	movwf	___llmod@divisor
  3069     048A  1683               	bsf	3,5	;RP0=1, select bank1
  3070     048B  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  3071     048C  1283               	bcf	3,5	;RP0=0, select bank0
  3072     048D  00A7               	movwf	___llmod@dividend+3
  3073     048E  1683               	bsf	3,5	;RP0=1, select bank1
  3074     048F  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3075     0490  1283               	bcf	3,5	;RP0=0, select bank0
  3076     0491  00A6               	movwf	___llmod@dividend+2
  3077     0492  1683               	bsf	3,5	;RP0=1, select bank1
  3078     0493  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3079     0494  1283               	bcf	3,5	;RP0=0, select bank0
  3080     0495  00A5               	movwf	___llmod@dividend+1
  3081     0496  1683               	bsf	3,5	;RP0=1, select bank1
  3082     0497  082E               	movf	sprintf@tmpval^(0+128),w
  3083     0498  1283               	bcf	3,5	;RP0=0, select bank0
  3084     0499  00A4               	movwf	___llmod@dividend
  3085     049A  120A  158A  217A  120A  118A  	fcall	___llmod
  3086     049F  0823               	movf	?___llmod+3,w
  3087     04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3088     04A1  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3089     04A2  1283               	bcf	3,5	;RP0=0, select bank0
  3090     04A3  0822               	movf	?___llmod+2,w
  3091     04A4  1683               	bsf	3,5	;RP0=1, select bank1
  3092     04A5  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3093     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3094     04A7  0821               	movf	?___llmod+1,w
  3095     04A8  1683               	bsf	3,5	;RP0=1, select bank1
  3096     04A9  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3097     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3098     04AB  0820               	movf	?___llmod,w
  3099     04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3100     04AD  00AE               	movwf	sprintf@tmpval^(0+128)
  3101                           
  3102                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  3103     04AE  0832               	movf	sprintf@sp^(0+128),w
  3104     04AF  0084               	movwf	4
  3105     04B0  082E               	movf	sprintf@tmpval^(0+128),w
  3106     04B1  3E30               	addlw	48
  3107     04B2  1383               	bcf	3,7	;select IRP bank0
  3108     04B3  0080               	movwf	0
  3109     04B4  3001               	movlw	1
  3110     04B5  00FF               	movwf	127
  3111     04B6  087F               	movf	127,w
  3112     04B7  07B2               	addwf	sprintf@sp^(0+128),f
  3113                           
  3114                           ;doprnt.c: 1258: val %= dpowers[c];
  3115     04B8  0836               	movf	sprintf@c^(0+128),w
  3116     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3117     04BA  00E0               	movwf	??_sprintf
  3118     04BB  3001               	movlw	1
  3119     04BC                     u3445:
  3120     04BC  1003               	clrc
  3121     04BD  0DE0               	rlf	??_sprintf,f
  3122     04BE  3EFF               	addlw	-1
  3123     04BF  1D03               	skipz
  3124     04C0  2CBC               	goto	u3445
  3125     04C1  1003               	clrc
  3126     04C2  0D60               	rlf	??_sprintf,w
  3127     04C3  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3128     04C4  0084               	movwf	4
  3129     04C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3130     04CA  00A0               	movwf	___llmod@divisor
  3131     04CB  120A  158A  2000  120A  118A  	fcall	stringdir
  3132     04D0  00A1               	movwf	___llmod@divisor+1
  3133     04D1  120A  158A  2000  120A  118A  	fcall	stringdir
  3134     04D6  00A2               	movwf	___llmod@divisor+2
  3135     04D7  120A  158A  2000  120A  118A  	fcall	stringdir
  3136     04DC  00A3               	movwf	___llmod@divisor+3
  3137     04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3138     04DE  082B               	movf	(sprintf@val+3)^(0+128),w
  3139     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3140     04E0  00A7               	movwf	___llmod@dividend+3
  3141     04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3142     04E2  082A               	movf	(sprintf@val+2)^(0+128),w
  3143     04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3144     04E4  00A6               	movwf	___llmod@dividend+2
  3145     04E5  1683               	bsf	3,5	;RP0=1, select bank1
  3146     04E6  0829               	movf	(sprintf@val+1)^(0+128),w
  3147     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3148     04E8  00A5               	movwf	___llmod@dividend+1
  3149     04E9  1683               	bsf	3,5	;RP0=1, select bank1
  3150     04EA  0828               	movf	sprintf@val^(0+128),w
  3151     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3152     04EC  00A4               	movwf	___llmod@dividend
  3153     04ED  120A  158A  217A  120A  118A  	fcall	___llmod
  3154     04F2  0823               	movf	?___llmod+3,w
  3155     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3156     04F4  00AB               	movwf	(sprintf@val+3)^(0+128)
  3157     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  3158     04F6  0822               	movf	?___llmod+2,w
  3159     04F7  1683               	bsf	3,5	;RP0=1, select bank1
  3160     04F8  00AA               	movwf	(sprintf@val+2)^(0+128)
  3161     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3162     04FA  0821               	movf	?___llmod+1,w
  3163     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3164     04FC  00A9               	movwf	(sprintf@val+1)^(0+128)
  3165     04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3166     04FE  0820               	movf	?___llmod,w
  3167     04FF  2C31               	goto	L3
  3168     0500                     l2614:
  3169                           
  3170                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  3171     0500  0832               	movf	sprintf@sp^(0+128),w
  3172     0501  0084               	movwf	4
  3173     0502  3030               	movlw	48
  3174     0503  1383               	bcf	3,7	;select IRP bank0
  3175     0504  0080               	movwf	0
  3176     0505  3001               	movlw	1
  3177     0506  00FF               	movwf	127
  3178     0507  087F               	movf	127,w
  3179     0508  07B2               	addwf	sprintf@sp^(0+128),f
  3180                           
  3181                           ;doprnt.c: 1263: prec--;
  3182     0509  30FF               	movlw	255
  3183     050A  07A6               	addwf	sprintf@prec^(0+128),f
  3184     050B  1803               	skipnc
  3185     050C  0AA7               	incf	(sprintf@prec+1)^(0+128),f
  3186     050D  30FF               	movlw	255
  3187     050E  07A7               	addwf	(sprintf@prec+1)^(0+128),f
  3188     050F                     l2620:
  3189     050F  0826               	movf	sprintf@prec^(0+128),w
  3190     0510  0427               	iorwf	(sprintf@prec+1)^(0+128),w
  3191     0511  1903               	btfsc	3,2
  3192     0512  2841               	goto	l2628
  3193     0513  2D00               	goto	l2614
  3194     0514                     l2622:
  3195                           
  3196                           ;doprnt.c: 1272: };doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3197     0514  1683               	bsf	3,5	;RP0=1, select bank1
  3198     0515  0824               	movf	sprintf@flag^(0+128),w
  3199     0516  3903               	andlw	3
  3200     0517  1903               	btfsc	3,2
  3201     0518  2841               	goto	l2628
  3202                           
  3203                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3204     0519  0832               	movf	sprintf@sp^(0+128),w
  3205     051A  0084               	movwf	4
  3206     051B  302D               	movlw	45
  3207     051C                     L4:
  3208     051C  1383               	bcf	3,7	;select IRP bank0
  3209     051D  0080               	movwf	0
  3210     051E  3001               	movlw	1
  3211     051F  00FF               	movwf	127
  3212     0520  087F               	movf	127,w
  3213     0521  07B2               	addwf	sprintf@sp^(0+128),f
  3214     0522  2841               	goto	l2628
  3215     0523                     l2630:
  3216                           
  3217                           ;doprnt.c: 1564: *sp = 0;
  3218     0523  0832               	movf	sprintf@sp^(0+128),w
  3219     0524  0084               	movwf	4
  3220     0525  1383               	bcf	3,7	;select IRP bank0
  3221     0526  0180               	clrf	0
  3222     0527  0008               	return
  3223     0528                     __end_of_sprintf:
  3224                           
  3225                           	psect	text6
  3226     0528                     __ptext6:	
  3227 ;; *************** function _scale *****************
  3228 ;; Defined at:
  3229 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  scl             1    wreg     char 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  scl             1   38[BANK0 ] char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  3   32[BANK0 ] char 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 300/100
  3240 ;;		On exit  : 300/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3243 ;;      Params:         0       3       0       0       0
  3244 ;;      Locals:         0       4       0       0       0
  3245 ;;      Temps:          0       0       0       0       0
  3246 ;;      Totals:         0       7       0       0       0
  3247 ;;Total ram usage:        7 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; Hardware stack levels required when called: 3
  3250 ;; This function calls:
  3251 ;;		___awdiv
  3252 ;;		___awmod
  3253 ;;		___bmul
  3254 ;;		___ftmul
  3255 ;; This function is called by:
  3256 ;;		_sprintf
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260     0528                     _scale:	
  3261                           ;psect for function _scale
  3262                           
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3266                           ;scale@scl stored from wreg
  3267     0528  1283               	bcf	3,5	;RP0=0, select bank0
  3268     0529  00C6               	movwf	scale@scl
  3269                           
  3270                           ;doprnt.c: 436: if(scl < 0) {
  3271     052A  1FC6               	btfss	scale@scl,7
  3272     052B  2E57               	goto	l2132
  3273                           
  3274                           ;doprnt.c: 437: scl = -scl;
  3275     052C  09C6               	comf	scale@scl,f
  3276     052D  0AC6               	incf	scale@scl,f
  3277                           
  3278                           ;doprnt.c: 438: if(scl>=110)
  3279     052E  0846               	movf	scale@scl,w
  3280     052F  3A80               	xorlw	128
  3281     0530  3E12               	addlw	-238
  3282     0531  1C03               	skipc
  3283     0532  2DD9               	goto	l2122
  3284                           
  3285                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3286     0533  3003               	movlw	3
  3287     0534  00AE               	movwf	___bmul@multiplicand
  3288     0535  0846               	movf	scale@scl,w
  3289     0536  00A2               	movwf	___awmod@dividend
  3290     0537  01A3               	clrf	___awmod@dividend+1
  3291     0538  1BA2               	btfsc	___awmod@dividend,7
  3292     0539  03A3               	decf	___awmod@dividend+1,f
  3293     053A  3064               	movlw	100
  3294     053B  00A0               	movwf	___awmod@divisor
  3295     053C  3000               	movlw	0
  3296     053D  00A1               	movwf	___awmod@divisor+1
  3297     053E  120A  158A  212F  120A  118A  	fcall	___awmod
  3298     0543  0821               	movf	?___awmod+1,w
  3299     0544  00A9               	movwf	___awdiv@dividend+1
  3300     0545  0820               	movf	?___awmod,w
  3301     0546  00A8               	movwf	___awdiv@dividend
  3302     0547  300A               	movlw	10
  3303     0548  00A6               	movwf	___awdiv@divisor
  3304     0549  3000               	movlw	0
  3305     054A  00A7               	movwf	___awdiv@divisor+1
  3306     054B  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3307     0550  0826               	movf	?___awdiv,w
  3308     0551  160A  118A  26F7  120A  118A  	fcall	___bmul
  3309     0556  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3310     0557  0084               	movwf	4
  3311     0558  120A  158A  2000  120A  118A  	fcall	stringdir
  3312     055D  00B1               	movwf	___ftmul@f1
  3313     055E  120A  158A  2000  120A  118A  	fcall	stringdir
  3314     0563  00B2               	movwf	___ftmul@f1+1
  3315     0564  120A  158A  2000  120A  118A  	fcall	stringdir
  3316     0569  00B3               	movwf	___ftmul@f1+2
  3317     056A  3003               	movlw	3
  3318     056B  00AE               	movwf	___bmul@multiplicand
  3319     056C  0846               	movf	scale@scl,w
  3320     056D  00A8               	movwf	___awdiv@dividend
  3321     056E  01A9               	clrf	___awdiv@dividend+1
  3322     056F  1BA8               	btfsc	___awdiv@dividend,7
  3323     0570  03A9               	decf	___awdiv@dividend+1,f
  3324     0571  3064               	movlw	100
  3325     0572  00A6               	movwf	___awdiv@divisor
  3326     0573  3000               	movlw	0
  3327     0574  00A7               	movwf	___awdiv@divisor+1
  3328     0575  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3329     057A  0826               	movf	?___awdiv,w
  3330     057B  160A  118A  26F7  120A  118A  	fcall	___bmul
  3331     0580  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3332     0581  0084               	movwf	4
  3333     0582  120A  158A  2000  120A  118A  	fcall	stringdir
  3334     0587  00B4               	movwf	___ftmul@f2
  3335     0588  120A  158A  2000  120A  118A  	fcall	stringdir
  3336     058D  00B5               	movwf	___ftmul@f2+1
  3337     058E  120A  158A  2000  120A  118A  	fcall	stringdir
  3338     0593  00B6               	movwf	___ftmul@f2+2
  3339     0594  120A  158A  240E  120A  118A  	fcall	___ftmul
  3340     0599  0831               	movf	?___ftmul,w
  3341     059A  00C3               	movwf	_scale$1258
  3342     059B  0832               	movf	?___ftmul+1,w
  3343     059C  00C4               	movwf	_scale$1258+1
  3344     059D  0833               	movf	?___ftmul+2,w
  3345     059E  00C5               	movwf	_scale$1258+2
  3346                           
  3347                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3348     059F  3003               	movlw	3
  3349     05A0  00AE               	movwf	___bmul@multiplicand
  3350     05A1  0846               	movf	scale@scl,w
  3351     05A2  00A2               	movwf	___awmod@dividend
  3352     05A3  01A3               	clrf	___awmod@dividend+1
  3353     05A4  1BA2               	btfsc	___awmod@dividend,7
  3354     05A5  03A3               	decf	___awmod@dividend+1,f
  3355     05A6  300A               	movlw	10
  3356     05A7  00A0               	movwf	___awmod@divisor
  3357     05A8  3000               	movlw	0
  3358     05A9  00A1               	movwf	___awmod@divisor+1
  3359     05AA  120A  158A  212F  120A  118A  	fcall	___awmod
  3360     05AF  0820               	movf	?___awmod,w
  3361     05B0  160A  118A  26F7  120A  118A  	fcall	___bmul
  3362     05B5  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3363     05B6  0084               	movwf	4
  3364     05B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3365     05BC  00B1               	movwf	___ftmul@f1
  3366     05BD  120A  158A  2000  120A  118A  	fcall	stringdir
  3367     05C2  00B2               	movwf	___ftmul@f1+1
  3368     05C3  120A  158A  2000  120A  118A  	fcall	stringdir
  3369     05C8  00B3               	movwf	___ftmul@f1+2
  3370     05C9  0843               	movf	_scale$1258,w
  3371     05CA  00B4               	movwf	___ftmul@f2
  3372     05CB  0844               	movf	_scale$1258+1,w
  3373     05CC  00B5               	movwf	___ftmul@f2+1
  3374     05CD  0845               	movf	_scale$1258+2,w
  3375     05CE  00B6               	movwf	___ftmul@f2+2
  3376     05CF  120A  158A  240E   	fcall	___ftmul
  3377     05D2  0831               	movf	?___ftmul,w
  3378     05D3  00C0               	movwf	?_scale
  3379     05D4  0832               	movf	?___ftmul+1,w
  3380     05D5  00C1               	movwf	?_scale+1
  3381     05D6  0833               	movf	?___ftmul+2,w
  3382     05D7  00C2               	movwf	?_scale+2
  3383     05D8  0008               	return
  3384     05D9                     l2122:
  3385                           
  3386                           ;doprnt.c: 440: else if(scl > 10)
  3387     05D9  0846               	movf	scale@scl,w
  3388     05DA  3A80               	xorlw	128
  3389     05DB  3E75               	addlw	-139
  3390     05DC  1C03               	skipc
  3391     05DD  2E3C               	goto	l2128
  3392                           
  3393                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3394     05DE  3003               	movlw	3
  3395     05DF  00AE               	movwf	___bmul@multiplicand
  3396     05E0  0846               	movf	scale@scl,w
  3397     05E1  00A2               	movwf	___awmod@dividend
  3398     05E2  01A3               	clrf	___awmod@dividend+1
  3399     05E3  1BA2               	btfsc	___awmod@dividend,7
  3400     05E4  03A3               	decf	___awmod@dividend+1,f
  3401     05E5  300A               	movlw	10
  3402     05E6  00A0               	movwf	___awmod@divisor
  3403     05E7  3000               	movlw	0
  3404     05E8  00A1               	movwf	___awmod@divisor+1
  3405     05E9  120A  158A  212F  120A  118A  	fcall	___awmod
  3406     05EE  0820               	movf	?___awmod,w
  3407     05EF  160A  118A  26F7  120A  118A  	fcall	___bmul
  3408     05F4  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3409     05F5  0084               	movwf	4
  3410     05F6  120A  158A  2000  120A  118A  	fcall	stringdir
  3411     05FB  00B1               	movwf	___ftmul@f1
  3412     05FC  120A  158A  2000  120A  118A  	fcall	stringdir
  3413     0601  00B2               	movwf	___ftmul@f1+1
  3414     0602  120A  158A  2000  120A  118A  	fcall	stringdir
  3415     0607  00B3               	movwf	___ftmul@f1+2
  3416     0608  3003               	movlw	3
  3417     0609  00AE               	movwf	___bmul@multiplicand
  3418     060A  0846               	movf	scale@scl,w
  3419     060B  00A8               	movwf	___awdiv@dividend
  3420     060C  01A9               	clrf	___awdiv@dividend+1
  3421     060D  1BA8               	btfsc	___awdiv@dividend,7
  3422     060E  03A9               	decf	___awdiv@dividend+1,f
  3423     060F  300A               	movlw	10
  3424     0610  00A6               	movwf	___awdiv@divisor
  3425     0611  3000               	movlw	0
  3426     0612  00A7               	movwf	___awdiv@divisor+1
  3427     0613  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3428     0618  0826               	movf	?___awdiv,w
  3429     0619  160A  118A  26F7  120A  118A  	fcall	___bmul
  3430     061E  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3431     061F  0084               	movwf	4
  3432     0620  120A  158A  2000  120A  118A  	fcall	stringdir
  3433     0625  00B4               	movwf	___ftmul@f2
  3434     0626  120A  158A  2000  120A  118A  	fcall	stringdir
  3435     062B  00B5               	movwf	___ftmul@f2+1
  3436     062C  120A  158A  2000  120A  118A  	fcall	stringdir
  3437     0631  00B6               	movwf	___ftmul@f2+2
  3438     0632  120A  158A  240E   	fcall	___ftmul
  3439     0635  0831               	movf	?___ftmul,w
  3440     0636  00C0               	movwf	?_scale
  3441     0637  0832               	movf	?___ftmul+1,w
  3442     0638  00C1               	movwf	?_scale+1
  3443     0639  0833               	movf	?___ftmul+2,w
  3444     063A  00C2               	movwf	?_scale+2
  3445     063B  0008               	return
  3446     063C                     l2128:
  3447                           
  3448                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3449     063C  3003               	movlw	3
  3450     063D  00AE               	movwf	___bmul@multiplicand
  3451     063E  0846               	movf	scale@scl,w
  3452     063F  160A  118A  26F7  120A  118A  	fcall	___bmul
  3453     0644  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3454     0645  0084               	movwf	4
  3455     0646  120A  158A  2000  120A  118A  	fcall	stringdir
  3456     064B  00C0               	movwf	?_scale
  3457     064C  120A  158A  2000  120A  118A  	fcall	stringdir
  3458     0651  00C1               	movwf	?_scale+1
  3459     0652  120A  158A  2000   	fcall	stringdir
  3460     0655  00C2               	movwf	?_scale+2
  3461     0656  0008               	return
  3462     0657                     l2132:
  3463                           
  3464                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3465     0657  0846               	movf	scale@scl,w
  3466     0658  3A80               	xorlw	128
  3467     0659  3E12               	addlw	-238
  3468     065A  1C03               	skipc
  3469     065B  2F02               	goto	l2140
  3470                           
  3471                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3472     065C  3003               	movlw	3
  3473     065D  00AE               	movwf	___bmul@multiplicand
  3474     065E  0846               	movf	scale@scl,w
  3475     065F  00A2               	movwf	___awmod@dividend
  3476     0660  01A3               	clrf	___awmod@dividend+1
  3477     0661  1BA2               	btfsc	___awmod@dividend,7
  3478     0662  03A3               	decf	___awmod@dividend+1,f
  3479     0663  3064               	movlw	100
  3480     0664  00A0               	movwf	___awmod@divisor
  3481     0665  3000               	movlw	0
  3482     0666  00A1               	movwf	___awmod@divisor+1
  3483     0667  120A  158A  212F  120A  118A  	fcall	___awmod
  3484     066C  0821               	movf	?___awmod+1,w
  3485     066D  00A9               	movwf	___awdiv@dividend+1
  3486     066E  0820               	movf	?___awmod,w
  3487     066F  00A8               	movwf	___awdiv@dividend
  3488     0670  300A               	movlw	10
  3489     0671  00A6               	movwf	___awdiv@divisor
  3490     0672  3000               	movlw	0
  3491     0673  00A7               	movwf	___awdiv@divisor+1
  3492     0674  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3493     0679  0826               	movf	?___awdiv,w
  3494     067A  160A  118A  26F7  120A  118A  	fcall	___bmul
  3495     067F  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3496     0680  0084               	movwf	4
  3497     0681  120A  158A  2000  120A  118A  	fcall	stringdir
  3498     0686  00B1               	movwf	___ftmul@f1
  3499     0687  120A  158A  2000  120A  118A  	fcall	stringdir
  3500     068C  00B2               	movwf	___ftmul@f1+1
  3501     068D  120A  158A  2000  120A  118A  	fcall	stringdir
  3502     0692  00B3               	movwf	___ftmul@f1+2
  3503     0693  3003               	movlw	3
  3504     0694  00AE               	movwf	___bmul@multiplicand
  3505     0695  0846               	movf	scale@scl,w
  3506     0696  00A8               	movwf	___awdiv@dividend
  3507     0697  01A9               	clrf	___awdiv@dividend+1
  3508     0698  1BA8               	btfsc	___awdiv@dividend,7
  3509     0699  03A9               	decf	___awdiv@dividend+1,f
  3510     069A  3064               	movlw	100
  3511     069B  00A6               	movwf	___awdiv@divisor
  3512     069C  3000               	movlw	0
  3513     069D  00A7               	movwf	___awdiv@divisor+1
  3514     069E  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3515     06A3  0826               	movf	?___awdiv,w
  3516     06A4  160A  118A  26F7  120A  118A  	fcall	___bmul
  3517     06A9  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  3518     06AA  0084               	movwf	4
  3519     06AB  120A  158A  2000  120A  118A  	fcall	stringdir
  3520     06B0  00B4               	movwf	___ftmul@f2
  3521     06B1  120A  158A  2000  120A  118A  	fcall	stringdir
  3522     06B6  00B5               	movwf	___ftmul@f2+1
  3523     06B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3524     06BC  00B6               	movwf	___ftmul@f2+2
  3525     06BD  120A  158A  240E  120A  118A  	fcall	___ftmul
  3526     06C2  0831               	movf	?___ftmul,w
  3527     06C3  00C3               	movwf	_scale$1258
  3528     06C4  0832               	movf	?___ftmul+1,w
  3529     06C5  00C4               	movwf	_scale$1258+1
  3530     06C6  0833               	movf	?___ftmul+2,w
  3531     06C7  00C5               	movwf	_scale$1258+2
  3532                           
  3533                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3534     06C8  3003               	movlw	3
  3535     06C9  00AE               	movwf	___bmul@multiplicand
  3536     06CA  0846               	movf	scale@scl,w
  3537     06CB  00A2               	movwf	___awmod@dividend
  3538     06CC  01A3               	clrf	___awmod@dividend+1
  3539     06CD  1BA2               	btfsc	___awmod@dividend,7
  3540     06CE  03A3               	decf	___awmod@dividend+1,f
  3541     06CF  300A               	movlw	10
  3542     06D0  00A0               	movwf	___awmod@divisor
  3543     06D1  3000               	movlw	0
  3544     06D2  00A1               	movwf	___awmod@divisor+1
  3545     06D3  120A  158A  212F  120A  118A  	fcall	___awmod
  3546     06D8  0820               	movf	?___awmod,w
  3547     06D9  160A  118A  26F7  120A  118A  	fcall	___bmul
  3548     06DE  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3549     06DF  0084               	movwf	4
  3550     06E0  120A  158A  2000  120A  118A  	fcall	stringdir
  3551     06E5  00B1               	movwf	___ftmul@f1
  3552     06E6  120A  158A  2000  120A  118A  	fcall	stringdir
  3553     06EB  00B2               	movwf	___ftmul@f1+1
  3554     06EC  120A  158A  2000  120A  118A  	fcall	stringdir
  3555     06F1  00B3               	movwf	___ftmul@f1+2
  3556     06F2  0843               	movf	_scale$1258,w
  3557     06F3  00B4               	movwf	___ftmul@f2
  3558     06F4  0844               	movf	_scale$1258+1,w
  3559     06F5  00B5               	movwf	___ftmul@f2+1
  3560     06F6  0845               	movf	_scale$1258+2,w
  3561     06F7  00B6               	movwf	___ftmul@f2+2
  3562     06F8  120A  158A  240E   	fcall	___ftmul
  3563     06FB  0831               	movf	?___ftmul,w
  3564     06FC  00C0               	movwf	?_scale
  3565     06FD  0832               	movf	?___ftmul+1,w
  3566     06FE  00C1               	movwf	?_scale+1
  3567     06FF  0833               	movf	?___ftmul+2,w
  3568     0700  00C2               	movwf	?_scale+2
  3569     0701  0008               	return
  3570     0702                     l2140:
  3571                           
  3572                           ;doprnt.c: 446: else if(scl > 10)
  3573     0702  0846               	movf	scale@scl,w
  3574     0703  3A80               	xorlw	128
  3575     0704  3E75               	addlw	-139
  3576     0705  1C03               	skipc
  3577     0706  2F65               	goto	l2146
  3578                           
  3579                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3580     0707  3003               	movlw	3
  3581     0708  00AE               	movwf	___bmul@multiplicand
  3582     0709  0846               	movf	scale@scl,w
  3583     070A  00A2               	movwf	___awmod@dividend
  3584     070B  01A3               	clrf	___awmod@dividend+1
  3585     070C  1BA2               	btfsc	___awmod@dividend,7
  3586     070D  03A3               	decf	___awmod@dividend+1,f
  3587     070E  300A               	movlw	10
  3588     070F  00A0               	movwf	___awmod@divisor
  3589     0710  3000               	movlw	0
  3590     0711  00A1               	movwf	___awmod@divisor+1
  3591     0712  120A  158A  212F  120A  118A  	fcall	___awmod
  3592     0717  0820               	movf	?___awmod,w
  3593     0718  160A  118A  26F7  120A  118A  	fcall	___bmul
  3594     071D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3595     071E  0084               	movwf	4
  3596     071F  120A  158A  2000  120A  118A  	fcall	stringdir
  3597     0724  00B1               	movwf	___ftmul@f1
  3598     0725  120A  158A  2000  120A  118A  	fcall	stringdir
  3599     072A  00B2               	movwf	___ftmul@f1+1
  3600     072B  120A  158A  2000  120A  118A  	fcall	stringdir
  3601     0730  00B3               	movwf	___ftmul@f1+2
  3602     0731  3003               	movlw	3
  3603     0732  00AE               	movwf	___bmul@multiplicand
  3604     0733  0846               	movf	scale@scl,w
  3605     0734  00A8               	movwf	___awdiv@dividend
  3606     0735  01A9               	clrf	___awdiv@dividend+1
  3607     0736  1BA8               	btfsc	___awdiv@dividend,7
  3608     0737  03A9               	decf	___awdiv@dividend+1,f
  3609     0738  300A               	movlw	10
  3610     0739  00A6               	movwf	___awdiv@divisor
  3611     073A  3000               	movlw	0
  3612     073B  00A7               	movwf	___awdiv@divisor+1
  3613     073C  120A  158A  21C6  120A  118A  	fcall	___awdiv
  3614     0741  0826               	movf	?___awdiv,w
  3615     0742  160A  118A  26F7  120A  118A  	fcall	___bmul
  3616     0747  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3617     0748  0084               	movwf	4
  3618     0749  120A  158A  2000  120A  118A  	fcall	stringdir
  3619     074E  00B4               	movwf	___ftmul@f2
  3620     074F  120A  158A  2000  120A  118A  	fcall	stringdir
  3621     0754  00B5               	movwf	___ftmul@f2+1
  3622     0755  120A  158A  2000  120A  118A  	fcall	stringdir
  3623     075A  00B6               	movwf	___ftmul@f2+2
  3624     075B  120A  158A  240E   	fcall	___ftmul
  3625     075E  0831               	movf	?___ftmul,w
  3626     075F  00C0               	movwf	?_scale
  3627     0760  0832               	movf	?___ftmul+1,w
  3628     0761  00C1               	movwf	?_scale+1
  3629     0762  0833               	movf	?___ftmul+2,w
  3630     0763  00C2               	movwf	?_scale+2
  3631     0764  0008               	return
  3632     0765                     l2146:
  3633                           
  3634                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3635     0765  3003               	movlw	3
  3636     0766  00AE               	movwf	___bmul@multiplicand
  3637     0767  0846               	movf	scale@scl,w
  3638     0768  160A  118A  26F7  120A  118A  	fcall	___bmul
  3639     076D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3640     076E  0084               	movwf	4
  3641     076F  120A  158A  2000  120A  118A  	fcall	stringdir
  3642     0774  00C0               	movwf	?_scale
  3643     0775  120A  158A  2000  120A  118A  	fcall	stringdir
  3644     077A  00C1               	movwf	?_scale+1
  3645     077B  120A  158A  2000   	fcall	stringdir
  3646     077E  00C2               	movwf	?_scale+2
  3647     077F  0008               	return
  3648     0780                     __end_of_scale:
  3649                           
  3650                           	psect	text7
  3651     092F                     __ptext7:	
  3652 ;; *************** function ___awmod *****************
  3653 ;; Defined at:
  3654 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  divisor         2    0[BANK0 ] int 
  3657 ;;  dividend        2    2[BANK0 ] int 
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  sign            1    5[BANK0 ] unsigned char 
  3660 ;;  counter         1    4[BANK0 ] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    0[BANK0 ] int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, btemp+1
  3665 ;; Tracked objects:
  3666 ;;		On entry : 300/0
  3667 ;;		On exit  : 300/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3670 ;;      Params:         0       4       0       0       0
  3671 ;;      Locals:         0       2       0       0       0
  3672 ;;      Temps:          0       0       0       0       0
  3673 ;;      Totals:         0       6       0       0       0
  3674 ;;Total ram usage:        6 bytes
  3675 ;; Hardware stack levels used: 1
  3676 ;; Hardware stack levels required when called: 1
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_scale
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684     092F                     ___awmod:	
  3685                           ;psect for function ___awmod
  3686                           
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  3690     092F  01A5               	clrf	___awmod@sign
  3691     0930  1FA3               	btfss	___awmod@dividend+1,7
  3692     0931  2939               	goto	l1878
  3693     0932  09A2               	comf	___awmod@dividend,f
  3694     0933  09A3               	comf	___awmod@dividend+1,f
  3695     0934  0AA2               	incf	___awmod@dividend,f
  3696     0935  1903               	skipnz
  3697     0936  0AA3               	incf	___awmod@dividend+1,f
  3698     0937  01A5               	clrf	___awmod@sign
  3699     0938  0AA5               	incf	___awmod@sign,f
  3700     0939                     l1878:
  3701     0939  1FA1               	btfss	___awmod@divisor+1,7
  3702     093A  2940               	goto	l1882
  3703     093B  09A0               	comf	___awmod@divisor,f
  3704     093C  09A1               	comf	___awmod@divisor+1,f
  3705     093D  0AA0               	incf	___awmod@divisor,f
  3706     093E  1903               	skipnz
  3707     093F  0AA1               	incf	___awmod@divisor+1,f
  3708     0940                     l1882:
  3709     0940  0820               	movf	___awmod@divisor,w
  3710     0941  0421               	iorwf	___awmod@divisor+1,w
  3711     0942  1903               	btfsc	3,2
  3712     0943  296D               	goto	l1900
  3713     0944  01A4               	clrf	___awmod@counter
  3714     0945  0AA4               	incf	___awmod@counter,f
  3715     0946                     l1890:
  3716     0946  1BA1               	btfsc	___awmod@divisor+1,7
  3717     0947  2954               	goto	l1892
  3718     0948  3001               	movlw	1
  3719     0949                     u2045:
  3720     0949  1003               	clrc
  3721     094A  0DA0               	rlf	___awmod@divisor,f
  3722     094B  0DA1               	rlf	___awmod@divisor+1,f
  3723     094C  3EFF               	addlw	-1
  3724     094D  1D03               	skipz
  3725     094E  2949               	goto	u2045
  3726     094F  3001               	movlw	1
  3727     0950  00FF               	movwf	127
  3728     0951  087F               	movf	127,w
  3729     0952  07A4               	addwf	___awmod@counter,f
  3730     0953  2946               	goto	l1890
  3731     0954                     l1892:
  3732     0954  0821               	movf	___awmod@divisor+1,w
  3733     0955  0223               	subwf	___awmod@dividend+1,w
  3734     0956  1D03               	skipz
  3735     0957  295A               	goto	u2065
  3736     0958  0820               	movf	___awmod@divisor,w
  3737     0959  0222               	subwf	___awmod@dividend,w
  3738     095A                     u2065:
  3739     095A  1C03               	skipc
  3740     095B  2962               	goto	l1896
  3741     095C  0820               	movf	___awmod@divisor,w
  3742     095D  02A2               	subwf	___awmod@dividend,f
  3743     095E  0821               	movf	___awmod@divisor+1,w
  3744     095F  1C03               	skipc
  3745     0960  03A3               	decf	___awmod@dividend+1,f
  3746     0961  02A3               	subwf	___awmod@dividend+1,f
  3747     0962                     l1896:
  3748     0962  3001               	movlw	1
  3749     0963                     u2075:
  3750     0963  1003               	clrc
  3751     0964  0CA1               	rrf	___awmod@divisor+1,f
  3752     0965  0CA0               	rrf	___awmod@divisor,f
  3753     0966  3EFF               	addlw	-1
  3754     0967  1D03               	skipz
  3755     0968  2963               	goto	u2075
  3756     0969  3001               	movlw	1
  3757     096A  02A4               	subwf	___awmod@counter,f
  3758     096B  1D03               	btfss	3,2
  3759     096C  2954               	goto	l1892
  3760     096D                     l1900:
  3761     096D  0825               	movf	___awmod@sign,w
  3762     096E  1903               	btfsc	3,2
  3763     096F  2975               	goto	l1904
  3764     0970  09A2               	comf	___awmod@dividend,f
  3765     0971  09A3               	comf	___awmod@dividend+1,f
  3766     0972  0AA2               	incf	___awmod@dividend,f
  3767     0973  1903               	skipnz
  3768     0974  0AA3               	incf	___awmod@dividend+1,f
  3769     0975                     l1904:
  3770     0975  0823               	movf	___awmod@dividend+1,w
  3771     0976  00A1               	movwf	?___awmod+1
  3772     0977  0822               	movf	___awmod@dividend,w
  3773     0978  00A0               	movwf	?___awmod
  3774     0979  0008               	return
  3775     097A                     __end_of___awmod:
  3776                           
  3777                           	psect	text8
  3778     09C6                     __ptext8:	
  3779 ;; *************** function ___awdiv *****************
  3780 ;; Defined at:
  3781 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  divisor         2    6[BANK0 ] int 
  3784 ;;  dividend        2    8[BANK0 ] int 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  quotient        2   12[BANK0 ] int 
  3787 ;;  sign            1   11[BANK0 ] unsigned char 
  3788 ;;  counter         1   10[BANK0 ] unsigned char 
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  2    6[BANK0 ] int 
  3791 ;; Registers used:
  3792 ;;		wreg, status,2, status,0, btemp+1
  3793 ;; Tracked objects:
  3794 ;;		On entry : 300/0
  3795 ;;		On exit  : 300/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3798 ;;      Params:         0       4       0       0       0
  3799 ;;      Locals:         0       4       0       0       0
  3800 ;;      Temps:          0       0       0       0       0
  3801 ;;      Totals:         0       8       0       0       0
  3802 ;;Total ram usage:        8 bytes
  3803 ;; Hardware stack levels used: 1
  3804 ;; Hardware stack levels required when called: 1
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_scale
  3809 ;;		_sprintf
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813     09C6                     ___awdiv:	
  3814                           ;psect for function ___awdiv
  3815                           
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3819     09C6  01AB               	clrf	___awdiv@sign
  3820     09C7  1FA7               	btfss	___awdiv@divisor+1,7
  3821     09C8  29D0               	goto	l1834
  3822     09C9  09A6               	comf	___awdiv@divisor,f
  3823     09CA  09A7               	comf	___awdiv@divisor+1,f
  3824     09CB  0AA6               	incf	___awdiv@divisor,f
  3825     09CC  1903               	skipnz
  3826     09CD  0AA7               	incf	___awdiv@divisor+1,f
  3827     09CE  01AB               	clrf	___awdiv@sign
  3828     09CF  0AAB               	incf	___awdiv@sign,f
  3829     09D0                     l1834:
  3830     09D0  1FA9               	btfss	___awdiv@dividend+1,7
  3831     09D1  29DB               	goto	l1840
  3832     09D2  09A8               	comf	___awdiv@dividend,f
  3833     09D3  09A9               	comf	___awdiv@dividend+1,f
  3834     09D4  0AA8               	incf	___awdiv@dividend,f
  3835     09D5  1903               	skipnz
  3836     09D6  0AA9               	incf	___awdiv@dividend+1,f
  3837     09D7  3001               	movlw	1
  3838     09D8  00FF               	movwf	127
  3839     09D9  087F               	movf	127,w
  3840     09DA  06AB               	xorwf	___awdiv@sign,f
  3841     09DB                     l1840:
  3842     09DB  01AC               	clrf	___awdiv@quotient
  3843     09DC  01AD               	clrf	___awdiv@quotient+1
  3844     09DD  0826               	movf	___awdiv@divisor,w
  3845     09DE  0427               	iorwf	___awdiv@divisor+1,w
  3846     09DF  1903               	btfsc	3,2
  3847     09E0  2A12               	goto	l1862
  3848     09E1  01AA               	clrf	___awdiv@counter
  3849     09E2  0AAA               	incf	___awdiv@counter,f
  3850     09E3                     l1850:
  3851     09E3  1BA7               	btfsc	___awdiv@divisor+1,7
  3852     09E4  29F1               	goto	l1852
  3853     09E5  3001               	movlw	1
  3854     09E6                     u1945:
  3855     09E6  1003               	clrc
  3856     09E7  0DA6               	rlf	___awdiv@divisor,f
  3857     09E8  0DA7               	rlf	___awdiv@divisor+1,f
  3858     09E9  3EFF               	addlw	-1
  3859     09EA  1D03               	skipz
  3860     09EB  29E6               	goto	u1945
  3861     09EC  3001               	movlw	1
  3862     09ED  00FF               	movwf	127
  3863     09EE  087F               	movf	127,w
  3864     09EF  07AA               	addwf	___awdiv@counter,f
  3865     09F0  29E3               	goto	l1850
  3866     09F1                     l1852:
  3867     09F1  3001               	movlw	1
  3868     09F2                     u1965:
  3869     09F2  1003               	clrc
  3870     09F3  0DAC               	rlf	___awdiv@quotient,f
  3871     09F4  0DAD               	rlf	___awdiv@quotient+1,f
  3872     09F5  3EFF               	addlw	-1
  3873     09F6  1D03               	skipz
  3874     09F7  29F2               	goto	u1965
  3875     09F8  0827               	movf	___awdiv@divisor+1,w
  3876     09F9  0229               	subwf	___awdiv@dividend+1,w
  3877     09FA  1D03               	skipz
  3878     09FB  29FE               	goto	u1975
  3879     09FC  0826               	movf	___awdiv@divisor,w
  3880     09FD  0228               	subwf	___awdiv@dividend,w
  3881     09FE                     u1975:
  3882     09FE  1C03               	skipc
  3883     09FF  2A07               	goto	l1858
  3884     0A00  0826               	movf	___awdiv@divisor,w
  3885     0A01  02A8               	subwf	___awdiv@dividend,f
  3886     0A02  0827               	movf	___awdiv@divisor+1,w
  3887     0A03  1C03               	skipc
  3888     0A04  03A9               	decf	___awdiv@dividend+1,f
  3889     0A05  02A9               	subwf	___awdiv@dividend+1,f
  3890     0A06  142C               	bsf	___awdiv@quotient,0
  3891     0A07                     l1858:
  3892     0A07  3001               	movlw	1
  3893     0A08                     u1985:
  3894     0A08  1003               	clrc
  3895     0A09  0CA7               	rrf	___awdiv@divisor+1,f
  3896     0A0A  0CA6               	rrf	___awdiv@divisor,f
  3897     0A0B  3EFF               	addlw	-1
  3898     0A0C  1D03               	skipz
  3899     0A0D  2A08               	goto	u1985
  3900     0A0E  3001               	movlw	1
  3901     0A0F  02AA               	subwf	___awdiv@counter,f
  3902     0A10  1D03               	btfss	3,2
  3903     0A11  29F1               	goto	l1852
  3904     0A12                     l1862:
  3905     0A12  082B               	movf	___awdiv@sign,w
  3906     0A13  1903               	btfsc	3,2
  3907     0A14  2A1A               	goto	l1866
  3908     0A15  09AC               	comf	___awdiv@quotient,f
  3909     0A16  09AD               	comf	___awdiv@quotient+1,f
  3910     0A17  0AAC               	incf	___awdiv@quotient,f
  3911     0A18  1903               	skipnz
  3912     0A19  0AAD               	incf	___awdiv@quotient+1,f
  3913     0A1A                     l1866:
  3914     0A1A  082D               	movf	___awdiv@quotient+1,w
  3915     0A1B  00A7               	movwf	?___awdiv+1
  3916     0A1C  082C               	movf	___awdiv@quotient,w
  3917     0A1D  00A6               	movwf	?___awdiv
  3918     0A1E  0008               	return
  3919     0A1F                     __end_of___awdiv:
  3920                           
  3921                           	psect	text9
  3922     0EC1                     __ptext9:	
  3923 ;; *************** function _fround *****************
  3924 ;; Defined at:
  3925 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  prec            1    wreg     unsigned char 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  prec            1   41[BANK0 ] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  3   32[BANK0 ] unsigned char 
  3932 ;; Registers used:
  3933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 200/100
  3936 ;;		On exit  : 300/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         0       3       0       0       0
  3940 ;;      Locals:         0       7       0       0       0
  3941 ;;      Temps:          0       0       0       0       0
  3942 ;;      Totals:         0      10       0       0       0
  3943 ;;Total ram usage:       10 bytes
  3944 ;; Hardware stack levels used: 1
  3945 ;; Hardware stack levels required when called: 3
  3946 ;; This function calls:
  3947 ;;		___bmul
  3948 ;;		___ftmul
  3949 ;;		___lbdiv
  3950 ;;		___lbmod
  3951 ;; This function is called by:
  3952 ;;		_sprintf
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956     0EC1                     _fround:	
  3957                           ;psect for function _fround
  3958                           
  3959                           
  3960                           ;incstack = 0
  3961                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3962                           ;fround@prec stored from wreg
  3963     0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  3964     0EC2  00C9               	movwf	fround@prec
  3965                           
  3966                           ;doprnt.c: 421: if(prec>=110)
  3967     0EC3  306E               	movlw	110
  3968     0EC4  0249               	subwf	fround@prec,w
  3969     0EC5  1C03               	skipc
  3970     0EC6  2F69               	goto	l2098
  3971                           
  3972                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3973     0EC7  3003               	movlw	3
  3974     0EC8  00AE               	movwf	___bmul@multiplicand
  3975     0EC9  300A               	movlw	10
  3976     0ECA  00A6               	movwf	___lbdiv@divisor
  3977     0ECB  3064               	movlw	100
  3978     0ECC  00A0               	movwf	___lbmod@divisor
  3979     0ECD  0849               	movf	fround@prec,w
  3980     0ECE  120A  158A  2084  120A  158A  	fcall	___lbmod
  3981     0ED3  160A  118A  2799  120A  158A  	fcall	___lbdiv
  3982     0ED8  160A  118A  26F7  120A  158A  	fcall	___bmul
  3983     0EDD  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3984     0EDE  0084               	movwf	4
  3985     0EDF  120A  158A  2000  120A  158A  	fcall	stringdir
  3986     0EE4  00B1               	movwf	___ftmul@f1
  3987     0EE5  120A  158A  2000  120A  158A  	fcall	stringdir
  3988     0EEA  00B2               	movwf	___ftmul@f1+1
  3989     0EEB  120A  158A  2000  120A  158A  	fcall	stringdir
  3990     0EF0  00B3               	movwf	___ftmul@f1+2
  3991     0EF1  3003               	movlw	3
  3992     0EF2  00AE               	movwf	___bmul@multiplicand
  3993     0EF3  3064               	movlw	100
  3994     0EF4  00A6               	movwf	___lbdiv@divisor
  3995     0EF5  0849               	movf	fround@prec,w
  3996     0EF6  160A  118A  2799  120A  158A  	fcall	___lbdiv
  3997     0EFB  160A  118A  26F7  120A  158A  	fcall	___bmul
  3998     0F00  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3999     0F01  0084               	movwf	4
  4000     0F02  120A  158A  2000  120A  158A  	fcall	stringdir
  4001     0F07  00B4               	movwf	___ftmul@f2
  4002     0F08  120A  158A  2000  120A  158A  	fcall	stringdir
  4003     0F0D  00B5               	movwf	___ftmul@f2+1
  4004     0F0E  120A  158A  2000  120A  158A  	fcall	stringdir
  4005     0F13  00B6               	movwf	___ftmul@f2+2
  4006     0F14  120A  158A  240E  120A  158A  	fcall	___ftmul
  4007     0F19  0831               	movf	?___ftmul,w
  4008     0F1A  00C6               	movwf	_fround$1256
  4009     0F1B  0832               	movf	?___ftmul+1,w
  4010     0F1C  00C7               	movwf	_fround$1256+1
  4011     0F1D  0833               	movf	?___ftmul+2,w
  4012     0F1E  00C8               	movwf	_fround$1256+2
  4013                           
  4014                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4015     0F1F  3003               	movlw	3
  4016     0F20  00AE               	movwf	___bmul@multiplicand
  4017     0F21  300A               	movlw	10
  4018     0F22  00A0               	movwf	___lbmod@divisor
  4019     0F23  0849               	movf	fround@prec,w
  4020     0F24  120A  158A  2084  120A  158A  	fcall	___lbmod
  4021     0F29  160A  118A  26F7  120A  158A  	fcall	___bmul
  4022     0F2E  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4023     0F2F  0084               	movwf	4
  4024     0F30  120A  158A  2000  120A  158A  	fcall	stringdir
  4025     0F35  00B1               	movwf	___ftmul@f1
  4026     0F36  120A  158A  2000  120A  158A  	fcall	stringdir
  4027     0F3B  00B2               	movwf	___ftmul@f1+1
  4028     0F3C  120A  158A  2000  120A  158A  	fcall	stringdir
  4029     0F41  00B3               	movwf	___ftmul@f1+2
  4030     0F42  0846               	movf	_fround$1256,w
  4031     0F43  00B4               	movwf	___ftmul@f2
  4032     0F44  0847               	movf	_fround$1256+1,w
  4033     0F45  00B5               	movwf	___ftmul@f2+1
  4034     0F46  0848               	movf	_fround$1256+2,w
  4035     0F47  00B6               	movwf	___ftmul@f2+2
  4036     0F48  120A  158A  240E  120A  158A  	fcall	___ftmul
  4037     0F4D  0831               	movf	?___ftmul,w
  4038     0F4E  00C3               	movwf	_fround$1257
  4039     0F4F  0832               	movf	?___ftmul+1,w
  4040     0F50  00C4               	movwf	_fround$1257+1
  4041     0F51  0833               	movf	?___ftmul+2,w
  4042     0F52  00C5               	movwf	_fround$1257+2
  4043                           
  4044                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4045     0F53  3000               	movlw	0
  4046     0F54  00B1               	movwf	___ftmul@f1
  4047     0F55  3000               	movlw	0
  4048     0F56  00B2               	movwf	___ftmul@f1+1
  4049     0F57  303F               	movlw	63
  4050     0F58  00B3               	movwf	___ftmul@f1+2
  4051     0F59  0843               	movf	_fround$1257,w
  4052     0F5A  00B4               	movwf	___ftmul@f2
  4053     0F5B  0844               	movf	_fround$1257+1,w
  4054     0F5C  00B5               	movwf	___ftmul@f2+1
  4055     0F5D  0845               	movf	_fround$1257+2,w
  4056     0F5E  00B6               	movwf	___ftmul@f2+2
  4057     0F5F  120A  158A  240E   	fcall	___ftmul
  4058     0F62  0831               	movf	?___ftmul,w
  4059     0F63  00C0               	movwf	?_fround
  4060     0F64  0832               	movf	?___ftmul+1,w
  4061     0F65  00C1               	movwf	?_fround+1
  4062     0F66  0833               	movf	?___ftmul+2,w
  4063     0F67  00C2               	movwf	?_fround+2
  4064     0F68  0008               	return
  4065     0F69                     l2098:
  4066                           
  4067                           ;doprnt.c: 423: else if(prec > 10)
  4068     0F69  300B               	movlw	11
  4069     0F6A  0249               	subwf	fround@prec,w
  4070     0F6B  1C03               	skipc
  4071     0F6C  2FD4               	goto	l2106
  4072                           
  4073                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4074     0F6D  3003               	movlw	3
  4075     0F6E  00AE               	movwf	___bmul@multiplicand
  4076     0F6F  300A               	movlw	10
  4077     0F70  00A0               	movwf	___lbmod@divisor
  4078     0F71  0849               	movf	fround@prec,w
  4079     0F72  120A  158A  2084  120A  158A  	fcall	___lbmod
  4080     0F77  160A  118A  26F7  120A  158A  	fcall	___bmul
  4081     0F7C  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4082     0F7D  0084               	movwf	4
  4083     0F7E  120A  158A  2000  120A  158A  	fcall	stringdir
  4084     0F83  00B1               	movwf	___ftmul@f1
  4085     0F84  120A  158A  2000  120A  158A  	fcall	stringdir
  4086     0F89  00B2               	movwf	___ftmul@f1+1
  4087     0F8A  120A  158A  2000  120A  158A  	fcall	stringdir
  4088     0F8F  00B3               	movwf	___ftmul@f1+2
  4089     0F90  3003               	movlw	3
  4090     0F91  00AE               	movwf	___bmul@multiplicand
  4091     0F92  300A               	movlw	10
  4092     0F93  00A6               	movwf	___lbdiv@divisor
  4093     0F94  0849               	movf	fround@prec,w
  4094     0F95  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4095     0F9A  160A  118A  26F7  120A  158A  	fcall	___bmul
  4096     0F9F  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4097     0FA0  0084               	movwf	4
  4098     0FA1  120A  158A  2000  120A  158A  	fcall	stringdir
  4099     0FA6  00B4               	movwf	___ftmul@f2
  4100     0FA7  120A  158A  2000  120A  158A  	fcall	stringdir
  4101     0FAC  00B5               	movwf	___ftmul@f2+1
  4102     0FAD  120A  158A  2000  120A  158A  	fcall	stringdir
  4103     0FB2  00B6               	movwf	___ftmul@f2+2
  4104     0FB3  120A  158A  240E  120A  158A  	fcall	___ftmul
  4105     0FB8  0831               	movf	?___ftmul,w
  4106     0FB9  00C6               	movwf	_fround$1256
  4107     0FBA  0832               	movf	?___ftmul+1,w
  4108     0FBB  00C7               	movwf	_fround$1256+1
  4109     0FBC  0833               	movf	?___ftmul+2,w
  4110     0FBD  00C8               	movwf	_fround$1256+2
  4111                           
  4112                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4113     0FBE  3000               	movlw	0
  4114     0FBF  00B1               	movwf	___ftmul@f1
  4115     0FC0  3000               	movlw	0
  4116     0FC1  00B2               	movwf	___ftmul@f1+1
  4117     0FC2  303F               	movlw	63
  4118     0FC3  00B3               	movwf	___ftmul@f1+2
  4119     0FC4  0846               	movf	_fround$1256,w
  4120     0FC5  00B4               	movwf	___ftmul@f2
  4121     0FC6  0847               	movf	_fround$1256+1,w
  4122     0FC7  00B5               	movwf	___ftmul@f2+1
  4123     0FC8  0848               	movf	_fround$1256+2,w
  4124     0FC9  00B6               	movwf	___ftmul@f2+2
  4125     0FCA  120A  158A  240E   	fcall	___ftmul
  4126     0FCD  0831               	movf	?___ftmul,w
  4127     0FCE  00C0               	movwf	?_fround
  4128     0FCF  0832               	movf	?___ftmul+1,w
  4129     0FD0  00C1               	movwf	?_fround+1
  4130     0FD1  0833               	movf	?___ftmul+2,w
  4131     0FD2  00C2               	movwf	?_fround+2
  4132     0FD3  0008               	return
  4133     0FD4                     l2106:
  4134                           
  4135                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4136     0FD4  3000               	movlw	0
  4137     0FD5  00B1               	movwf	___ftmul@f1
  4138     0FD6  3000               	movlw	0
  4139     0FD7  00B2               	movwf	___ftmul@f1+1
  4140     0FD8  303F               	movlw	63
  4141     0FD9  00B3               	movwf	___ftmul@f1+2
  4142     0FDA  3003               	movlw	3
  4143     0FDB  00AE               	movwf	___bmul@multiplicand
  4144     0FDC  0849               	movf	fround@prec,w
  4145     0FDD  160A  118A  26F7  120A  158A  	fcall	___bmul
  4146     0FE2  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4147     0FE3  0084               	movwf	4
  4148     0FE4  120A  158A  2000  120A  158A  	fcall	stringdir
  4149     0FE9  00B4               	movwf	___ftmul@f2
  4150     0FEA  120A  158A  2000  120A  158A  	fcall	stringdir
  4151     0FEF  00B5               	movwf	___ftmul@f2+1
  4152     0FF0  120A  158A  2000  120A  158A  	fcall	stringdir
  4153     0FF5  00B6               	movwf	___ftmul@f2+2
  4154     0FF6  120A  158A  240E   	fcall	___ftmul
  4155     0FF9  0831               	movf	?___ftmul,w
  4156     0FFA  00C0               	movwf	?_fround
  4157     0FFB  0832               	movf	?___ftmul+1,w
  4158     0FFC  00C1               	movwf	?_fround+1
  4159     0FFD  0833               	movf	?___ftmul+2,w
  4160     0FFE  00C2               	movwf	?_fround+2
  4161     0FFF  0008               	return
  4162     1000                     __end_of_fround:
  4163                           
  4164                           	psect	text10
  4165     0884                     __ptext10:	
  4166 ;; *************** function ___lbmod *****************
  4167 ;; Defined at:
  4168 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  dividend        1    wreg     unsigned char 
  4171 ;;  divisor         1    0[BANK0 ] unsigned char 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  dividend        1    3[BANK0 ] unsigned char 
  4174 ;;  rem             1    5[BANK0 ] unsigned char 
  4175 ;;  counter         1    4[BANK0 ] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      unsigned char 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 300/0
  4182 ;;		On exit  : 300/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4185 ;;      Params:         0       1       0       0       0
  4186 ;;      Locals:         0       3       0       0       0
  4187 ;;      Temps:          0       2       0       0       0
  4188 ;;      Totals:         0       6       0       0       0
  4189 ;;Total ram usage:        6 bytes
  4190 ;; Hardware stack levels used: 1
  4191 ;; Hardware stack levels required when called: 1
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_fround
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199     0884                     ___lbmod:	
  4200                           ;psect for function ___lbmod
  4201                           
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4205                           ;___lbmod@dividend stored from wreg
  4206     0884  00A3               	movwf	___lbmod@dividend
  4207     0885  3008               	movlw	8
  4208     0886  00A4               	movwf	___lbmod@counter
  4209     0887  01A5               	clrf	___lbmod@rem
  4210     0888                     l2068:
  4211     0888  0823               	movf	___lbmod@dividend,w
  4212     0889  00A1               	movwf	??___lbmod
  4213     088A  3007               	movlw	7
  4214     088B                     u2505:
  4215     088B  1003               	clrc
  4216     088C  0CA1               	rrf	??___lbmod,f
  4217     088D  3EFF               	addlw	-1
  4218     088E  1D03               	skipz
  4219     088F  288B               	goto	u2505
  4220     0890  0825               	movf	___lbmod@rem,w
  4221     0891  00A2               	movwf	??___lbmod+1
  4222     0892  0722               	addwf	??___lbmod+1,w
  4223     0893  0421               	iorwf	??___lbmod,w
  4224     0894  00A5               	movwf	___lbmod@rem
  4225     0895  1003               	clrc
  4226     0896  0DA3               	rlf	___lbmod@dividend,f
  4227     0897  0820               	movf	___lbmod@divisor,w
  4228     0898  0225               	subwf	___lbmod@rem,w
  4229     0899  1C03               	skipc
  4230     089A  289D               	goto	l701
  4231     089B  0820               	movf	___lbmod@divisor,w
  4232     089C  02A5               	subwf	___lbmod@rem,f
  4233     089D                     l701:
  4234     089D  3001               	movlw	1
  4235     089E  02A4               	subwf	___lbmod@counter,f
  4236     089F  1D03               	btfss	3,2
  4237     08A0  2888               	goto	l2068
  4238     08A1  0825               	movf	___lbmod@rem,w
  4239     08A2  0008               	return
  4240     08A3                     __end_of___lbmod:
  4241                           
  4242                           	psect	text11
  4243     1799                     __ptext11:	
  4244 ;; *************** function ___lbdiv *****************
  4245 ;; Defined at:
  4246 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  dividend        1    wreg     unsigned char 
  4249 ;;  divisor         1    6[BANK0 ] unsigned char 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  dividend        1    7[BANK0 ] unsigned char 
  4252 ;;  quotient        1    9[BANK0 ] unsigned char 
  4253 ;;  counter         1    8[BANK0 ] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      unsigned char 
  4256 ;; Registers used:
  4257 ;;		wreg, status,2, status,0, btemp+1
  4258 ;; Tracked objects:
  4259 ;;		On entry : 300/0
  4260 ;;		On exit  : 300/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4263 ;;      Params:         0       1       0       0       0
  4264 ;;      Locals:         0       3       0       0       0
  4265 ;;      Temps:          0       0       0       0       0
  4266 ;;      Totals:         0       4       0       0       0
  4267 ;;Total ram usage:        4 bytes
  4268 ;; Hardware stack levels used: 1
  4269 ;; Hardware stack levels required when called: 1
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_fround
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277     1799                     ___lbdiv:	
  4278                           ;psect for function ___lbdiv
  4279                           
  4280                           
  4281                           ;incstack = 0
  4282                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  4283                           ;___lbdiv@dividend stored from wreg
  4284     1799  00A7               	movwf	___lbdiv@dividend
  4285     179A  01A9               	clrf	___lbdiv@quotient
  4286     179B  0826               	movf	___lbdiv@divisor,w
  4287     179C  1903               	btfsc	3,2
  4288     179D  2FB8               	goto	l2060
  4289     179E  01A8               	clrf	___lbdiv@counter
  4290     179F  0AA8               	incf	___lbdiv@counter,f
  4291     17A0                     l2048:
  4292     17A0  1BA6               	btfsc	___lbdiv@divisor,7
  4293     17A1  2FA9               	goto	l2050
  4294     17A2  1003               	clrc
  4295     17A3  0DA6               	rlf	___lbdiv@divisor,f
  4296     17A4  3001               	movlw	1
  4297     17A5  00FF               	movwf	127
  4298     17A6  087F               	movf	127,w
  4299     17A7  07A8               	addwf	___lbdiv@counter,f
  4300     17A8  2FA0               	goto	l2048
  4301     17A9                     l2050:
  4302     17A9  1003               	clrc
  4303     17AA  0DA9               	rlf	___lbdiv@quotient,f
  4304     17AB  0826               	movf	___lbdiv@divisor,w
  4305     17AC  0227               	subwf	___lbdiv@dividend,w
  4306     17AD  1C03               	skipc
  4307     17AE  2FB3               	goto	L7
  4308     17AF  0826               	movf	___lbdiv@divisor,w
  4309     17B0  02A7               	subwf	___lbdiv@dividend,f
  4310     17B1  1429               	bsf	___lbdiv@quotient,0
  4311     17B2  1003               	clrc
  4312     17B3                     L7:
  4313     17B3  0CA6               	rrf	___lbdiv@divisor,f
  4314     17B4  3001               	movlw	1
  4315     17B5  02A8               	subwf	___lbdiv@counter,f
  4316     17B6  1D03               	btfss	3,2
  4317     17B7  2FA9               	goto	l2050
  4318     17B8                     l2060:
  4319     17B8  0829               	movf	___lbdiv@quotient,w
  4320     17B9  0008               	return
  4321     17BA                     __end_of___lbdiv:
  4322                           
  4323                           	psect	text12
  4324     0C0E                     __ptext12:	
  4325 ;; *************** function ___ftmul *****************
  4326 ;; Defined at:
  4327 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  f1              3   17[BANK0 ] float 
  4330 ;;  f2              3   20[BANK0 ] float 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4333 ;;  sign            1   31[BANK0 ] unsigned char 
  4334 ;;  cntr            1   30[BANK0 ] unsigned char 
  4335 ;;  exp             1   26[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  3   17[BANK0 ] float 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 300/800
  4342 ;;		On exit  : 300/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         0       6       0       0       0
  4346 ;;      Locals:         0       6       0       0       0
  4347 ;;      Temps:          0       3       0       0       0
  4348 ;;      Totals:         0      15       0       0       0
  4349 ;;Total ram usage:       15 bytes
  4350 ;; Hardware stack levels used: 1
  4351 ;; Hardware stack levels required when called: 2
  4352 ;; This function calls:
  4353 ;;		___ftpack
  4354 ;; This function is called by:
  4355 ;;		_main
  4356 ;;		_fround
  4357 ;;		_scale
  4358 ;;		_sprintf
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362     0C0E                     ___ftmul:	
  4363                           ;psect for function ___ftmul
  4364                           
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4368     0C0E  0831               	movf	___ftmul@f1,w
  4369     0C0F  00B7               	movwf	??___ftmul
  4370     0C10  0832               	movf	___ftmul@f1+1,w
  4371     0C11  00B8               	movwf	??___ftmul+1
  4372     0C12  0833               	movf	___ftmul@f1+2,w
  4373     0C13  00B9               	movwf	??___ftmul+2
  4374     0C14  1003               	clrc
  4375     0C15  0D38               	rlf	??___ftmul+1,w
  4376     0C16  0D39               	rlf	??___ftmul+2,w
  4377     0C17  00BA               	movwf	___ftmul@exp
  4378     0C18  083A               	movf	___ftmul@exp,w
  4379     0C19  1D03               	btfss	3,2
  4380     0C1A  2C22               	goto	l1988
  4381     0C1B  3000               	movlw	0
  4382     0C1C  00B1               	movwf	?___ftmul
  4383     0C1D  3000               	movlw	0
  4384     0C1E  00B2               	movwf	?___ftmul+1
  4385     0C1F  3000               	movlw	0
  4386     0C20  00B3               	movwf	?___ftmul+2
  4387     0C21  0008               	return
  4388     0C22                     l1988:
  4389     0C22  0834               	movf	___ftmul@f2,w
  4390     0C23  00B7               	movwf	??___ftmul
  4391     0C24  0835               	movf	___ftmul@f2+1,w
  4392     0C25  00B8               	movwf	??___ftmul+1
  4393     0C26  0836               	movf	___ftmul@f2+2,w
  4394     0C27  00B9               	movwf	??___ftmul+2
  4395     0C28  1003               	clrc
  4396     0C29  0D38               	rlf	??___ftmul+1,w
  4397     0C2A  0D39               	rlf	??___ftmul+2,w
  4398     0C2B  00BF               	movwf	___ftmul@sign
  4399     0C2C  083F               	movf	___ftmul@sign,w
  4400     0C2D  1D03               	btfss	3,2
  4401     0C2E  2C36               	goto	l1994
  4402     0C2F  3000               	movlw	0
  4403     0C30  00B1               	movwf	?___ftmul
  4404     0C31  3000               	movlw	0
  4405     0C32  00B2               	movwf	?___ftmul+1
  4406     0C33  3000               	movlw	0
  4407     0C34  00B3               	movwf	?___ftmul+2
  4408     0C35  0008               	return
  4409     0C36                     l1994:
  4410     0C36  083F               	movf	___ftmul@sign,w
  4411     0C37  3E7B               	addlw	123
  4412     0C38  00FF               	movwf	127
  4413     0C39  087F               	movf	127,w
  4414     0C3A  07BA               	addwf	___ftmul@exp,f
  4415     0C3B  0833               	movf	___ftmul@f1+2,w
  4416     0C3C  00BF               	movwf	___ftmul@sign
  4417     0C3D  0836               	movf	___ftmul@f2+2,w
  4418     0C3E  00FF               	movwf	127
  4419     0C3F  087F               	movf	127,w
  4420     0C40  06BF               	xorwf	___ftmul@sign,f
  4421     0C41  3080               	movlw	128
  4422     0C42  00FF               	movwf	127
  4423     0C43  087F               	movf	127,w
  4424     0C44  05BF               	andwf	___ftmul@sign,f
  4425     0C45  17B2               	bsf	___ftmul@f1+1,7
  4426     0C46  17B5               	bsf	___ftmul@f2+1,7
  4427     0C47  30FF               	movlw	255
  4428     0C48  05B4               	andwf	___ftmul@f2,f
  4429     0C49  30FF               	movlw	255
  4430     0C4A  05B5               	andwf	___ftmul@f2+1,f
  4431     0C4B  3000               	movlw	0
  4432     0C4C  05B6               	andwf	___ftmul@f2+2,f
  4433     0C4D  3000               	movlw	0
  4434     0C4E  00BB               	movwf	___ftmul@f3_as_product
  4435     0C4F  3000               	movlw	0
  4436     0C50  00BC               	movwf	___ftmul@f3_as_product+1
  4437     0C51  3000               	movlw	0
  4438     0C52  00BD               	movwf	___ftmul@f3_as_product+2
  4439     0C53  3007               	movlw	7
  4440     0C54  00BE               	movwf	___ftmul@cntr
  4441     0C55                     l2012:
  4442     0C55  1C31               	btfss	___ftmul@f1,0
  4443     0C56  2C65               	goto	l2016
  4444     0C57  0834               	movf	___ftmul@f2,w
  4445     0C58  07BB               	addwf	___ftmul@f3_as_product,f
  4446     0C59  0835               	movf	___ftmul@f2+1,w
  4447     0C5A  1103               	clrz
  4448     0C5B  1803               	skipnc
  4449     0C5C  0A35               	incf	___ftmul@f2+1,w
  4450     0C5D  1D03               	btfss	3,2
  4451     0C5E  07BC               	addwf	___ftmul@f3_as_product+1,f
  4452     0C5F  0836               	movf	___ftmul@f2+2,w
  4453     0C60  1103               	clrz
  4454     0C61  1803               	skipnc
  4455     0C62  0A36               	incf	___ftmul@f2+2,w
  4456     0C63  1D03               	btfss	3,2
  4457     0C64  07BD               	addwf	___ftmul@f3_as_product+2,f
  4458     0C65                     l2016:
  4459     0C65  3001               	movlw	1
  4460     0C66                     u2385:
  4461     0C66  1003               	clrc
  4462     0C67  0CB3               	rrf	___ftmul@f1+2,f
  4463     0C68  0CB2               	rrf	___ftmul@f1+1,f
  4464     0C69  0CB1               	rrf	___ftmul@f1,f
  4465     0C6A  3EFF               	addlw	-1
  4466     0C6B  1D03               	skipz
  4467     0C6C  2C66               	goto	u2385
  4468     0C6D  3001               	movlw	1
  4469     0C6E                     u2395:
  4470     0C6E  1003               	clrc
  4471     0C6F  0DB4               	rlf	___ftmul@f2,f
  4472     0C70  0DB5               	rlf	___ftmul@f2+1,f
  4473     0C71  0DB6               	rlf	___ftmul@f2+2,f
  4474     0C72  3EFF               	addlw	-1
  4475     0C73  1D03               	skipz
  4476     0C74  2C6E               	goto	u2395
  4477     0C75  3001               	movlw	1
  4478     0C76  02BE               	subwf	___ftmul@cntr,f
  4479     0C77  1D03               	btfss	3,2
  4480     0C78  2C55               	goto	l2012
  4481     0C79  3009               	movlw	9
  4482     0C7A  00BE               	movwf	___ftmul@cntr
  4483     0C7B                     l2024:
  4484     0C7B  1C31               	btfss	___ftmul@f1,0
  4485     0C7C  2C8B               	goto	l2028
  4486     0C7D  0834               	movf	___ftmul@f2,w
  4487     0C7E  07BB               	addwf	___ftmul@f3_as_product,f
  4488     0C7F  0835               	movf	___ftmul@f2+1,w
  4489     0C80  1103               	clrz
  4490     0C81  1803               	skipnc
  4491     0C82  0A35               	incf	___ftmul@f2+1,w
  4492     0C83  1D03               	btfss	3,2
  4493     0C84  07BC               	addwf	___ftmul@f3_as_product+1,f
  4494     0C85  0836               	movf	___ftmul@f2+2,w
  4495     0C86  1103               	clrz
  4496     0C87  1803               	skipnc
  4497     0C88  0A36               	incf	___ftmul@f2+2,w
  4498     0C89  1D03               	btfss	3,2
  4499     0C8A  07BD               	addwf	___ftmul@f3_as_product+2,f
  4500     0C8B                     l2028:
  4501     0C8B  3001               	movlw	1
  4502     0C8C                     u2435:
  4503     0C8C  1003               	clrc
  4504     0C8D  0CB3               	rrf	___ftmul@f1+2,f
  4505     0C8E  0CB2               	rrf	___ftmul@f1+1,f
  4506     0C8F  0CB1               	rrf	___ftmul@f1,f
  4507     0C90  3EFF               	addlw	-1
  4508     0C91  1D03               	skipz
  4509     0C92  2C8C               	goto	u2435
  4510     0C93  3001               	movlw	1
  4511     0C94                     u2445:
  4512     0C94  1003               	clrc
  4513     0C95  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4514     0C96  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4515     0C97  0CBB               	rrf	___ftmul@f3_as_product,f
  4516     0C98  3EFF               	addlw	-1
  4517     0C99  1D03               	skipz
  4518     0C9A  2C94               	goto	u2445
  4519     0C9B  3001               	movlw	1
  4520     0C9C  02BE               	subwf	___ftmul@cntr,f
  4521     0C9D  1D03               	btfss	3,2
  4522     0C9E  2C7B               	goto	l2024
  4523     0C9F  083B               	movf	___ftmul@f3_as_product,w
  4524     0CA0  00A0               	movwf	___ftpack@arg
  4525     0CA1  083C               	movf	___ftmul@f3_as_product+1,w
  4526     0CA2  00A1               	movwf	___ftpack@arg+1
  4527     0CA3  083D               	movf	___ftmul@f3_as_product+2,w
  4528     0CA4  00A2               	movwf	___ftpack@arg+2
  4529     0CA5  083A               	movf	___ftmul@exp,w
  4530     0CA6  00A3               	movwf	___ftpack@exp
  4531     0CA7  083F               	movf	___ftmul@sign,w
  4532     0CA8  00A4               	movwf	___ftpack@sign
  4533     0CA9  120A  158A  227D   	fcall	___ftpack
  4534     0CAC  0820               	movf	?___ftpack,w
  4535     0CAD  00B1               	movwf	?___ftmul
  4536     0CAE  0821               	movf	?___ftpack+1,w
  4537     0CAF  00B2               	movwf	?___ftmul+1
  4538     0CB0  0822               	movf	?___ftpack+2,w
  4539     0CB1  00B3               	movwf	?___ftmul+2
  4540     0CB2  0008               	return
  4541     0CB3                     __end_of___ftmul:
  4542                           
  4543                           	psect	text13
  4544     16F7                     __ptext13:	
  4545 ;; *************** function ___bmul *****************
  4546 ;; Defined at:
  4547 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  multiplier      1    wreg     unsigned char 
  4550 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  multiplier      1   16[BANK0 ] unsigned char 
  4553 ;;  product         1   15[BANK0 ] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      unsigned char 
  4556 ;; Registers used:
  4557 ;;		wreg, status,2, status,0, btemp+1
  4558 ;; Tracked objects:
  4559 ;;		On entry : 300/0
  4560 ;;		On exit  : 300/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4563 ;;      Params:         0       1       0       0       0
  4564 ;;      Locals:         0       2       0       0       0
  4565 ;;      Temps:          0       0       0       0       0
  4566 ;;      Totals:         0       3       0       0       0
  4567 ;;Total ram usage:        3 bytes
  4568 ;; Hardware stack levels used: 1
  4569 ;; Hardware stack levels required when called: 1
  4570 ;; This function calls:
  4571 ;;		Nothing
  4572 ;; This function is called by:
  4573 ;;		_fround
  4574 ;;		_scale
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578     16F7                     ___bmul:	
  4579                           ;psect for function ___bmul
  4580                           
  4581                           
  4582                           ;incstack = 0
  4583                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4584                           ;___bmul@multiplier stored from wreg
  4585     16F7  00B0               	movwf	___bmul@multiplier
  4586     16F8  01AF               	clrf	___bmul@product
  4587     16F9                     l1812:
  4588     16F9  1C30               	btfss	___bmul@multiplier,0
  4589     16FA  2EFF               	goto	l1816
  4590     16FB  082E               	movf	___bmul@multiplicand,w
  4591     16FC  00FF               	movwf	127
  4592     16FD  087F               	movf	127,w
  4593     16FE  07AF               	addwf	___bmul@product,f
  4594     16FF                     l1816:
  4595     16FF  1003               	clrc
  4596     1700  0DAE               	rlf	___bmul@multiplicand,f
  4597     1701  1003               	clrc
  4598     1702  0CB0               	rrf	___bmul@multiplier,f
  4599     1703  0830               	movf	___bmul@multiplier,w
  4600     1704  1D03               	btfss	3,2
  4601     1705  2EF9               	goto	l1812
  4602     1706  082F               	movf	___bmul@product,w
  4603     1707  0008               	return
  4604     1708                     __end_of___bmul:
  4605                           
  4606                           	psect	text14
  4607     0B6D                     __ptext14:	
  4608 ;; *************** function __tdiv_to_l_ *****************
  4609 ;; Defined at:
  4610 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdivl.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  f1              3    0[BANK0 ] float 
  4613 ;;  f2              3    3[BANK0 ] float 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  quot            4    9[BANK0 ] unsigned long 
  4616 ;;  exp1            1   14[BANK0 ] unsigned char 
  4617 ;;  cntr            1   13[BANK0 ] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  4    0[BANK0 ] unsigned long 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, btemp+1
  4622 ;; Tracked objects:
  4623 ;;		On entry : 300/0
  4624 ;;		On exit  : 300/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4627 ;;      Params:         0       6       0       0       0
  4628 ;;      Locals:         0       6       0       0       0
  4629 ;;      Temps:          0       3       0       0       0
  4630 ;;      Totals:         0      15       0       0       0
  4631 ;;Total ram usage:       15 bytes
  4632 ;; Hardware stack levels used: 1
  4633 ;; Hardware stack levels required when called: 1
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_sprintf
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641     0B6D                     __tdiv_to_l_:	
  4642                           ;psect for function __tdiv_to_l_
  4643                           
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  4647     0B6D  0820               	movf	__tdiv_to_l_@f1,w
  4648     0B6E  00A6               	movwf	??__tdiv_to_l_
  4649     0B6F  0821               	movf	__tdiv_to_l_@f1+1,w
  4650     0B70  00A7               	movwf	??__tdiv_to_l_+1
  4651     0B71  0822               	movf	__tdiv_to_l_@f1+2,w
  4652     0B72  00A8               	movwf	??__tdiv_to_l_+2
  4653     0B73  1003               	clrc
  4654     0B74  0D27               	rlf	??__tdiv_to_l_+1,w
  4655     0B75  0D28               	rlf	??__tdiv_to_l_+2,w
  4656     0B76  00AE               	movwf	__tdiv_to_l_@exp1
  4657     0B77  082E               	movf	__tdiv_to_l_@exp1,w
  4658     0B78  1D03               	btfss	3,2
  4659     0B79  2B83               	goto	l2156
  4660     0B7A                     l2152:
  4661     0B7A  3000               	movlw	0
  4662     0B7B  00A3               	movwf	?__tdiv_to_l_+3
  4663     0B7C  3000               	movlw	0
  4664     0B7D  00A2               	movwf	?__tdiv_to_l_+2
  4665     0B7E  3000               	movlw	0
  4666     0B7F  00A1               	movwf	?__tdiv_to_l_+1
  4667     0B80  3000               	movlw	0
  4668     0B81  00A0               	movwf	?__tdiv_to_l_
  4669     0B82  0008               	return
  4670     0B83                     l2156:
  4671     0B83  0823               	movf	__tdiv_to_l_@f2,w
  4672     0B84  00A6               	movwf	??__tdiv_to_l_
  4673     0B85  0824               	movf	__tdiv_to_l_@f2+1,w
  4674     0B86  00A7               	movwf	??__tdiv_to_l_+1
  4675     0B87  0825               	movf	__tdiv_to_l_@f2+2,w
  4676     0B88  00A8               	movwf	??__tdiv_to_l_+2
  4677     0B89  1003               	clrc
  4678     0B8A  0D27               	rlf	??__tdiv_to_l_+1,w
  4679     0B8B  0D28               	rlf	??__tdiv_to_l_+2,w
  4680     0B8C  00AD               	movwf	__tdiv_to_l_@cntr
  4681     0B8D  082D               	movf	__tdiv_to_l_@cntr,w
  4682     0B8E  1903               	btfsc	3,2
  4683     0B8F  2B7A               	goto	l2152
  4684     0B90  17A1               	bsf	__tdiv_to_l_@f1+1,7
  4685     0B91  30FF               	movlw	255
  4686     0B92  05A0               	andwf	__tdiv_to_l_@f1,f
  4687     0B93  30FF               	movlw	255
  4688     0B94  05A1               	andwf	__tdiv_to_l_@f1+1,f
  4689     0B95  3000               	movlw	0
  4690     0B96  05A2               	andwf	__tdiv_to_l_@f1+2,f
  4691     0B97  17A4               	bsf	__tdiv_to_l_@f2+1,7
  4692     0B98  30FF               	movlw	255
  4693     0B99  05A3               	andwf	__tdiv_to_l_@f2,f
  4694     0B9A  30FF               	movlw	255
  4695     0B9B  05A4               	andwf	__tdiv_to_l_@f2+1,f
  4696     0B9C  3000               	movlw	0
  4697     0B9D  05A5               	andwf	__tdiv_to_l_@f2+2,f
  4698     0B9E  3000               	movlw	0
  4699     0B9F  00AC               	movwf	__tdiv_to_l_@quot+3
  4700     0BA0  3000               	movlw	0
  4701     0BA1  00AB               	movwf	__tdiv_to_l_@quot+2
  4702     0BA2  3000               	movlw	0
  4703     0BA3  00AA               	movwf	__tdiv_to_l_@quot+1
  4704     0BA4  3000               	movlw	0
  4705     0BA5  00A9               	movwf	__tdiv_to_l_@quot
  4706     0BA6  307F               	movlw	127
  4707     0BA7  02AE               	subwf	__tdiv_to_l_@exp1,f
  4708     0BA8  3098               	movlw	152
  4709     0BA9  072D               	addwf	__tdiv_to_l_@cntr,w
  4710     0BAA  00A6               	movwf	??__tdiv_to_l_
  4711     0BAB  0826               	movf	??__tdiv_to_l_,w
  4712     0BAC  02AE               	subwf	__tdiv_to_l_@exp1,f
  4713     0BAD  3018               	movlw	24
  4714     0BAE  00AD               	movwf	__tdiv_to_l_@cntr
  4715     0BAF                     l2170:
  4716     0BAF  3001               	movlw	1
  4717     0BB0  00A6               	movwf	??__tdiv_to_l_
  4718     0BB1                     u2635:
  4719     0BB1  1003               	clrc
  4720     0BB2  0DA9               	rlf	__tdiv_to_l_@quot,f
  4721     0BB3  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4722     0BB4  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4723     0BB5  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4724     0BB6  0BA6               	decfsz	??__tdiv_to_l_,f
  4725     0BB7  2BB1               	goto	u2635
  4726     0BB8  0825               	movf	__tdiv_to_l_@f2+2,w
  4727     0BB9  0222               	subwf	__tdiv_to_l_@f1+2,w
  4728     0BBA  1D03               	skipz
  4729     0BBB  2BC2               	goto	u2645
  4730     0BBC  0824               	movf	__tdiv_to_l_@f2+1,w
  4731     0BBD  0221               	subwf	__tdiv_to_l_@f1+1,w
  4732     0BBE  1D03               	skipz
  4733     0BBF  2BC2               	goto	u2645
  4734     0BC0  0823               	movf	__tdiv_to_l_@f2,w
  4735     0BC1  0220               	subwf	__tdiv_to_l_@f1,w
  4736     0BC2                     u2645:
  4737     0BC2  1C03               	skipc
  4738     0BC3  2BCF               	goto	l2178
  4739     0BC4  0823               	movf	__tdiv_to_l_@f2,w
  4740     0BC5  02A0               	subwf	__tdiv_to_l_@f1,f
  4741     0BC6  0824               	movf	__tdiv_to_l_@f2+1,w
  4742     0BC7  1C03               	skipc
  4743     0BC8  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  4744     0BC9  02A1               	subwf	__tdiv_to_l_@f1+1,f
  4745     0BCA  0825               	movf	__tdiv_to_l_@f2+2,w
  4746     0BCB  1C03               	skipc
  4747     0BCC  0A25               	incf	__tdiv_to_l_@f2+2,w
  4748     0BCD  02A2               	subwf	__tdiv_to_l_@f1+2,f
  4749     0BCE  1429               	bsf	__tdiv_to_l_@quot,0
  4750     0BCF                     l2178:
  4751     0BCF  3001               	movlw	1
  4752     0BD0                     u2655:
  4753     0BD0  1003               	clrc
  4754     0BD1  0DA0               	rlf	__tdiv_to_l_@f1,f
  4755     0BD2  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  4756     0BD3  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  4757     0BD4  3EFF               	addlw	-1
  4758     0BD5  1D03               	skipz
  4759     0BD6  2BD0               	goto	u2655
  4760     0BD7  3001               	movlw	1
  4761     0BD8  02AD               	subwf	__tdiv_to_l_@cntr,f
  4762     0BD9  1D03               	btfss	3,2
  4763     0BDA  2BAF               	goto	l2170
  4764     0BDB  1FAE               	btfss	__tdiv_to_l_@exp1,7
  4765     0BDC  2BF2               	goto	l2192
  4766     0BDD  082E               	movf	__tdiv_to_l_@exp1,w
  4767     0BDE  3A80               	xorlw	128
  4768     0BDF  3E97               	addlw	151
  4769     0BE0  1C03               	btfss	3,0
  4770     0BE1  2B7A               	goto	l2152
  4771     0BE2                     l2188:
  4772     0BE2  3001               	movlw	1
  4773     0BE3                     u2695:
  4774     0BE3  1003               	clrc
  4775     0BE4  0CAC               	rrf	__tdiv_to_l_@quot+3,f
  4776     0BE5  0CAB               	rrf	__tdiv_to_l_@quot+2,f
  4777     0BE6  0CAA               	rrf	__tdiv_to_l_@quot+1,f
  4778     0BE7  0CA9               	rrf	__tdiv_to_l_@quot,f
  4779     0BE8  3EFF               	addlw	-1
  4780     0BE9  1D03               	skipz
  4781     0BEA  2BE3               	goto	u2695
  4782     0BEB  3001               	movlw	1
  4783     0BEC  00FF               	movwf	127
  4784     0BED  087F               	movf	127,w
  4785     0BEE  07AE               	addwf	__tdiv_to_l_@exp1,f
  4786     0BEF  1903               	btfsc	3,2
  4787     0BF0  2C05               	goto	l2200
  4788     0BF1  2BE2               	goto	l2188
  4789     0BF2                     l2192:
  4790     0BF2  3018               	movlw	24
  4791     0BF3  022E               	subwf	__tdiv_to_l_@exp1,w
  4792     0BF4  1803               	btfsc	3,0
  4793     0BF5  2B7A               	goto	l2152
  4794     0BF6                     l643:
  4795     0BF6  082E               	movf	__tdiv_to_l_@exp1,w
  4796     0BF7  1903               	btfsc	3,2
  4797     0BF8  2C05               	goto	l2200
  4798     0BF9  3001               	movlw	1
  4799     0BFA  00A6               	movwf	??__tdiv_to_l_
  4800     0BFB                     u2725:
  4801     0BFB  1003               	clrc
  4802     0BFC  0DA9               	rlf	__tdiv_to_l_@quot,f
  4803     0BFD  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4804     0BFE  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4805     0BFF  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4806     0C00  0BA6               	decfsz	??__tdiv_to_l_,f
  4807     0C01  2BFB               	goto	u2725
  4808     0C02  3001               	movlw	1
  4809     0C03  02AE               	subwf	__tdiv_to_l_@exp1,f
  4810     0C04  2BF6               	goto	l643
  4811     0C05                     l2200:
  4812     0C05  082C               	movf	__tdiv_to_l_@quot+3,w
  4813     0C06  00A3               	movwf	?__tdiv_to_l_+3
  4814     0C07  082B               	movf	__tdiv_to_l_@quot+2,w
  4815     0C08  00A2               	movwf	?__tdiv_to_l_+2
  4816     0C09  082A               	movf	__tdiv_to_l_@quot+1,w
  4817     0C0A  00A1               	movwf	?__tdiv_to_l_+1
  4818     0C0B  0829               	movf	__tdiv_to_l_@quot,w
  4819     0C0C  00A0               	movwf	?__tdiv_to_l_
  4820     0C0D  0008               	return
  4821     0C0E                     __end_of__tdiv_to_l_:
  4822                           
  4823                           	psect	text15
  4824     0DAE                     __ptext15:	
  4825 ;; *************** function __div_to_l_ *****************
  4826 ;; Defined at:
  4827 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fldivl.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  f1              3    0[BANK0 ] unsigned long 
  4830 ;;  f2              3    3[BANK0 ] unsigned long 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  quot            4   14[BANK0 ] unsigned long 
  4833 ;;  exp1            1   19[BANK0 ] unsigned char 
  4834 ;;  cntr            1   18[BANK0 ] unsigned char 
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  4    0[BANK0 ] unsigned long 
  4837 ;; Registers used:
  4838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 300/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4844 ;;      Params:         0       6       0       0       0
  4845 ;;      Locals:         0       6       0       0       0
  4846 ;;      Temps:          0       8       0       0       0
  4847 ;;      Totals:         0      20       0       0       0
  4848 ;;Total ram usage:       20 bytes
  4849 ;; Hardware stack levels used: 1
  4850 ;; Hardware stack levels required when called: 1
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_sprintf
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858     0DAE                     __div_to_l_:	
  4859                           ;psect for function __div_to_l_
  4860                           
  4861                           
  4862                           ;incstack = 0
  4863                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  4864     0DAE  3020               	movlw	low (__div_to_l_@f1| 0)
  4865     0DAF  0084               	movwf	4
  4866     0DB0  1383               	bcf	3,7	;select IRP bank0
  4867     0DB1  0800               	movf	0,w
  4868     0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4869     0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4870     0DB4  00A6               	movwf	??__div_to_l_
  4871     0DB5  0A84               	incf	4,f
  4872     0DB6  0800               	movf	0,w
  4873     0DB7  00A7               	movwf	??__div_to_l_+1
  4874     0DB8  0A84               	incf	4,f
  4875     0DB9  0800               	movf	0,w
  4876     0DBA  00A8               	movwf	??__div_to_l_+2
  4877     0DBB  0A84               	incf	4,f
  4878     0DBC  0800               	movf	0,w
  4879     0DBD  00A9               	movwf	??__div_to_l_+3
  4880     0DBE  1003               	clrc
  4881     0DBF  0D28               	rlf	??__div_to_l_+2,w
  4882     0DC0  0D29               	rlf	??__div_to_l_+3,w
  4883     0DC1  00B3               	movwf	__div_to_l_@exp1
  4884     0DC2  0833               	movf	__div_to_l_@exp1,w
  4885     0DC3  1D03               	btfss	3,2
  4886     0DC4  2DCE               	goto	l2210
  4887     0DC5                     l2206:
  4888     0DC5  3000               	movlw	0
  4889     0DC6  00A3               	movwf	?__div_to_l_+3
  4890     0DC7  3000               	movlw	0
  4891     0DC8  00A2               	movwf	?__div_to_l_+2
  4892     0DC9  3000               	movlw	0
  4893     0DCA  00A1               	movwf	?__div_to_l_+1
  4894     0DCB  3000               	movlw	0
  4895     0DCC  00A0               	movwf	?__div_to_l_
  4896     0DCD  0008               	return
  4897     0DCE                     l2210:
  4898     0DCE  3023               	movlw	low (__div_to_l_@f2| 0)
  4899     0DCF  0084               	movwf	4
  4900     0DD0  0800               	movf	0,w
  4901     0DD1  00A6               	movwf	??__div_to_l_
  4902     0DD2  0A84               	incf	4,f
  4903     0DD3  0800               	movf	0,w
  4904     0DD4  00A7               	movwf	??__div_to_l_+1
  4905     0DD5  0A84               	incf	4,f
  4906     0DD6  0800               	movf	0,w
  4907     0DD7  00A8               	movwf	??__div_to_l_+2
  4908     0DD8  0A84               	incf	4,f
  4909     0DD9  0800               	movf	0,w
  4910     0DDA  00A9               	movwf	??__div_to_l_+3
  4911     0DDB  1003               	clrc
  4912     0DDC  0D28               	rlf	??__div_to_l_+2,w
  4913     0DDD  0D29               	rlf	??__div_to_l_+3,w
  4914     0DDE  00B2               	movwf	__div_to_l_@cntr
  4915     0DDF  0832               	movf	__div_to_l_@cntr,w
  4916     0DE0  1903               	btfsc	3,2
  4917     0DE1  2DC5               	goto	l2206
  4918     0DE2  3020               	movlw	low (__div_to_l_@f1| 0)
  4919     0DE3  0084               	movwf	4
  4920     0DE4  3000               	movlw	0
  4921     0DE5  0480               	iorwf	0,f
  4922     0DE6  0A84               	incf	4,f
  4923     0DE7  3000               	movlw	0
  4924     0DE8  0480               	iorwf	0,f
  4925     0DE9  0A84               	incf	4,f
  4926     0DEA  3080               	movlw	128
  4927     0DEB  0480               	iorwf	0,f
  4928     0DEC  0A84               	incf	4,f
  4929     0DED  3000               	movlw	0
  4930     0DEE  0480               	iorwf	0,f
  4931     0DEF  3020               	movlw	low (__div_to_l_@f1| 0)
  4932     0DF0  0084               	movwf	4
  4933     0DF1  30FF               	movlw	255
  4934     0DF2  0580               	andwf	0,f
  4935     0DF3  0A84               	incf	4,f
  4936     0DF4  30FF               	movlw	255
  4937     0DF5  0580               	andwf	0,f
  4938     0DF6  0A84               	incf	4,f
  4939     0DF7  30FF               	movlw	255
  4940     0DF8  0580               	andwf	0,f
  4941     0DF9  0A84               	incf	4,f
  4942     0DFA  3000               	movlw	0
  4943     0DFB  0580               	andwf	0,f
  4944     0DFC  3023               	movlw	low (__div_to_l_@f2| 0)
  4945     0DFD  0084               	movwf	4
  4946     0DFE  3000               	movlw	0
  4947     0DFF  0480               	iorwf	0,f
  4948     0E00  0A84               	incf	4,f
  4949     0E01  3000               	movlw	0
  4950     0E02  0480               	iorwf	0,f
  4951     0E03  0A84               	incf	4,f
  4952     0E04  3080               	movlw	128
  4953     0E05  0480               	iorwf	0,f
  4954     0E06  0A84               	incf	4,f
  4955     0E07  3000               	movlw	0
  4956     0E08  0480               	iorwf	0,f
  4957     0E09  3023               	movlw	low (__div_to_l_@f2| 0)
  4958     0E0A  0084               	movwf	4
  4959     0E0B  30FF               	movlw	255
  4960     0E0C  0580               	andwf	0,f
  4961     0E0D  0A84               	incf	4,f
  4962     0E0E  30FF               	movlw	255
  4963     0E0F  0580               	andwf	0,f
  4964     0E10  0A84               	incf	4,f
  4965     0E11  30FF               	movlw	255
  4966     0E12  0580               	andwf	0,f
  4967     0E13  0A84               	incf	4,f
  4968     0E14  3000               	movlw	0
  4969     0E15  0580               	andwf	0,f
  4970     0E16  3000               	movlw	0
  4971     0E17  00B1               	movwf	__div_to_l_@quot+3
  4972     0E18  3000               	movlw	0
  4973     0E19  00B0               	movwf	__div_to_l_@quot+2
  4974     0E1A  3000               	movlw	0
  4975     0E1B  00AF               	movwf	__div_to_l_@quot+1
  4976     0E1C  3000               	movlw	0
  4977     0E1D  00AE               	movwf	__div_to_l_@quot
  4978     0E1E  307F               	movlw	127
  4979     0E1F  02B3               	subwf	__div_to_l_@exp1,f
  4980     0E20  30A0               	movlw	160
  4981     0E21  0732               	addwf	__div_to_l_@cntr,w
  4982     0E22  00A6               	movwf	??__div_to_l_
  4983     0E23  0826               	movf	??__div_to_l_,w
  4984     0E24  02B3               	subwf	__div_to_l_@exp1,f
  4985     0E25  3020               	movlw	32
  4986     0E26  00B2               	movwf	__div_to_l_@cntr
  4987     0E27                     l2226:
  4988     0E27  3001               	movlw	1
  4989     0E28  00A6               	movwf	??__div_to_l_
  4990     0E29                     u2765:
  4991     0E29  1003               	clrc
  4992     0E2A  0DAE               	rlf	__div_to_l_@quot,f
  4993     0E2B  0DAF               	rlf	__div_to_l_@quot+1,f
  4994     0E2C  0DB0               	rlf	__div_to_l_@quot+2,f
  4995     0E2D  0DB1               	rlf	__div_to_l_@quot+3,f
  4996     0E2E  0BA6               	decfsz	??__div_to_l_,f
  4997     0E2F  2E29               	goto	u2765
  4998     0E30  3023               	movlw	low (__div_to_l_@f2| 0)
  4999     0E31  0084               	movwf	4
  5000     0E32  0800               	movf	0,w
  5001     0E33  00A6               	movwf	??__div_to_l_
  5002     0E34  0A84               	incf	4,f
  5003     0E35  0800               	movf	0,w
  5004     0E36  00A7               	movwf	??__div_to_l_+1
  5005     0E37  0A84               	incf	4,f
  5006     0E38  0800               	movf	0,w
  5007     0E39  00A8               	movwf	??__div_to_l_+2
  5008     0E3A  0A84               	incf	4,f
  5009     0E3B  0800               	movf	0,w
  5010     0E3C  00A9               	movwf	??__div_to_l_+3
  5011     0E3D  3020               	movlw	low (__div_to_l_@f1| 0)
  5012     0E3E  0084               	movwf	4
  5013     0E3F  0800               	movf	0,w
  5014     0E40  00AA               	movwf	??__div_to_l_+4
  5015     0E41  0A84               	incf	4,f
  5016     0E42  0800               	movf	0,w
  5017     0E43  00AB               	movwf	??__div_to_l_+5
  5018     0E44  0A84               	incf	4,f
  5019     0E45  0800               	movf	0,w
  5020     0E46  00AC               	movwf	??__div_to_l_+6
  5021     0E47  0A84               	incf	4,f
  5022     0E48  0800               	movf	0,w
  5023     0E49  00AD               	movwf	??__div_to_l_+7
  5024     0E4A  0829               	movf	??__div_to_l_+3,w
  5025     0E4B  022D               	subwf	??__div_to_l_+7,w
  5026     0E4C  1D03               	skipz
  5027     0E4D  2E58               	goto	u2775
  5028     0E4E  0828               	movf	??__div_to_l_+2,w
  5029     0E4F  022C               	subwf	??__div_to_l_+6,w
  5030     0E50  1D03               	skipz
  5031     0E51  2E58               	goto	u2775
  5032     0E52  0827               	movf	??__div_to_l_+1,w
  5033     0E53  022B               	subwf	??__div_to_l_+5,w
  5034     0E54  1D03               	skipz
  5035     0E55  2E58               	goto	u2775
  5036     0E56  0826               	movf	??__div_to_l_,w
  5037     0E57  022A               	subwf	??__div_to_l_+4,w
  5038     0E58                     u2775:
  5039     0E58  1C03               	skipc
  5040     0E59  2E7D               	goto	l556
  5041     0E5A  3023               	movlw	low (__div_to_l_@f2| 0)
  5042     0E5B  0084               	movwf	4
  5043     0E5C  0800               	movf	0,w
  5044     0E5D  00A6               	movwf	??__div_to_l_
  5045     0E5E  0A84               	incf	4,f
  5046     0E5F  0800               	movf	0,w
  5047     0E60  00A7               	movwf	??__div_to_l_+1
  5048     0E61  0A84               	incf	4,f
  5049     0E62  0800               	movf	0,w
  5050     0E63  00A8               	movwf	??__div_to_l_+2
  5051     0E64  0A84               	incf	4,f
  5052     0E65  0800               	movf	0,w
  5053     0E66  00A9               	movwf	??__div_to_l_+3
  5054     0E67  3020               	movlw	low (__div_to_l_@f1| 0)
  5055     0E68  0084               	movwf	4
  5056     0E69  0826               	movf	??__div_to_l_,w
  5057     0E6A  0280               	subwf	0,f
  5058     0E6B  0A84               	incf	4,f
  5059     0E6C  0827               	movf	??__div_to_l_+1,w
  5060     0E6D  1C03               	skipc
  5061     0E6E  0F27               	incfsz	??__div_to_l_+1,w
  5062     0E6F  0280               	subwf	0,f
  5063     0E70  0A84               	incf	4,f
  5064     0E71  0828               	movf	??__div_to_l_+2,w
  5065     0E72  1C03               	skipc
  5066     0E73  0F28               	incfsz	??__div_to_l_+2,w
  5067     0E74  0280               	subwf	0,f
  5068     0E75  0A84               	incf	4,f
  5069     0E76  0829               	movf	??__div_to_l_+3,w
  5070     0E77  1C03               	skipc
  5071     0E78  0A29               	incf	??__div_to_l_+3,w
  5072     0E79  0280               	subwf	0,f
  5073     0E7A  3003               	movlw	3
  5074     0E7B  0284               	subwf	4,f
  5075     0E7C  142E               	bsf	__div_to_l_@quot,0
  5076     0E7D                     l556:
  5077     0E7D  3020               	movlw	low (__div_to_l_@f1| 0)
  5078     0E7E  0084               	movwf	4
  5079     0E7F  1003               	clrc
  5080     0E80  0D80               	rlf	0,f
  5081     0E81  0A84               	incf	4,f
  5082     0E82  0D80               	rlf	0,f
  5083     0E83  0A84               	incf	4,f
  5084     0E84  0D80               	rlf	0,f
  5085     0E85  0A84               	incf	4,f
  5086     0E86  0D80               	rlf	0,f
  5087     0E87  0384               	decf	4,f
  5088     0E88  0384               	decf	4,f
  5089     0E89  0384               	decf	4,f
  5090     0E8A  3001               	movlw	1
  5091     0E8B  02B2               	subwf	__div_to_l_@cntr,f
  5092     0E8C  1D03               	btfss	3,2
  5093     0E8D  2E27               	goto	l2226
  5094     0E8E  1FB3               	btfss	__div_to_l_@exp1,7
  5095     0E8F  2EA5               	goto	l2246
  5096     0E90  0833               	movf	__div_to_l_@exp1,w
  5097     0E91  3A80               	xorlw	128
  5098     0E92  3E9F               	addlw	159
  5099     0E93  1C03               	btfss	3,0
  5100     0E94  2DC5               	goto	l2206
  5101     0E95                     l2242:
  5102     0E95  3001               	movlw	1
  5103     0E96                     u2815:
  5104     0E96  1003               	clrc
  5105     0E97  0CB1               	rrf	__div_to_l_@quot+3,f
  5106     0E98  0CB0               	rrf	__div_to_l_@quot+2,f
  5107     0E99  0CAF               	rrf	__div_to_l_@quot+1,f
  5108     0E9A  0CAE               	rrf	__div_to_l_@quot,f
  5109     0E9B  3EFF               	addlw	-1
  5110     0E9C  1D03               	skipz
  5111     0E9D  2E96               	goto	u2815
  5112     0E9E  3001               	movlw	1
  5113     0E9F  00FF               	movwf	127
  5114     0EA0  087F               	movf	127,w
  5115     0EA1  07B3               	addwf	__div_to_l_@exp1,f
  5116     0EA2  1903               	btfsc	3,2
  5117     0EA3  2EB8               	goto	l2254
  5118     0EA4  2E95               	goto	l2242
  5119     0EA5                     l2246:
  5120     0EA5  3020               	movlw	32
  5121     0EA6  0233               	subwf	__div_to_l_@exp1,w
  5122     0EA7  1803               	btfsc	3,0
  5123     0EA8  2DC5               	goto	l2206
  5124     0EA9                     l564:
  5125     0EA9  0833               	movf	__div_to_l_@exp1,w
  5126     0EAA  1903               	btfsc	3,2
  5127     0EAB  2EB8               	goto	l2254
  5128     0EAC  3001               	movlw	1
  5129     0EAD  00A6               	movwf	??__div_to_l_
  5130     0EAE                     u2845:
  5131     0EAE  1003               	clrc
  5132     0EAF  0DAE               	rlf	__div_to_l_@quot,f
  5133     0EB0  0DAF               	rlf	__div_to_l_@quot+1,f
  5134     0EB1  0DB0               	rlf	__div_to_l_@quot+2,f
  5135     0EB2  0DB1               	rlf	__div_to_l_@quot+3,f
  5136     0EB3  0BA6               	decfsz	??__div_to_l_,f
  5137     0EB4  2EAE               	goto	u2845
  5138     0EB5  3001               	movlw	1
  5139     0EB6  02B3               	subwf	__div_to_l_@exp1,f
  5140     0EB7  2EA9               	goto	l564
  5141     0EB8                     l2254:
  5142     0EB8  0831               	movf	__div_to_l_@quot+3,w
  5143     0EB9  00A3               	movwf	?__div_to_l_+3
  5144     0EBA  0830               	movf	__div_to_l_@quot+2,w
  5145     0EBB  00A2               	movwf	?__div_to_l_+2
  5146     0EBC  082F               	movf	__div_to_l_@quot+1,w
  5147     0EBD  00A1               	movwf	?__div_to_l_+1
  5148     0EBE  082E               	movf	__div_to_l_@quot,w
  5149     0EBF  00A0               	movwf	?__div_to_l_
  5150     0EC0  0008               	return
  5151     0EC1                     __end_of__div_to_l_:
  5152                           
  5153                           	psect	text16
  5154     1778                     __ptext16:	
  5155 ;; *************** function ___wmul *****************
  5156 ;; Defined at:
  5157 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5160 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  product         2    4[BANK0 ] unsigned int 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;                  2    0[BANK0 ] unsigned int 
  5165 ;; Registers used:
  5166 ;;		wreg, status,2, status,0
  5167 ;; Tracked objects:
  5168 ;;		On entry : B00/0
  5169 ;;		On exit  : B00/0
  5170 ;;		Unchanged: 800/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5172 ;;      Params:         0       4       0       0       0
  5173 ;;      Locals:         0       2       0       0       0
  5174 ;;      Temps:          0       0       0       0       0
  5175 ;;      Totals:         0       6       0       0       0
  5176 ;;Total ram usage:        6 bytes
  5177 ;; Hardware stack levels used: 1
  5178 ;; Hardware stack levels required when called: 1
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_sprintf
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186     1778                     ___wmul:	
  5187                           ;psect for function ___wmul
  5188                           
  5189                           
  5190                           ;incstack = 0
  5191                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5192     1778  01A4               	clrf	___wmul@product
  5193     1779  01A5               	clrf	___wmul@product+1
  5194     177A                     l2260:
  5195     177A  1C20               	btfss	___wmul@multiplier,0
  5196     177B  2F82               	goto	l347
  5197     177C  0822               	movf	___wmul@multiplicand,w
  5198     177D  07A4               	addwf	___wmul@product,f
  5199     177E  1803               	skipnc
  5200     177F  0AA5               	incf	___wmul@product+1,f
  5201     1780  0823               	movf	___wmul@multiplicand+1,w
  5202     1781  07A5               	addwf	___wmul@product+1,f
  5203     1782                     l347:
  5204     1782  3001               	movlw	1
  5205     1783                     u2875:
  5206     1783  1003               	clrc
  5207     1784  0DA2               	rlf	___wmul@multiplicand,f
  5208     1785  0DA3               	rlf	___wmul@multiplicand+1,f
  5209     1786  3EFF               	addlw	-1
  5210     1787  1D03               	skipz
  5211     1788  2F83               	goto	u2875
  5212     1789  3001               	movlw	1
  5213     178A                     u2885:
  5214     178A  1003               	clrc
  5215     178B  0CA1               	rrf	___wmul@multiplier+1,f
  5216     178C  0CA0               	rrf	___wmul@multiplier,f
  5217     178D  3EFF               	addlw	-1
  5218     178E  1D03               	skipz
  5219     178F  2F8A               	goto	u2885
  5220     1790  0820               	movf	___wmul@multiplier,w
  5221     1791  0421               	iorwf	___wmul@multiplier+1,w
  5222     1792  1D03               	btfss	3,2
  5223     1793  2F7A               	goto	l2260
  5224     1794  0825               	movf	___wmul@product+1,w
  5225     1795  00A1               	movwf	?___wmul+1
  5226     1796  0824               	movf	___wmul@product,w
  5227     1797  00A0               	movwf	?___wmul
  5228     1798  0008               	return
  5229     1799                     __end_of___wmul:
  5230                           
  5231                           	psect	text17
  5232     08A3                     __ptext17:	
  5233 ;; *************** function ___lltoft *****************
  5234 ;; Defined at:
  5235 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lltoft.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  c               4    8[BANK0 ] unsigned long 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  exp             1   12[BANK0 ] unsigned char 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;                  3    8[BANK0 ] float 
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 300/0
  5246 ;;		On exit  : 300/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5249 ;;      Params:         0       4       0       0       0
  5250 ;;      Locals:         0       1       0       0       0
  5251 ;;      Temps:          0       0       0       0       0
  5252 ;;      Totals:         0       5       0       0       0
  5253 ;;Total ram usage:        5 bytes
  5254 ;; Hardware stack levels used: 1
  5255 ;; Hardware stack levels required when called: 2
  5256 ;; This function calls:
  5257 ;;		___ftpack
  5258 ;; This function is called by:
  5259 ;;		_sprintf
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263     08A3                     ___lltoft:	
  5264                           ;psect for function ___lltoft
  5265                           
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5269     08A3  308E               	movlw	142
  5270     08A4  00AC               	movwf	___lltoft@exp
  5271     08A5                     l2406:
  5272     08A5  30FF               	movlw	255
  5273     08A6  052B               	andwf	___lltoft@c+3,w
  5274     08A7  1903               	btfsc	3,2
  5275     08A8  28B7               	goto	l2408
  5276     08A9  3001               	movlw	1
  5277     08AA                     u3185:
  5278     08AA  1003               	clrc
  5279     08AB  0CAB               	rrf	___lltoft@c+3,f
  5280     08AC  0CAA               	rrf	___lltoft@c+2,f
  5281     08AD  0CA9               	rrf	___lltoft@c+1,f
  5282     08AE  0CA8               	rrf	___lltoft@c,f
  5283     08AF  3EFF               	addlw	-1
  5284     08B0  1D03               	skipz
  5285     08B1  28AA               	goto	u3185
  5286     08B2  3001               	movlw	1
  5287     08B3  00FF               	movwf	127
  5288     08B4  087F               	movf	127,w
  5289     08B5  07AC               	addwf	___lltoft@exp,f
  5290     08B6  28A5               	goto	l2406
  5291     08B7                     l2408:
  5292     08B7  0828               	movf	___lltoft@c,w
  5293     08B8  00A0               	movwf	___ftpack@arg
  5294     08B9  0829               	movf	___lltoft@c+1,w
  5295     08BA  00A1               	movwf	___ftpack@arg+1
  5296     08BB  082A               	movf	___lltoft@c+2,w
  5297     08BC  00A2               	movwf	___ftpack@arg+2
  5298     08BD  082C               	movf	___lltoft@exp,w
  5299     08BE  00A3               	movwf	___ftpack@exp
  5300     08BF  01A4               	clrf	___ftpack@sign
  5301     08C0  120A  158A  227D   	fcall	___ftpack
  5302     08C3  0820               	movf	?___ftpack,w
  5303     08C4  00A8               	movwf	?___lltoft
  5304     08C5  0821               	movf	?___ftpack+1,w
  5305     08C6  00A9               	movwf	?___lltoft+1
  5306     08C7  0822               	movf	?___ftpack+2,w
  5307     08C8  00AA               	movwf	?___lltoft+2
  5308     08C9  0008               	return
  5309     08CA                     __end_of___lltoft:
  5310                           
  5311                           	psect	text18
  5312     097A                     __ptext18:	
  5313 ;; *************** function ___llmod *****************
  5314 ;; Defined at:
  5315 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  divisor         4    0[BANK0 ] unsigned long 
  5318 ;;  dividend        4    4[BANK0 ] unsigned long 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  counter         1    9[BANK0 ] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  4    0[BANK0 ] unsigned long 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0, btemp+1
  5325 ;; Tracked objects:
  5326 ;;		On entry : 300/0
  5327 ;;		On exit  : 300/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5330 ;;      Params:         0       8       0       0       0
  5331 ;;      Locals:         0       1       0       0       0
  5332 ;;      Temps:          0       1       0       0       0
  5333 ;;      Totals:         0      10       0       0       0
  5334 ;;Total ram usage:       10 bytes
  5335 ;; Hardware stack levels used: 1
  5336 ;; Hardware stack levels required when called: 1
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_sprintf
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344     097A                     ___llmod:	
  5345                           ;psect for function ___llmod
  5346                           
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  5350     097A  0823               	movf	___llmod@divisor+3,w
  5351     097B  0422               	iorwf	___llmod@divisor+2,w
  5352     097C  0421               	iorwf	___llmod@divisor+1,w
  5353     097D  0420               	iorwf	___llmod@divisor,w
  5354     097E  1903               	skipnz
  5355     097F  29BD               	goto	l2396
  5356     0980  01A9               	clrf	___llmod@counter
  5357     0981  0AA9               	incf	___llmod@counter,f
  5358     0982                     l2386:
  5359     0982  1BA3               	btfsc	___llmod@divisor+3,7
  5360     0983  2992               	goto	l2388
  5361     0984  3001               	movlw	1
  5362     0985  00A8               	movwf	??___llmod
  5363     0986                     u3135:
  5364     0986  1003               	clrc
  5365     0987  0DA0               	rlf	___llmod@divisor,f
  5366     0988  0DA1               	rlf	___llmod@divisor+1,f
  5367     0989  0DA2               	rlf	___llmod@divisor+2,f
  5368     098A  0DA3               	rlf	___llmod@divisor+3,f
  5369     098B  0BA8               	decfsz	??___llmod,f
  5370     098C  2986               	goto	u3135
  5371     098D  3001               	movlw	1
  5372     098E  00FF               	movwf	127
  5373     098F  087F               	movf	127,w
  5374     0990  07A9               	addwf	___llmod@counter,f
  5375     0991  2982               	goto	l2386
  5376     0992                     l2388:
  5377     0992  0823               	movf	___llmod@divisor+3,w
  5378     0993  0227               	subwf	___llmod@dividend+3,w
  5379     0994  1D03               	skipz
  5380     0995  29A0               	goto	u3155
  5381     0996  0822               	movf	___llmod@divisor+2,w
  5382     0997  0226               	subwf	___llmod@dividend+2,w
  5383     0998  1D03               	skipz
  5384     0999  29A0               	goto	u3155
  5385     099A  0821               	movf	___llmod@divisor+1,w
  5386     099B  0225               	subwf	___llmod@dividend+1,w
  5387     099C  1D03               	skipz
  5388     099D  29A0               	goto	u3155
  5389     099E  0820               	movf	___llmod@divisor,w
  5390     099F  0224               	subwf	___llmod@dividend,w
  5391     09A0                     u3155:
  5392     09A0  1C03               	skipc
  5393     09A1  29B0               	goto	l2392
  5394     09A2  0820               	movf	___llmod@divisor,w
  5395     09A3  02A4               	subwf	___llmod@dividend,f
  5396     09A4  0821               	movf	___llmod@divisor+1,w
  5397     09A5  1C03               	skipc
  5398     09A6  0F21               	incfsz	___llmod@divisor+1,w
  5399     09A7  02A5               	subwf	___llmod@dividend+1,f
  5400     09A8  0822               	movf	___llmod@divisor+2,w
  5401     09A9  1C03               	skipc
  5402     09AA  0F22               	incfsz	___llmod@divisor+2,w
  5403     09AB  02A6               	subwf	___llmod@dividend+2,f
  5404     09AC  0823               	movf	___llmod@divisor+3,w
  5405     09AD  1C03               	skipc
  5406     09AE  0F23               	incfsz	___llmod@divisor+3,w
  5407     09AF  02A7               	subwf	___llmod@dividend+3,f
  5408     09B0                     l2392:
  5409     09B0  3001               	movlw	1
  5410     09B1                     u3165:
  5411     09B1  1003               	clrc
  5412     09B2  0CA3               	rrf	___llmod@divisor+3,f
  5413     09B3  0CA2               	rrf	___llmod@divisor+2,f
  5414     09B4  0CA1               	rrf	___llmod@divisor+1,f
  5415     09B5  0CA0               	rrf	___llmod@divisor,f
  5416     09B6  3EFF               	addlw	-1
  5417     09B7  1D03               	skipz
  5418     09B8  29B1               	goto	u3165
  5419     09B9  3001               	movlw	1
  5420     09BA  02A9               	subwf	___llmod@counter,f
  5421     09BB  1D03               	btfss	3,2
  5422     09BC  2992               	goto	l2388
  5423     09BD                     l2396:
  5424     09BD  0827               	movf	___llmod@dividend+3,w
  5425     09BE  00A3               	movwf	?___llmod+3
  5426     09BF  0826               	movf	___llmod@dividend+2,w
  5427     09C0  00A2               	movwf	?___llmod+2
  5428     09C1  0825               	movf	___llmod@dividend+1,w
  5429     09C2  00A1               	movwf	?___llmod+1
  5430     09C3  0824               	movf	___llmod@dividend,w
  5431     09C4  00A0               	movwf	?___llmod
  5432     09C5  0008               	return
  5433     09C6                     __end_of___llmod:
  5434                           
  5435                           	psect	text19
  5436     0A1F                     __ptext19:	
  5437 ;; *************** function ___lldiv *****************
  5438 ;; Defined at:
  5439 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;  divisor         4    0[BANK0 ] unsigned long 
  5442 ;;  dividend        4    4[BANK0 ] unsigned long 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  quotient        4    9[BANK0 ] unsigned long 
  5445 ;;  counter         1   13[BANK0 ] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  4    0[BANK0 ] unsigned long 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, btemp+1
  5450 ;; Tracked objects:
  5451 ;;		On entry : 300/0
  5452 ;;		On exit  : 300/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5455 ;;      Params:         0       8       0       0       0
  5456 ;;      Locals:         0       5       0       0       0
  5457 ;;      Temps:          0       1       0       0       0
  5458 ;;      Totals:         0      14       0       0       0
  5459 ;;Total ram usage:       14 bytes
  5460 ;; Hardware stack levels used: 1
  5461 ;; Hardware stack levels required when called: 1
  5462 ;; This function calls:
  5463 ;;		Nothing
  5464 ;; This function is called by:
  5465 ;;		_sprintf
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469     0A1F                     ___lldiv:	
  5470                           ;psect for function ___lldiv
  5471                           
  5472                           
  5473                           ;incstack = 0
  5474                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  5475     0A1F  3000               	movlw	0
  5476     0A20  00AC               	movwf	___lldiv@quotient+3
  5477     0A21  3000               	movlw	0
  5478     0A22  00AB               	movwf	___lldiv@quotient+2
  5479     0A23  3000               	movlw	0
  5480     0A24  00AA               	movwf	___lldiv@quotient+1
  5481     0A25  3000               	movlw	0
  5482     0A26  00A9               	movwf	___lldiv@quotient
  5483     0A27  0823               	movf	___lldiv@divisor+3,w
  5484     0A28  0422               	iorwf	___lldiv@divisor+2,w
  5485     0A29  0421               	iorwf	___lldiv@divisor+1,w
  5486     0A2A  0420               	iorwf	___lldiv@divisor,w
  5487     0A2B  1903               	skipnz
  5488     0A2C  2A74               	goto	l2294
  5489     0A2D  01AD               	clrf	___lldiv@counter
  5490     0A2E  0AAD               	incf	___lldiv@counter,f
  5491     0A2F                     l2280:
  5492     0A2F  1BA3               	btfsc	___lldiv@divisor+3,7
  5493     0A30  2A3F               	goto	l2282
  5494     0A31  3001               	movlw	1
  5495     0A32  00A8               	movwf	??___lldiv
  5496     0A33                     u2915:
  5497     0A33  1003               	clrc
  5498     0A34  0DA0               	rlf	___lldiv@divisor,f
  5499     0A35  0DA1               	rlf	___lldiv@divisor+1,f
  5500     0A36  0DA2               	rlf	___lldiv@divisor+2,f
  5501     0A37  0DA3               	rlf	___lldiv@divisor+3,f
  5502     0A38  0BA8               	decfsz	??___lldiv,f
  5503     0A39  2A33               	goto	u2915
  5504     0A3A  3001               	movlw	1
  5505     0A3B  00FF               	movwf	127
  5506     0A3C  087F               	movf	127,w
  5507     0A3D  07AD               	addwf	___lldiv@counter,f
  5508     0A3E  2A2F               	goto	l2280
  5509     0A3F                     l2282:
  5510     0A3F  3001               	movlw	1
  5511     0A40  00A8               	movwf	??___lldiv
  5512     0A41                     u2935:
  5513     0A41  1003               	clrc
  5514     0A42  0DA9               	rlf	___lldiv@quotient,f
  5515     0A43  0DAA               	rlf	___lldiv@quotient+1,f
  5516     0A44  0DAB               	rlf	___lldiv@quotient+2,f
  5517     0A45  0DAC               	rlf	___lldiv@quotient+3,f
  5518     0A46  0BA8               	decfsz	??___lldiv,f
  5519     0A47  2A41               	goto	u2935
  5520     0A48  0823               	movf	___lldiv@divisor+3,w
  5521     0A49  0227               	subwf	___lldiv@dividend+3,w
  5522     0A4A  1D03               	skipz
  5523     0A4B  2A56               	goto	u2945
  5524     0A4C  0822               	movf	___lldiv@divisor+2,w
  5525     0A4D  0226               	subwf	___lldiv@dividend+2,w
  5526     0A4E  1D03               	skipz
  5527     0A4F  2A56               	goto	u2945
  5528     0A50  0821               	movf	___lldiv@divisor+1,w
  5529     0A51  0225               	subwf	___lldiv@dividend+1,w
  5530     0A52  1D03               	skipz
  5531     0A53  2A56               	goto	u2945
  5532     0A54  0820               	movf	___lldiv@divisor,w
  5533     0A55  0224               	subwf	___lldiv@dividend,w
  5534     0A56                     u2945:
  5535     0A56  1C03               	skipc
  5536     0A57  2A67               	goto	l2290
  5537     0A58  0820               	movf	___lldiv@divisor,w
  5538     0A59  02A4               	subwf	___lldiv@dividend,f
  5539     0A5A  0821               	movf	___lldiv@divisor+1,w
  5540     0A5B  1C03               	skipc
  5541     0A5C  0F21               	incfsz	___lldiv@divisor+1,w
  5542     0A5D  02A5               	subwf	___lldiv@dividend+1,f
  5543     0A5E  0822               	movf	___lldiv@divisor+2,w
  5544     0A5F  1C03               	skipc
  5545     0A60  0F22               	incfsz	___lldiv@divisor+2,w
  5546     0A61  02A6               	subwf	___lldiv@dividend+2,f
  5547     0A62  0823               	movf	___lldiv@divisor+3,w
  5548     0A63  1C03               	skipc
  5549     0A64  0F23               	incfsz	___lldiv@divisor+3,w
  5550     0A65  02A7               	subwf	___lldiv@dividend+3,f
  5551     0A66  1429               	bsf	___lldiv@quotient,0
  5552     0A67                     l2290:
  5553     0A67  3001               	movlw	1
  5554     0A68                     u2955:
  5555     0A68  1003               	clrc
  5556     0A69  0CA3               	rrf	___lldiv@divisor+3,f
  5557     0A6A  0CA2               	rrf	___lldiv@divisor+2,f
  5558     0A6B  0CA1               	rrf	___lldiv@divisor+1,f
  5559     0A6C  0CA0               	rrf	___lldiv@divisor,f
  5560     0A6D  3EFF               	addlw	-1
  5561     0A6E  1D03               	skipz
  5562     0A6F  2A68               	goto	u2955
  5563     0A70  3001               	movlw	1
  5564     0A71  02AD               	subwf	___lldiv@counter,f
  5565     0A72  1D03               	btfss	3,2
  5566     0A73  2A3F               	goto	l2282
  5567     0A74                     l2294:
  5568     0A74  082C               	movf	___lldiv@quotient+3,w
  5569     0A75  00A3               	movwf	?___lldiv+3
  5570     0A76  082B               	movf	___lldiv@quotient+2,w
  5571     0A77  00A2               	movwf	?___lldiv+2
  5572     0A78  082A               	movf	___lldiv@quotient+1,w
  5573     0A79  00A1               	movwf	?___lldiv+1
  5574     0A7A  0829               	movf	___lldiv@quotient,w
  5575     0A7B  00A0               	movwf	?___lldiv
  5576     0A7C  0008               	return
  5577     0A7D                     __end_of___lldiv:
  5578                           
  5579                           	psect	text20
  5580     0780                     __ptext20:	
  5581 ;; *************** function ___fttol *****************
  5582 ;; Defined at:
  5583 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  f1              3   39[BANK0 ] float 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  lval            4   47[BANK0 ] unsigned long 
  5588 ;;  exp1            1   51[BANK0 ] unsigned char 
  5589 ;;  sign1           1   46[BANK0 ] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  4   39[BANK0 ] long 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, btemp+1
  5594 ;; Tracked objects:
  5595 ;;		On entry : 300/0
  5596 ;;		On exit  : 300/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5599 ;;      Params:         0       4       0       0       0
  5600 ;;      Locals:         0       6       0       0       0
  5601 ;;      Temps:          0       3       0       0       0
  5602 ;;      Totals:         0      13       0       0       0
  5603 ;;Total ram usage:       13 bytes
  5604 ;; Hardware stack levels used: 1
  5605 ;; Hardware stack levels required when called: 1
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_sprintf
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613     0780                     ___fttol:	
  5614                           ;psect for function ___fttol
  5615                           
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  5619     0780  0847               	movf	___fttol@f1,w
  5620     0781  00CB               	movwf	??___fttol
  5621     0782  0848               	movf	___fttol@f1+1,w
  5622     0783  00CC               	movwf	??___fttol+1
  5623     0784  0849               	movf	___fttol@f1+2,w
  5624     0785  00CD               	movwf	??___fttol+2
  5625     0786  1003               	clrc
  5626     0787  0D4C               	rlf	??___fttol+1,w
  5627     0788  0D4D               	rlf	??___fttol+2,w
  5628     0789  00D3               	movwf	___fttol@exp1
  5629     078A  0853               	movf	___fttol@exp1,w
  5630     078B  1D03               	btfss	3,2
  5631     078C  2F96               	goto	l2340
  5632     078D                     l2336:
  5633     078D  3000               	movlw	0
  5634     078E  00CA               	movwf	?___fttol+3
  5635     078F  3000               	movlw	0
  5636     0790  00C9               	movwf	?___fttol+2
  5637     0791  3000               	movlw	0
  5638     0792  00C8               	movwf	?___fttol+1
  5639     0793  3000               	movlw	0
  5640     0794  00C7               	movwf	?___fttol
  5641     0795  0008               	return
  5642     0796                     l2340:
  5643     0796  0847               	movf	___fttol@f1,w
  5644     0797  00CB               	movwf	??___fttol
  5645     0798  0848               	movf	___fttol@f1+1,w
  5646     0799  00CC               	movwf	??___fttol+1
  5647     079A  0849               	movf	___fttol@f1+2,w
  5648     079B  00CD               	movwf	??___fttol+2
  5649     079C  3017               	movlw	23
  5650     079D                     u3035:
  5651     079D  1003               	clrc
  5652     079E  0CCD               	rrf	??___fttol+2,f
  5653     079F  0CCC               	rrf	??___fttol+1,f
  5654     07A0  0CCB               	rrf	??___fttol,f
  5655     07A1  3EFF               	addlw	-1
  5656     07A2  1D03               	skipz
  5657     07A3  2F9D               	goto	u3035
  5658     07A4  084B               	movf	??___fttol,w
  5659     07A5  00CE               	movwf	___fttol@sign1
  5660     07A6  17C8               	bsf	___fttol@f1+1,7
  5661     07A7  30FF               	movlw	255
  5662     07A8  05C7               	andwf	___fttol@f1,f
  5663     07A9  30FF               	movlw	255
  5664     07AA  05C8               	andwf	___fttol@f1+1,f
  5665     07AB  3000               	movlw	0
  5666     07AC  05C9               	andwf	___fttol@f1+2,f
  5667     07AD  0847               	movf	___fttol@f1,w
  5668     07AE  00CF               	movwf	___fttol@lval
  5669     07AF  0848               	movf	___fttol@f1+1,w
  5670     07B0  00D0               	movwf	___fttol@lval+1
  5671     07B1  0849               	movf	___fttol@f1+2,w
  5672     07B2  00D1               	movwf	___fttol@lval+2
  5673     07B3  01D2               	clrf	___fttol@lval+3
  5674     07B4  308E               	movlw	142
  5675     07B5  02D3               	subwf	___fttol@exp1,f
  5676     07B6  1FD3               	btfss	___fttol@exp1,7
  5677     07B7  2FCD               	goto	l2362
  5678     07B8  0853               	movf	___fttol@exp1,w
  5679     07B9  3A80               	xorlw	128
  5680     07BA  3E8F               	addlw	143
  5681     07BB  1C03               	btfss	3,0
  5682     07BC  2F8D               	goto	l2336
  5683     07BD                     l2358:
  5684     07BD  3001               	movlw	1
  5685     07BE                     u3065:
  5686     07BE  1003               	clrc
  5687     07BF  0CD2               	rrf	___fttol@lval+3,f
  5688     07C0  0CD1               	rrf	___fttol@lval+2,f
  5689     07C1  0CD0               	rrf	___fttol@lval+1,f
  5690     07C2  0CCF               	rrf	___fttol@lval,f
  5691     07C3  3EFF               	addlw	-1
  5692     07C4  1D03               	skipz
  5693     07C5  2FBE               	goto	u3065
  5694     07C6  3001               	movlw	1
  5695     07C7  00FF               	movwf	127
  5696     07C8  087F               	movf	127,w
  5697     07C9  07D3               	addwf	___fttol@exp1,f
  5698     07CA  1903               	btfsc	3,2
  5699     07CB  2FE0               	goto	l2370
  5700     07CC  2FBD               	goto	l2358
  5701     07CD                     l2362:
  5702     07CD  3018               	movlw	24
  5703     07CE  0253               	subwf	___fttol@exp1,w
  5704     07CF  1803               	btfsc	3,0
  5705     07D0  2F8D               	goto	l2336
  5706     07D1                     l684:
  5707     07D1  0853               	movf	___fttol@exp1,w
  5708     07D2  1903               	btfsc	3,2
  5709     07D3  2FE0               	goto	l2370
  5710     07D4  3001               	movlw	1
  5711     07D5  00CB               	movwf	??___fttol
  5712     07D6                     u3095:
  5713     07D6  1003               	clrc
  5714     07D7  0DCF               	rlf	___fttol@lval,f
  5715     07D8  0DD0               	rlf	___fttol@lval+1,f
  5716     07D9  0DD1               	rlf	___fttol@lval+2,f
  5717     07DA  0DD2               	rlf	___fttol@lval+3,f
  5718     07DB  0BCB               	decfsz	??___fttol,f
  5719     07DC  2FD6               	goto	u3095
  5720     07DD  3001               	movlw	1
  5721     07DE  02D3               	subwf	___fttol@exp1,f
  5722     07DF  2FD1               	goto	l684
  5723     07E0                     l2370:
  5724     07E0  084E               	movf	___fttol@sign1,w
  5725     07E1  1903               	btfsc	3,2
  5726     07E2  2FEE               	goto	l2374
  5727     07E3  09CF               	comf	___fttol@lval,f
  5728     07E4  09D0               	comf	___fttol@lval+1,f
  5729     07E5  09D1               	comf	___fttol@lval+2,f
  5730     07E6  09D2               	comf	___fttol@lval+3,f
  5731     07E7  0ACF               	incf	___fttol@lval,f
  5732     07E8  1903               	skipnz
  5733     07E9  0AD0               	incf	___fttol@lval+1,f
  5734     07EA  1903               	skipnz
  5735     07EB  0AD1               	incf	___fttol@lval+2,f
  5736     07EC  1903               	skipnz
  5737     07ED  0AD2               	incf	___fttol@lval+3,f
  5738     07EE                     l2374:
  5739     07EE  0852               	movf	___fttol@lval+3,w
  5740     07EF  00CA               	movwf	?___fttol+3
  5741     07F0  0851               	movf	___fttol@lval+2,w
  5742     07F1  00C9               	movwf	?___fttol+2
  5743     07F2  0850               	movf	___fttol@lval+1,w
  5744     07F3  00C8               	movwf	?___fttol+1
  5745     07F4  084F               	movf	___fttol@lval,w
  5746     07F5  00C7               	movwf	?___fttol
  5747     07F6  0008               	return
  5748     07F7                     __end_of___fttol:
  5749                           
  5750                           	psect	text21
  5751     175B                     __ptext21:	
  5752 ;; *************** function ___ftsub *****************
  5753 ;; Defined at:
  5754 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftsub.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;  f2              3   54[BANK0 ] float 
  5757 ;;  f1              3   57[BANK0 ] float 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  3   54[BANK0 ] float 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 300/0
  5766 ;;		On exit  : 300/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5769 ;;      Params:         0       6       0       0       0
  5770 ;;      Locals:         0       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0
  5772 ;;      Totals:         0       6       0       0       0
  5773 ;;Total ram usage:        6 bytes
  5774 ;; Hardware stack levels used: 1
  5775 ;; Hardware stack levels required when called: 3
  5776 ;; This function calls:
  5777 ;;		___ftadd
  5778 ;; This function is called by:
  5779 ;;		_sprintf
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783     175B                     ___ftsub:	
  5784                           ;psect for function ___ftsub
  5785                           
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5789     175B  0858               	movf	___ftsub@f2+2,w
  5790     175C  0457               	iorwf	___ftsub@f2+1,w
  5791     175D  0456               	iorwf	___ftsub@f2,w
  5792     175E  1903               	skipnz
  5793     175F  2F62               	goto	l2330
  5794     1760  3080               	movlw	128
  5795     1761  06D8               	xorwf	___ftsub@f2+2,f
  5796     1762                     l2330:
  5797     1762  0859               	movf	___ftsub@f1,w
  5798     1763  00CA               	movwf	___ftadd@f1
  5799     1764  085A               	movf	___ftsub@f1+1,w
  5800     1765  00CB               	movwf	___ftadd@f1+1
  5801     1766  085B               	movf	___ftsub@f1+2,w
  5802     1767  00CC               	movwf	___ftadd@f1+2
  5803     1768  0856               	movf	___ftsub@f2,w
  5804     1769  00CD               	movwf	___ftadd@f2
  5805     176A  0857               	movf	___ftsub@f2+1,w
  5806     176B  00CE               	movwf	___ftadd@f2+1
  5807     176C  0858               	movf	___ftsub@f2+2,w
  5808     176D  00CF               	movwf	___ftadd@f2+2
  5809     176E  120A  158A  24B3   	fcall	___ftadd
  5810     1771  084A               	movf	?___ftadd,w
  5811     1772  00D6               	movwf	?___ftsub
  5812     1773  084B               	movf	?___ftadd+1,w
  5813     1774  00D7               	movwf	?___ftsub+1
  5814     1775  084C               	movf	?___ftadd+2,w
  5815     1776  00D8               	movwf	?___ftsub+2
  5816     1777  0008               	return
  5817     1778                     __end_of___ftsub:
  5818                           
  5819                           	psect	text22
  5820     0CB3                     __ptext22:	
  5821 ;; *************** function ___ftadd *****************
  5822 ;; Defined at:
  5823 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftadd.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  f1              3   42[BANK0 ] float 
  5826 ;;  f2              3   45[BANK0 ] float 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  exp1            1   53[BANK0 ] unsigned char 
  5829 ;;  exp2            1   52[BANK0 ] unsigned char 
  5830 ;;  sign            1   51[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  3   42[BANK0 ] float 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 300/0
  5837 ;;		On exit  : 300/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5840 ;;      Params:         0       6       0       0       0
  5841 ;;      Locals:         0       3       0       0       0
  5842 ;;      Temps:          0       3       0       0       0
  5843 ;;      Totals:         0      12       0       0       0
  5844 ;;Total ram usage:       12 bytes
  5845 ;; Hardware stack levels used: 1
  5846 ;; Hardware stack levels required when called: 2
  5847 ;; This function calls:
  5848 ;;		___ftpack
  5849 ;; This function is called by:
  5850 ;;		_sprintf
  5851 ;;		___ftsub
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855     0CB3                     ___ftadd:	
  5856                           ;psect for function ___ftadd
  5857                           
  5858                           
  5859                           ;incstack = 0
  5860                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5861     0CB3  084A               	movf	___ftadd@f1,w
  5862     0CB4  00D0               	movwf	??___ftadd
  5863     0CB5  084B               	movf	___ftadd@f1+1,w
  5864     0CB6  00D1               	movwf	??___ftadd+1
  5865     0CB7  084C               	movf	___ftadd@f1+2,w
  5866     0CB8  00D2               	movwf	??___ftadd+2
  5867     0CB9  1003               	clrc
  5868     0CBA  0D51               	rlf	??___ftadd+1,w
  5869     0CBB  0D52               	rlf	??___ftadd+2,w
  5870     0CBC  00D5               	movwf	___ftadd@exp1
  5871     0CBD  084D               	movf	___ftadd@f2,w
  5872     0CBE  00D0               	movwf	??___ftadd
  5873     0CBF  084E               	movf	___ftadd@f2+1,w
  5874     0CC0  00D1               	movwf	??___ftadd+1
  5875     0CC1  084F               	movf	___ftadd@f2+2,w
  5876     0CC2  00D2               	movwf	??___ftadd+2
  5877     0CC3  1003               	clrc
  5878     0CC4  0D51               	rlf	??___ftadd+1,w
  5879     0CC5  0D52               	rlf	??___ftadd+2,w
  5880     0CC6  00D4               	movwf	___ftadd@exp2
  5881     0CC7  0855               	movf	___ftadd@exp1,w
  5882     0CC8  1903               	btfsc	3,2
  5883     0CC9  2CD6               	goto	l1914
  5884     0CCA  0854               	movf	___ftadd@exp2,w
  5885     0CCB  0255               	subwf	___ftadd@exp1,w
  5886     0CCC  1803               	skipnc
  5887     0CCD  2CDD               	goto	l1918
  5888     0CCE  0854               	movf	___ftadd@exp2,w
  5889     0CCF  00D0               	movwf	??___ftadd
  5890     0CD0  0855               	movf	___ftadd@exp1,w
  5891     0CD1  02D0               	subwf	??___ftadd,f
  5892     0CD2  3019               	movlw	25
  5893     0CD3  0250               	subwf	??___ftadd,w
  5894     0CD4  1C03               	skipc
  5895     0CD5  2CDD               	goto	l1918
  5896     0CD6                     l1914:
  5897     0CD6  084D               	movf	___ftadd@f2,w
  5898     0CD7  00CA               	movwf	?___ftadd
  5899     0CD8  084E               	movf	___ftadd@f2+1,w
  5900     0CD9  00CB               	movwf	?___ftadd+1
  5901     0CDA  084F               	movf	___ftadd@f2+2,w
  5902     0CDB  00CC               	movwf	?___ftadd+2
  5903     0CDC  0008               	return
  5904     0CDD                     l1918:
  5905     0CDD  0854               	movf	___ftadd@exp2,w
  5906     0CDE  1903               	btfsc	3,2
  5907     0CDF  0008               	return
  5908     0CE0  0855               	movf	___ftadd@exp1,w
  5909     0CE1  0254               	subwf	___ftadd@exp2,w
  5910     0CE2  1803               	skipnc
  5911     0CE3  2CEC               	goto	l1924
  5912     0CE4  0855               	movf	___ftadd@exp1,w
  5913     0CE5  00D0               	movwf	??___ftadd
  5914     0CE6  0854               	movf	___ftadd@exp2,w
  5915     0CE7  02D0               	subwf	??___ftadd,f
  5916     0CE8  3019               	movlw	25
  5917     0CE9  0250               	subwf	??___ftadd,w
  5918     0CEA  1803               	btfsc	3,0
  5919     0CEB  0008               	return
  5920     0CEC                     l1924:
  5921     0CEC  3006               	movlw	6
  5922     0CED  00D3               	movwf	___ftadd@sign
  5923     0CEE  1BCC               	btfsc	___ftadd@f1+2,7
  5924     0CEF  17D3               	bsf	___ftadd@sign,7
  5925     0CF0  1BCF               	btfsc	___ftadd@f2+2,7
  5926     0CF1  1753               	bsf	___ftadd@sign,6
  5927     0CF2  17CB               	bsf	___ftadd@f1+1,7
  5928     0CF3  30FF               	movlw	255
  5929     0CF4  05CA               	andwf	___ftadd@f1,f
  5930     0CF5  30FF               	movlw	255
  5931     0CF6  05CB               	andwf	___ftadd@f1+1,f
  5932     0CF7  3000               	movlw	0
  5933     0CF8  05CC               	andwf	___ftadd@f1+2,f
  5934     0CF9  17CE               	bsf	___ftadd@f2+1,7
  5935     0CFA  30FF               	movlw	255
  5936     0CFB  05CD               	andwf	___ftadd@f2,f
  5937     0CFC  30FF               	movlw	255
  5938     0CFD  05CE               	andwf	___ftadd@f2+1,f
  5939     0CFE  3000               	movlw	0
  5940     0CFF  05CF               	andwf	___ftadd@f2+2,f
  5941     0D00  0854               	movf	___ftadd@exp2,w
  5942     0D01  0255               	subwf	___ftadd@exp1,w
  5943     0D02  1803               	skipnc
  5944     0D03  2D2A               	goto	l1948
  5945     0D04                     l1936:
  5946     0D04  3001               	movlw	1
  5947     0D05                     u2195:
  5948     0D05  1003               	clrc
  5949     0D06  0DCD               	rlf	___ftadd@f2,f
  5950     0D07  0DCE               	rlf	___ftadd@f2+1,f
  5951     0D08  0DCF               	rlf	___ftadd@f2+2,f
  5952     0D09  3EFF               	addlw	-1
  5953     0D0A  1D03               	skipz
  5954     0D0B  2D05               	goto	u2195
  5955     0D0C  3001               	movlw	1
  5956     0D0D  02D4               	subwf	___ftadd@exp2,f
  5957     0D0E  0854               	movf	___ftadd@exp2,w
  5958     0D0F  0655               	xorwf	___ftadd@exp1,w
  5959     0D10  1903               	skipnz
  5960     0D11  2D25               	goto	l1946
  5961     0D12  3001               	movlw	1
  5962     0D13  02D3               	subwf	___ftadd@sign,f
  5963     0D14  0853               	movf	___ftadd@sign,w
  5964     0D15  3907               	andlw	7
  5965     0D16  1903               	btfsc	3,2
  5966     0D17  2D25               	goto	l1946
  5967     0D18  2D04               	goto	l1936
  5968     0D19                     l1942:
  5969     0D19  3001               	movlw	1
  5970     0D1A                     u2225:
  5971     0D1A  1003               	clrc
  5972     0D1B  0CCC               	rrf	___ftadd@f1+2,f
  5973     0D1C  0CCB               	rrf	___ftadd@f1+1,f
  5974     0D1D  0CCA               	rrf	___ftadd@f1,f
  5975     0D1E  3EFF               	addlw	-1
  5976     0D1F  1D03               	skipz
  5977     0D20  2D1A               	goto	u2225
  5978     0D21  3001               	movlw	1
  5979     0D22  00FF               	movwf	127
  5980     0D23  087F               	movf	127,w
  5981     0D24  07D5               	addwf	___ftadd@exp1,f
  5982     0D25                     l1946:
  5983     0D25  0855               	movf	___ftadd@exp1,w
  5984     0D26  0654               	xorwf	___ftadd@exp2,w
  5985     0D27  1903               	btfsc	3,2
  5986     0D28  2D53               	goto	l607
  5987     0D29  2D19               	goto	l1942
  5988     0D2A                     l1948:
  5989     0D2A  0855               	movf	___ftadd@exp1,w
  5990     0D2B  0254               	subwf	___ftadd@exp2,w
  5991     0D2C  1803               	skipnc
  5992     0D2D  2D53               	goto	l607
  5993     0D2E                     l1950:
  5994     0D2E  3001               	movlw	1
  5995     0D2F                     u2255:
  5996     0D2F  1003               	clrc
  5997     0D30  0DCA               	rlf	___ftadd@f1,f
  5998     0D31  0DCB               	rlf	___ftadd@f1+1,f
  5999     0D32  0DCC               	rlf	___ftadd@f1+2,f
  6000     0D33  3EFF               	addlw	-1
  6001     0D34  1D03               	skipz
  6002     0D35  2D2F               	goto	u2255
  6003     0D36  3001               	movlw	1
  6004     0D37  02D5               	subwf	___ftadd@exp1,f
  6005     0D38  0854               	movf	___ftadd@exp2,w
  6006     0D39  0655               	xorwf	___ftadd@exp1,w
  6007     0D3A  1903               	skipnz
  6008     0D3B  2D4F               	goto	l1960
  6009     0D3C  3001               	movlw	1
  6010     0D3D  02D3               	subwf	___ftadd@sign,f
  6011     0D3E  0853               	movf	___ftadd@sign,w
  6012     0D3F  3907               	andlw	7
  6013     0D40  1903               	btfsc	3,2
  6014     0D41  2D4F               	goto	l1960
  6015     0D42  2D2E               	goto	l1950
  6016     0D43                     l1956:
  6017     0D43  3001               	movlw	1
  6018     0D44                     u2285:
  6019     0D44  1003               	clrc
  6020     0D45  0CCF               	rrf	___ftadd@f2+2,f
  6021     0D46  0CCE               	rrf	___ftadd@f2+1,f
  6022     0D47  0CCD               	rrf	___ftadd@f2,f
  6023     0D48  3EFF               	addlw	-1
  6024     0D49  1D03               	skipz
  6025     0D4A  2D44               	goto	u2285
  6026     0D4B  3001               	movlw	1
  6027     0D4C  00FF               	movwf	127
  6028     0D4D  087F               	movf	127,w
  6029     0D4E  07D4               	addwf	___ftadd@exp2,f
  6030     0D4F                     l1960:
  6031     0D4F  0855               	movf	___ftadd@exp1,w
  6032     0D50  0654               	xorwf	___ftadd@exp2,w
  6033     0D51  1D03               	skipz
  6034     0D52  2D43               	goto	l1956
  6035     0D53                     l607:
  6036     0D53  1FD3               	btfss	___ftadd@sign,7
  6037     0D54  2D65               	goto	l1964
  6038     0D55  30FF               	movlw	255
  6039     0D56  06CA               	xorwf	___ftadd@f1,f
  6040     0D57  30FF               	movlw	255
  6041     0D58  06CB               	xorwf	___ftadd@f1+1,f
  6042     0D59  30FF               	movlw	255
  6043     0D5A  06CC               	xorwf	___ftadd@f1+2,f
  6044     0D5B  3001               	movlw	1
  6045     0D5C  07CA               	addwf	___ftadd@f1,f
  6046     0D5D  3000               	movlw	0
  6047     0D5E  1803               	skipnc
  6048     0D5F  3001               	movlw	1
  6049     0D60  07CB               	addwf	___ftadd@f1+1,f
  6050     0D61  3000               	movlw	0
  6051     0D62  1803               	skipnc
  6052     0D63  3001               	movlw	1
  6053     0D64  07CC               	addwf	___ftadd@f1+2,f
  6054     0D65                     l1964:
  6055     0D65  1F53               	btfss	___ftadd@sign,6
  6056     0D66  2D77               	goto	l1968
  6057     0D67  30FF               	movlw	255
  6058     0D68  06CD               	xorwf	___ftadd@f2,f
  6059     0D69  30FF               	movlw	255
  6060     0D6A  06CE               	xorwf	___ftadd@f2+1,f
  6061     0D6B  30FF               	movlw	255
  6062     0D6C  06CF               	xorwf	___ftadd@f2+2,f
  6063     0D6D  3001               	movlw	1
  6064     0D6E  07CD               	addwf	___ftadd@f2,f
  6065     0D6F  3000               	movlw	0
  6066     0D70  1803               	skipnc
  6067     0D71  3001               	movlw	1
  6068     0D72  07CE               	addwf	___ftadd@f2+1,f
  6069     0D73  3000               	movlw	0
  6070     0D74  1803               	skipnc
  6071     0D75  3001               	movlw	1
  6072     0D76  07CF               	addwf	___ftadd@f2+2,f
  6073     0D77                     l1968:
  6074     0D77  01D3               	clrf	___ftadd@sign
  6075     0D78  084A               	movf	___ftadd@f1,w
  6076     0D79  07CD               	addwf	___ftadd@f2,f
  6077     0D7A  084B               	movf	___ftadd@f1+1,w
  6078     0D7B  1103               	clrz
  6079     0D7C  1803               	skipnc
  6080     0D7D  0A4B               	incf	___ftadd@f1+1,w
  6081     0D7E  1D03               	btfss	3,2
  6082     0D7F  07CE               	addwf	___ftadd@f2+1,f
  6083     0D80  084C               	movf	___ftadd@f1+2,w
  6084     0D81  1103               	clrz
  6085     0D82  1803               	skipnc
  6086     0D83  0A4C               	incf	___ftadd@f1+2,w
  6087     0D84  1D03               	btfss	3,2
  6088     0D85  07CF               	addwf	___ftadd@f2+2,f
  6089     0D86  1FCF               	btfss	___ftadd@f2+2,7
  6090     0D87  2D9A               	goto	l1978
  6091     0D88  30FF               	movlw	255
  6092     0D89  06CD               	xorwf	___ftadd@f2,f
  6093     0D8A  30FF               	movlw	255
  6094     0D8B  06CE               	xorwf	___ftadd@f2+1,f
  6095     0D8C  30FF               	movlw	255
  6096     0D8D  06CF               	xorwf	___ftadd@f2+2,f
  6097     0D8E  3001               	movlw	1
  6098     0D8F  07CD               	addwf	___ftadd@f2,f
  6099     0D90  3000               	movlw	0
  6100     0D91  1803               	skipnc
  6101     0D92  3001               	movlw	1
  6102     0D93  07CE               	addwf	___ftadd@f2+1,f
  6103     0D94  3000               	movlw	0
  6104     0D95  1803               	skipnc
  6105     0D96  3001               	movlw	1
  6106     0D97  07CF               	addwf	___ftadd@f2+2,f
  6107     0D98  01D3               	clrf	___ftadd@sign
  6108     0D99  0AD3               	incf	___ftadd@sign,f
  6109     0D9A                     l1978:
  6110     0D9A  084D               	movf	___ftadd@f2,w
  6111     0D9B  00A0               	movwf	___ftpack@arg
  6112     0D9C  084E               	movf	___ftadd@f2+1,w
  6113     0D9D  00A1               	movwf	___ftpack@arg+1
  6114     0D9E  084F               	movf	___ftadd@f2+2,w
  6115     0D9F  00A2               	movwf	___ftpack@arg+2
  6116     0DA0  0855               	movf	___ftadd@exp1,w
  6117     0DA1  00A3               	movwf	___ftpack@exp
  6118     0DA2  0853               	movf	___ftadd@sign,w
  6119     0DA3  00A4               	movwf	___ftpack@sign
  6120     0DA4  120A  158A  227D   	fcall	___ftpack
  6121     0DA7  0820               	movf	?___ftpack,w
  6122     0DA8  00CA               	movwf	?___ftadd
  6123     0DA9  0821               	movf	?___ftpack+1,w
  6124     0DAA  00CB               	movwf	?___ftadd+1
  6125     0DAB  0822               	movf	?___ftpack+2,w
  6126     0DAC  00CC               	movwf	?___ftadd+2
  6127     0DAD  0008               	return
  6128     0DAE                     __end_of___ftadd:
  6129                           
  6130                           	psect	text23
  6131     16BC                     __ptext23:	
  6132 ;; *************** function ___ftneg *****************
  6133 ;; Defined at:
  6134 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftneg.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;  f1              3    0[BANK0 ] float 
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  3    0[BANK0 ] float 
  6141 ;; Registers used:
  6142 ;;		wreg
  6143 ;; Tracked objects:
  6144 ;;		On entry : 300/0
  6145 ;;		On exit  : 300/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6148 ;;      Params:         0       3       0       0       0
  6149 ;;      Locals:         0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0
  6151 ;;      Totals:         0       3       0       0       0
  6152 ;;Total ram usage:        3 bytes
  6153 ;; Hardware stack levels used: 1
  6154 ;; Hardware stack levels required when called: 1
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_sprintf
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162     16BC                     ___ftneg:	
  6163                           ;psect for function ___ftneg
  6164                           
  6165                           
  6166                           ;incstack = 0
  6167                           ; Regs used in ___ftneg: [wreg]
  6168     16BC  0822               	movf	___ftneg@f1+2,w
  6169     16BD  0421               	iorwf	___ftneg@f1+1,w
  6170     16BE  0420               	iorwf	___ftneg@f1,w
  6171     16BF  1903               	skipnz
  6172     16C0  0008               	return
  6173     16C1  3080               	movlw	128
  6174     16C2  06A2               	xorwf	___ftneg@f1+2,f
  6175     16C3  0008               	return
  6176     16C4                     __end_of___ftneg:
  6177                           
  6178                           	psect	text24
  6179     08CA                     __ptext24:	
  6180 ;; *************** function ___ftge *****************
  6181 ;; Defined at:
  6182 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftge.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  ff1             3    0[BANK0 ] float 
  6185 ;;  ff2             3    3[BANK0 ] float 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;		None               void
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 300/0
  6194 ;;		On exit  : 300/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6197 ;;      Params:         0       6       0       0       0
  6198 ;;      Locals:         0       0       0       0       0
  6199 ;;      Temps:          0       0       0       0       0
  6200 ;;      Totals:         0       6       0       0       0
  6201 ;;Total ram usage:        6 bytes
  6202 ;; Hardware stack levels used: 1
  6203 ;; Hardware stack levels required when called: 1
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_sprintf
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211     08CA                     ___ftge:	
  6212                           ;psect for function ___ftge
  6213                           
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6217     08CA  1FA2               	btfss	___ftge@ff1+2,7
  6218     08CB  28D9               	goto	l2302
  6219     08CC  0820               	movf	___ftge@ff1,w
  6220     08CD  3C00               	sublw	0
  6221     08CE  00A0               	movwf	___ftge@ff1
  6222     08CF  0821               	movf	___ftge@ff1+1,w
  6223     08D0  1C03               	skipc
  6224     08D1  0F21               	incfsz	___ftge@ff1+1,w
  6225     08D2  3C00               	sublw	0
  6226     08D3  00A1               	movwf	___ftge@ff1+1
  6227     08D4  0822               	movf	___ftge@ff1+2,w
  6228     08D5  1C03               	skipc
  6229     08D6  0F22               	incfsz	___ftge@ff1+2,w
  6230     08D7  3C80               	sublw	128
  6231     08D8  00A2               	movwf	___ftge@ff1+2
  6232     08D9                     l2302:
  6233     08D9  1FA5               	btfss	___ftge@ff2+2,7
  6234     08DA  28E8               	goto	l2306
  6235     08DB  0823               	movf	___ftge@ff2,w
  6236     08DC  3C00               	sublw	0
  6237     08DD  00A3               	movwf	___ftge@ff2
  6238     08DE  0824               	movf	___ftge@ff2+1,w
  6239     08DF  1C03               	skipc
  6240     08E0  0F24               	incfsz	___ftge@ff2+1,w
  6241     08E1  3C00               	sublw	0
  6242     08E2  00A4               	movwf	___ftge@ff2+1
  6243     08E3  0825               	movf	___ftge@ff2+2,w
  6244     08E4  1C03               	skipc
  6245     08E5  0F25               	incfsz	___ftge@ff2+2,w
  6246     08E6  3C80               	sublw	128
  6247     08E7  00A5               	movwf	___ftge@ff2+2
  6248     08E8                     l2306:
  6249     08E8  3080               	movlw	128
  6250     08E9  06A2               	xorwf	___ftge@ff1+2,f
  6251     08EA  3080               	movlw	128
  6252     08EB  06A5               	xorwf	___ftge@ff2+2,f
  6253     08EC  0825               	movf	___ftge@ff2+2,w
  6254     08ED  0222               	subwf	___ftge@ff1+2,w
  6255     08EE  1D03               	skipz
  6256     08EF  0008               	return
  6257     08F0  0824               	movf	___ftge@ff2+1,w
  6258     08F1  0221               	subwf	___ftge@ff1+1,w
  6259     08F2  1D03               	skipz
  6260     08F3  0008               	return
  6261     08F4  0823               	movf	___ftge@ff2,w
  6262     08F5  0220               	subwf	___ftge@ff1,w
  6263     08F6  0008               	return
  6264     08F7                     __end_of___ftge:
  6265                           
  6266                           	psect	text25
  6267     16D9                     __ptext25:	
  6268 ;; *************** function _init_inttimer *****************
  6269 ;; Defined at:
  6270 ;;		line 4 in file "inttimer.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;		None
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;		None
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  1    wreg      void 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0
  6279 ;; Tracked objects:
  6280 ;;		On entry : 300/0
  6281 ;;		On exit  : 300/100
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6284 ;;      Params:         0       0       0       0       0
  6285 ;;      Locals:         0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0
  6287 ;;      Totals:         0       0       0       0       0
  6288 ;;Total ram usage:        0 bytes
  6289 ;; Hardware stack levels used: 1
  6290 ;; Hardware stack levels required when called: 1
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		_main
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298     16D9                     _init_inttimer:	
  6299                           ;psect for function _init_inttimer
  6300                           
  6301                           
  6302                           ;inttimer.c: 6: T1CONbits.TMR1CS = 0;
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _init_inttimer: [wreg+status,2+status,0]
  6306     16D9  1090               	bcf	16,1	;volatile
  6307                           
  6308                           ;inttimer.c: 7: T1CONbits.T1CKPS = 0b00;
  6309     16DA  30CF               	movlw	-49
  6310     16DB  0590               	andwf	16,f	;volatile
  6311                           
  6312                           ;inttimer.c: 8: T1CONbits.T1SYNC = 0;
  6313     16DC  1110               	bcf	16,2	;volatile
  6314                           
  6315                           ;inttimer.c: 9: TMR1H = 0xFF;
  6316     16DD  30FF               	movlw	255
  6317     16DE  008F               	movwf	15	;volatile
  6318                           
  6319                           ;inttimer.c: 10: TMR1L = 0xE7;
  6320     16DF  30E7               	movlw	231
  6321     16E0  008E               	movwf	14	;volatile
  6322                           
  6323                           ;inttimer.c: 13: PIR1bits.ADIF = 0;
  6324     16E1  130C               	bcf	12,6	;volatile
  6325                           
  6326                           ;inttimer.c: 14: PIE1bits.ADIE = 1;
  6327     16E2  1683               	bsf	3,5	;RP0=1, select bank1
  6328     16E3  170C               	bsf	12,6	;volatile
  6329                           
  6330                           ;inttimer.c: 15: INTCONbits.PEIE = 1;
  6331     16E4  170B               	bsf	11,6	;volatile
  6332                           
  6333                           ;inttimer.c: 16: INTCONbits.GIE = 1;
  6334     16E5  178B               	bsf	11,7	;volatile
  6335     16E6  0008               	return
  6336     16E7                     __end_of_init_inttimer:
  6337                           
  6338                           	psect	text26
  6339     17DC                     __ptext26:	
  6340 ;; *************** function _init_ADC *****************
  6341 ;; Defined at:
  6342 ;;		line 3 in file "adc.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0, pclath, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : B00/300
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6356 ;;      Params:         0       0       0       0       0
  6357 ;;      Locals:         0       0       0       0       0
  6358 ;;      Temps:          0       3       0       0       0
  6359 ;;      Totals:         0       3       0       0       0
  6360 ;;Total ram usage:        3 bytes
  6361 ;; Hardware stack levels used: 1
  6362 ;; Hardware stack levels required when called: 2
  6363 ;; This function calls:
  6364 ;;		_set_CHANNEL
  6365 ;; This function is called by:
  6366 ;;		_main
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370     17DC                     _init_ADC:	
  6371                           ;psect for function _init_ADC
  6372                           
  6373                           
  6374                           ;adc.c: 7: TRISAbits.TRISA0 = 1;
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _init_ADC: [wreg+status,2+status,0+pclath+cstack]
  6378     17DC  1303               	bcf	3,6	;RP1=0, select bank1
  6379     17DD  1405               	bsf	5,0	;volatile
  6380                           
  6381                           ;adc.c: 8: ANSELbits.ANS0 = 1;
  6382     17DE  1703               	bsf	3,6	;RP1=1, select bank3
  6383     17DF  1408               	bsf	8,0	;volatile
  6384                           
  6385                           ;adc.c: 9: set_CHANNEL(0);
  6386     17E0  3000               	movlw	0
  6387     17E1  160A  118A  26CC  160A  118A  	fcall	_set_CHANNEL
  6388                           
  6389                           ;adc.c: 10: ADCON0bits.ADCS = 0b001;
  6390     17E6  081F               	movf	31,w	;volatile
  6391     17E7  393F               	andlw	-193
  6392     17E8  3840               	iorlw	64
  6393     17E9  009F               	movwf	31	;volatile
  6394                           
  6395                           ;adc.c: 11: ADCON1bits.ADFM = 1;
  6396     17EA  1683               	bsf	3,5	;RP0=1, select bank1
  6397     17EB  179F               	bsf	31,7	;volatile
  6398                           
  6399                           ;adc.c: 12: ADCON1bits.VCFG1 = 1;
  6400     17EC  169F               	bsf	31,5	;volatile
  6401                           
  6402                           ;adc.c: 13: ADCON1bits.VCFG0 = 1;
  6403     17ED  161F               	bsf	31,4	;volatile
  6404                           
  6405                           ;adc.c: 14: ADCON0bits.ADON = 1;
  6406     17EE  1283               	bcf	3,5	;RP0=0, select bank0
  6407     17EF  141F               	bsf	31,0	;volatile
  6408                           
  6409                           ;adc.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  6410     17F0  3002               	movlw	2
  6411     17F1  1283               	bcf	3,5	;RP0=0, select bank0
  6412     17F2  1303               	bcf	3,6	;RP1=0, select bank0
  6413     17F3  00A4               	movwf	??_init_ADC+2
  6414     17F4  3004               	movlw	4
  6415     17F5  00A3               	movwf	??_init_ADC+1
  6416     17F6  30B9               	movlw	185
  6417     17F7  00A2               	movwf	??_init_ADC
  6418     17F8                     u3537:
  6419     17F8  0BA2               	decfsz	??_init_ADC,f
  6420     17F9  2FF8               	goto	u3537
  6421     17FA  0BA3               	decfsz	??_init_ADC+1,f
  6422     17FB  2FF8               	goto	u3537
  6423     17FC  0BA4               	decfsz	??_init_ADC+2,f
  6424     17FD  2FF8               	goto	u3537
  6425     17FE  2FFF               	nop2
  6426     17FF  0008               	return
  6427     1800                     __end_of_init_ADC:
  6428                           
  6429                           	psect	text27
  6430     16CC                     __ptext27:	
  6431 ;; *************** function _set_CHANNEL *****************
  6432 ;; Defined at:
  6433 ;;		line 19 in file "adc.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  channel         1    wreg     unsigned char 
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;  channel         1    1[BANK0 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  1    wreg      void 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0
  6442 ;; Tracked objects:
  6443 ;;		On entry : B00/300
  6444 ;;		On exit  : B00/0
  6445 ;;		Unchanged: 800/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6447 ;;      Params:         0       0       0       0       0
  6448 ;;      Locals:         0       1       0       0       0
  6449 ;;      Temps:          0       1       0       0       0
  6450 ;;      Totals:         0       2       0       0       0
  6451 ;;Total ram usage:        2 bytes
  6452 ;; Hardware stack levels used: 1
  6453 ;; Hardware stack levels required when called: 1
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_init_ADC
  6458 ;; This function uses a non-reentrant model
  6459 ;;
  6460                           
  6461     16CC                     _set_CHANNEL:	
  6462                           ;psect for function _set_CHANNEL
  6463                           
  6464                           
  6465                           ;incstack = 0
  6466                           ; Regs used in _set_CHANNEL: [wreg+status,2+status,0]
  6467                           ;set_CHANNEL@channel stored from wreg
  6468     16CC  1283               	bcf	3,5	;RP0=0, select bank0
  6469     16CD  1303               	bcf	3,6	;RP1=0, select bank0
  6470     16CE  00A1               	movwf	set_CHANNEL@channel
  6471                           
  6472                           ;adc.c: 22: {;adc.c: 23: ADCON0bits.CHS = channel;
  6473     16CF  0821               	movf	set_CHANNEL@channel,w
  6474     16D0  00A0               	movwf	??_set_CHANNEL
  6475     16D1  0DA0               	rlf	??_set_CHANNEL,f
  6476     16D2  0DA0               	rlf	??_set_CHANNEL,f
  6477     16D3  081F               	movf	31,w	;volatile
  6478     16D4  0620               	xorwf	??_set_CHANNEL,w
  6479     16D5  39C3               	andlw	-61
  6480     16D6  0620               	xorwf	??_set_CHANNEL,w
  6481     16D7  009F               	movwf	31	;volatile
  6482                           
  6483                           ;adc.c: 24: }else
  6484     16D8  0008               	return
  6485     16D9                     __end_of_set_CHANNEL:
  6486                           
  6487                           	psect	text28
  6488     16B6                     __ptext28:	
  6489 ;; *************** function _config_HAL *****************
  6490 ;; Defined at:
  6491 ;;		line 73 in file "newmain.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      void 
  6498 ;; Registers used:
  6499 ;;		status,2
  6500 ;; Tracked objects:
  6501 ;;		On entry : B00/100
  6502 ;;		On exit  : B00/300
  6503 ;;		Unchanged: 800/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6505 ;;      Params:         0       0       0       0       0
  6506 ;;      Locals:         0       0       0       0       0
  6507 ;;      Temps:          0       0       0       0       0
  6508 ;;      Totals:         0       0       0       0       0
  6509 ;;Total ram usage:        0 bytes
  6510 ;; Hardware stack levels used: 1
  6511 ;; Hardware stack levels required when called: 1
  6512 ;; This function calls:
  6513 ;;		Nothing
  6514 ;; This function is called by:
  6515 ;;		_main
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519     16B6                     _config_HAL:	
  6520                           ;psect for function _config_HAL
  6521                           
  6522                           
  6523                           ;newmain.c: 75: TRISD = 0x00;
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in _config_HAL: [status,2]
  6527     16B6  0188               	clrf	8	;volatile
  6528                           
  6529                           ;newmain.c: 76: TRISE = 0x00;
  6530     16B7  0189               	clrf	9	;volatile
  6531                           
  6532                           ;newmain.c: 77: ANSEL = 0x00;
  6533     16B8  1703               	bsf	3,6	;RP1=1, select bank3
  6534     16B9  0188               	clrf	8	;volatile
  6535                           
  6536                           ;newmain.c: 78: ANSELH = 0x00;
  6537     16BA  0189               	clrf	9	;volatile
  6538     16BB  0008               	return
  6539     16BC                     __end_of_config_HAL:
  6540                           
  6541                           	psect	text29
  6542     1719                     __ptext29:	
  6543 ;; *************** function ___lwtoft *****************
  6544 ;; Defined at:
  6545 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwtoft.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;  c               2    8[BANK0 ] unsigned int 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;                  3    8[BANK0 ] float 
  6552 ;; Registers used:
  6553 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : B00/800
  6556 ;;		On exit  : 300/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6559 ;;      Params:         0       3       0       0       0
  6560 ;;      Locals:         0       0       0       0       0
  6561 ;;      Temps:          0       0       0       0       0
  6562 ;;      Totals:         0       3       0       0       0
  6563 ;;Total ram usage:        3 bytes
  6564 ;; Hardware stack levels used: 1
  6565 ;; Hardware stack levels required when called: 2
  6566 ;; This function calls:
  6567 ;;		___ftpack
  6568 ;; This function is called by:
  6569 ;;		_main
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573     1719                     ___lwtoft:	
  6574                           ;psect for function ___lwtoft
  6575                           
  6576                           
  6577                           ;incstack = 0
  6578                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6579     1719  0828               	movf	___lwtoft@c,w
  6580     171A  00A0               	movwf	___ftpack@arg
  6581     171B  0829               	movf	___lwtoft@c+1,w
  6582     171C  00A1               	movwf	___ftpack@arg+1
  6583     171D  01A2               	clrf	___ftpack@arg+2
  6584     171E  308E               	movlw	142
  6585     171F  00A3               	movwf	___ftpack@exp
  6586     1720  01A4               	clrf	___ftpack@sign
  6587     1721  120A  158A  227D   	fcall	___ftpack
  6588     1724  0820               	movf	?___ftpack,w
  6589     1725  00A8               	movwf	?___lwtoft
  6590     1726  0821               	movf	?___ftpack+1,w
  6591     1727  00A9               	movwf	?___lwtoft+1
  6592     1728  0822               	movf	?___ftpack+2,w
  6593     1729  00AA               	movwf	?___lwtoft+2
  6594     172A  0008               	return
  6595     172B                     __end_of___lwtoft:
  6596                           
  6597                           	psect	text30
  6598     0A7D                     __ptext30:	
  6599 ;; *************** function ___ftpack *****************
  6600 ;; Defined at:
  6601 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  arg             3    0[BANK0 ] unsigned um
  6604 ;;  exp             1    3[BANK0 ] unsigned char 
  6605 ;;  sign            1    4[BANK0 ] unsigned char 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  3    0[BANK0 ] float 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0, btemp+1
  6612 ;; Tracked objects:
  6613 ;;		On entry : 300/800
  6614 ;;		On exit  : 300/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6617 ;;      Params:         0       5       0       0       0
  6618 ;;      Locals:         0       0       0       0       0
  6619 ;;      Temps:          0       3       0       0       0
  6620 ;;      Totals:         0       8       0       0       0
  6621 ;;Total ram usage:        8 bytes
  6622 ;; Hardware stack levels used: 1
  6623 ;; Hardware stack levels required when called: 1
  6624 ;; This function calls:
  6625 ;;		Nothing
  6626 ;; This function is called by:
  6627 ;;		___ftadd
  6628 ;;		___ftmul
  6629 ;;		___lltoft
  6630 ;;		___lwtoft
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634     0A7D                     ___ftpack:	
  6635                           ;psect for function ___ftpack
  6636                           
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6640     0A7D  0823               	movf	___ftpack@exp,w
  6641     0A7E  1903               	btfsc	3,2
  6642     0A7F  2A85               	goto	l1778
  6643     0A80  0822               	movf	___ftpack@arg+2,w
  6644     0A81  0421               	iorwf	___ftpack@arg+1,w
  6645     0A82  0420               	iorwf	___ftpack@arg,w
  6646     0A83  1D03               	skipz
  6647     0A84  2A98               	goto	l1786
  6648     0A85                     l1778:
  6649     0A85  3000               	movlw	0
  6650     0A86  00A0               	movwf	?___ftpack
  6651     0A87  3000               	movlw	0
  6652     0A88  00A1               	movwf	?___ftpack+1
  6653     0A89  3000               	movlw	0
  6654     0A8A  00A2               	movwf	?___ftpack+2
  6655     0A8B  0008               	return
  6656     0A8C                     l1782:
  6657     0A8C  3001               	movlw	1
  6658     0A8D  00FF               	movwf	127
  6659     0A8E  087F               	movf	127,w
  6660     0A8F  07A3               	addwf	___ftpack@exp,f
  6661     0A90  3001               	movlw	1
  6662     0A91                     u1795:
  6663     0A91  1003               	clrc
  6664     0A92  0CA2               	rrf	___ftpack@arg+2,f
  6665     0A93  0CA1               	rrf	___ftpack@arg+1,f
  6666     0A94  0CA0               	rrf	___ftpack@arg,f
  6667     0A95  3EFF               	addlw	-1
  6668     0A96  1D03               	skipz
  6669     0A97  2A91               	goto	u1795
  6670     0A98                     l1786:
  6671     0A98  30FE               	movlw	254
  6672     0A99  0522               	andwf	___ftpack@arg+2,w
  6673     0A9A  1903               	btfsc	3,2
  6674     0A9B  2AB3               	goto	l1794
  6675     0A9C  2A8C               	goto	l1782
  6676     0A9D                     l1788:
  6677     0A9D  3001               	movlw	1
  6678     0A9E  00FF               	movwf	127
  6679     0A9F  087F               	movf	127,w
  6680     0AA0  07A3               	addwf	___ftpack@exp,f
  6681     0AA1  3001               	movlw	1
  6682     0AA2  07A0               	addwf	___ftpack@arg,f
  6683     0AA3  3000               	movlw	0
  6684     0AA4  1803               	skipnc
  6685     0AA5  3001               	movlw	1
  6686     0AA6  07A1               	addwf	___ftpack@arg+1,f
  6687     0AA7  3000               	movlw	0
  6688     0AA8  1803               	skipnc
  6689     0AA9  3001               	movlw	1
  6690     0AAA  07A2               	addwf	___ftpack@arg+2,f
  6691     0AAB  3001               	movlw	1
  6692     0AAC                     u1815:
  6693     0AAC  1003               	clrc
  6694     0AAD  0CA2               	rrf	___ftpack@arg+2,f
  6695     0AAE  0CA1               	rrf	___ftpack@arg+1,f
  6696     0AAF  0CA0               	rrf	___ftpack@arg,f
  6697     0AB0  3EFF               	addlw	-1
  6698     0AB1  1D03               	skipz
  6699     0AB2  2AAC               	goto	u1815
  6700     0AB3                     l1794:
  6701     0AB3  30FF               	movlw	255
  6702     0AB4  0522               	andwf	___ftpack@arg+2,w
  6703     0AB5  1903               	btfsc	3,2
  6704     0AB6  2AC6               	goto	l1798
  6705     0AB7  2A9D               	goto	l1788
  6706     0AB8                     l1800:
  6707     0AB8  3002               	movlw	2
  6708     0AB9  0223               	subwf	___ftpack@exp,w
  6709     0ABA  1C03               	btfss	3,0
  6710     0ABB  2AC8               	goto	l583
  6711     0ABC  3001               	movlw	1
  6712     0ABD  02A3               	subwf	___ftpack@exp,f
  6713     0ABE  3001               	movlw	1
  6714     0ABF                     u1835:
  6715     0ABF  1003               	clrc
  6716     0AC0  0DA0               	rlf	___ftpack@arg,f
  6717     0AC1  0DA1               	rlf	___ftpack@arg+1,f
  6718     0AC2  0DA2               	rlf	___ftpack@arg+2,f
  6719     0AC3  3EFF               	addlw	-1
  6720     0AC4  1D03               	skipz
  6721     0AC5  2ABF               	goto	u1835
  6722     0AC6                     l1798:
  6723     0AC6  1FA1               	btfss	___ftpack@arg+1,7
  6724     0AC7  2AB8               	goto	l1800
  6725     0AC8                     l583:
  6726     0AC8  1823               	btfsc	___ftpack@exp,0
  6727     0AC9  2AD0               	goto	l584
  6728     0ACA  30FF               	movlw	255
  6729     0ACB  05A0               	andwf	___ftpack@arg,f
  6730     0ACC  307F               	movlw	127
  6731     0ACD  05A1               	andwf	___ftpack@arg+1,f
  6732     0ACE  30FF               	movlw	255
  6733     0ACF  05A2               	andwf	___ftpack@arg+2,f
  6734     0AD0                     l584:
  6735     0AD0  1003               	clrc
  6736     0AD1  0CA3               	rrf	___ftpack@exp,f
  6737     0AD2  0823               	movf	___ftpack@exp,w
  6738     0AD3  00A5               	movwf	??___ftpack
  6739     0AD4  01A6               	clrf	??___ftpack+1
  6740     0AD5  01A7               	clrf	??___ftpack+2
  6741     0AD6  3010               	movlw	16
  6742     0AD7                     u1875:
  6743     0AD7  1003               	clrc
  6744     0AD8  0DA5               	rlf	??___ftpack,f
  6745     0AD9  0DA6               	rlf	??___ftpack+1,f
  6746     0ADA  0DA7               	rlf	??___ftpack+2,f
  6747     0ADB  3EFF               	addlw	-1
  6748     0ADC  1D03               	skipz
  6749     0ADD  2AD7               	goto	u1875
  6750     0ADE  0825               	movf	??___ftpack,w
  6751     0ADF  04A0               	iorwf	___ftpack@arg,f
  6752     0AE0  0826               	movf	??___ftpack+1,w
  6753     0AE1  04A1               	iorwf	___ftpack@arg+1,f
  6754     0AE2  0827               	movf	??___ftpack+2,w
  6755     0AE3  04A2               	iorwf	___ftpack@arg+2,f
  6756     0AE4  0824               	movf	___ftpack@sign,w
  6757     0AE5  1903               	btfsc	3,2
  6758     0AE6  0008               	return
  6759     0AE7  17A2               	bsf	___ftpack@arg+2,7
  6760     0AE8  0008               	return
  6761     0AE9                     __end_of___ftpack:
  6762                           
  6763                           	psect	text31
  6764     08F7                     __ptext31:	
  6765 ;; *************** function _TMR1_ISR *****************
  6766 ;; Defined at:
  6767 ;;		line 61 in file "newmain.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;		None
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : B00/800
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6781 ;;      Params:         0       0       0       0       0
  6782 ;;      Locals:         0       0       0       0       0
  6783 ;;      Temps:         13       0       0       0       0
  6784 ;;      Totals:        13       0       0       0       0
  6785 ;;Total ram usage:       13 bytes
  6786 ;; Hardware stack levels used: 1
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		Interrupt level 1
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794     08F7                     _TMR1_ISR:	
  6795                           ;psect for function _TMR1_ISR
  6796                           
  6797                           
  6798                           ;newmain.c: 62: PIR1bits.ADIF = 0;
  6799     08F7  1283               	bcf	3,5	;RP0=0, select bank0
  6800     08F8  1303               	bcf	3,6	;RP1=0, select bank0
  6801     08F9  130C               	bcf	12,6	;volatile
  6802                           
  6803                           ;newmain.c: 63: muestras[contador] = ((ADRESH << 8) & 0b1100000000) | ADRESL;
  6804     08FA  1683               	bsf	3,5	;RP0=1, select bank1
  6805     08FB  081E               	movf	30,w	;volatile
  6806     08FC  00F0               	movwf	??_TMR1_ISR
  6807     08FD  01F1               	clrf	??_TMR1_ISR+1
  6808     08FE  1283               	bcf	3,5	;RP0=0, select bank0
  6809     08FF  081E               	movf	30,w	;volatile
  6810     0900  00F2               	movwf	??_TMR1_ISR+2
  6811     0901  01F3               	clrf	??_TMR1_ISR+3
  6812     0902  0872               	movf	??_TMR1_ISR+2,w
  6813     0903  00F3               	movwf	??_TMR1_ISR+3
  6814     0904  01F2               	clrf	??_TMR1_ISR+2
  6815     0905  3000               	movlw	0
  6816     0906  0572               	andwf	??_TMR1_ISR+2,w
  6817     0907  00F4               	movwf	??_TMR1_ISR+4
  6818     0908  3003               	movlw	3
  6819     0909  0573               	andwf	??_TMR1_ISR+3,w
  6820     090A  00F5               	movwf	??_TMR1_ISR+5
  6821     090B  0870               	movf	??_TMR1_ISR,w
  6822     090C  0474               	iorwf	??_TMR1_ISR+4,w
  6823     090D  00F6               	movwf	??_TMR1_ISR+6
  6824     090E  0871               	movf	??_TMR1_ISR+1,w
  6825     090F  0475               	iorwf	??_TMR1_ISR+5,w
  6826     0910  00F7               	movwf	??_TMR1_ISR+7
  6827     0911  086C               	movf	_contador,w	;volatile
  6828     0912  00F8               	movwf	??_TMR1_ISR+8
  6829     0913  0778               	addwf	??_TMR1_ISR+8,w
  6830     0914  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  6831     0915  0084               	movwf	4
  6832     0916  0876               	movf	??_TMR1_ISR+6,w
  6833     0917  1783               	bsf	3,7	;select IRP bank3
  6834     0918  0080               	movwf	0
  6835     0919  0A84               	incf	4,f
  6836     091A  0877               	movf	??_TMR1_ISR+7,w
  6837     091B  0080               	movwf	0
  6838                           
  6839                           ;newmain.c: 65: contador++;
  6840     091C  3001               	movlw	1
  6841     091D  00FF               	movwf	127
  6842     091E  087F               	movf	127,w
  6843     091F  07EC               	addwf	_contador,f	;volatile
  6844                           
  6845                           ;newmain.c: 66: if (contador < 41) {
  6846     0920  3029               	movlw	41
  6847     0921  026C               	subwf	_contador,w	;volatile
  6848     0922  1C03               	btfss	3,0
  6849                           
  6850                           ;newmain.c: 67: ADCON0bits.GO = 1;
  6851     0923  149F               	bsf	31,1	;volatile
  6852     0924  087C               	movf	??_TMR1_ISR+12,w
  6853     0925  00FF               	movwf	127
  6854     0926  087B               	movf	??_TMR1_ISR+11,w
  6855     0927  008A               	movwf	10
  6856     0928  087A               	movf	??_TMR1_ISR+10,w
  6857     0929  0084               	movwf	4
  6858     092A  0E79               	swapf	??_TMR1_ISR+9,w
  6859     092B  0083               	movwf	3
  6860     092C  0EFE               	swapf	126,f
  6861     092D  0E7E               	swapf	126,w
  6862     092E  0009               	retfie
  6863     092F                     __end_of_TMR1_ISR:
  6864     007E                     btemp	set	126	;btemp
  6865     007E                     wtemp0	set	126
  6866                           
  6867                           	psect	intentry
  6868     0004                     __pintentry:	
  6869                           ;incstack = 0
  6870                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  6871                           
  6872     0004                     interrupt_function:
  6873     007E                     saved_w	set	btemp
  6874     0004  00FE               	movwf	btemp
  6875     0005  0E03               	swapf	3,w
  6876     0006  00F9               	movwf	??_TMR1_ISR+9
  6877     0007  0804               	movf	4,w
  6878     0008  00FA               	movwf	??_TMR1_ISR+10
  6879     0009  080A               	movf	10,w
  6880     000A  00FB               	movwf	??_TMR1_ISR+11
  6881     000B  087F               	movf	btemp+1,w
  6882     000C  00FC               	movwf	??_TMR1_ISR+12
  6883     000D  120A  158A  28F7   	ljmp	_TMR1_ISR
  6884                           
  6885                           	psect	config
  6886                           
  6887                           ;Config register CONFIG1 @ 0x2007
  6888                           ;	Oscillator Selection bits
  6889                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  6890                           ;	Watchdog Timer Enable bit
  6891                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6892                           ;	Power-up Timer Enable bit
  6893                           ;	PWRTE = OFF, PWRT disabled
  6894                           ;	RE3/MCLR pin function select bit
  6895                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  6896                           ;	Code Protection bit
  6897                           ;	CP = OFF, Program memory code protection is disabled
  6898                           ;	Data Code Protection bit
  6899                           ;	CPD = OFF, Data memory code protection is disabled
  6900                           ;	Brown Out Reset Selection bits
  6901                           ;	BOREN = OFF, BOR disabled
  6902                           ;	Internal External Switchover bit
  6903                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  6904                           ;	Fail-Safe Clock Monitor Enabled bit
  6905                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  6906                           ;	Low Voltage Programming Enable bit
  6907                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6908                           ;	In-Circuit Debugger Mode bit
  6909                           ;	DEBUG = 0x1, unprogrammed default
  6910     2007                     	org	8199
  6911     2007  20D1               	dw	8401
  6912                           
  6913                           ;Config register CONFIG2 @ 0x2008
  6914                           ;	Brown-out Reset Selection bit
  6915                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  6916                           ;	Flash Program Memory Self Write Enable bits
  6917                           ;	WRT = OFF, Write protection off
  6918     2008                     	org	8200
  6919     2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    118
    Data        23
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     73      80
    BANK1            80     23      43
    BANK3            96      0      80
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_text@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _TMR1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _uart_send_text->_uart_send
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_ADC->_set_CHANNEL
    ___lwtoft->___ftpack

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   43396
                                             70 BANK0      3     3      0
                            ___ftmul
                           ___lwtoft
                         _config_HAL
                           _init_ADC
                      _init_inttimer
                            _sprintf
                             _strcpy
                          _uart_init
                     _uart_send_text
 ---------------------------------------------------------------------------------
 (1) _uart_send_text                                       2     2      0     120
                                              1 BANK0      2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     169
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   35931
                                             60 BANK0     10     6      4
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    7887
                                             32 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    6134
                                             32 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     351
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              6 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4624
                                             17 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     560
                                             14 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1588
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    2509
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     444
                                             39 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3667
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3472
                                             42 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     648
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _init_inttimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             3     3      0      22
                                              2 BANK0      3     3      0
                        _set_CHANNEL
 ---------------------------------------------------------------------------------
 (2) _set_CHANNEL                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_HAL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2462
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2376
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                            13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
     ___lbmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
   _config_HAL
   _init_ADC
     _set_CHANNEL
   _init_inttimer
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _scale
   _strcpy
   _uart_init
   _uart_send_text
     _uart_send

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      2B       7       53.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D8      12        0.0%
ABS                  0      0      D8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat May 06 16:15:37 2023

                      pc 0002           ___bmul@product 002F             ___awdiv@sign 002B  
                     fsr 0004      ___wmul@multiplicand 0022             ___ftadd@exp1 0055  
           ___ftadd@exp2 0054             ___ftadd@sign 0053                      l301 005C  
                    l161 07FA                      l175 17BC                      l347 1782  
                    l701 089D                      l607 0D53                      l643 0BF6  
                    l564 0EA9                      l556 0E7D                      l583 0AC8  
                    l584 0AD0                      l684 07D1                      fsr0 0004  
                    indf 0000             ___awmod@sign 0025                     l2012 0C55  
                   l2200 0C05                     l2024 0C7B                     l2016 0C65  
                   l2210 0DCE                     l2050 17A9                     l2106 0FD4  
                   l2122 05D9                     l2028 0C8B                     l2060 17B8  
                   l2140 0702                     l2132 0657                     l2302 08D9  
                   l2206 0DC5                     l2152 0B7A                     l2048 17A0  
                   l2128 063C                     l2306 08E8                     l2330 1762  
                   l2242 0E95                     l2226 0E27                     l2170 0BAF  
                   l2146 0765                     l2340 0796                     l2260 177A  
                   l2156 0B83                     l2068 0888                     l2406 08A5  
                   l2254 0EB8                     l2246 0EA5                     l1800 0AB8  
                   l2336 078D                     l2280 0A2F                     l2408 08B7  
                   l2192 0BF2                     l2520 01B4                     l2370 07E0  
                   l2362 07CD                     l2290 0A67                     l2282 0A3F  
                   l2178 0BCF                     l2098 0F69                     l2530 0210  
                   l2514 0194                     l2506 013C                     l2188 0BE2  
                   l1812 16F9                     l1900 096D                     l2620 050F  
                   l2460 1742                     l2374 07EE                     l2358 07BD  
                   l2294 0A74                     l2614 0500                     l2534 022C  
                   l2622 0514                     l2630 0523                     l2470 0059  
                   l2392 09B0                     l1816 16FF                     l1840 09DB  
                   l1904 0975                     l2544 0276                     l1914 0CD6  
                   l2386 0982                     l1850 09E3                     l1834 09D0  
                   l2562 0315                     l2554 02D1                     l2490 00CB  
                   l2474 005E                     l1924 0CEC                     l2388 0992  
                   l2396 09BD                     l1852 09F1                     l2548 02CF  
                   l2476 0072                     l2628 0041                     l2660 0B04  
                   l1782 0A8C                     l1950 0D2E                     l1942 0D19  
                   l1918 0CDD                     l1862 0A12                     l2590 03CF  
                   l1960 0D4F                     l1936 0D04                     l2584 03B3  
                   l2576 0322                     l1794 0AB3                     l1786 0A98  
                   l1778 0A85                     l1946 0D25                     l1866 0A1A  
                   l1858 0A07                     l1890 0946                     l1882 0940  
                   l2578 03A2                     l1788 0A9D                     l1964 0D65  
                   l1956 0D43                     l1948 0D2A                     l1892 0954  
                   l2668 0B0E                     l1798 0AC6                     l1878 0939  
                   l2598 03EC                     l1968 0D77                     l1896 0962  
                   l1978 0D9A                     l1994 0C36                     l1988 0C22  
                   STR_1 087C                     STR_2 0880                     u2045 0949  
                   u2225 0D1A                     u2065 095A                     u3035 079D  
                   u2075 0963                     u2255 0D2F                     u3135 0986  
                   u3065 07BE                     u2505 088B                     u2195 0D05  
                   u3155 09A0                     u2435 0C8C                     u2285 0D44  
                   u3165 09B1                     u2445 0C94                     u3405 03BC  
                   u3325 020E                     u1815 0AAC                     u3095 07D6  
                   u3415 03C9                     u3255 00E3                     u3185 08AA  
                   u2385 0C66                     u3345 02D5                     u1835 0ABF  
                   u2635 0BB1                     u2395 0C6E                     u3435 043C  
                   u3355 030B                     u3515 0B64                     u2725 0BFB  
                   u2645 0BC2                     u3445 04BC                     u2815 0E96  
                   u2655 0BD0                     u3295 01E5                     u3537 17F8  
                   u1945 09E6                     u3385 032B                     u1875 0AD7  
                   u1795 0A91                     u2915 0A33                     u2845 0EAE  
                   u2765 0E29                     u1965 09F2                     u2935 0A41  
                   u2775 0E58                     u2695 0BE3                     u1975 09FE  
                   u2945 0A56                     u1985 0A08                     u2955 0A68  
                   u2875 1783                     u2885 178A                     _TXEN 04C5  
                   _TXIF 0064                     _main 0AE9             ___ftpack@arg 0020  
           ___ftpack@exp 0023                     btemp 007E                     _stop 006D  
                   start 0010             _sprintf$1259 00A0        ___bmul@multiplier 0030  
           ___ftmul@cntr 003E             ___ftmul@sign 003F         ??_uart_send_text 0021  
           ___fttol@exp1 0053             ___fttol@lval 004F                    ?_main 0070  
        __end_of___awdiv 0A1F          __end_of___lbdiv 17BA          __end_of___ftadd 0DAE  
        __end_of___awmod 097A          __end_of___lbmod 08A3          __end_of___ftneg 16C4  
                  _ANSEL 0188          __end_of___lldiv 0A7D          __end_of___ftmul 0CB3  
        ___awdiv@divisor 0026          __end_of___llmod 09C6          __end_of___ftsub 1778  
        __end_of___fttol 07F7          ___awdiv@counter 002A                    _RCSTA 0018  
                  _TMR1H 000F                    _TMR1L 000E                    _SPBRG 0099  
                  _TRISD 0088                    _TRISE 0089                    _TXREG 0019  
           ___lltoft@exp 002C         __end_of_TMR1_ISR 092F          __end_of_dpowers 087C  
                  _scale 0528            ___ftpack@sign 0024                    main@i 0067  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 0528             ?_set_CHANNEL 0070          ___lbdiv@divisor 0026  
        ___lbdiv@counter 0028          __initialization 0013             __end_of_main 0B6D  
                 ??_main 0066            ___fttol@sign1 004E         ___llmod@dividend 0024  
                 ?_scale 0040                   _ADRESH 001E                   _ADRESL 009E  
       ___awdiv@dividend 0028         __end_of___ftpack 0AE9                   _ANSELH 0189  
       __end_of___lltoft 08CA         __end_of___lwtoft 172B         __end_of__powers_ 082D  
                 ___bmul 16F7                   ___ftge 08CA                   ___wmul 1778  
              ??___awdiv 002A                ??___lbdiv 0027                ??___ftadd 0050  
              ??___awmod 0024                ??___lbmod 0021                ??___ftneg 0023  
              ??___lldiv 0028                ??___ftmul 0037                ??___llmod 0028  
              ??___ftsub 005C                ??___fttol 004B         __end_of_init_ADC 1800  
                 _buffer 00B7                   _fround 0EC1         ___awdiv@quotient 002C  
        ___awmod@divisor 0020          ___awmod@counter 0024                   _strcpy 173F  
  ___ftmul@f3_as_product 003B                   saved_w 007E                ??_sprintf 0060  
       ___lbdiv@dividend 0027          ___lbmod@divisor 0020  __end_of__initialization 0039  
        ___lbmod@counter 0024               ___ftadd@f1 004A               ___ftadd@f2 004D  
             ___ftge@ff1 0020               ___ftge@ff2 0023               ___ftneg@f1 0020  
    ___bmul@multiplicand 002E               ___ftmul@f1 0031               ___ftmul@f2 0034  
             ___ftsub@f1 0059               ___ftsub@f2 0056               ___fttol@f1 0047  
         __pcstackCOMMON 0070             __pidataBANK0 16B3             __pidataBANK1 172B  
              ?_TMR1_ISR 0070               ___lltoft@c 0028            __end_of_scale 0780  
       ___lbdiv@quotient 0029               ___lwtoft@c 0028               __div_to_l_ 0DAE  
        __div_to_l_@exp1 0033          __div_to_l_@cntr 0032     uart_send_text@buffer 0022  
                ??_scale 0043          __div_to_l_@quot 002E               __pbssBANK0 0069  
             __pbssBANK3 0190            _init_inttimer 16D9            __div_to_l_@f1 0020  
          __div_to_l_@f2 0023               __pmaintext 0AE9                  ?___bmul 002E  
                ?___ftge 0020                  ?___wmul 0020               ??_TMR1_ISR 0070  
             __pintentry 0004                  ?_fround 0040                ?___ftpack 0020  
              ?___lltoft 0028                  ?_strcpy 0020                ?___lwtoft 0028  
             _config_HAL 16B6               __stringtab 0800           ?_init_inttimer 0070  
              ?_init_ADC 0070        __end_of__npowers_ 0854               _scale$1258 0043  
                ___awdiv 09C6                  ___lbdiv 1799                  ___ftadd 0CB3  
                ___awmod 092F                  ___lbmod 0884                  ___ftneg 16BC  
                ___lldiv 0A1F                  ___ftmul 0C0E                  ___llmod 097A  
                ___ftsub 175B                  ___fttol 0780        uart_send_text@aux 0021  
             ??___ftpack 0025                _ANSELbits 0188                  _datoenv 0069  
             ??___lltoft 002C                  __ptext1 17BA                  __ptext2 07F7  
                __ptext3 16E7                  __ptext4 173F                  __ptext5 003D  
                __ptext6 0528                  __ptext7 092F                  __ptext8 09C6  
                __ptext9 0EC1               ??___lwtoft 002B                _T1CONbits 0010  
            ?__div_to_l_ 0020                  _dpowers 0854         ___awmod@dividend 0022  
                _sprintf 003D                  clrloop0 16C5     end_of_initialization 0039  
             ??_init_ADC 0022        __end_of_uart_init 16F7        __end_of_uart_send 0800  
        ___lldiv@divisor 0020          ___lldiv@counter 002D                _RCSTAbits 0018  
         __tdiv_to_l_@f1 0020           __tdiv_to_l_@f2 0023            ??__tdiv_to_l_ 0026  
            ?_config_HAL 0070         ___lbmod@dividend 0023                _TRISAbits 0085  
              _TRISCbits 0087          ??_init_inttimer 0020              ___lbmod@rem 0025  
              _TXSTAbits 0098              ___ftmul@exp 003A           __end_of___bmul 1708  
         __end_of___ftge 08F7           __end_of___wmul 1799              _BAUDCTLbits 0187  
         __end_of_fround 1000           __end_of_strcpy 175B      start_initialization 0013  
    __end_of__tdiv_to_l_ 0C0E          ___llmod@divisor 0020          ___llmod@counter 0029  
               ??___bmul 002F                 ??___ftge 0026                 ??___wmul 0024  
             init_fetch0 1708              __pdataBANK0 006D              __pdataBANK1 00B7  
               ??_fround 0043            sprintf@tmpval 00AE                 ??_strcpy 0021  
             fround@prec 0049                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00A0              sprintf@flag 00A4              sprintf@eexp 00AC  
            sprintf@fval 00B3            ??_set_CHANNEL 0020              sprintf@prec 00A6  
               ?___awdiv 0026                 ?___lbdiv 0026                 ?___ftadd 004A  
               ?___awmod 0020                 ?___lbmod 0020                 ?___ftneg 0020  
               ?___lldiv 0020                 ?___ftmul 0031                 ?___llmod 0020  
               ?___ftsub 0056                __npowers_ 082D                 ?___fttol 0047  
              __pstrings 0800              __tdiv_to_l_ 0B6D             ??__div_to_l_ 0026  
         _uart_send_text 17BA                 ?_sprintf 005C        interrupt_function 0004  
         ___wmul@product 0024                clear_ram0 16C4                 _PIE1bits 008C  
               _PIR1bits 000C       __end_of__div_to_l_ 0EC1      __end_of_set_CHANNEL 16D9  
              _uart_init 16E7                _uart_send 07F7                 _TMR1_ISR 08F7  
 __end_of_uart_send_text 17DC               _ADCON0bits 001F              __stringbase 0805  
             _ADCON1bits 009F        ___wmul@multiplier 0020             ??_config_HAL 0020  
     __end_of_config_HAL 16BC               ?_uart_init 0070               ?_uart_send 0070  
               ___ftpack 0A7D              _fround$1256 0046              _fround$1257 0043  
     __end_of__stringtab 0806                 ___lltoft 08A3          ?_uart_send_text 0070  
               ___lwtoft 1719               sprintf@val 00A8       set_CHANNEL@channel 0021  
               __ptext10 0884                 __ptext11 1799                 __ptext20 0780  
               __ptext12 0C0E                 __ptext21 175B                 __ptext13 16F7  
               __ptext30 0A7D                 __ptext22 0CB3                 __ptext14 0B6D  
               __ptext31 08F7                 __ptext23 16BC                 __ptext15 0DAE  
               __ptext24 08CA                 __ptext16 1778                 __ptext25 16D9  
               __ptext17 08A3                 __ptext26 17DC                 __ptext18 097A  
               __ptext27 16CC                 __ptext19 0A1F                 __ptext28 16B6  
               __ptext29 1719                 __powers_ 0806                 _contador 006C  
  __end_of_init_inttimer 16E7               strcpy@from 0020                 _init_ADC 17DC  
            _set_CHANNEL 16CC                 _muestras 0190               _INTCONbits 000B  
               init_ram0 170C                 scale@scl 0046                 intlevel1 0000  
              sprintf@ap 00A3         __tdiv_to_l_@exp1 002E         __tdiv_to_l_@cntr 002D  
              sprintf@sp 00B2         __tdiv_to_l_@quot 0029         ___lldiv@dividend 0024  
              stringcode 0800               _OSCCONbits 008F              ??_uart_init 0020  
            ??_uart_send 0020             ?__tdiv_to_l_ 0020            uart_send@data 0020  
               sprintf@c 00B6                 sprintf@f 005C         ___lldiv@quotient 0029  
               strcpy@cp 0022                 strcpy@to 0021                 stringdir 0800  
               stringtab 0800  
