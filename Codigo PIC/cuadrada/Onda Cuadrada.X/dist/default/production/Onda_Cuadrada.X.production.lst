

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Apr 30 19:35:46 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	dabs	1,0x7E,2
    52     0000                     
    53                           ; Generated 09/02/2023 GMT
    54                           ; 
    55                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87     0000                     	;# 
    88     0001                     	;# 
    89     0002                     	;# 
    90     0003                     	;# 
    91     0004                     	;# 
    92     0005                     	;# 
    93     0006                     	;# 
    94     0007                     	;# 
    95     0008                     	;# 
    96     0009                     	;# 
    97     000A                     	;# 
    98     000B                     	;# 
    99     000C                     	;# 
   100     000D                     	;# 
   101     000E                     	;# 
   102     000E                     	;# 
   103     000F                     	;# 
   104     0010                     	;# 
   105     0011                     	;# 
   106     0012                     	;# 
   107     0013                     	;# 
   108     0014                     	;# 
   109     0015                     	;# 
   110     0015                     	;# 
   111     0016                     	;# 
   112     0017                     	;# 
   113     0018                     	;# 
   114     0019                     	;# 
   115     001A                     	;# 
   116     001B                     	;# 
   117     001B                     	;# 
   118     001C                     	;# 
   119     001D                     	;# 
   120     001E                     	;# 
   121     001F                     	;# 
   122     0081                     	;# 
   123     0085                     	;# 
   124     0086                     	;# 
   125     0087                     	;# 
   126     0088                     	;# 
   127     0089                     	;# 
   128     008C                     	;# 
   129     008D                     	;# 
   130     008E                     	;# 
   131     008F                     	;# 
   132     0090                     	;# 
   133     0091                     	;# 
   134     0092                     	;# 
   135     0093                     	;# 
   136     0093                     	;# 
   137     0093                     	;# 
   138     0094                     	;# 
   139     0095                     	;# 
   140     0096                     	;# 
   141     0097                     	;# 
   142     0098                     	;# 
   143     0099                     	;# 
   144     009A                     	;# 
   145     009B                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     0105                     	;# 
   151     0107                     	;# 
   152     0108                     	;# 
   153     0109                     	;# 
   154     010C                     	;# 
   155     010C                     	;# 
   156     010D                     	;# 
   157     010E                     	;# 
   158     010F                     	;# 
   159     0185                     	;# 
   160     0187                     	;# 
   161     0188                     	;# 
   162     0189                     	;# 
   163     018C                     	;# 
   164     018D                     	;# 
   165     0000                     	;# 
   166     0001                     	;# 
   167     0002                     	;# 
   168     0003                     	;# 
   169     0004                     	;# 
   170     0005                     	;# 
   171     0006                     	;# 
   172     0007                     	;# 
   173     0008                     	;# 
   174     0009                     	;# 
   175     000A                     	;# 
   176     000B                     	;# 
   177     000C                     	;# 
   178     000D                     	;# 
   179     000E                     	;# 
   180     000E                     	;# 
   181     000F                     	;# 
   182     0010                     	;# 
   183     0011                     	;# 
   184     0012                     	;# 
   185     0013                     	;# 
   186     0014                     	;# 
   187     0015                     	;# 
   188     0015                     	;# 
   189     0016                     	;# 
   190     0017                     	;# 
   191     0018                     	;# 
   192     0019                     	;# 
   193     001A                     	;# 
   194     001B                     	;# 
   195     001B                     	;# 
   196     001C                     	;# 
   197     001D                     	;# 
   198     001E                     	;# 
   199     001F                     	;# 
   200     0081                     	;# 
   201     0085                     	;# 
   202     0086                     	;# 
   203     0087                     	;# 
   204     0088                     	;# 
   205     0089                     	;# 
   206     008C                     	;# 
   207     008D                     	;# 
   208     008E                     	;# 
   209     008F                     	;# 
   210     0090                     	;# 
   211     0091                     	;# 
   212     0092                     	;# 
   213     0093                     	;# 
   214     0093                     	;# 
   215     0093                     	;# 
   216     0094                     	;# 
   217     0095                     	;# 
   218     0096                     	;# 
   219     0097                     	;# 
   220     0098                     	;# 
   221     0099                     	;# 
   222     009A                     	;# 
   223     009B                     	;# 
   224     009C                     	;# 
   225     009D                     	;# 
   226     009E                     	;# 
   227     009F                     	;# 
   228     0105                     	;# 
   229     0107                     	;# 
   230     0108                     	;# 
   231     0109                     	;# 
   232     010C                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     0185                     	;# 
   238     0187                     	;# 
   239     0188                     	;# 
   240     0189                     	;# 
   241     018C                     	;# 
   242     018D                     	;# 
   243     0000                     	;# 
   244     0001                     	;# 
   245     0002                     	;# 
   246     0003                     	;# 
   247     0004                     	;# 
   248     0005                     	;# 
   249     0006                     	;# 
   250     0007                     	;# 
   251     0008                     	;# 
   252     0009                     	;# 
   253     000A                     	;# 
   254     000B                     	;# 
   255     000C                     	;# 
   256     000D                     	;# 
   257     000E                     	;# 
   258     000E                     	;# 
   259     000F                     	;# 
   260     0010                     	;# 
   261     0011                     	;# 
   262     0012                     	;# 
   263     0013                     	;# 
   264     0014                     	;# 
   265     0015                     	;# 
   266     0015                     	;# 
   267     0016                     	;# 
   268     0017                     	;# 
   269     0018                     	;# 
   270     0019                     	;# 
   271     001A                     	;# 
   272     001B                     	;# 
   273     001B                     	;# 
   274     001C                     	;# 
   275     001D                     	;# 
   276     001E                     	;# 
   277     001F                     	;# 
   278     0081                     	;# 
   279     0085                     	;# 
   280     0086                     	;# 
   281     0087                     	;# 
   282     0088                     	;# 
   283     0089                     	;# 
   284     008C                     	;# 
   285     008D                     	;# 
   286     008E                     	;# 
   287     008F                     	;# 
   288     0090                     	;# 
   289     0091                     	;# 
   290     0092                     	;# 
   291     0093                     	;# 
   292     0093                     	;# 
   293     0093                     	;# 
   294     0094                     	;# 
   295     0095                     	;# 
   296     0096                     	;# 
   297     0097                     	;# 
   298     0098                     	;# 
   299     0099                     	;# 
   300     009A                     	;# 
   301     009B                     	;# 
   302     009C                     	;# 
   303     009D                     	;# 
   304     009E                     	;# 
   305     009F                     	;# 
   306     0105                     	;# 
   307     0107                     	;# 
   308     0108                     	;# 
   309     0109                     	;# 
   310     010C                     	;# 
   311     010C                     	;# 
   312     010D                     	;# 
   313     010E                     	;# 
   314     010F                     	;# 
   315     0185                     	;# 
   316     0187                     	;# 
   317     0188                     	;# 
   318     0189                     	;# 
   319     018C                     	;# 
   320     018D                     	;# 
   321     0000                     	;# 
   322     0001                     	;# 
   323     0002                     	;# 
   324     0003                     	;# 
   325     0004                     	;# 
   326     0005                     	;# 
   327     0006                     	;# 
   328     0007                     	;# 
   329     0008                     	;# 
   330     0009                     	;# 
   331     000A                     	;# 
   332     000B                     	;# 
   333     000C                     	;# 
   334     000D                     	;# 
   335     000E                     	;# 
   336     000E                     	;# 
   337     000F                     	;# 
   338     0010                     	;# 
   339     0011                     	;# 
   340     0012                     	;# 
   341     0013                     	;# 
   342     0014                     	;# 
   343     0015                     	;# 
   344     0015                     	;# 
   345     0016                     	;# 
   346     0017                     	;# 
   347     0018                     	;# 
   348     0019                     	;# 
   349     001A                     	;# 
   350     001B                     	;# 
   351     001B                     	;# 
   352     001C                     	;# 
   353     001D                     	;# 
   354     001E                     	;# 
   355     001F                     	;# 
   356     0081                     	;# 
   357     0085                     	;# 
   358     0086                     	;# 
   359     0087                     	;# 
   360     0088                     	;# 
   361     0089                     	;# 
   362     008C                     	;# 
   363     008D                     	;# 
   364     008E                     	;# 
   365     008F                     	;# 
   366     0090                     	;# 
   367     0091                     	;# 
   368     0092                     	;# 
   369     0093                     	;# 
   370     0093                     	;# 
   371     0093                     	;# 
   372     0094                     	;# 
   373     0095                     	;# 
   374     0096                     	;# 
   375     0097                     	;# 
   376     0098                     	;# 
   377     0099                     	;# 
   378     009A                     	;# 
   379     009B                     	;# 
   380     009C                     	;# 
   381     009D                     	;# 
   382     009E                     	;# 
   383     009F                     	;# 
   384     0105                     	;# 
   385     0107                     	;# 
   386     0108                     	;# 
   387     0109                     	;# 
   388     010C                     	;# 
   389     010C                     	;# 
   390     010D                     	;# 
   391     010E                     	;# 
   392     010F                     	;# 
   393     0185                     	;# 
   394     0187                     	;# 
   395     0188                     	;# 
   396     0189                     	;# 
   397     018C                     	;# 
   398     018D                     	;# 
   399     0000                     	;# 
   400     0001                     	;# 
   401     0002                     	;# 
   402     0003                     	;# 
   403     0004                     	;# 
   404     0005                     	;# 
   405     0006                     	;# 
   406     0007                     	;# 
   407     0008                     	;# 
   408     0009                     	;# 
   409     000A                     	;# 
   410     000B                     	;# 
   411     000C                     	;# 
   412     000D                     	;# 
   413     000E                     	;# 
   414     000E                     	;# 
   415     000F                     	;# 
   416     0010                     	;# 
   417     0011                     	;# 
   418     0012                     	;# 
   419     0013                     	;# 
   420     0014                     	;# 
   421     0015                     	;# 
   422     0015                     	;# 
   423     0016                     	;# 
   424     0017                     	;# 
   425     0018                     	;# 
   426     0019                     	;# 
   427     001A                     	;# 
   428     001B                     	;# 
   429     001B                     	;# 
   430     001C                     	;# 
   431     001D                     	;# 
   432     001E                     	;# 
   433     001F                     	;# 
   434     0081                     	;# 
   435     0085                     	;# 
   436     0086                     	;# 
   437     0087                     	;# 
   438     0088                     	;# 
   439     0089                     	;# 
   440     008C                     	;# 
   441     008D                     	;# 
   442     008E                     	;# 
   443     008F                     	;# 
   444     0090                     	;# 
   445     0091                     	;# 
   446     0092                     	;# 
   447     0093                     	;# 
   448     0093                     	;# 
   449     0093                     	;# 
   450     0094                     	;# 
   451     0095                     	;# 
   452     0096                     	;# 
   453     0097                     	;# 
   454     0098                     	;# 
   455     0099                     	;# 
   456     009A                     	;# 
   457     009B                     	;# 
   458     009C                     	;# 
   459     009D                     	;# 
   460     009E                     	;# 
   461     009F                     	;# 
   462     0105                     	;# 
   463     0107                     	;# 
   464     0108                     	;# 
   465     0109                     	;# 
   466     010C                     	;# 
   467     010C                     	;# 
   468     010D                     	;# 
   469     010E                     	;# 
   470     010F                     	;# 
   471     0185                     	;# 
   472     0187                     	;# 
   473     0188                     	;# 
   474     0189                     	;# 
   475     018C                     	;# 
   476     018D                     	;# 
   477     0000                     	;# 
   478     0001                     	;# 
   479     0002                     	;# 
   480     0003                     	;# 
   481     0004                     	;# 
   482     0005                     	;# 
   483     0006                     	;# 
   484     0007                     	;# 
   485     0008                     	;# 
   486     0009                     	;# 
   487     000A                     	;# 
   488     000B                     	;# 
   489     000C                     	;# 
   490     000D                     	;# 
   491     000E                     	;# 
   492     000E                     	;# 
   493     000F                     	;# 
   494     0010                     	;# 
   495     0011                     	;# 
   496     0012                     	;# 
   497     0013                     	;# 
   498     0014                     	;# 
   499     0015                     	;# 
   500     0015                     	;# 
   501     0016                     	;# 
   502     0017                     	;# 
   503     0018                     	;# 
   504     0019                     	;# 
   505     001A                     	;# 
   506     001B                     	;# 
   507     001B                     	;# 
   508     001C                     	;# 
   509     001D                     	;# 
   510     001E                     	;# 
   511     001F                     	;# 
   512     0081                     	;# 
   513     0085                     	;# 
   514     0086                     	;# 
   515     0087                     	;# 
   516     0088                     	;# 
   517     0089                     	;# 
   518     008C                     	;# 
   519     008D                     	;# 
   520     008E                     	;# 
   521     008F                     	;# 
   522     0090                     	;# 
   523     0091                     	;# 
   524     0092                     	;# 
   525     0093                     	;# 
   526     0093                     	;# 
   527     0093                     	;# 
   528     0094                     	;# 
   529     0095                     	;# 
   530     0096                     	;# 
   531     0097                     	;# 
   532     0098                     	;# 
   533     0099                     	;# 
   534     009A                     	;# 
   535     009B                     	;# 
   536     009C                     	;# 
   537     009D                     	;# 
   538     009E                     	;# 
   539     009F                     	;# 
   540     0105                     	;# 
   541     0107                     	;# 
   542     0108                     	;# 
   543     0109                     	;# 
   544     010C                     	;# 
   545     010C                     	;# 
   546     010D                     	;# 
   547     010E                     	;# 
   548     010F                     	;# 
   549     0185                     	;# 
   550     0187                     	;# 
   551     0188                     	;# 
   552     0189                     	;# 
   553     018C                     	;# 
   554     018D                     	;# 
   555                           
   556                           	psect	idataBANK0
   557     0884                     __pidataBANK0:
   558                           
   559                           ;initializer for _stop
   560     0884  3400               	retlw	0
   561     0885  3480               	retlw	128
   562     0886  343F               	retlw	63
   563                           
   564                           	psect	idataBANK1
   565     170C                     __pidataBANK1:
   566                           
   567                           ;initializer for _buffer
   568     170C  3420               	retlw	32
   569     170D  3400               	retlw	0
   570     170E  3400               	retlw	0
   571     170F  3400               	retlw	0
   572     1710  3400               	retlw	0
   573     1711  3400               	retlw	0
   574     1712  3400               	retlw	0
   575     1713  3400               	retlw	0
   576     1714  3400               	retlw	0
   577     1715  3400               	retlw	0
   578     1716  3400               	retlw	0
   579     1717  3400               	retlw	0
   580     1718  3400               	retlw	0
   581     1719  3400               	retlw	0
   582     171A  3400               	retlw	0
   583     171B  3400               	retlw	0
   584     171C  3400               	retlw	0
   585     171D  3400               	retlw	0
   586     171E  3400               	retlw	0
   587     171F  3400               	retlw	0
   588                           
   589                           	psect	strings
   590     0800                     __pstrings:
   591     0800                     stringtab:
   592     0800                     __stringtab:
   593     0800                     stringcode:	
   594                           ;	String table - string pointers are 1 byte each
   595                           
   596     0800                     stringdir:
   597     0800  3008               	movlw	high stringdir
   598     0801  008A               	movwf	10
   599     0802  0804               	movf	4,w
   600     0803  0A84               	incf	4,f
   601     0804  0782               	addwf	2,f
   602     0805                     __stringbase:
   603     0805  3400               	retlw	0
   604     0806                     __end_of__stringtab:
   605     0806                     __powers_:
   606     0806  3400               	retlw	0
   607     0807  3480               	retlw	128
   608     0808  343F               	retlw	63
   609     0809  3400               	retlw	0
   610     080A  3420               	retlw	32
   611     080B  3441               	retlw	65
   612     080C  3400               	retlw	0
   613     080D  34C8               	retlw	200
   614     080E  3442               	retlw	66
   615     080F  3400               	retlw	0
   616     0810  347A               	retlw	122
   617     0811  3444               	retlw	68
   618     0812  3440               	retlw	64
   619     0813  341C               	retlw	28
   620     0814  3446               	retlw	70
   621     0815  3450               	retlw	80
   622     0816  34C3               	retlw	195
   623     0817  3447               	retlw	71
   624     0818  3424               	retlw	36
   625     0819  3474               	retlw	116
   626     081A  3449               	retlw	73
   627     081B  3497               	retlw	151
   628     081C  3418               	retlw	24
   629     081D  344B               	retlw	75
   630     081E  34BC               	retlw	188
   631     081F  34BE               	retlw	190
   632     0820  344C               	retlw	76
   633     0821  346B               	retlw	107
   634     0822  346E               	retlw	110
   635     0823  344E               	retlw	78
   636     0824  3403               	retlw	3
   637     0825  3415               	retlw	21
   638     0826  3450               	retlw	80
   639     0827  3479               	retlw	121
   640     0828  34AD               	retlw	173
   641     0829  3460               	retlw	96
   642     082A  34F3               	retlw	243
   643     082B  3449               	retlw	73
   644     082C  3471               	retlw	113
   645     082D                     __end_of__powers_:
   646     082D                     __npowers_:
   647     082D  3400               	retlw	0
   648     082E  3480               	retlw	128
   649     082F  343F               	retlw	63
   650     0830  34CD               	retlw	205
   651     0831  34CC               	retlw	204
   652     0832  343D               	retlw	61
   653     0833  34D7               	retlw	215
   654     0834  3423               	retlw	35
   655     0835  343C               	retlw	60
   656     0836  3412               	retlw	18
   657     0837  3483               	retlw	131
   658     0838  343A               	retlw	58
   659     0839  34B7               	retlw	183
   660     083A  34D1               	retlw	209
   661     083B  3438               	retlw	56
   662     083C  34C6               	retlw	198
   663     083D  3427               	retlw	39
   664     083E  3437               	retlw	55
   665     083F  3438               	retlw	56
   666     0840  3486               	retlw	134
   667     0841  3435               	retlw	53
   668     0842  34C0               	retlw	192
   669     0843  34D6               	retlw	214
   670     0844  3433               	retlw	51
   671     0845  34CC               	retlw	204
   672     0846  342B               	retlw	43
   673     0847  3432               	retlw	50
   674     0848  3470               	retlw	112
   675     0849  3489               	retlw	137
   676     084A  3430               	retlw	48
   677     084B  34E7               	retlw	231
   678     084C  34DB               	retlw	219
   679     084D  342E               	retlw	46
   680     084E  34E5               	retlw	229
   681     084F  343C               	retlw	60
   682     0850  341E               	retlw	30
   683     0851  3442               	retlw	66
   684     0852  34A2               	retlw	162
   685     0853  340D               	retlw	13
   686     0854                     __end_of__npowers_:
   687     0854                     _dpowers:
   688     0854  3401               	retlw	1
   689     0855  3400               	retlw	0
   690     0856  3400               	retlw	0
   691     0857  3400               	retlw	0
   692     0858  340A               	retlw	10
   693     0859  3400               	retlw	0
   694     085A  3400               	retlw	0
   695     085B  3400               	retlw	0
   696     085C  3464               	retlw	100
   697     085D  3400               	retlw	0
   698     085E  3400               	retlw	0
   699     085F  3400               	retlw	0
   700     0860  34E8               	retlw	232
   701     0861  3403               	retlw	3
   702     0862  3400               	retlw	0
   703     0863  3400               	retlw	0
   704     0864  3410               	retlw	16
   705     0865  3427               	retlw	39
   706     0866  3400               	retlw	0
   707     0867  3400               	retlw	0
   708     0868  34A0               	retlw	160
   709     0869  3486               	retlw	134
   710     086A  3401               	retlw	1
   711     086B  3400               	retlw	0
   712     086C  3440               	retlw	64
   713     086D  3442               	retlw	66
   714     086E  340F               	retlw	15
   715     086F  3400               	retlw	0
   716     0870  3480               	retlw	128
   717     0871  3496               	retlw	150
   718     0872  3498               	retlw	152
   719     0873  3400               	retlw	0
   720     0874  3400               	retlw	0
   721     0875  34E1               	retlw	225
   722     0876  34F5               	retlw	245
   723     0877  3405               	retlw	5
   724     0878  3400               	retlw	0
   725     0879  34CA               	retlw	202
   726     087A  349A               	retlw	154
   727     087B  343B               	retlw	59
   728     087C                     __end_of_dpowers:
   729     0019                     _TXREG	set	25
   730     0018                     _RCSTA	set	24
   731     0018                     _RCSTAbits	set	24
   732     000B                     _INTCONbits	set	11
   733     000C                     _PIR1bits	set	12
   734     000E                     _TMR1L	set	14
   735     000F                     _TMR1H	set	15
   736     0010                     _T1CONbits	set	16
   737     001E                     _ADRESH	set	30
   738     001F                     _ADCON0bits	set	31
   739     0064                     _TXIF	set	100
   740     0099                     _SPBRG	set	153
   741     0098                     _TXSTAbits	set	152
   742     0087                     _TRISCbits	set	135
   743     0089                     _TRISE	set	137
   744     0088                     _TRISD	set	136
   745     008F                     _OSCCONbits	set	143
   746     008C                     _PIE1bits	set	140
   747     009E                     _ADRESL	set	158
   748     009F                     _ADCON1bits	set	159
   749     0085                     _TRISAbits	set	133
   750     04C5                     _TXEN	set	1221
   751     0187                     _BAUDCTLbits	set	391
   752     0189                     _ANSELH	set	393
   753     0188                     _ANSEL	set	392
   754     0188                     _ANSELbits	set	392
   755     087C                     STR_1:
   756     087C  3420               	retlw	32	;' '
   757     087D  3420               	retlw	32	;' '
   758     087E  3420               	retlw	32	;' '
   759     087F  3400               	retlw	0
   760     0880                     STR_2:
   761     0880  3425               	retlw	37	;'%'
   762     0881  3466               	retlw	102	;'f'
   763     0882  3400               	retlw	0
   764     087C                     
   765                           	psect	cinit
   766     0013                     start_initialization:	
   767                           ; #config settings
   768                           
   769     0013                     __initialization:
   770                           
   771                           ; Initialize objects allocated to BANK1
   772     0013  1383               	bcf	3,7	;select IRP bank0
   773     0014  30CB               	movlw	low (__pdataBANK1+20)
   774     0015  00FD               	movwf	btemp+-1
   775     0016  3017               	movlw	high __pidataBANK1
   776     0017  00FE               	movwf	btemp
   777     0018  300C               	movlw	low __pidataBANK1
   778     0019  00FF               	movwf	btemp+1
   779     001A  30B7               	movlw	low __pdataBANK1
   780     001B  0084               	movwf	4
   781     001C  160A  118A  26ED  120A  118A  	fcall	init_ram0
   782                           
   783                           ; Initialize objects allocated to BANK0
   784     0021  3070               	movlw	low (__pdataBANK0+3)
   785     0022  00FD               	movwf	btemp+-1
   786     0023  3008               	movlw	high __pidataBANK0
   787     0024  00FE               	movwf	btemp
   788     0025  3084               	movlw	low __pidataBANK0
   789     0026  00FF               	movwf	btemp+1
   790     0027  306D               	movlw	low __pdataBANK0
   791     0028  0084               	movwf	4
   792     0029  160A  118A  26ED  120A  118A  	fcall	init_ram0
   793                           
   794                           ; Clear objects allocated to BANK3
   795     002E  1783               	bsf	3,7	;select IRP bank2
   796     002F  3090               	movlw	low __pbssBANK3
   797     0030  0084               	movwf	4
   798     0031  30E0               	movlw	low (__pbssBANK3+80)
   799     0032  160A  118A  26A5   	fcall	clear_ram0
   800                           
   801                           ; Clear objects allocated to BANK0
   802     0035  01E9               	clrf	__pbssBANK0& (0+127)
   803     0036  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   804     0037  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   805     0038  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   806     0039                     end_of_initialization:	
   807                           ;End of C runtime variable initialization code
   808                           
   809     0039                     __end_of__initialization:
   810     0039  0183               	clrf	3
   811     003A  120A  158A  2ACD   	ljmp	_main	;jump to C main() function
   812                           
   813                           	psect	bssBANK0
   814     0069                     __pbssBANK0:
   815     0069                     _datoenv:
   816     0069                     	ds	3
   817     006C                     _contador:
   818     006C                     	ds	1
   819                           
   820                           	psect	dataBANK0
   821     006D                     __pdataBANK0:
   822     006D                     _stop:
   823     006D                     	ds	3
   824                           
   825                           	psect	dataBANK1
   826     00B7                     __pdataBANK1:
   827     00B7                     _buffer:
   828     00B7                     	ds	20
   829                           
   830                           	psect	bssBANK3
   831     0190                     __pbssBANK3:
   832     0190                     _muestras:
   833     0190                     	ds	80
   834                           
   835                           	psect	inittext
   836     16E9                     init_fetch0:	
   837                           ;	Called with low address in FSR and high address in W
   838                           
   839     16E9  087E               	movf	126,w
   840     16EA  008A               	movwf	10
   841     16EB  087F               	movf	127,w
   842     16EC  0082               	movwf	2
   843     16ED                     init_ram0:	
   844                           ;Called with:
   845                           ;	high address of idata address in btemp 
   846                           ;	low address of idata address in btemp+1 
   847                           ;	low address of data in FSR
   848                           ;	high address + 1 of data in btemp-1
   849                           
   850     16ED  26E9  160A  118A   	fcall	init_fetch0
   851     16F0  0080               	movwf	0
   852     16F1  0A84               	incf	4,f
   853     16F2  0804               	movf	4,w
   854     16F3  067D               	xorwf	125,w
   855     16F4  1903               	btfsc	3,2
   856     16F5  3400               	retlw	0
   857     16F6  0AFF               	incf	127,f
   858     16F7  1903               	btfsc	3,2
   859     16F8  0AFE               	incf	126,f
   860     16F9  2EED               	goto	init_ram0
   861                           
   862                           	psect	clrtext
   863     16A5                     clear_ram0:	
   864                           ;	Called with FSR containing the base address, and
   865                           ;	W with the last address+1
   866                           
   867     16A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   868     16A6                     clrloop0:
   869     16A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   870     16A7  0A84               	incf	4,f	;increment pointer
   871     16A8  0604               	xorwf	4,w	;XOR with final address
   872     16A9  1903               	btfsc	3,2	;have we reached the end yet?
   873     16AA  3400               	retlw	0	;all done for this memory range, return
   874     16AB  0604               	xorwf	4,w	;XOR again to restore value
   875     16AC  2EA6               	goto	clrloop0	;do the next byte
   876                           
   877                           	psect	cstackBANK1
   878     00A0                     __pcstackBANK1:
   879     00A0                     _sprintf$1261:
   880                           
   881                           ; 3 bytes @ 0x0
   882     00A0                     	ds	3
   883     00A3                     sprintf@ap:
   884                           
   885                           ; 1 bytes @ 0x3
   886     00A3                     	ds	1
   887     00A4                     sprintf@flag:
   888                           
   889                           ; 2 bytes @ 0x4
   890     00A4                     	ds	2
   891     00A6                     sprintf@prec:
   892                           
   893                           ; 2 bytes @ 0x6
   894     00A6                     	ds	2
   895     00A8                     sprintf@val:
   896                           
   897                           ; 4 bytes @ 0x8
   898     00A8                     	ds	4
   899     00AC                     sprintf@eexp:
   900                           
   901                           ; 2 bytes @ 0xC
   902     00AC                     	ds	2
   903     00AE                     sprintf@tmpval:
   904                           
   905                           ; 4 bytes @ 0xE
   906     00AE                     	ds	4
   907     00B2                     sprintf@sp:
   908                           
   909                           ; 1 bytes @ 0x12
   910     00B2                     	ds	1
   911     00B3                     sprintf@fval:
   912                           
   913                           ; 3 bytes @ 0x13
   914     00B3                     	ds	3
   915     00B6                     sprintf@c:
   916                           
   917                           ; 1 bytes @ 0x16
   918     00B6                     	ds	1
   919                           
   920                           	psect	cstackCOMMON
   921     0070                     __pcstackCOMMON:
   922     0070                     ?_set_CHANNEL:
   923     0070                     ?_config_HAL:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     0070                     ?_uart_init:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     0070                     ?_uart_send_text:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     0070                     ?_init_ADC:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     0070                     ?_init_inttimer:	
   936                           ; 1 bytes @ 0x0
   937                           
   938     0070                     ?_TMR1_ISR:	
   939                           ; 1 bytes @ 0x0
   940                           
   941     0070                     ??_TMR1_ISR:	
   942                           ; 1 bytes @ 0x0
   943                           
   944     0070                     ?_uart_send:	
   945                           ; 1 bytes @ 0x0
   946                           
   947     0070                     ?_main:	
   948                           ; 1 bytes @ 0x0
   949                           
   950                           
   951                           ; 2 bytes @ 0x0
   952     0070                     	ds	13
   953                           
   954                           	psect	cstackBANK0
   955     0020                     __pcstackBANK0:
   956     0020                     ?___ftge:
   957     0020                     ??_set_CHANNEL:	
   958                           ; 1 bit 
   959                           
   960     0020                     ??_config_HAL:	
   961                           ; 1 bytes @ 0x0
   962                           
   963     0020                     ??_uart_init:	
   964                           ; 1 bytes @ 0x0
   965                           
   966     0020                     ?_strcpy:	
   967                           ; 1 bytes @ 0x0
   968                           
   969     0020                     ??_init_inttimer:	
   970                           ; 1 bytes @ 0x0
   971                           
   972     0020                     ??_uart_send:	
   973                           ; 1 bytes @ 0x0
   974                           
   975     0020                     ?___lbmod:	
   976                           ; 1 bytes @ 0x0
   977                           
   978     0020                     ?___wmul:	
   979                           ; 1 bytes @ 0x0
   980                           
   981     0020                     ?___awmod:	
   982                           ; 2 bytes @ 0x0
   983                           
   984     0020                     ?___ftpack:	
   985                           ; 2 bytes @ 0x0
   986                           
   987     0020                     ?___ftneg:	
   988                           ; 3 bytes @ 0x0
   989                           
   990     0020                     ?__tdiv_to_l_:	
   991                           ; 3 bytes @ 0x0
   992                           
   993     0020                     ?__div_to_l_:	
   994                           ; 4 bytes @ 0x0
   995                           
   996     0020                     ?___lldiv:	
   997                           ; 4 bytes @ 0x0
   998                           
   999     0020                     ?___llmod:	
  1000                           ; 4 bytes @ 0x0
  1001                           
  1002     0020                     uart_send@data:	
  1003                           ; 4 bytes @ 0x0
  1004                           
  1005     0020                     ___lbmod@divisor:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008     0020                     strcpy@from:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011     0020                     ___wmul@multiplier:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014     0020                     ___awmod@divisor:	
  1015                           ; 2 bytes @ 0x0
  1016                           
  1017     0020                     __div_to_l_@f1:	
  1018                           ; 2 bytes @ 0x0
  1019                           
  1020     0020                     ___ftpack@arg:	
  1021                           ; 3 bytes @ 0x0
  1022                           
  1023     0020                     __tdiv_to_l_@f1:	
  1024                           ; 3 bytes @ 0x0
  1025                           
  1026     0020                     ___ftge@ff1:	
  1027                           ; 3 bytes @ 0x0
  1028                           
  1029     0020                     ___ftneg@f1:	
  1030                           ; 3 bytes @ 0x0
  1031                           
  1032     0020                     ___lldiv@divisor:	
  1033                           ; 3 bytes @ 0x0
  1034                           
  1035     0020                     ___llmod@divisor:	
  1036                           ; 4 bytes @ 0x0
  1037                           
  1038                           
  1039                           ; 4 bytes @ 0x0
  1040     0020                     	ds	1
  1041     0021                     ??_strcpy:
  1042     0021                     ??_uart_send_text:	
  1043                           ; 1 bytes @ 0x1
  1044                           
  1045     0021                     ??___lbmod:	
  1046                           ; 1 bytes @ 0x1
  1047                           
  1048     0021                     set_CHANNEL@channel:	
  1049                           ; 1 bytes @ 0x1
  1050                           
  1051     0021                     uart_send_text@aux:	
  1052                           ; 1 bytes @ 0x1
  1053                           
  1054     0021                     strcpy@cp:	
  1055                           ; 1 bytes @ 0x1
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0x1
  1059     0021                     	ds	1
  1060     0022                     ??_init_ADC:
  1061     0022                     uart_send_text@buffer:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064     0022                     strcpy@to:	
  1065                           ; 1 bytes @ 0x2
  1066                           
  1067     0022                     ___wmul@multiplicand:	
  1068                           ; 1 bytes @ 0x2
  1069                           
  1070     0022                     ___awmod@dividend:	
  1071                           ; 2 bytes @ 0x2
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075     0022                     	ds	1
  1076     0023                     ??___ftneg:
  1077     0023                     ___ftpack@exp:	
  1078                           ; 1 bytes @ 0x3
  1079                           
  1080     0023                     ___lbmod@dividend:	
  1081                           ; 1 bytes @ 0x3
  1082                           
  1083     0023                     __div_to_l_@f2:	
  1084                           ; 1 bytes @ 0x3
  1085                           
  1086     0023                     __tdiv_to_l_@f2:	
  1087                           ; 3 bytes @ 0x3
  1088                           
  1089     0023                     ___ftge@ff2:	
  1090                           ; 3 bytes @ 0x3
  1091                           
  1092                           
  1093                           ; 3 bytes @ 0x3
  1094     0023                     	ds	1
  1095     0024                     ??___wmul:
  1096     0024                     ??___awmod:	
  1097                           ; 1 bytes @ 0x4
  1098                           
  1099     0024                     ___awmod@counter:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102     0024                     ___ftpack@sign:	
  1103                           ; 1 bytes @ 0x4
  1104                           
  1105     0024                     ___lbmod@counter:	
  1106                           ; 1 bytes @ 0x4
  1107                           
  1108     0024                     ___wmul@product:	
  1109                           ; 1 bytes @ 0x4
  1110                           
  1111     0024                     ___lldiv@dividend:	
  1112                           ; 2 bytes @ 0x4
  1113                           
  1114     0024                     ___llmod@dividend:	
  1115                           ; 4 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 4 bytes @ 0x4
  1119     0024                     	ds	1
  1120     0025                     ??___ftpack:
  1121     0025                     ___awmod@sign:	
  1122                           ; 1 bytes @ 0x5
  1123                           
  1124     0025                     ___lbmod@rem:	
  1125                           ; 1 bytes @ 0x5
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x5
  1129     0025                     	ds	1
  1130     0026                     ??__tdiv_to_l_:
  1131     0026                     ??__div_to_l_:	
  1132                           ; 1 bytes @ 0x6
  1133                           
  1134     0026                     ??___ftge:	
  1135                           ; 1 bytes @ 0x6
  1136                           
  1137     0026                     ?___lbdiv:	
  1138                           ; 1 bytes @ 0x6
  1139                           
  1140     0026                     ?___awdiv:	
  1141                           ; 1 bytes @ 0x6
  1142                           
  1143     0026                     ___lbdiv@divisor:	
  1144                           ; 2 bytes @ 0x6
  1145                           
  1146     0026                     ___awdiv@divisor:	
  1147                           ; 1 bytes @ 0x6
  1148                           
  1149                           
  1150                           ; 2 bytes @ 0x6
  1151     0026                     	ds	1
  1152     0027                     ??___lbdiv:
  1153     0027                     ___lbdiv@dividend:	
  1154                           ; 1 bytes @ 0x7
  1155                           
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158     0027                     	ds	1
  1159     0028                     ??___lldiv:
  1160     0028                     ??___llmod:	
  1161                           ; 1 bytes @ 0x8
  1162                           
  1163     0028                     ?___lltoft:	
  1164                           ; 1 bytes @ 0x8
  1165                           
  1166     0028                     ?___lwtoft:	
  1167                           ; 3 bytes @ 0x8
  1168                           
  1169     0028                     ___lbdiv@counter:	
  1170                           ; 3 bytes @ 0x8
  1171                           
  1172     0028                     ___awdiv@dividend:	
  1173                           ; 1 bytes @ 0x8
  1174                           
  1175     0028                     ___lwtoft@c:	
  1176                           ; 2 bytes @ 0x8
  1177                           
  1178     0028                     ___lltoft@c:	
  1179                           ; 2 bytes @ 0x8
  1180                           
  1181                           
  1182                           ; 4 bytes @ 0x8
  1183     0028                     	ds	1
  1184     0029                     ___lbdiv@quotient:
  1185     0029                     ___llmod@counter:	
  1186                           ; 1 bytes @ 0x9
  1187                           
  1188     0029                     ___lldiv@quotient:	
  1189                           ; 1 bytes @ 0x9
  1190                           
  1191     0029                     __tdiv_to_l_@quot:	
  1192                           ; 4 bytes @ 0x9
  1193                           
  1194                           
  1195                           ; 4 bytes @ 0x9
  1196     0029                     	ds	1
  1197     002A                     ??___awdiv:
  1198     002A                     ___awdiv@counter:	
  1199                           ; 1 bytes @ 0xA
  1200                           
  1201                           
  1202                           ; 1 bytes @ 0xA
  1203     002A                     	ds	1
  1204     002B                     ??___lwtoft:
  1205     002B                     ___awdiv@sign:	
  1206                           ; 1 bytes @ 0xB
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0xB
  1210     002B                     	ds	1
  1211     002C                     ??___lltoft:
  1212     002C                     ___lltoft@exp:	
  1213                           ; 1 bytes @ 0xC
  1214                           
  1215     002C                     ___awdiv@quotient:	
  1216                           ; 1 bytes @ 0xC
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0xC
  1220     002C                     	ds	1
  1221     002D                     ___lldiv@counter:
  1222     002D                     __tdiv_to_l_@cntr:	
  1223                           ; 1 bytes @ 0xD
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0xD
  1227     002D                     	ds	1
  1228     002E                     ?___bmul:
  1229     002E                     ___bmul@multiplicand:	
  1230                           ; 1 bytes @ 0xE
  1231                           
  1232     002E                     __tdiv_to_l_@exp1:	
  1233                           ; 1 bytes @ 0xE
  1234                           
  1235     002E                     __div_to_l_@quot:	
  1236                           ; 1 bytes @ 0xE
  1237                           
  1238                           
  1239                           ; 4 bytes @ 0xE
  1240     002E                     	ds	1
  1241     002F                     ??___bmul:
  1242     002F                     ___bmul@product:	
  1243                           ; 1 bytes @ 0xF
  1244                           
  1245                           
  1246                           ; 1 bytes @ 0xF
  1247     002F                     	ds	1
  1248     0030                     ___bmul@multiplier:
  1249                           
  1250                           ; 1 bytes @ 0x10
  1251     0030                     	ds	1
  1252     0031                     ?___ftmul:
  1253     0031                     ___ftmul@f1:	
  1254                           ; 3 bytes @ 0x11
  1255                           
  1256                           
  1257                           ; 3 bytes @ 0x11
  1258     0031                     	ds	1
  1259     0032                     __div_to_l_@cntr:
  1260                           
  1261                           ; 1 bytes @ 0x12
  1262     0032                     	ds	1
  1263     0033                     __div_to_l_@exp1:
  1264                           
  1265                           ; 1 bytes @ 0x13
  1266     0033                     	ds	1
  1267     0034                     ___ftmul@f2:
  1268                           
  1269                           ; 3 bytes @ 0x14
  1270     0034                     	ds	3
  1271     0037                     ??___ftmul:
  1272                           
  1273                           ; 1 bytes @ 0x17
  1274     0037                     	ds	3
  1275     003A                     ___ftmul@exp:
  1276                           
  1277                           ; 1 bytes @ 0x1A
  1278     003A                     	ds	1
  1279     003B                     ___ftmul@f3_as_product:
  1280                           
  1281                           ; 3 bytes @ 0x1B
  1282     003B                     	ds	3
  1283     003E                     ___ftmul@cntr:
  1284                           
  1285                           ; 1 bytes @ 0x1E
  1286     003E                     	ds	1
  1287     003F                     ___ftmul@sign:
  1288                           
  1289                           ; 1 bytes @ 0x1F
  1290     003F                     	ds	1
  1291     0040                     ?_fround:
  1292     0040                     ?_scale:	
  1293                           ; 3 bytes @ 0x20
  1294                           
  1295                           
  1296                           ; 3 bytes @ 0x20
  1297     0040                     	ds	3
  1298     0043                     ??_fround:
  1299     0043                     ??_scale:	
  1300                           ; 1 bytes @ 0x23
  1301                           
  1302     0043                     _fround$1259:	
  1303                           ; 1 bytes @ 0x23
  1304                           
  1305     0043                     _scale$1260:	
  1306                           ; 3 bytes @ 0x23
  1307                           
  1308                           
  1309                           ; 3 bytes @ 0x23
  1310     0043                     	ds	3
  1311     0046                     scale@scl:
  1312     0046                     _fround$1258:	
  1313                           ; 1 bytes @ 0x26
  1314                           
  1315                           
  1316                           ; 3 bytes @ 0x26
  1317     0046                     	ds	1
  1318     0047                     ?___fttol:
  1319     0047                     ___fttol@f1:	
  1320                           ; 4 bytes @ 0x27
  1321                           
  1322                           
  1323                           ; 3 bytes @ 0x27
  1324     0047                     	ds	2
  1325     0049                     fround@prec:
  1326                           
  1327                           ; 1 bytes @ 0x29
  1328     0049                     	ds	1
  1329     004A                     ?___ftadd:
  1330     004A                     ___ftadd@f1:	
  1331                           ; 3 bytes @ 0x2A
  1332                           
  1333                           
  1334                           ; 3 bytes @ 0x2A
  1335     004A                     	ds	1
  1336     004B                     ??___fttol:
  1337                           
  1338                           ; 1 bytes @ 0x2B
  1339     004B                     	ds	2
  1340     004D                     ___ftadd@f2:
  1341                           
  1342                           ; 3 bytes @ 0x2D
  1343     004D                     	ds	1
  1344     004E                     ___fttol@sign1:
  1345                           
  1346                           ; 1 bytes @ 0x2E
  1347     004E                     	ds	1
  1348     004F                     ___fttol@lval:
  1349                           
  1350                           ; 4 bytes @ 0x2F
  1351     004F                     	ds	1
  1352     0050                     ??___ftadd:
  1353                           
  1354                           ; 1 bytes @ 0x30
  1355     0050                     	ds	3
  1356     0053                     ___ftadd@sign:
  1357     0053                     ___fttol@exp1:	
  1358                           ; 1 bytes @ 0x33
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x33
  1362     0053                     	ds	1
  1363     0054                     ___ftadd@exp2:
  1364                           
  1365                           ; 1 bytes @ 0x34
  1366     0054                     	ds	1
  1367     0055                     ___ftadd@exp1:
  1368                           
  1369                           ; 1 bytes @ 0x35
  1370     0055                     	ds	1
  1371     0056                     ?___ftsub:
  1372     0056                     ___ftsub@f2:	
  1373                           ; 3 bytes @ 0x36
  1374                           
  1375                           
  1376                           ; 3 bytes @ 0x36
  1377     0056                     	ds	3
  1378     0059                     ___ftsub@f1:
  1379                           
  1380                           ; 3 bytes @ 0x39
  1381     0059                     	ds	3
  1382     005C                     ??___ftsub:
  1383     005C                     ?_sprintf:	
  1384                           ; 1 bytes @ 0x3C
  1385                           
  1386     005C                     sprintf@f:	
  1387                           ; 2 bytes @ 0x3C
  1388                           
  1389                           
  1390                           ; 1 bytes @ 0x3C
  1391     005C                     	ds	4
  1392     0060                     ??_sprintf:
  1393                           
  1394                           ; 1 bytes @ 0x40
  1395     0060                     	ds	6
  1396     0066                     ??_main:
  1397                           
  1398                           ; 1 bytes @ 0x46
  1399     0066                     	ds	1
  1400     0067                     main@i:
  1401                           
  1402                           ; 2 bytes @ 0x47
  1403     0067                     	ds	2
  1404                           
  1405                           	psect	maintext
  1406     0ACD                     __pmaintext:	
  1407 ;;
  1408 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1409 ;;
  1410 ;; *************** function _main *****************
  1411 ;; Defined at:
  1412 ;;		line 16 in file "newmain.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  i               2   71[BANK0 ] int 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  2   96[None  ] int 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : B00/0
  1423 ;;		On exit  : 300/100
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         0       0       0       0       0
  1427 ;;      Locals:         0       2       0       0       0
  1428 ;;      Temps:          0       1       0       0       0
  1429 ;;      Totals:         0       3       0       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels required when called: 5
  1432 ;; This function calls:
  1433 ;;		___ftmul
  1434 ;;		___lwtoft
  1435 ;;		_config_HAL
  1436 ;;		_init_ADC
  1437 ;;		_init_inttimer
  1438 ;;		_sprintf
  1439 ;;		_strcpy
  1440 ;;		_uart_init
  1441 ;;		_uart_send_text
  1442 ;; This function is called by:
  1443 ;;		Startup code after reset
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447     0ACD                     _main:	
  1448                           ;psect for function _main
  1449                           
  1450                           
  1451                           ;newmain.c: 19: OSCCONbits.IRCF = 0b111;
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1455     0ACD  3070               	movlw	112
  1456     0ACE  1683               	bsf	3,5	;RP0=1, select bank1
  1457     0ACF  048F               	iorwf	15,f	;volatile
  1458                           
  1459                           ;newmain.c: 21: config_HAL();
  1460     0AD0  160A  118A  2697  120A  158A  	fcall	_config_HAL
  1461                           
  1462                           ;newmain.c: 22: init_ADC();
  1463     0AD5  160A  118A  27DC  120A  158A  	fcall	_init_ADC
  1464                           
  1465                           ;newmain.c: 23: uart_init();
  1466     0ADA  160A  118A  26C8  120A  158A  	fcall	_uart_init
  1467                           
  1468                           ;newmain.c: 24: init_inttimer();
  1469     0ADF  160A  118A  26BA  120A  158A  	fcall	_init_inttimer
  1470                           
  1471                           ;newmain.c: 25: ADCON0bits.GO = 1;
  1472     0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  1473     0AE5  149F               	bsf	31,1	;volatile
  1474     0AE6                     l2666:
  1475     0AE6  3028               	movlw	40
  1476     0AE7  1283               	bcf	3,5	;RP0=0, select bank0
  1477     0AE8  026C               	subwf	_contador,w	;volatile
  1478     0AE9  1C03               	skipc
  1479     0AEA  2AE6               	goto	l2666
  1480                           
  1481                           ;newmain.c: 33: PIE1bits.ADIE = 0;
  1482     0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  1483     0AEC  130C               	bcf	12,6	;volatile
  1484                           
  1485                           ;newmain.c: 35: for(int i=0; i<=40; i++){
  1486     0AED  1283               	bcf	3,5	;RP0=0, select bank0
  1487     0AEE  01E7               	clrf	main@i
  1488     0AEF  01E8               	clrf	main@i+1
  1489     0AF0                     l2674:
  1490                           
  1491                           ;newmain.c: 36: strcpy(buffer,"   ");
  1492     0AF0  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1493     0AF1  1283               	bcf	3,5	;RP0=0, select bank0
  1494     0AF2  1303               	bcf	3,6	;RP1=0, select bank0
  1495     0AF3  00A0               	movwf	strcpy@from
  1496     0AF4  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1497     0AF5  160A  118A  2720  120A  158A  	fcall	_strcpy
  1498                           
  1499                           ;newmain.c: 37: datoenv = muestras[i]*(5.0/1023.0);
  1500     0AFA  3028               	movlw	40
  1501     0AFB  00B1               	movwf	___ftmul@f1
  1502     0AFC  30A0               	movlw	160
  1503     0AFD  00B2               	movwf	___ftmul@f1+1
  1504     0AFE  303B               	movlw	59
  1505     0AFF  00B3               	movwf	___ftmul@f1+2
  1506     0B00  0867               	movf	main@i,w
  1507     0B01  00E6               	movwf	??_main
  1508     0B02  0766               	addwf	??_main,w
  1509     0B03  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  1510     0B04  0084               	movwf	4
  1511     0B05  1783               	bsf	3,7	;select IRP bank3
  1512     0B06  0800               	movf	0,w
  1513     0B07  00A8               	movwf	___lwtoft@c
  1514     0B08  0A84               	incf	4,f
  1515     0B09  0800               	movf	0,w
  1516     0B0A  00A9               	movwf	___lwtoft@c+1
  1517     0B0B  160A  118A  26FA  120A  158A  	fcall	___lwtoft
  1518     0B10  0828               	movf	?___lwtoft,w
  1519     0B11  00B4               	movwf	___ftmul@f2
  1520     0B12  0829               	movf	?___lwtoft+1,w
  1521     0B13  00B5               	movwf	___ftmul@f2+1
  1522     0B14  082A               	movf	?___lwtoft+2,w
  1523     0B15  00B6               	movwf	___ftmul@f2+2
  1524     0B16  120A  158A  240E  120A  158A  	fcall	___ftmul
  1525     0B1B  0831               	movf	?___ftmul,w
  1526     0B1C  00E9               	movwf	_datoenv	;volatile
  1527     0B1D  0832               	movf	?___ftmul+1,w
  1528     0B1E  00EA               	movwf	_datoenv+1	;volatile
  1529     0B1F  0833               	movf	?___ftmul+2,w
  1530     0B20  00EB               	movwf	_datoenv+2	;volatile
  1531                           
  1532                           ;newmain.c: 38: sprintf(buffer, "%f", datoenv);
  1533     0B21  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1534     0B22  00DC               	movwf	sprintf@f
  1535     0B23  0869               	movf	_datoenv,w	;volatile
  1536     0B24  00DD               	movwf	?_sprintf+1
  1537     0B25  086A               	movf	_datoenv+1,w	;volatile
  1538     0B26  00DE               	movwf	?_sprintf+2
  1539     0B27  086B               	movf	_datoenv+2,w	;volatile
  1540     0B28  00DF               	movwf	?_sprintf+3
  1541     0B29  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1542     0B2A  120A  118A  203D  120A  158A  	fcall	_sprintf
  1543                           
  1544                           ;newmain.c: 39: buffer[19] = ';';
  1545     0B2F  303B               	movlw	59
  1546     0B30  00CA               	movwf	(_buffer^(0+128)+19)
  1547                           
  1548                           ;newmain.c: 40: uart_send_text(buffer);
  1549     0B31  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1550     0B32  160A  118A  27BA  120A  158A  	fcall	_uart_send_text
  1551     0B37  3001               	movlw	1
  1552     0B38  07E7               	addwf	main@i,f
  1553     0B39  1803               	skipnc
  1554     0B3A  0AE8               	incf	main@i+1,f
  1555     0B3B  3000               	movlw	0
  1556     0B3C  07E8               	addwf	main@i+1,f
  1557     0B3D  0868               	movf	main@i+1,w
  1558     0B3E  3A80               	xorlw	128
  1559     0B3F  00FF               	movwf	127
  1560     0B40  3080               	movlw	128
  1561     0B41  027F               	subwf	127,w
  1562     0B42  1D03               	skipz
  1563     0B43  2B46               	goto	u3515
  1564     0B44  3029               	movlw	41
  1565     0B45  0267               	subwf	main@i,w
  1566     0B46                     u3515:
  1567     0B46  1C03               	skipc
  1568     0B47  2AF0               	goto	l2674
  1569                           
  1570                           ;newmain.c: 41: };newmain.c: 42: strcpy(buffer,"   ");
  1571     0B48  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1572     0B49  1283               	bcf	3,5	;RP0=0, select bank0
  1573     0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  1574     0B4B  00A0               	movwf	strcpy@from
  1575     0B4C  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1576     0B4D  160A  118A  2720  120A  158A  	fcall	_strcpy
  1577                           
  1578                           ;newmain.c: 43: sprintf(buffer, "%f",stop );
  1579     0B52  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1580     0B53  00DC               	movwf	sprintf@f
  1581     0B54  086D               	movf	_stop,w	;volatile
  1582     0B55  00DD               	movwf	?_sprintf+1
  1583     0B56  086E               	movf	_stop+1,w	;volatile
  1584     0B57  00DE               	movwf	?_sprintf+2
  1585     0B58  086F               	movf	_stop+2,w	;volatile
  1586     0B59  00DF               	movwf	?_sprintf+3
  1587     0B5A  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1588     0B5B  120A  118A  203D  120A  158A  	fcall	_sprintf
  1589                           
  1590                           ;newmain.c: 44: buffer[19] = ';';
  1591     0B60  303B               	movlw	59
  1592     0B61  00CA               	movwf	(_buffer^(0+128)+19)
  1593                           
  1594                           ;newmain.c: 45: uart_send_text(buffer);
  1595     0B62  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1596     0B63  160A  118A  27BA  120A  158A  	fcall	_uart_send_text
  1597                           
  1598                           ;newmain.c: 49: contador = 0;
  1599     0B68  01EC               	clrf	_contador	;volatile
  1600                           
  1601                           ;newmain.c: 50: ADCON0bits.GO = 1;
  1602     0B69  149F               	bsf	31,1	;volatile
  1603                           
  1604                           ;newmain.c: 52: PIE1bits.ADIE = 1;
  1605     0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  1606     0B6B  170C               	bsf	12,6	;volatile
  1607     0B6C  2AE6               	goto	l2666
  1608     0B6D                     __end_of_main:
  1609                           
  1610                           	psect	text1
  1611     17BA                     __ptext1:	
  1612 ;; *************** function _uart_send_text *****************
  1613 ;; Defined at:
  1614 ;;		line 89 in file "uart.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  buffer          1    wreg     PTR unsigned char 
  1617 ;;		 -> buffer(20), 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  buffer          1    2[BANK0 ] PTR unsigned char 
  1620 ;;		 -> buffer(20), 
  1621 ;;  aux             1    1[BANK0 ] unsigned char 
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : B00/100
  1628 ;;		On exit  : 300/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1631 ;;      Params:         0       0       0       0       0
  1632 ;;      Locals:         0       2       0       0       0
  1633 ;;      Temps:          0       0       0       0       0
  1634 ;;      Totals:         0       2       0       0       0
  1635 ;;Total ram usage:        2 bytes
  1636 ;; Hardware stack levels used: 1
  1637 ;; Hardware stack levels required when called: 2
  1638 ;; This function calls:
  1639 ;;		_uart_send
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645     17BA                     _uart_send_text:	
  1646                           ;psect for function _uart_send_text
  1647                           
  1648                           
  1649                           ;incstack = 0
  1650                           ; Regs used in _uart_send_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1651                           ;uart_send_text@buffer stored from wreg
  1652     17BA  1283               	bcf	3,5	;RP0=0, select bank0
  1653     17BB  00A2               	movwf	uart_send_text@buffer
  1654     17BC                     l175:	
  1655                           ;uart.c: 91: char aux;;uart.c: 92: do{
  1656                           
  1657                           
  1658                           ;uart.c: 93: aux = *buffer;
  1659     17BC  0822               	movf	uart_send_text@buffer,w
  1660     17BD  0084               	movwf	4
  1661     17BE  0800               	movf	0,w
  1662     17BF  00A1               	movwf	uart_send_text@aux
  1663                           
  1664                           ;uart.c: 94: uart_send(aux);
  1665     17C0  0821               	movf	uart_send_text@aux,w
  1666     17C1  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1667                           
  1668                           ;uart.c: 95: buffer++;
  1669     17C6  3001               	movlw	1
  1670     17C7  00FF               	movwf	127
  1671     17C8  087F               	movf	127,w
  1672     17C9  07A2               	addwf	uart_send_text@buffer,f
  1673                           
  1674                           ;uart.c: 96: }while(*buffer != ';');
  1675     17CA  0822               	movf	uart_send_text@buffer,w
  1676     17CB  0084               	movwf	4
  1677     17CC  303B               	movlw	59
  1678     17CD  1383               	bcf	3,7	;select IRP bank0
  1679     17CE  0600               	xorwf	0,w
  1680     17CF  1D03               	btfss	3,2
  1681     17D0  2FBC               	goto	l175
  1682                           
  1683                           ;uart.c: 97: uart_send('\r');
  1684     17D1  300D               	movlw	13
  1685     17D2  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1686                           
  1687                           ;uart.c: 98: uart_send('\n');
  1688     17D7  300A               	movlw	10
  1689     17D8  120A  118A  27F7   	fcall	_uart_send
  1690     17DB  0008               	return
  1691     17DC                     __end_of_uart_send_text:
  1692                           
  1693                           	psect	text2
  1694     07F7                     __ptext2:	
  1695 ;; *************** function _uart_send *****************
  1696 ;; Defined at:
  1697 ;;		line 66 in file "uart.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  data            1    wreg     unsigned char 
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  data            1    0[BANK0 ] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg
  1706 ;; Tracked objects:
  1707 ;;		On entry : 300/0
  1708 ;;		On exit  : 300/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         0       0       0       0       0
  1712 ;;      Locals:         0       1       0       0       0
  1713 ;;      Temps:          0       0       0       0       0
  1714 ;;      Totals:         0       1       0       0       0
  1715 ;;Total ram usage:        1 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; Hardware stack levels required when called: 1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_uart_send_text
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725     07F7                     _uart_send:	
  1726                           ;psect for function _uart_send
  1727                           
  1728                           
  1729                           ;incstack = 0
  1730                           ; Regs used in _uart_send: [wreg]
  1731                           ;uart_send@data stored from wreg
  1732     07F7  00A0               	movwf	uart_send@data
  1733                           
  1734                           ;uart.c: 68: TXEN = 1;
  1735     07F8  1683               	bsf	3,5	;RP0=1, select bank1
  1736     07F9  1698               	bsf	24,5	;volatile
  1737     07FA                     l161:	
  1738                           ;uart.c: 69: while (TXIF == 0);
  1739                           
  1740     07FA  1283               	bcf	3,5	;RP0=0, select bank0
  1741     07FB  1E0C               	btfss	12,4	;volatile
  1742     07FC  2FFA               	goto	l161
  1743                           
  1744                           ;uart.c: 70: TXREG = data;
  1745     07FD  0820               	movf	uart_send@data,w
  1746     07FE  0099               	movwf	25	;volatile
  1747     07FF  0008               	return
  1748     0800                     __end_of_uart_send:
  1749                           
  1750                           	psect	text3
  1751     16C8                     __ptext3:	
  1752 ;; *************** function _uart_init *****************
  1753 ;; Defined at:
  1754 ;;		line 3 in file "uart.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/300
  1765 ;;		On exit  : 300/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1768 ;;      Params:         0       0       0       0       0
  1769 ;;      Locals:         0       0       0       0       0
  1770 ;;      Temps:          0       0       0       0       0
  1771 ;;      Totals:         0       0       0       0       0
  1772 ;;Total ram usage:        0 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; Hardware stack levels required when called: 1
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782     16C8                     _uart_init:	
  1783                           ;psect for function _uart_init
  1784                           
  1785                           
  1786                           ;uart.c: 6: TRISCbits.TRISC6 = 0;
  1787                           
  1788                           ;incstack = 0
  1789                           ; Regs used in _uart_init: [wreg]
  1790     16C8  1683               	bsf	3,5	;RP0=1, select bank1
  1791     16C9  1303               	bcf	3,6	;RP1=0, select bank1
  1792     16CA  1307               	bcf	7,6	;volatile
  1793                           
  1794                           ;uart.c: 7: TRISCbits.TRISC7 = 1;
  1795     16CB  1787               	bsf	7,7	;volatile
  1796                           
  1797                           ;uart.c: 8: TXSTAbits.BRGH = 0;
  1798     16CC  1118               	bcf	24,2	;volatile
  1799                           
  1800                           ;uart.c: 9: BAUDCTLbits.BRG16 = 1;
  1801     16CD  1703               	bsf	3,6	;RP1=1, select bank3
  1802     16CE  1587               	bsf	7,3	;volatile
  1803                           
  1804                           ;uart.c: 20: SPBRG = 51;
  1805     16CF  3033               	movlw	51
  1806     16D0  1303               	bcf	3,6	;RP1=0, select bank1
  1807     16D1  0099               	movwf	25	;volatile
  1808                           
  1809                           ;uart.c: 21: TXSTAbits.SYNC = 0;
  1810     16D2  1218               	bcf	24,4	;volatile
  1811                           
  1812                           ;uart.c: 22: RCSTAbits.SPEN = 1;
  1813     16D3  1283               	bcf	3,5	;RP0=0, select bank0
  1814     16D4  1798               	bsf	24,7	;volatile
  1815                           
  1816                           ;uart.c: 23: RCSTA = 0b10010000;
  1817     16D5  3090               	movlw	144
  1818     16D6  0098               	movwf	24	;volatile
  1819     16D7  0008               	return
  1820     16D8                     __end_of_uart_init:
  1821                           
  1822                           	psect	text4
  1823     1720                     __ptext4:	
  1824 ;; *************** function _strcpy *****************
  1825 ;; Defined at:
  1826 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  to              1    wreg     PTR unsigned char 
  1829 ;;		 -> buffer(20), 
  1830 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  1831 ;;		 -> STR_3(4), STR_1(4), 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  to              1    2[BANK0 ] PTR unsigned char 
  1834 ;;		 -> buffer(20), 
  1835 ;;  cp              1    1[BANK0 ] PTR unsigned char 
  1836 ;;		 -> buffer(20), 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      PTR unsigned char 
  1839 ;; Registers used:
  1840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1841 ;; Tracked objects:
  1842 ;;		On entry : 300/0
  1843 ;;		On exit  : B00/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1846 ;;      Params:         0       1       0       0       0
  1847 ;;      Locals:         0       2       0       0       0
  1848 ;;      Temps:          0       0       0       0       0
  1849 ;;      Totals:         0       3       0       0       0
  1850 ;;Total ram usage:        3 bytes
  1851 ;; Hardware stack levels used: 2
  1852 ;; Hardware stack levels required when called: 1
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_main
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860     1720                     _strcpy:	
  1861                           ;psect for function _strcpy
  1862                           
  1863                           
  1864                           ;incstack = 0
  1865                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1866                           ;strcpy@to stored from wreg
  1867     1720  00A2               	movwf	strcpy@to
  1868     1721  0822               	movf	strcpy@to,w
  1869     1722  00A1               	movwf	strcpy@cp
  1870     1723                     l2466:
  1871     1723  0820               	movf	strcpy@from,w
  1872     1724  0084               	movwf	4
  1873     1725  120A  158A  2000  160A  118A  	fcall	stringdir
  1874     172A  00FF               	movwf	127
  1875     172B  0821               	movf	strcpy@cp,w
  1876     172C  0084               	movwf	4
  1877     172D  087F               	movf	127,w
  1878     172E  1383               	bcf	3,7	;select IRP bank0
  1879     172F  0080               	movwf	0
  1880     1730  0800               	movf	0,w
  1881     1731  1903               	btfsc	3,2
  1882     1732  0008               	return
  1883     1733  3001               	movlw	1
  1884     1734  00FF               	movwf	127
  1885     1735  087F               	movf	127,w
  1886     1736  07A1               	addwf	strcpy@cp,f
  1887     1737  3001               	movlw	1
  1888     1738  00FF               	movwf	127
  1889     1739  087F               	movf	127,w
  1890     173A  07A0               	addwf	strcpy@from,f
  1891     173B  2F23               	goto	l2466
  1892     173C                     __end_of_strcpy:
  1893                           
  1894                           	psect	text5
  1895     003D                     __ptext5:	
  1896 ;; *************** function _sprintf *****************
  1897 ;; Defined at:
  1898 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  sp              1    wreg     PTR unsigned char 
  1901 ;;		 -> buffer(20), 
  1902 ;;  f               1   60[BANK0 ] PTR const unsigned char 
  1903 ;;		 -> STR_4(3), STR_2(3), 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1906 ;;		 -> buffer(20), 
  1907 ;;  tmpval          4   14[BANK1 ] struct .
  1908 ;;  val             4    8[BANK1 ] unsigned long 
  1909 ;;  fval            3   19[BANK1 ] unsigned long 
  1910 ;;  eexp            2   12[BANK1 ] int 
  1911 ;;  prec            2    6[BANK1 ] int 
  1912 ;;  flag            2    4[BANK1 ] unsigned short 
  1913 ;;  cp              2    0        PTR const unsigned char 
  1914 ;;  len             2    0        unsigned int 
  1915 ;;  width           2    0        int 
  1916 ;;  c               1   22[BANK1 ] unsigned char 
  1917 ;;  ap              1    3[BANK1 ] PTR void [1]
  1918 ;;		 -> ?_sprintf(2), 
  1919 ;;  d               1    0        unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2   60[BANK0 ] int 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 300/800
  1926 ;;		On exit  : B00/100
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         0       4       0       0       0
  1930 ;;      Locals:         0       0      23       0       0
  1931 ;;      Temps:          0       6       0       0       0
  1932 ;;      Totals:         0      10      23       0       0
  1933 ;;Total ram usage:       33 bytes
  1934 ;; Hardware stack levels used: 1
  1935 ;; Hardware stack levels required when called: 4
  1936 ;; This function calls:
  1937 ;;		___awdiv
  1938 ;;		___ftadd
  1939 ;;		___ftge
  1940 ;;		___ftmul
  1941 ;;		___ftneg
  1942 ;;		___ftsub
  1943 ;;		___fttol
  1944 ;;		___lldiv
  1945 ;;		___llmod
  1946 ;;		___lltoft
  1947 ;;		___wmul
  1948 ;;		__div_to_l_
  1949 ;;		__tdiv_to_l_
  1950 ;;		_fround
  1951 ;;		_scale
  1952 ;; This function is called by:
  1953 ;;		_main
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957     003D                     _sprintf:	
  1958                           ;psect for function _sprintf
  1959                           
  1960                           
  1961                           ;incstack = 0
  1962                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1963                           ;sprintf@sp stored from wreg
  1964     003D  1683               	bsf	3,5	;RP0=1, select bank1
  1965     003E  00B2               	movwf	sprintf@sp^(0+128)
  1966                           
  1967                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1968     003F  305D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1969     0040  00A3               	movwf	sprintf@ap^(0+128)
  1970     0041                     l2634:	
  1971                           ;doprnt.c: 553: while((c = *f++)) {
  1972                           
  1973     0041  3001               	movlw	1
  1974     0042  1283               	bcf	3,5	;RP0=0, select bank0
  1975     0043  07DC               	addwf	sprintf@f,f
  1976     0044  30FF               	movlw	-1
  1977     0045  075C               	addwf	sprintf@f,w
  1978     0046  0084               	movwf	4
  1979     0047  120A  158A  2000  120A  118A  	fcall	stringdir
  1980     004C  1683               	bsf	3,5	;RP0=1, select bank1
  1981     004D  00B6               	movwf	sprintf@c^(0+128)
  1982     004E  0836               	movf	sprintf@c^(0+128),w
  1983     004F  1903               	btfsc	3,2
  1984     0050  2D23               	goto	l2636
  1985                           
  1986                           ;doprnt.c: 555: if(c != '%')
  1987     0051  3025               	movlw	37
  1988     0052  0636               	xorwf	sprintf@c^(0+128),w
  1989     0053  1903               	btfsc	3,2
  1990     0054  2859               	goto	l2476
  1991                           
  1992                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1993     0055  0832               	movf	sprintf@sp^(0+128),w
  1994     0056  0084               	movwf	4
  1995     0057  0836               	movf	sprintf@c^(0+128),w
  1996     0058  2D1C               	goto	L4
  1997     0059                     l2476:	
  1998                           ;doprnt.c: 559: continue;
  1999                           
  2000                           
  2001                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  2002     0059  01A4               	clrf	sprintf@flag^(0+128)
  2003     005A  01A5               	clrf	(sprintf@flag+1)^(0+128)
  2004                           
  2005                           ;doprnt.c: 661: switch(c = *f++) {
  2006     005B  285E               	goto	l2480
  2007     005C                     l301:	
  2008                           ;doprnt.c: 688: case 'f':
  2009                           
  2010                           
  2011                           ;doprnt.c: 689: flag |= 0x400;
  2012     005C  1525               	bsf	(sprintf@flag^(0+128)+1),2
  2013                           
  2014                           ;doprnt.c: 690: break;
  2015     005D  2872               	goto	l2482
  2016     005E                     l2480:
  2017     005E  3001               	movlw	1
  2018     005F  1283               	bcf	3,5	;RP0=0, select bank0
  2019     0060  07DC               	addwf	sprintf@f,f
  2020     0061  30FF               	movlw	-1
  2021     0062  075C               	addwf	sprintf@f,w
  2022     0063  0084               	movwf	4
  2023     0064  120A  158A  2000  120A  118A  	fcall	stringdir
  2024     0069  1683               	bsf	3,5	;RP0=1, select bank1
  2025     006A  00B6               	movwf	sprintf@c^(0+128)
  2026                           
  2027                           ; Switch size 1, requested type "simple"
  2028                           ; Number of cases is 2, Range of values is 0 to 102
  2029                           ; switch strategies available:
  2030                           ; Name         Instructions Cycles
  2031                           ; simple_byte            7     4 (average)
  2032                           ; jumptable            260     6 (fixed)
  2033                           ;	Chosen strategy is simple_byte
  2034     006B  3A00               	xorlw	0	; case 0
  2035     006C  1903               	skipnz
  2036     006D  2D23               	goto	l2636
  2037     006E  3A66               	xorlw	102	; case 102
  2038     006F  1903               	skipnz
  2039     0070  285C               	goto	l301
  2040     0071  2841               	goto	l2634
  2041     0072                     l2482:
  2042                           
  2043                           ;doprnt.c: 851: if(flag & (0x700)) {
  2044     0072  3000               	movlw	0
  2045     0073  0524               	andwf	sprintf@flag^(0+128),w
  2046     0074  1283               	bcf	3,5	;RP0=0, select bank0
  2047     0075  00E0               	movwf	??_sprintf
  2048     0076  3007               	movlw	7
  2049     0077  1683               	bsf	3,5	;RP0=1, select bank1
  2050     0078  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2051     0079  1283               	bcf	3,5	;RP0=0, select bank0
  2052     007A  00E1               	movwf	??_sprintf+1
  2053     007B  0860               	movf	??_sprintf,w
  2054     007C  0461               	iorwf	??_sprintf+1,w
  2055     007D  1903               	btfsc	3,2
  2056     007E  2D14               	goto	l2628
  2057                           
  2058                           ;doprnt.c: 855: prec = 6;
  2059     007F  3006               	movlw	6
  2060     0080  1683               	bsf	3,5	;RP0=1, select bank1
  2061     0081  00A6               	movwf	sprintf@prec^(0+128)
  2062     0082  3000               	movlw	0
  2063     0083  00A7               	movwf	(sprintf@prec^(0+128)+1)
  2064                           
  2065                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2066     0084  0823               	movf	sprintf@ap^(0+128),w
  2067     0085  0084               	movwf	4
  2068     0086  1383               	bcf	3,7	;select IRP bank0
  2069     0087  0800               	movf	0,w
  2070     0088  00B3               	movwf	sprintf@fval^(0+128)
  2071     0089  0A84               	incf	4,f
  2072     008A  0800               	movf	0,w
  2073     008B  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2074     008C  0A84               	incf	4,f
  2075     008D  0800               	movf	0,w
  2076     008E  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2077     008F  3003               	movlw	3
  2078     0090  00FF               	movwf	127
  2079     0091  087F               	movf	127,w
  2080     0092  07A3               	addwf	sprintf@ap^(0+128),f
  2081                           
  2082                           ;doprnt.c: 857: if(fval < 0.0) {
  2083     0093  0833               	movf	sprintf@fval^(0+128),w
  2084     0094  1283               	bcf	3,5	;RP0=0, select bank0
  2085     0095  00A0               	movwf	___ftge@ff1
  2086     0096  1683               	bsf	3,5	;RP0=1, select bank1
  2087     0097  0834               	movf	(sprintf@fval+1)^(0+128),w
  2088     0098  1283               	bcf	3,5	;RP0=0, select bank0
  2089     0099  00A1               	movwf	___ftge@ff1+1
  2090     009A  1683               	bsf	3,5	;RP0=1, select bank1
  2091     009B  0835               	movf	(sprintf@fval+2)^(0+128),w
  2092     009C  1283               	bcf	3,5	;RP0=0, select bank0
  2093     009D  00A2               	movwf	___ftge@ff1+2
  2094     009E  3000               	movlw	0
  2095     009F  00A3               	movwf	___ftge@ff2
  2096     00A0  3000               	movlw	0
  2097     00A1  00A4               	movwf	___ftge@ff2+1
  2098     00A2  3000               	movlw	0
  2099     00A3  00A5               	movwf	___ftge@ff2+2
  2100     00A4  120A  158A  20AE  120A  118A  	fcall	___ftge
  2101     00A9  1803               	btfsc	3,0
  2102     00AA  28CB               	goto	l2496
  2103                           
  2104                           ;doprnt.c: 858: fval = -fval;
  2105     00AB  1683               	bsf	3,5	;RP0=1, select bank1
  2106     00AC  0833               	movf	sprintf@fval^(0+128),w
  2107     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2108     00AE  00A0               	movwf	___ftneg@f1
  2109     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  2110     00B0  0834               	movf	(sprintf@fval+1)^(0+128),w
  2111     00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2112     00B2  00A1               	movwf	___ftneg@f1+1
  2113     00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2114     00B4  0835               	movf	(sprintf@fval+2)^(0+128),w
  2115     00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2116     00B6  00A2               	movwf	___ftneg@f1+2
  2117     00B7  160A  118A  269D  120A  118A  	fcall	___ftneg
  2118     00BC  0820               	movf	?___ftneg,w
  2119     00BD  1683               	bsf	3,5	;RP0=1, select bank1
  2120     00BE  00B3               	movwf	sprintf@fval^(0+128)
  2121     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  2122     00C0  0821               	movf	?___ftneg+1,w
  2123     00C1  1683               	bsf	3,5	;RP0=1, select bank1
  2124     00C2  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2125     00C3  1283               	bcf	3,5	;RP0=0, select bank0
  2126     00C4  0822               	movf	?___ftneg+2,w
  2127     00C5  1683               	bsf	3,5	;RP0=1, select bank1
  2128     00C6  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2129                           
  2130                           ;doprnt.c: 859: flag |= 0x03;
  2131     00C7  3003               	movlw	3
  2132     00C8  04A4               	iorwf	sprintf@flag^(0+128),f
  2133     00C9  3000               	movlw	0
  2134     00CA  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  2135     00CB                     l2496:
  2136                           
  2137                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2138     00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2139     00CC  01AC               	clrf	sprintf@eexp^(0+128)
  2140     00CD  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2141                           
  2142                           ;doprnt.c: 862: if( fval!=0) {
  2143     00CE  0835               	movf	(sprintf@fval+2)^(0+128),w
  2144     00CF  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2145     00D0  0433               	iorwf	sprintf@fval^(0+128),w
  2146     00D1  1903               	skipnz
  2147     00D2  29B4               	goto	l2526
  2148                           
  2149                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2150     00D3  30B3               	movlw	low (sprintf@fval| 0)
  2151     00D4  0084               	movwf	4
  2152     00D5  1383               	bcf	3,7	;select IRP bank1
  2153     00D6  0800               	movf	0,w
  2154     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2155     00D8  00E0               	movwf	??_sprintf
  2156     00D9  0A84               	incf	4,f
  2157     00DA  0800               	movf	0,w
  2158     00DB  00E1               	movwf	??_sprintf+1
  2159     00DC  0A84               	incf	4,f
  2160     00DD  0800               	movf	0,w
  2161     00DE  00E2               	movwf	??_sprintf+2
  2162     00DF  0A84               	incf	4,f
  2163     00E0  0800               	movf	0,w
  2164     00E1  00E3               	movwf	??_sprintf+3
  2165     00E2  300F               	movlw	15
  2166     00E3                     u3255:
  2167     00E3  1003               	clrc
  2168     00E4  0CE3               	rrf	??_sprintf+3,f
  2169     00E5  0CE2               	rrf	??_sprintf+2,f
  2170     00E6  0CE1               	rrf	??_sprintf+1,f
  2171     00E7  0CE0               	rrf	??_sprintf,f
  2172     00E8  3EFF               	addlw	-1
  2173     00E9  1D03               	skipz
  2174     00EA  28E3               	goto	u3255
  2175     00EB  30FF               	movlw	255
  2176     00EC  0560               	andwf	??_sprintf,w
  2177     00ED  00E4               	movwf	??_sprintf+4
  2178     00EE  3000               	movlw	0
  2179     00EF  0561               	andwf	??_sprintf+1,w
  2180     00F0  00E5               	movwf	??_sprintf+5
  2181     00F1  0864               	movf	??_sprintf+4,w
  2182     00F2  3E82               	addlw	130
  2183     00F3  1683               	bsf	3,5	;RP0=1, select bank1
  2184     00F4  00AC               	movwf	sprintf@eexp^(0+128)
  2185     00F5  1283               	bcf	3,5	;RP0=0, select bank0
  2186     00F6  0865               	movf	??_sprintf+5,w
  2187     00F7  1803               	skipnc
  2188     00F8  3E01               	addlw	1
  2189     00F9  3EFF               	addlw	255
  2190     00FA  1683               	bsf	3,5	;RP0=1, select bank1
  2191     00FB  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2192                           
  2193                           ;doprnt.c: 864: eexp--;
  2194     00FC  30FF               	movlw	255
  2195     00FD  07AC               	addwf	sprintf@eexp^(0+128),f
  2196     00FE  1803               	skipnc
  2197     00FF  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2198     0100  30FF               	movlw	255
  2199     0101  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2200                           
  2201                           ;doprnt.c: 865: eexp *= 3;
  2202     0102  3003               	movlw	3
  2203     0103  1283               	bcf	3,5	;RP0=0, select bank0
  2204     0104  00A0               	movwf	___wmul@multiplier
  2205     0105  3000               	movlw	0
  2206     0106  00A1               	movwf	___wmul@multiplier+1
  2207     0107  1683               	bsf	3,5	;RP0=1, select bank1
  2208     0108  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2209     0109  1283               	bcf	3,5	;RP0=0, select bank0
  2210     010A  00A3               	movwf	___wmul@multiplicand+1
  2211     010B  1683               	bsf	3,5	;RP0=1, select bank1
  2212     010C  082C               	movf	sprintf@eexp^(0+128),w
  2213     010D  1283               	bcf	3,5	;RP0=0, select bank0
  2214     010E  00A2               	movwf	___wmul@multiplicand
  2215     010F  160A  118A  2778  120A  118A  	fcall	___wmul
  2216     0114  0821               	movf	?___wmul+1,w
  2217     0115  1683               	bsf	3,5	;RP0=1, select bank1
  2218     0116  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2219     0117  1283               	bcf	3,5	;RP0=0, select bank0
  2220     0118  0820               	movf	?___wmul,w
  2221     0119  1683               	bsf	3,5	;RP0=1, select bank1
  2222     011A  00AC               	movwf	sprintf@eexp^(0+128)
  2223                           
  2224                           ;doprnt.c: 866: eexp /= 10;
  2225     011B  300A               	movlw	10
  2226     011C  1283               	bcf	3,5	;RP0=0, select bank0
  2227     011D  00A6               	movwf	___awdiv@divisor
  2228     011E  3000               	movlw	0
  2229     011F  00A7               	movwf	___awdiv@divisor+1
  2230     0120  1683               	bsf	3,5	;RP0=1, select bank1
  2231     0121  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2232     0122  1283               	bcf	3,5	;RP0=0, select bank0
  2233     0123  00A9               	movwf	___awdiv@dividend+1
  2234     0124  1683               	bsf	3,5	;RP0=1, select bank1
  2235     0125  082C               	movf	sprintf@eexp^(0+128),w
  2236     0126  1283               	bcf	3,5	;RP0=0, select bank0
  2237     0127  00A8               	movwf	___awdiv@dividend
  2238     0128  120A  158A  21AA  120A  118A  	fcall	___awdiv
  2239     012D  0827               	movf	?___awdiv+1,w
  2240     012E  1683               	bsf	3,5	;RP0=1, select bank1
  2241     012F  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2242     0130  1283               	bcf	3,5	;RP0=0, select bank0
  2243     0131  0826               	movf	?___awdiv,w
  2244     0132  1683               	bsf	3,5	;RP0=1, select bank1
  2245     0133  00AC               	movwf	sprintf@eexp^(0+128)
  2246                           
  2247                           ;doprnt.c: 867: if(eexp < 0)
  2248     0134  1FAD               	btfss	(sprintf@eexp+1)^(0+128),7
  2249     0135  293C               	goto	l2512
  2250                           
  2251                           ;doprnt.c: 868: eexp--;
  2252     0136  30FF               	movlw	255
  2253     0137  07AC               	addwf	sprintf@eexp^(0+128),f
  2254     0138  1803               	skipnc
  2255     0139  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2256     013A  30FF               	movlw	255
  2257     013B  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2258     013C                     l2512:
  2259                           
  2260                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2261     013C  032C               	decf	sprintf@eexp^(0+128),w
  2262     013D  3AFF               	xorlw	255
  2263     013E  120A  118A  2528  120A  118A  	fcall	_scale
  2264     0143  0840               	movf	?_scale,w
  2265     0144  1683               	bsf	3,5	;RP0=1, select bank1
  2266     0145  00AE               	movwf	sprintf@tmpval^(0+128)
  2267     0146  1283               	bcf	3,5	;RP0=0, select bank0
  2268     0147  0841               	movf	?_scale+1,w
  2269     0148  1683               	bsf	3,5	;RP0=1, select bank1
  2270     0149  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2271     014A  1283               	bcf	3,5	;RP0=0, select bank0
  2272     014B  0842               	movf	?_scale+2,w
  2273     014C  1683               	bsf	3,5	;RP0=1, select bank1
  2274     014D  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2275                           
  2276                           ;doprnt.c: 873: tmpval.integ *= fval;
  2277     014E  0833               	movf	sprintf@fval^(0+128),w
  2278     014F  1283               	bcf	3,5	;RP0=0, select bank0
  2279     0150  00B1               	movwf	___ftmul@f1
  2280     0151  1683               	bsf	3,5	;RP0=1, select bank1
  2281     0152  0834               	movf	(sprintf@fval+1)^(0+128),w
  2282     0153  1283               	bcf	3,5	;RP0=0, select bank0
  2283     0154  00B2               	movwf	___ftmul@f1+1
  2284     0155  1683               	bsf	3,5	;RP0=1, select bank1
  2285     0156  0835               	movf	(sprintf@fval+2)^(0+128),w
  2286     0157  1283               	bcf	3,5	;RP0=0, select bank0
  2287     0158  00B3               	movwf	___ftmul@f1+2
  2288     0159  1683               	bsf	3,5	;RP0=1, select bank1
  2289     015A  082E               	movf	sprintf@tmpval^(0+128),w
  2290     015B  1283               	bcf	3,5	;RP0=0, select bank0
  2291     015C  00B4               	movwf	___ftmul@f2
  2292     015D  1683               	bsf	3,5	;RP0=1, select bank1
  2293     015E  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2294     015F  1283               	bcf	3,5	;RP0=0, select bank0
  2295     0160  00B5               	movwf	___ftmul@f2+1
  2296     0161  1683               	bsf	3,5	;RP0=1, select bank1
  2297     0162  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2298     0163  1283               	bcf	3,5	;RP0=0, select bank0
  2299     0164  00B6               	movwf	___ftmul@f2+2
  2300     0165  120A  158A  240E  120A  118A  	fcall	___ftmul
  2301     016A  0831               	movf	?___ftmul,w
  2302     016B  1683               	bsf	3,5	;RP0=1, select bank1
  2303     016C  00AE               	movwf	sprintf@tmpval^(0+128)
  2304     016D  1283               	bcf	3,5	;RP0=0, select bank0
  2305     016E  0832               	movf	?___ftmul+1,w
  2306     016F  1683               	bsf	3,5	;RP0=1, select bank1
  2307     0170  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2308     0171  1283               	bcf	3,5	;RP0=0, select bank0
  2309     0172  0833               	movf	?___ftmul+2,w
  2310     0173  1683               	bsf	3,5	;RP0=1, select bank1
  2311     0174  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2312                           
  2313                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2314     0175  082E               	movf	sprintf@tmpval^(0+128),w
  2315     0176  1283               	bcf	3,5	;RP0=0, select bank0
  2316     0177  00A0               	movwf	___ftge@ff1
  2317     0178  1683               	bsf	3,5	;RP0=1, select bank1
  2318     0179  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2319     017A  1283               	bcf	3,5	;RP0=0, select bank0
  2320     017B  00A1               	movwf	___ftge@ff1+1
  2321     017C  1683               	bsf	3,5	;RP0=1, select bank1
  2322     017D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2323     017E  1283               	bcf	3,5	;RP0=0, select bank0
  2324     017F  00A2               	movwf	___ftge@ff1+2
  2325     0180  3000               	movlw	0
  2326     0181  00A3               	movwf	___ftge@ff2
  2327     0182  3080               	movlw	128
  2328     0183  00A4               	movwf	___ftge@ff2+1
  2329     0184  303F               	movlw	63
  2330     0185  00A5               	movwf	___ftge@ff2+2
  2331     0186  120A  158A  20AE  120A  118A  	fcall	___ftge
  2332     018B  1803               	btfsc	3,0
  2333     018C  2994               	goto	l2520
  2334                           
  2335                           ;doprnt.c: 875: eexp--;
  2336     018D  30FF               	movlw	255
  2337     018E  1683               	bsf	3,5	;RP0=1, select bank1
  2338     018F  07AC               	addwf	sprintf@eexp^(0+128),f
  2339     0190  1803               	skipnc
  2340     0191  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2341     0192  30FF               	movlw	255
  2342     0193  29B3               	goto	L5
  2343     0194                     l2520:
  2344                           
  2345                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2346     0194  1683               	bsf	3,5	;RP0=1, select bank1
  2347     0195  082E               	movf	sprintf@tmpval^(0+128),w
  2348     0196  1283               	bcf	3,5	;RP0=0, select bank0
  2349     0197  00A0               	movwf	___ftge@ff1
  2350     0198  1683               	bsf	3,5	;RP0=1, select bank1
  2351     0199  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2352     019A  1283               	bcf	3,5	;RP0=0, select bank0
  2353     019B  00A1               	movwf	___ftge@ff1+1
  2354     019C  1683               	bsf	3,5	;RP0=1, select bank1
  2355     019D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2356     019E  1283               	bcf	3,5	;RP0=0, select bank0
  2357     019F  00A2               	movwf	___ftge@ff1+2
  2358     01A0  3000               	movlw	0
  2359     01A1  00A3               	movwf	___ftge@ff2
  2360     01A2  3020               	movlw	32
  2361     01A3  00A4               	movwf	___ftge@ff2+1
  2362     01A4  3041               	movlw	65
  2363     01A5  00A5               	movwf	___ftge@ff2+2
  2364     01A6  120A  158A  20AE  120A  118A  	fcall	___ftge
  2365     01AB  1C03               	btfss	3,0
  2366     01AC  29B4               	goto	l2526
  2367                           
  2368                           ;doprnt.c: 877: eexp++;
  2369     01AD  3001               	movlw	1
  2370     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2371     01AF  07AC               	addwf	sprintf@eexp^(0+128),f
  2372     01B0  1803               	skipnc
  2373     01B1  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2374     01B2  3000               	movlw	0
  2375     01B3                     L5:
  2376     01B3  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2377     01B4                     l2526:	
  2378                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2379                           
  2380                           
  2381                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2382     01B4  3006               	movlw	6
  2383     01B5  120A  158A  26C1  120A  118A  	fcall	_fround
  2384     01BA  0840               	movf	?_fround,w
  2385     01BB  00CA               	movwf	___ftadd@f1
  2386     01BC  0841               	movf	?_fround+1,w
  2387     01BD  00CB               	movwf	___ftadd@f1+1
  2388     01BE  0842               	movf	?_fround+2,w
  2389     01BF  00CC               	movwf	___ftadd@f1+2
  2390     01C0  1683               	bsf	3,5	;RP0=1, select bank1
  2391     01C1  0833               	movf	sprintf@fval^(0+128),w
  2392     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  2393     01C3  00CD               	movwf	___ftadd@f2
  2394     01C4  1683               	bsf	3,5	;RP0=1, select bank1
  2395     01C5  0834               	movf	(sprintf@fval+1)^(0+128),w
  2396     01C6  1283               	bcf	3,5	;RP0=0, select bank0
  2397     01C7  00CE               	movwf	___ftadd@f2+1
  2398     01C8  1683               	bsf	3,5	;RP0=1, select bank1
  2399     01C9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2400     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2401     01CB  00CF               	movwf	___ftadd@f2+2
  2402     01CC  120A  158A  24B3  120A  118A  	fcall	___ftadd
  2403     01D1  084A               	movf	?___ftadd,w
  2404     01D2  1683               	bsf	3,5	;RP0=1, select bank1
  2405     01D3  00B3               	movwf	sprintf@fval^(0+128)
  2406     01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2407     01D5  084B               	movf	?___ftadd+1,w
  2408     01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2409     01D7  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2410     01D8  1283               	bcf	3,5	;RP0=0, select bank0
  2411     01D9  084C               	movf	?___ftadd+2,w
  2412     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  2413     01DB  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2414                           
  2415                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2416     01DC  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2417     01DD  3A80               	xorlw	128
  2418     01DE  00FF               	movwf	127
  2419     01DF  3080               	movlw	128
  2420     01E0  027F               	subwf	127,w
  2421     01E1  1D03               	skipz
  2422     01E2  29E5               	goto	u3295
  2423     01E3  300A               	movlw	10
  2424     01E4  022C               	subwf	sprintf@eexp^(0+128),w
  2425     01E5                     u3295:
  2426     01E5  1803               	skipnc
  2427     01E6  2A10               	goto	l2536
  2428     01E7  1683               	bsf	3,5	;RP0=1, select bank1
  2429     01E8  1303               	bcf	3,6	;RP1=0, select bank1
  2430     01E9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2431     01EA  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2432     01EB  0433               	iorwf	sprintf@fval^(0+128),w
  2433     01EC  1903               	skipnz
  2434     01ED  2A76               	goto	l2550
  2435     01EE  0833               	movf	sprintf@fval^(0+128),w
  2436     01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2437     01F0  00C7               	movwf	___fttol@f1
  2438     01F1  1683               	bsf	3,5	;RP0=1, select bank1
  2439     01F2  0834               	movf	(sprintf@fval+1)^(0+128),w
  2440     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2441     01F4  00C8               	movwf	___fttol@f1+1
  2442     01F5  1683               	bsf	3,5	;RP0=1, select bank1
  2443     01F6  0835               	movf	(sprintf@fval+2)^(0+128),w
  2444     01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2445     01F8  00C9               	movwf	___fttol@f1+2
  2446     01F9  120A  118A  2780  120A  118A  	fcall	___fttol
  2447     01FE  084A               	movf	?___fttol+3,w
  2448     01FF  0449               	iorwf	?___fttol+2,w
  2449     0200  0448               	iorwf	?___fttol+1,w
  2450     0201  0447               	iorwf	?___fttol,w
  2451     0202  1D03               	skipz
  2452     0203  2A76               	goto	l2550
  2453     0204  1683               	bsf	3,5	;RP0=1, select bank1
  2454     0205  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2455     0206  3A80               	xorlw	128
  2456     0207  00FF               	movwf	127
  2457     0208  3080               	movlw	128
  2458     0209  027F               	subwf	127,w
  2459     020A  1D03               	skipz
  2460     020B  2A0E               	goto	u3325
  2461     020C  3002               	movlw	2
  2462     020D  022C               	subwf	sprintf@eexp^(0+128),w
  2463     020E                     u3325:
  2464     020E  1C03               	skipc
  2465     020F  2A76               	goto	l2550
  2466     0210                     l2536:
  2467                           
  2468                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2469     0210  1683               	bsf	3,5	;RP0=1, select bank1
  2470     0211  1303               	bcf	3,6	;RP1=0, select bank1
  2471     0212  082E               	movf	sprintf@tmpval^(0+128),w
  2472     0213  1283               	bcf	3,5	;RP0=0, select bank0
  2473     0214  00A0               	movwf	___ftge@ff1
  2474     0215  1683               	bsf	3,5	;RP0=1, select bank1
  2475     0216  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2476     0217  1283               	bcf	3,5	;RP0=0, select bank0
  2477     0218  00A1               	movwf	___ftge@ff1+1
  2478     0219  1683               	bsf	3,5	;RP0=1, select bank1
  2479     021A  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2480     021B  1283               	bcf	3,5	;RP0=0, select bank0
  2481     021C  00A2               	movwf	___ftge@ff1+2
  2482     021D  3070               	movlw	112
  2483     021E  00A3               	movwf	___ftge@ff2
  2484     021F  3089               	movlw	137
  2485     0220  00A4               	movwf	___ftge@ff2+1
  2486     0221  3040               	movlw	64
  2487     0222  00A5               	movwf	___ftge@ff2+2
  2488     0223  120A  158A  20AE  120A  118A  	fcall	___ftge
  2489     0228  1803               	btfsc	3,0
  2490     0229  2A2C               	goto	l2540
  2491                           
  2492                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2493     022A  30F7               	movlw	247
  2494     022B  2A2D               	goto	L1
  2495     022C                     l2540:	
  2496                           ;doprnt.c: 1148: }else{
  2497                           
  2498                           
  2499                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2500     022C  30F8               	movlw	248
  2501     022D                     L1:
  2502     022D  1683               	bsf	3,5	;RP0=1, select bank1
  2503     022E  07AC               	addwf	sprintf@eexp^(0+128),f
  2504     022F  1803               	skipnc
  2505     0230  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2506     0231  30FF               	movlw	255
  2507     0232  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2508                           
  2509                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2510     0233  082C               	movf	sprintf@eexp^(0+128),w
  2511     0234  120A  118A  2528  120A  118A  	fcall	_scale
  2512     0239  0840               	movf	?_scale,w
  2513     023A  1683               	bsf	3,5	;RP0=1, select bank1
  2514     023B  00AE               	movwf	sprintf@tmpval^(0+128)
  2515     023C  1283               	bcf	3,5	;RP0=0, select bank0
  2516     023D  0841               	movf	?_scale+1,w
  2517     023E  1683               	bsf	3,5	;RP0=1, select bank1
  2518     023F  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2519     0240  1283               	bcf	3,5	;RP0=0, select bank0
  2520     0241  0842               	movf	?_scale+2,w
  2521     0242  1683               	bsf	3,5	;RP0=1, select bank1
  2522     0243  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2523                           
  2524                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2525     0244  0833               	movf	sprintf@fval^(0+128),w
  2526     0245  1283               	bcf	3,5	;RP0=0, select bank0
  2527     0246  00A0               	movwf	__tdiv_to_l_@f1
  2528     0247  1683               	bsf	3,5	;RP0=1, select bank1
  2529     0248  0834               	movf	(sprintf@fval+1)^(0+128),w
  2530     0249  1283               	bcf	3,5	;RP0=0, select bank0
  2531     024A  00A1               	movwf	__tdiv_to_l_@f1+1
  2532     024B  1683               	bsf	3,5	;RP0=1, select bank1
  2533     024C  0835               	movf	(sprintf@fval+2)^(0+128),w
  2534     024D  1283               	bcf	3,5	;RP0=0, select bank0
  2535     024E  00A2               	movwf	__tdiv_to_l_@f1+2
  2536     024F  1683               	bsf	3,5	;RP0=1, select bank1
  2537     0250  082E               	movf	sprintf@tmpval^(0+128),w
  2538     0251  1283               	bcf	3,5	;RP0=0, select bank0
  2539     0252  00A3               	movwf	__tdiv_to_l_@f2
  2540     0253  1683               	bsf	3,5	;RP0=1, select bank1
  2541     0254  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2542     0255  1283               	bcf	3,5	;RP0=0, select bank0
  2543     0256  00A4               	movwf	__tdiv_to_l_@f2+1
  2544     0257  1683               	bsf	3,5	;RP0=1, select bank1
  2545     0258  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2546     0259  1283               	bcf	3,5	;RP0=0, select bank0
  2547     025A  00A5               	movwf	__tdiv_to_l_@f2+2
  2548     025B  120A  158A  236D  120A  118A  	fcall	__tdiv_to_l_
  2549     0260  0823               	movf	?__tdiv_to_l_+3,w
  2550     0261  1683               	bsf	3,5	;RP0=1, select bank1
  2551     0262  00AB               	movwf	(sprintf@val+3)^(0+128)
  2552     0263  1283               	bcf	3,5	;RP0=0, select bank0
  2553     0264  0822               	movf	?__tdiv_to_l_+2,w
  2554     0265  1683               	bsf	3,5	;RP0=1, select bank1
  2555     0266  00AA               	movwf	(sprintf@val+2)^(0+128)
  2556     0267  1283               	bcf	3,5	;RP0=0, select bank0
  2557     0268  0821               	movf	?__tdiv_to_l_+1,w
  2558     0269  1683               	bsf	3,5	;RP0=1, select bank1
  2559     026A  00A9               	movwf	(sprintf@val+1)^(0+128)
  2560     026B  1283               	bcf	3,5	;RP0=0, select bank0
  2561     026C  0820               	movf	?__tdiv_to_l_,w
  2562     026D  1683               	bsf	3,5	;RP0=1, select bank1
  2563     026E  00A8               	movwf	sprintf@val^(0+128)
  2564                           
  2565                           ;doprnt.c: 1155: fval = 0.0;
  2566     026F  3000               	movlw	0
  2567     0270  00B3               	movwf	sprintf@fval^(0+128)
  2568     0271  3000               	movlw	0
  2569     0272  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2570     0273  3000               	movlw	0
  2571     0274  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2572                           
  2573                           ;doprnt.c: 1156: } else {
  2574     0275  2ACF               	goto	l2554
  2575     0276                     l2550:
  2576                           
  2577                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2578     0276  1683               	bsf	3,5	;RP0=1, select bank1
  2579     0277  1303               	bcf	3,6	;RP1=0, select bank1
  2580     0278  0833               	movf	sprintf@fval^(0+128),w
  2581     0279  1283               	bcf	3,5	;RP0=0, select bank0
  2582     027A  00C7               	movwf	___fttol@f1
  2583     027B  1683               	bsf	3,5	;RP0=1, select bank1
  2584     027C  0834               	movf	(sprintf@fval+1)^(0+128),w
  2585     027D  1283               	bcf	3,5	;RP0=0, select bank0
  2586     027E  00C8               	movwf	___fttol@f1+1
  2587     027F  1683               	bsf	3,5	;RP0=1, select bank1
  2588     0280  0835               	movf	(sprintf@fval+2)^(0+128),w
  2589     0281  1283               	bcf	3,5	;RP0=0, select bank0
  2590     0282  00C9               	movwf	___fttol@f1+2
  2591     0283  120A  118A  2780  120A  118A  	fcall	___fttol
  2592     0288  084A               	movf	?___fttol+3,w
  2593     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2594     028A  00AB               	movwf	(sprintf@val+3)^(0+128)
  2595     028B  1283               	bcf	3,5	;RP0=0, select bank0
  2596     028C  0849               	movf	?___fttol+2,w
  2597     028D  1683               	bsf	3,5	;RP0=1, select bank1
  2598     028E  00AA               	movwf	(sprintf@val+2)^(0+128)
  2599     028F  1283               	bcf	3,5	;RP0=0, select bank0
  2600     0290  0848               	movf	?___fttol+1,w
  2601     0291  1683               	bsf	3,5	;RP0=1, select bank1
  2602     0292  00A9               	movwf	(sprintf@val+1)^(0+128)
  2603     0293  1283               	bcf	3,5	;RP0=0, select bank0
  2604     0294  0847               	movf	?___fttol,w
  2605     0295  1683               	bsf	3,5	;RP0=1, select bank1
  2606     0296  00A8               	movwf	sprintf@val^(0+128)
  2607                           
  2608                           ;doprnt.c: 1158: fval -= (double)val;
  2609     0297  082B               	movf	(sprintf@val+3)^(0+128),w
  2610     0298  1283               	bcf	3,5	;RP0=0, select bank0
  2611     0299  00AB               	movwf	___lltoft@c+3
  2612     029A  1683               	bsf	3,5	;RP0=1, select bank1
  2613     029B  082A               	movf	(sprintf@val+2)^(0+128),w
  2614     029C  1283               	bcf	3,5	;RP0=0, select bank0
  2615     029D  00AA               	movwf	___lltoft@c+2
  2616     029E  1683               	bsf	3,5	;RP0=1, select bank1
  2617     029F  0829               	movf	(sprintf@val+1)^(0+128),w
  2618     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2619     02A1  00A9               	movwf	___lltoft@c+1
  2620     02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2621     02A3  0828               	movf	sprintf@val^(0+128),w
  2622     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2623     02A5  00A8               	movwf	___lltoft@c
  2624     02A6  120A  158A  2087  120A  118A  	fcall	___lltoft
  2625     02AB  0828               	movf	?___lltoft,w
  2626     02AC  00D6               	movwf	___ftsub@f2
  2627     02AD  0829               	movf	?___lltoft+1,w
  2628     02AE  00D7               	movwf	___ftsub@f2+1
  2629     02AF  082A               	movf	?___lltoft+2,w
  2630     02B0  00D8               	movwf	___ftsub@f2+2
  2631     02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2632     02B2  0833               	movf	sprintf@fval^(0+128),w
  2633     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2634     02B4  00D9               	movwf	___ftsub@f1
  2635     02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2636     02B6  0834               	movf	(sprintf@fval+1)^(0+128),w
  2637     02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2638     02B8  00DA               	movwf	___ftsub@f1+1
  2639     02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2640     02BA  0835               	movf	(sprintf@fval+2)^(0+128),w
  2641     02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2642     02BC  00DB               	movwf	___ftsub@f1+2
  2643     02BD  160A  118A  273C  120A  118A  	fcall	___ftsub
  2644     02C2  0856               	movf	?___ftsub,w
  2645     02C3  1683               	bsf	3,5	;RP0=1, select bank1
  2646     02C4  00B3               	movwf	sprintf@fval^(0+128)
  2647     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2648     02C6  0857               	movf	?___ftsub+1,w
  2649     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2650     02C8  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2651     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2652     02CA  0858               	movf	?___ftsub+2,w
  2653     02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2654     02CC  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2655                           
  2656                           ;doprnt.c: 1159: eexp = 0;
  2657     02CD  01AC               	clrf	sprintf@eexp^(0+128)
  2658     02CE  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2659     02CF                     l2554:
  2660                           
  2661                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2662     02CF  01B6               	clrf	sprintf@c^(0+128)
  2663     02D0  0AB6               	incf	sprintf@c^(0+128),f
  2664     02D1                     l2560:
  2665                           
  2666                           ;doprnt.c: 1163: if(val < dpowers[c])
  2667     02D1  0836               	movf	sprintf@c^(0+128),w
  2668     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2669     02D3  00E0               	movwf	??_sprintf
  2670     02D4  3001               	movlw	1
  2671     02D5                     u3345:
  2672     02D5  1003               	clrc
  2673     02D6  0DE0               	rlf	??_sprintf,f
  2674     02D7  3EFF               	addlw	-1
  2675     02D8  1D03               	skipz
  2676     02D9  2AD5               	goto	u3345
  2677     02DA  1003               	clrc
  2678     02DB  0D60               	rlf	??_sprintf,w
  2679     02DC  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2680     02DD  0084               	movwf	4
  2681     02DE  120A  158A  2000  120A  118A  	fcall	stringdir
  2682     02E3  00E1               	movwf	??_sprintf+1
  2683     02E4  120A  158A  2000  120A  118A  	fcall	stringdir
  2684     02E9  00E2               	movwf	??_sprintf+2
  2685     02EA  120A  158A  2000  120A  118A  	fcall	stringdir
  2686     02EF  00E3               	movwf	??_sprintf+3
  2687     02F0  120A  158A  2000  120A  118A  	fcall	stringdir
  2688     02F5  00E4               	movwf	??_sprintf+4
  2689     02F6  0864               	movf	??_sprintf+4,w
  2690     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2691     02F8  022B               	subwf	(sprintf@val+3)^(0+128),w
  2692     02F9  1D03               	skipz
  2693     02FA  2B0B               	goto	u3355
  2694     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2695     02FC  0863               	movf	??_sprintf+3,w
  2696     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2697     02FE  022A               	subwf	(sprintf@val+2)^(0+128),w
  2698     02FF  1D03               	skipz
  2699     0300  2B0B               	goto	u3355
  2700     0301  1283               	bcf	3,5	;RP0=0, select bank0
  2701     0302  0862               	movf	??_sprintf+2,w
  2702     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2703     0304  0229               	subwf	(sprintf@val+1)^(0+128),w
  2704     0305  1D03               	skipz
  2705     0306  2B0B               	goto	u3355
  2706     0307  1283               	bcf	3,5	;RP0=0, select bank0
  2707     0308  0861               	movf	??_sprintf+1,w
  2708     0309  1683               	bsf	3,5	;RP0=1, select bank1
  2709     030A  0228               	subwf	sprintf@val^(0+128),w
  2710     030B                     u3355:
  2711     030B  1C03               	btfss	3,0
  2712     030C  2B15               	goto	l2568
  2713     030D  3001               	movlw	1
  2714     030E  00FF               	movwf	127
  2715     030F  087F               	movf	127,w
  2716     0310  07B6               	addwf	sprintf@c^(0+128),f
  2717     0311  300A               	movlw	10
  2718     0312  0636               	xorwf	sprintf@c^(0+128),w
  2719     0313  1D03               	btfss	3,2
  2720     0314  2AD1               	goto	l2560
  2721     0315                     l2568:
  2722                           
  2723                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2724     0315  0824               	movf	sprintf@flag^(0+128),w
  2725     0316  3903               	andlw	3
  2726     0317  1903               	btfsc	3,2
  2727     0318  2B22               	goto	l2582
  2728                           
  2729                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2730     0319  0832               	movf	sprintf@sp^(0+128),w
  2731     031A  0084               	movwf	4
  2732     031B  302D               	movlw	45
  2733     031C                     L6:
  2734     031C  1383               	bcf	3,7	;select IRP bank0
  2735     031D  0080               	movwf	0
  2736     031E  3001               	movlw	1
  2737     031F  00FF               	movwf	127
  2738     0320  087F               	movf	127,w
  2739     0321  07B2               	addwf	sprintf@sp^(0+128),f
  2740     0322                     l2582:
  2741     0322  3001               	movlw	1
  2742     0323  02B6               	subwf	sprintf@c^(0+128),f
  2743     0324  0A36               	incf	sprintf@c^(0+128),w
  2744     0325  1903               	btfsc	3,2
  2745     0326  2BB3               	goto	l2590
  2746                           
  2747                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2748     0327  0836               	movf	sprintf@c^(0+128),w
  2749     0328  1283               	bcf	3,5	;RP0=0, select bank0
  2750     0329  00E0               	movwf	??_sprintf
  2751     032A  3001               	movlw	1
  2752     032B                     u3385:
  2753     032B  1003               	clrc
  2754     032C  0DE0               	rlf	??_sprintf,f
  2755     032D  3EFF               	addlw	-1
  2756     032E  1D03               	skipz
  2757     032F  2B2B               	goto	u3385
  2758     0330  1003               	clrc
  2759     0331  0D60               	rlf	??_sprintf,w
  2760     0332  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2761     0333  0084               	movwf	4
  2762     0334  120A  158A  2000  120A  118A  	fcall	stringdir
  2763     0339  00A0               	movwf	___lldiv@divisor
  2764     033A  120A  158A  2000  120A  118A  	fcall	stringdir
  2765     033F  00A1               	movwf	___lldiv@divisor+1
  2766     0340  120A  158A  2000  120A  118A  	fcall	stringdir
  2767     0345  00A2               	movwf	___lldiv@divisor+2
  2768     0346  120A  158A  2000  120A  118A  	fcall	stringdir
  2769     034B  00A3               	movwf	___lldiv@divisor+3
  2770     034C  1683               	bsf	3,5	;RP0=1, select bank1
  2771     034D  082B               	movf	(sprintf@val+3)^(0+128),w
  2772     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2773     034F  00A7               	movwf	___lldiv@dividend+3
  2774     0350  1683               	bsf	3,5	;RP0=1, select bank1
  2775     0351  082A               	movf	(sprintf@val+2)^(0+128),w
  2776     0352  1283               	bcf	3,5	;RP0=0, select bank0
  2777     0353  00A6               	movwf	___lldiv@dividend+2
  2778     0354  1683               	bsf	3,5	;RP0=1, select bank1
  2779     0355  0829               	movf	(sprintf@val+1)^(0+128),w
  2780     0356  1283               	bcf	3,5	;RP0=0, select bank0
  2781     0357  00A5               	movwf	___lldiv@dividend+1
  2782     0358  1683               	bsf	3,5	;RP0=1, select bank1
  2783     0359  0828               	movf	sprintf@val^(0+128),w
  2784     035A  1283               	bcf	3,5	;RP0=0, select bank0
  2785     035B  00A4               	movwf	___lldiv@dividend
  2786     035C  120A  158A  2203  120A  118A  	fcall	___lldiv
  2787     0361  0823               	movf	?___lldiv+3,w
  2788     0362  1683               	bsf	3,5	;RP0=1, select bank1
  2789     0363  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2790     0364  1283               	bcf	3,5	;RP0=0, select bank0
  2791     0365  0822               	movf	?___lldiv+2,w
  2792     0366  1683               	bsf	3,5	;RP0=1, select bank1
  2793     0367  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2794     0368  1283               	bcf	3,5	;RP0=0, select bank0
  2795     0369  0821               	movf	?___lldiv+1,w
  2796     036A  1683               	bsf	3,5	;RP0=1, select bank1
  2797     036B  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2798     036C  1283               	bcf	3,5	;RP0=0, select bank0
  2799     036D  0820               	movf	?___lldiv,w
  2800     036E  1683               	bsf	3,5	;RP0=1, select bank1
  2801     036F  00AE               	movwf	sprintf@tmpval^(0+128)
  2802                           
  2803                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2804     0370  3000               	movlw	0
  2805     0371  1283               	bcf	3,5	;RP0=0, select bank0
  2806     0372  00A3               	movwf	___llmod@divisor+3
  2807     0373  3000               	movlw	0
  2808     0374  00A2               	movwf	___llmod@divisor+2
  2809     0375  3000               	movlw	0
  2810     0376  00A1               	movwf	___llmod@divisor+1
  2811     0377  300A               	movlw	10
  2812     0378  00A0               	movwf	___llmod@divisor
  2813     0379  1683               	bsf	3,5	;RP0=1, select bank1
  2814     037A  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  2815     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2816     037C  00A7               	movwf	___llmod@dividend+3
  2817     037D  1683               	bsf	3,5	;RP0=1, select bank1
  2818     037E  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2819     037F  1283               	bcf	3,5	;RP0=0, select bank0
  2820     0380  00A6               	movwf	___llmod@dividend+2
  2821     0381  1683               	bsf	3,5	;RP0=1, select bank1
  2822     0382  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2823     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2824     0384  00A5               	movwf	___llmod@dividend+1
  2825     0385  1683               	bsf	3,5	;RP0=1, select bank1
  2826     0386  082E               	movf	sprintf@tmpval^(0+128),w
  2827     0387  1283               	bcf	3,5	;RP0=0, select bank0
  2828     0388  00A4               	movwf	___llmod@dividend
  2829     0389  120A  158A  215E  120A  118A  	fcall	___llmod
  2830     038E  0823               	movf	?___llmod+3,w
  2831     038F  1683               	bsf	3,5	;RP0=1, select bank1
  2832     0390  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2833     0391  1283               	bcf	3,5	;RP0=0, select bank0
  2834     0392  0822               	movf	?___llmod+2,w
  2835     0393  1683               	bsf	3,5	;RP0=1, select bank1
  2836     0394  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2837     0395  1283               	bcf	3,5	;RP0=0, select bank0
  2838     0396  0821               	movf	?___llmod+1,w
  2839     0397  1683               	bsf	3,5	;RP0=1, select bank1
  2840     0398  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2841     0399  1283               	bcf	3,5	;RP0=0, select bank0
  2842     039A  0820               	movf	?___llmod,w
  2843     039B  1683               	bsf	3,5	;RP0=1, select bank1
  2844     039C  00AE               	movwf	sprintf@tmpval^(0+128)
  2845                           
  2846                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2847     039D  0832               	movf	sprintf@sp^(0+128),w
  2848     039E  0084               	movwf	4
  2849     039F  082E               	movf	sprintf@tmpval^(0+128),w
  2850     03A0  3E30               	addlw	48
  2851     03A1  2B1C               	goto	L6
  2852     03A2                     l2584:
  2853                           
  2854                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2855     03A2  1683               	bsf	3,5	;RP0=1, select bank1
  2856     03A3  1303               	bcf	3,6	;RP1=0, select bank1
  2857     03A4  0832               	movf	sprintf@sp^(0+128),w
  2858     03A5  0084               	movwf	4
  2859     03A6  3030               	movlw	48
  2860     03A7  1383               	bcf	3,7	;select IRP bank0
  2861     03A8  0080               	movwf	0
  2862     03A9  3001               	movlw	1
  2863     03AA  00FF               	movwf	127
  2864     03AB  087F               	movf	127,w
  2865     03AC  07B2               	addwf	sprintf@sp^(0+128),f
  2866                           
  2867                           ;doprnt.c: 1235: eexp--;
  2868     03AD  30FF               	movlw	255
  2869     03AE  07AC               	addwf	sprintf@eexp^(0+128),f
  2870     03AF  1803               	skipnc
  2871     03B0  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2872     03B1  30FF               	movlw	255
  2873     03B2  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2874     03B3                     l2590:
  2875     03B3  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2876     03B4  3A80               	xorlw	128
  2877     03B5  00FF               	movwf	127
  2878     03B6  3080               	movlw	128
  2879     03B7  027F               	subwf	127,w
  2880     03B8  1D03               	skipz
  2881     03B9  2BBC               	goto	u3405
  2882     03BA  3001               	movlw	1
  2883     03BB  022C               	subwf	sprintf@eexp^(0+128),w
  2884     03BC                     u3405:
  2885     03BC  1803               	skipnc
  2886     03BD  2BA2               	goto	l2584
  2887                           
  2888                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2889     03BE  1683               	bsf	3,5	;RP0=1, select bank1
  2890     03BF  1303               	bcf	3,6	;RP1=0, select bank1
  2891     03C0  0827               	movf	(sprintf@prec+1)^(0+128),w
  2892     03C1  3A80               	xorlw	128
  2893     03C2  00FF               	movwf	127
  2894     03C3  3080               	movlw	128
  2895     03C4  027F               	subwf	127,w
  2896     03C5  1D03               	skipz
  2897     03C6  2BC9               	goto	u3415
  2898     03C7  3009               	movlw	9
  2899     03C8  0226               	subwf	sprintf@prec^(0+128),w
  2900     03C9                     u3415:
  2901     03C9  1C03               	skipc
  2902     03CA  2BCF               	goto	l2596
  2903                           
  2904                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2905     03CB  3008               	movlw	8
  2906     03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2907     03CD  1303               	bcf	3,6	;RP1=0, select bank1
  2908     03CE  2BD2               	goto	L2
  2909     03CF                     l2596:
  2910                           
  2911                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2912     03CF  1683               	bsf	3,5	;RP0=1, select bank1
  2913     03D0  1303               	bcf	3,6	;RP1=0, select bank1
  2914     03D1  0826               	movf	sprintf@prec^(0+128),w
  2915     03D2                     L2:
  2916     03D2  00B6               	movwf	sprintf@c^(0+128)
  2917                           
  2918                           ;doprnt.c: 1241: prec -= (int)c;
  2919     03D3  0836               	movf	sprintf@c^(0+128),w
  2920     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2921     03D5  00E0               	movwf	??_sprintf
  2922     03D6  01E1               	clrf	??_sprintf+1
  2923     03D7  0860               	movf	??_sprintf,w
  2924     03D8  1683               	bsf	3,5	;RP0=1, select bank1
  2925     03D9  02A6               	subwf	sprintf@prec^(0+128),f
  2926     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2927     03DB  0861               	movf	??_sprintf+1,w
  2928     03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2929     03DD  1C03               	skipc
  2930     03DE  03A7               	decf	(sprintf@prec+1)^(0+128),f
  2931     03DF  02A7               	subwf	(sprintf@prec+1)^(0+128),f
  2932                           
  2933                           ;doprnt.c: 1245: if(c)
  2934     03E0  0836               	movf	sprintf@c^(0+128),w
  2935     03E1  1903               	btfsc	3,2
  2936     03E2  2BEC               	goto	l2604
  2937                           
  2938                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2939     03E3  0832               	movf	sprintf@sp^(0+128),w
  2940     03E4  0084               	movwf	4
  2941     03E5  302E               	movlw	46
  2942     03E6  1383               	bcf	3,7	;select IRP bank0
  2943     03E7  0080               	movwf	0
  2944     03E8  3001               	movlw	1
  2945     03E9  00FF               	movwf	127
  2946     03EA  087F               	movf	127,w
  2947     03EB  07B2               	addwf	sprintf@sp^(0+128),f
  2948     03EC                     l2604:
  2949                           
  2950                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2951     03EC  0836               	movf	sprintf@c^(0+128),w
  2952     03ED  120A  118A  2528  120A  118A  	fcall	_scale
  2953     03F2  0840               	movf	?_scale,w
  2954     03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2955     03F4  00A0               	movwf	_sprintf$1261^(0+128)
  2956     03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2957     03F6  0841               	movf	?_scale+1,w
  2958     03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2959     03F8  00A1               	movwf	(_sprintf$1261+1)^(0+128)
  2960     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2961     03FA  0842               	movf	?_scale+2,w
  2962     03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2963     03FC  00A2               	movwf	(_sprintf$1261+2)^(0+128)
  2964                           
  2965                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2966     03FD  0820               	movf	_sprintf$1261^(0+128),w
  2967     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2968     03FF  00B4               	movwf	___ftmul@f2
  2969     0400  1683               	bsf	3,5	;RP0=1, select bank1
  2970     0401  0821               	movf	(_sprintf$1261+1)^(0+128),w
  2971     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2972     0403  00B5               	movwf	___ftmul@f2+1
  2973     0404  1683               	bsf	3,5	;RP0=1, select bank1
  2974     0405  0822               	movf	(_sprintf$1261+2)^(0+128),w
  2975     0406  1283               	bcf	3,5	;RP0=0, select bank0
  2976     0407  00B6               	movwf	___ftmul@f2+2
  2977     0408  1683               	bsf	3,5	;RP0=1, select bank1
  2978     0409  0833               	movf	sprintf@fval^(0+128),w
  2979     040A  1283               	bcf	3,5	;RP0=0, select bank0
  2980     040B  00B1               	movwf	___ftmul@f1
  2981     040C  1683               	bsf	3,5	;RP0=1, select bank1
  2982     040D  0834               	movf	(sprintf@fval+1)^(0+128),w
  2983     040E  1283               	bcf	3,5	;RP0=0, select bank0
  2984     040F  00B2               	movwf	___ftmul@f1+1
  2985     0410  1683               	bsf	3,5	;RP0=1, select bank1
  2986     0411  0835               	movf	(sprintf@fval+2)^(0+128),w
  2987     0412  1283               	bcf	3,5	;RP0=0, select bank0
  2988     0413  00B3               	movwf	___ftmul@f1+2
  2989     0414  120A  158A  240E  120A  118A  	fcall	___ftmul
  2990     0419  0831               	movf	?___ftmul,w
  2991     041A  00C7               	movwf	___fttol@f1
  2992     041B  0832               	movf	?___ftmul+1,w
  2993     041C  00C8               	movwf	___fttol@f1+1
  2994     041D  0833               	movf	?___ftmul+2,w
  2995     041E  00C9               	movwf	___fttol@f1+2
  2996     041F  120A  118A  2780  120A  118A  	fcall	___fttol
  2997     0424  084A               	movf	?___fttol+3,w
  2998     0425  1683               	bsf	3,5	;RP0=1, select bank1
  2999     0426  00AB               	movwf	(sprintf@val+3)^(0+128)
  3000     0427  1283               	bcf	3,5	;RP0=0, select bank0
  3001     0428  0849               	movf	?___fttol+2,w
  3002     0429  1683               	bsf	3,5	;RP0=1, select bank1
  3003     042A  00AA               	movwf	(sprintf@val+2)^(0+128)
  3004     042B  1283               	bcf	3,5	;RP0=0, select bank0
  3005     042C  0848               	movf	?___fttol+1,w
  3006     042D  1683               	bsf	3,5	;RP0=1, select bank1
  3007     042E  00A9               	movwf	(sprintf@val+1)^(0+128)
  3008     042F  1283               	bcf	3,5	;RP0=0, select bank0
  3009     0430  0847               	movf	?___fttol,w
  3010     0431                     L3:
  3011     0431  1683               	bsf	3,5	;RP0=1, select bank1
  3012     0432  00A8               	movwf	sprintf@val^(0+128)
  3013     0433  3001               	movlw	1
  3014     0434  02B6               	subwf	sprintf@c^(0+128),f
  3015     0435  0A36               	incf	sprintf@c^(0+128),w
  3016     0436  1903               	btfsc	3,2
  3017     0437  2D0F               	goto	l2626
  3018                           
  3019                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3020                           
  3021                           ;doprnt.c: 1254: while(c--) {
  3022     0438  0836               	movf	sprintf@c^(0+128),w
  3023     0439  1283               	bcf	3,5	;RP0=0, select bank0
  3024     043A  00E0               	movwf	??_sprintf
  3025     043B  3001               	movlw	1
  3026     043C                     u3435:
  3027     043C  1003               	clrc
  3028     043D  0DE0               	rlf	??_sprintf,f
  3029     043E  3EFF               	addlw	-1
  3030     043F  1D03               	skipz
  3031     0440  2C3C               	goto	u3435
  3032     0441  1003               	clrc
  3033     0442  0D60               	rlf	??_sprintf,w
  3034     0443  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3035     0444  0084               	movwf	4
  3036     0445  120A  158A  2000  120A  118A  	fcall	stringdir
  3037     044A  00A0               	movwf	___lldiv@divisor
  3038     044B  120A  158A  2000  120A  118A  	fcall	stringdir
  3039     0450  00A1               	movwf	___lldiv@divisor+1
  3040     0451  120A  158A  2000  120A  118A  	fcall	stringdir
  3041     0456  00A2               	movwf	___lldiv@divisor+2
  3042     0457  120A  158A  2000  120A  118A  	fcall	stringdir
  3043     045C  00A3               	movwf	___lldiv@divisor+3
  3044     045D  1683               	bsf	3,5	;RP0=1, select bank1
  3045     045E  082B               	movf	(sprintf@val+3)^(0+128),w
  3046     045F  1283               	bcf	3,5	;RP0=0, select bank0
  3047     0460  00A7               	movwf	___lldiv@dividend+3
  3048     0461  1683               	bsf	3,5	;RP0=1, select bank1
  3049     0462  082A               	movf	(sprintf@val+2)^(0+128),w
  3050     0463  1283               	bcf	3,5	;RP0=0, select bank0
  3051     0464  00A6               	movwf	___lldiv@dividend+2
  3052     0465  1683               	bsf	3,5	;RP0=1, select bank1
  3053     0466  0829               	movf	(sprintf@val+1)^(0+128),w
  3054     0467  1283               	bcf	3,5	;RP0=0, select bank0
  3055     0468  00A5               	movwf	___lldiv@dividend+1
  3056     0469  1683               	bsf	3,5	;RP0=1, select bank1
  3057     046A  0828               	movf	sprintf@val^(0+128),w
  3058     046B  1283               	bcf	3,5	;RP0=0, select bank0
  3059     046C  00A4               	movwf	___lldiv@dividend
  3060     046D  120A  158A  2203  120A  118A  	fcall	___lldiv
  3061     0472  0823               	movf	?___lldiv+3,w
  3062     0473  1683               	bsf	3,5	;RP0=1, select bank1
  3063     0474  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3064     0475  1283               	bcf	3,5	;RP0=0, select bank0
  3065     0476  0822               	movf	?___lldiv+2,w
  3066     0477  1683               	bsf	3,5	;RP0=1, select bank1
  3067     0478  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3068     0479  1283               	bcf	3,5	;RP0=0, select bank0
  3069     047A  0821               	movf	?___lldiv+1,w
  3070     047B  1683               	bsf	3,5	;RP0=1, select bank1
  3071     047C  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3072     047D  1283               	bcf	3,5	;RP0=0, select bank0
  3073     047E  0820               	movf	?___lldiv,w
  3074     047F  1683               	bsf	3,5	;RP0=1, select bank1
  3075     0480  00AE               	movwf	sprintf@tmpval^(0+128)
  3076                           
  3077                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3078     0481  3000               	movlw	0
  3079     0482  1283               	bcf	3,5	;RP0=0, select bank0
  3080     0483  00A3               	movwf	___llmod@divisor+3
  3081     0484  3000               	movlw	0
  3082     0485  00A2               	movwf	___llmod@divisor+2
  3083     0486  3000               	movlw	0
  3084     0487  00A1               	movwf	___llmod@divisor+1
  3085     0488  300A               	movlw	10
  3086     0489  00A0               	movwf	___llmod@divisor
  3087     048A  1683               	bsf	3,5	;RP0=1, select bank1
  3088     048B  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  3089     048C  1283               	bcf	3,5	;RP0=0, select bank0
  3090     048D  00A7               	movwf	___llmod@dividend+3
  3091     048E  1683               	bsf	3,5	;RP0=1, select bank1
  3092     048F  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3093     0490  1283               	bcf	3,5	;RP0=0, select bank0
  3094     0491  00A6               	movwf	___llmod@dividend+2
  3095     0492  1683               	bsf	3,5	;RP0=1, select bank1
  3096     0493  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3097     0494  1283               	bcf	3,5	;RP0=0, select bank0
  3098     0495  00A5               	movwf	___llmod@dividend+1
  3099     0496  1683               	bsf	3,5	;RP0=1, select bank1
  3100     0497  082E               	movf	sprintf@tmpval^(0+128),w
  3101     0498  1283               	bcf	3,5	;RP0=0, select bank0
  3102     0499  00A4               	movwf	___llmod@dividend
  3103     049A  120A  158A  215E  120A  118A  	fcall	___llmod
  3104     049F  0823               	movf	?___llmod+3,w
  3105     04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3106     04A1  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3107     04A2  1283               	bcf	3,5	;RP0=0, select bank0
  3108     04A3  0822               	movf	?___llmod+2,w
  3109     04A4  1683               	bsf	3,5	;RP0=1, select bank1
  3110     04A5  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3111     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3112     04A7  0821               	movf	?___llmod+1,w
  3113     04A8  1683               	bsf	3,5	;RP0=1, select bank1
  3114     04A9  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3115     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3116     04AB  0820               	movf	?___llmod,w
  3117     04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3118     04AD  00AE               	movwf	sprintf@tmpval^(0+128)
  3119                           
  3120                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  3121     04AE  0832               	movf	sprintf@sp^(0+128),w
  3122     04AF  0084               	movwf	4
  3123     04B0  082E               	movf	sprintf@tmpval^(0+128),w
  3124     04B1  3E30               	addlw	48
  3125     04B2  1383               	bcf	3,7	;select IRP bank0
  3126     04B3  0080               	movwf	0
  3127     04B4  3001               	movlw	1
  3128     04B5  00FF               	movwf	127
  3129     04B6  087F               	movf	127,w
  3130     04B7  07B2               	addwf	sprintf@sp^(0+128),f
  3131                           
  3132                           ;doprnt.c: 1258: val %= dpowers[c];
  3133     04B8  0836               	movf	sprintf@c^(0+128),w
  3134     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3135     04BA  00E0               	movwf	??_sprintf
  3136     04BB  3001               	movlw	1
  3137     04BC                     u3445:
  3138     04BC  1003               	clrc
  3139     04BD  0DE0               	rlf	??_sprintf,f
  3140     04BE  3EFF               	addlw	-1
  3141     04BF  1D03               	skipz
  3142     04C0  2CBC               	goto	u3445
  3143     04C1  1003               	clrc
  3144     04C2  0D60               	rlf	??_sprintf,w
  3145     04C3  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3146     04C4  0084               	movwf	4
  3147     04C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3148     04CA  00A0               	movwf	___llmod@divisor
  3149     04CB  120A  158A  2000  120A  118A  	fcall	stringdir
  3150     04D0  00A1               	movwf	___llmod@divisor+1
  3151     04D1  120A  158A  2000  120A  118A  	fcall	stringdir
  3152     04D6  00A2               	movwf	___llmod@divisor+2
  3153     04D7  120A  158A  2000  120A  118A  	fcall	stringdir
  3154     04DC  00A3               	movwf	___llmod@divisor+3
  3155     04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3156     04DE  082B               	movf	(sprintf@val+3)^(0+128),w
  3157     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3158     04E0  00A7               	movwf	___llmod@dividend+3
  3159     04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3160     04E2  082A               	movf	(sprintf@val+2)^(0+128),w
  3161     04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3162     04E4  00A6               	movwf	___llmod@dividend+2
  3163     04E5  1683               	bsf	3,5	;RP0=1, select bank1
  3164     04E6  0829               	movf	(sprintf@val+1)^(0+128),w
  3165     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3166     04E8  00A5               	movwf	___llmod@dividend+1
  3167     04E9  1683               	bsf	3,5	;RP0=1, select bank1
  3168     04EA  0828               	movf	sprintf@val^(0+128),w
  3169     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3170     04EC  00A4               	movwf	___llmod@dividend
  3171     04ED  120A  158A  215E  120A  118A  	fcall	___llmod
  3172     04F2  0823               	movf	?___llmod+3,w
  3173     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3174     04F4  00AB               	movwf	(sprintf@val+3)^(0+128)
  3175     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  3176     04F6  0822               	movf	?___llmod+2,w
  3177     04F7  1683               	bsf	3,5	;RP0=1, select bank1
  3178     04F8  00AA               	movwf	(sprintf@val+2)^(0+128)
  3179     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3180     04FA  0821               	movf	?___llmod+1,w
  3181     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3182     04FC  00A9               	movwf	(sprintf@val+1)^(0+128)
  3183     04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3184     04FE  0820               	movf	?___llmod,w
  3185     04FF  2C31               	goto	L3
  3186     0500                     l2620:
  3187                           
  3188                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  3189     0500  0832               	movf	sprintf@sp^(0+128),w
  3190     0501  0084               	movwf	4
  3191     0502  3030               	movlw	48
  3192     0503  1383               	bcf	3,7	;select IRP bank0
  3193     0504  0080               	movwf	0
  3194     0505  3001               	movlw	1
  3195     0506  00FF               	movwf	127
  3196     0507  087F               	movf	127,w
  3197     0508  07B2               	addwf	sprintf@sp^(0+128),f
  3198                           
  3199                           ;doprnt.c: 1263: prec--;
  3200     0509  30FF               	movlw	255
  3201     050A  07A6               	addwf	sprintf@prec^(0+128),f
  3202     050B  1803               	skipnc
  3203     050C  0AA7               	incf	(sprintf@prec+1)^(0+128),f
  3204     050D  30FF               	movlw	255
  3205     050E  07A7               	addwf	(sprintf@prec+1)^(0+128),f
  3206     050F                     l2626:
  3207     050F  0826               	movf	sprintf@prec^(0+128),w
  3208     0510  0427               	iorwf	(sprintf@prec+1)^(0+128),w
  3209     0511  1903               	btfsc	3,2
  3210     0512  2841               	goto	l2634
  3211     0513  2D00               	goto	l2620
  3212     0514                     l2628:
  3213                           
  3214                           ;doprnt.c: 1272: };doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3215     0514  1683               	bsf	3,5	;RP0=1, select bank1
  3216     0515  0824               	movf	sprintf@flag^(0+128),w
  3217     0516  3903               	andlw	3
  3218     0517  1903               	btfsc	3,2
  3219     0518  2841               	goto	l2634
  3220                           
  3221                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3222     0519  0832               	movf	sprintf@sp^(0+128),w
  3223     051A  0084               	movwf	4
  3224     051B  302D               	movlw	45
  3225     051C                     L4:
  3226     051C  1383               	bcf	3,7	;select IRP bank0
  3227     051D  0080               	movwf	0
  3228     051E  3001               	movlw	1
  3229     051F  00FF               	movwf	127
  3230     0520  087F               	movf	127,w
  3231     0521  07B2               	addwf	sprintf@sp^(0+128),f
  3232     0522  2841               	goto	l2634
  3233     0523                     l2636:
  3234                           
  3235                           ;doprnt.c: 1564: *sp = 0;
  3236     0523  0832               	movf	sprintf@sp^(0+128),w
  3237     0524  0084               	movwf	4
  3238     0525  1383               	bcf	3,7	;select IRP bank0
  3239     0526  0180               	clrf	0
  3240     0527  0008               	return
  3241     0528                     __end_of_sprintf:
  3242                           
  3243                           	psect	text6
  3244     0528                     __ptext6:	
  3245 ;; *************** function _scale *****************
  3246 ;; Defined at:
  3247 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  scl             1    wreg     char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  scl             1   38[BANK0 ] char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  3   32[BANK0 ] char 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 300/100
  3258 ;;		On exit  : 300/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       3       0       0       0
  3262 ;;      Locals:         0       4       0       0       0
  3263 ;;      Temps:          0       0       0       0       0
  3264 ;;      Totals:         0       7       0       0       0
  3265 ;;Total ram usage:        7 bytes
  3266 ;; Hardware stack levels used: 1
  3267 ;; Hardware stack levels required when called: 3
  3268 ;; This function calls:
  3269 ;;		___awdiv
  3270 ;;		___awmod
  3271 ;;		___bmul
  3272 ;;		___ftmul
  3273 ;; This function is called by:
  3274 ;;		_sprintf
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278     0528                     _scale:	
  3279                           ;psect for function _scale
  3280                           
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3284                           ;scale@scl stored from wreg
  3285     0528  1283               	bcf	3,5	;RP0=0, select bank0
  3286     0529  00C6               	movwf	scale@scl
  3287                           
  3288                           ;doprnt.c: 436: if(scl < 0) {
  3289     052A  1FC6               	btfss	scale@scl,7
  3290     052B  2E57               	goto	l2138
  3291                           
  3292                           ;doprnt.c: 437: scl = -scl;
  3293     052C  09C6               	comf	scale@scl,f
  3294     052D  0AC6               	incf	scale@scl,f
  3295                           
  3296                           ;doprnt.c: 438: if(scl>=110)
  3297     052E  0846               	movf	scale@scl,w
  3298     052F  3A80               	xorlw	128
  3299     0530  3E12               	addlw	-238
  3300     0531  1C03               	skipc
  3301     0532  2DD9               	goto	l2128
  3302                           
  3303                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3304     0533  3003               	movlw	3
  3305     0534  00AE               	movwf	___bmul@multiplicand
  3306     0535  0846               	movf	scale@scl,w
  3307     0536  00A2               	movwf	___awmod@dividend
  3308     0537  01A3               	clrf	___awmod@dividend+1
  3309     0538  1BA2               	btfsc	___awmod@dividend,7
  3310     0539  03A3               	decf	___awmod@dividend+1,f
  3311     053A  3064               	movlw	100
  3312     053B  00A0               	movwf	___awmod@divisor
  3313     053C  3000               	movlw	0
  3314     053D  00A1               	movwf	___awmod@divisor+1
  3315     053E  120A  158A  2113  120A  118A  	fcall	___awmod
  3316     0543  0821               	movf	?___awmod+1,w
  3317     0544  00A9               	movwf	___awdiv@dividend+1
  3318     0545  0820               	movf	?___awmod,w
  3319     0546  00A8               	movwf	___awdiv@dividend
  3320     0547  300A               	movlw	10
  3321     0548  00A6               	movwf	___awdiv@divisor
  3322     0549  3000               	movlw	0
  3323     054A  00A7               	movwf	___awdiv@divisor+1
  3324     054B  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3325     0550  0826               	movf	?___awdiv,w
  3326     0551  160A  118A  26D8  120A  118A  	fcall	___bmul
  3327     0556  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3328     0557  0084               	movwf	4
  3329     0558  120A  158A  2000  120A  118A  	fcall	stringdir
  3330     055D  00B1               	movwf	___ftmul@f1
  3331     055E  120A  158A  2000  120A  118A  	fcall	stringdir
  3332     0563  00B2               	movwf	___ftmul@f1+1
  3333     0564  120A  158A  2000  120A  118A  	fcall	stringdir
  3334     0569  00B3               	movwf	___ftmul@f1+2
  3335     056A  3003               	movlw	3
  3336     056B  00AE               	movwf	___bmul@multiplicand
  3337     056C  0846               	movf	scale@scl,w
  3338     056D  00A8               	movwf	___awdiv@dividend
  3339     056E  01A9               	clrf	___awdiv@dividend+1
  3340     056F  1BA8               	btfsc	___awdiv@dividend,7
  3341     0570  03A9               	decf	___awdiv@dividend+1,f
  3342     0571  3064               	movlw	100
  3343     0572  00A6               	movwf	___awdiv@divisor
  3344     0573  3000               	movlw	0
  3345     0574  00A7               	movwf	___awdiv@divisor+1
  3346     0575  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3347     057A  0826               	movf	?___awdiv,w
  3348     057B  160A  118A  26D8  120A  118A  	fcall	___bmul
  3349     0580  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3350     0581  0084               	movwf	4
  3351     0582  120A  158A  2000  120A  118A  	fcall	stringdir
  3352     0587  00B4               	movwf	___ftmul@f2
  3353     0588  120A  158A  2000  120A  118A  	fcall	stringdir
  3354     058D  00B5               	movwf	___ftmul@f2+1
  3355     058E  120A  158A  2000  120A  118A  	fcall	stringdir
  3356     0593  00B6               	movwf	___ftmul@f2+2
  3357     0594  120A  158A  240E  120A  118A  	fcall	___ftmul
  3358     0599  0831               	movf	?___ftmul,w
  3359     059A  00C3               	movwf	_scale$1260
  3360     059B  0832               	movf	?___ftmul+1,w
  3361     059C  00C4               	movwf	_scale$1260+1
  3362     059D  0833               	movf	?___ftmul+2,w
  3363     059E  00C5               	movwf	_scale$1260+2
  3364                           
  3365                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3366     059F  3003               	movlw	3
  3367     05A0  00AE               	movwf	___bmul@multiplicand
  3368     05A1  0846               	movf	scale@scl,w
  3369     05A2  00A2               	movwf	___awmod@dividend
  3370     05A3  01A3               	clrf	___awmod@dividend+1
  3371     05A4  1BA2               	btfsc	___awmod@dividend,7
  3372     05A5  03A3               	decf	___awmod@dividend+1,f
  3373     05A6  300A               	movlw	10
  3374     05A7  00A0               	movwf	___awmod@divisor
  3375     05A8  3000               	movlw	0
  3376     05A9  00A1               	movwf	___awmod@divisor+1
  3377     05AA  120A  158A  2113  120A  118A  	fcall	___awmod
  3378     05AF  0820               	movf	?___awmod,w
  3379     05B0  160A  118A  26D8  120A  118A  	fcall	___bmul
  3380     05B5  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3381     05B6  0084               	movwf	4
  3382     05B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3383     05BC  00B1               	movwf	___ftmul@f1
  3384     05BD  120A  158A  2000  120A  118A  	fcall	stringdir
  3385     05C2  00B2               	movwf	___ftmul@f1+1
  3386     05C3  120A  158A  2000  120A  118A  	fcall	stringdir
  3387     05C8  00B3               	movwf	___ftmul@f1+2
  3388     05C9  0843               	movf	_scale$1260,w
  3389     05CA  00B4               	movwf	___ftmul@f2
  3390     05CB  0844               	movf	_scale$1260+1,w
  3391     05CC  00B5               	movwf	___ftmul@f2+1
  3392     05CD  0845               	movf	_scale$1260+2,w
  3393     05CE  00B6               	movwf	___ftmul@f2+2
  3394     05CF  120A  158A  240E   	fcall	___ftmul
  3395     05D2  0831               	movf	?___ftmul,w
  3396     05D3  00C0               	movwf	?_scale
  3397     05D4  0832               	movf	?___ftmul+1,w
  3398     05D5  00C1               	movwf	?_scale+1
  3399     05D6  0833               	movf	?___ftmul+2,w
  3400     05D7  00C2               	movwf	?_scale+2
  3401     05D8  0008               	return
  3402     05D9                     l2128:
  3403                           
  3404                           ;doprnt.c: 440: else if(scl > 10)
  3405     05D9  0846               	movf	scale@scl,w
  3406     05DA  3A80               	xorlw	128
  3407     05DB  3E75               	addlw	-139
  3408     05DC  1C03               	skipc
  3409     05DD  2E3C               	goto	l2134
  3410                           
  3411                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3412     05DE  3003               	movlw	3
  3413     05DF  00AE               	movwf	___bmul@multiplicand
  3414     05E0  0846               	movf	scale@scl,w
  3415     05E1  00A2               	movwf	___awmod@dividend
  3416     05E2  01A3               	clrf	___awmod@dividend+1
  3417     05E3  1BA2               	btfsc	___awmod@dividend,7
  3418     05E4  03A3               	decf	___awmod@dividend+1,f
  3419     05E5  300A               	movlw	10
  3420     05E6  00A0               	movwf	___awmod@divisor
  3421     05E7  3000               	movlw	0
  3422     05E8  00A1               	movwf	___awmod@divisor+1
  3423     05E9  120A  158A  2113  120A  118A  	fcall	___awmod
  3424     05EE  0820               	movf	?___awmod,w
  3425     05EF  160A  118A  26D8  120A  118A  	fcall	___bmul
  3426     05F4  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3427     05F5  0084               	movwf	4
  3428     05F6  120A  158A  2000  120A  118A  	fcall	stringdir
  3429     05FB  00B1               	movwf	___ftmul@f1
  3430     05FC  120A  158A  2000  120A  118A  	fcall	stringdir
  3431     0601  00B2               	movwf	___ftmul@f1+1
  3432     0602  120A  158A  2000  120A  118A  	fcall	stringdir
  3433     0607  00B3               	movwf	___ftmul@f1+2
  3434     0608  3003               	movlw	3
  3435     0609  00AE               	movwf	___bmul@multiplicand
  3436     060A  0846               	movf	scale@scl,w
  3437     060B  00A8               	movwf	___awdiv@dividend
  3438     060C  01A9               	clrf	___awdiv@dividend+1
  3439     060D  1BA8               	btfsc	___awdiv@dividend,7
  3440     060E  03A9               	decf	___awdiv@dividend+1,f
  3441     060F  300A               	movlw	10
  3442     0610  00A6               	movwf	___awdiv@divisor
  3443     0611  3000               	movlw	0
  3444     0612  00A7               	movwf	___awdiv@divisor+1
  3445     0613  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3446     0618  0826               	movf	?___awdiv,w
  3447     0619  160A  118A  26D8  120A  118A  	fcall	___bmul
  3448     061E  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3449     061F  0084               	movwf	4
  3450     0620  120A  158A  2000  120A  118A  	fcall	stringdir
  3451     0625  00B4               	movwf	___ftmul@f2
  3452     0626  120A  158A  2000  120A  118A  	fcall	stringdir
  3453     062B  00B5               	movwf	___ftmul@f2+1
  3454     062C  120A  158A  2000  120A  118A  	fcall	stringdir
  3455     0631  00B6               	movwf	___ftmul@f2+2
  3456     0632  120A  158A  240E   	fcall	___ftmul
  3457     0635  0831               	movf	?___ftmul,w
  3458     0636  00C0               	movwf	?_scale
  3459     0637  0832               	movf	?___ftmul+1,w
  3460     0638  00C1               	movwf	?_scale+1
  3461     0639  0833               	movf	?___ftmul+2,w
  3462     063A  00C2               	movwf	?_scale+2
  3463     063B  0008               	return
  3464     063C                     l2134:
  3465                           
  3466                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3467     063C  3003               	movlw	3
  3468     063D  00AE               	movwf	___bmul@multiplicand
  3469     063E  0846               	movf	scale@scl,w
  3470     063F  160A  118A  26D8  120A  118A  	fcall	___bmul
  3471     0644  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3472     0645  0084               	movwf	4
  3473     0646  120A  158A  2000  120A  118A  	fcall	stringdir
  3474     064B  00C0               	movwf	?_scale
  3475     064C  120A  158A  2000  120A  118A  	fcall	stringdir
  3476     0651  00C1               	movwf	?_scale+1
  3477     0652  120A  158A  2000   	fcall	stringdir
  3478     0655  00C2               	movwf	?_scale+2
  3479     0656  0008               	return
  3480     0657                     l2138:
  3481                           
  3482                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3483     0657  0846               	movf	scale@scl,w
  3484     0658  3A80               	xorlw	128
  3485     0659  3E12               	addlw	-238
  3486     065A  1C03               	skipc
  3487     065B  2F02               	goto	l2146
  3488                           
  3489                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3490     065C  3003               	movlw	3
  3491     065D  00AE               	movwf	___bmul@multiplicand
  3492     065E  0846               	movf	scale@scl,w
  3493     065F  00A2               	movwf	___awmod@dividend
  3494     0660  01A3               	clrf	___awmod@dividend+1
  3495     0661  1BA2               	btfsc	___awmod@dividend,7
  3496     0662  03A3               	decf	___awmod@dividend+1,f
  3497     0663  3064               	movlw	100
  3498     0664  00A0               	movwf	___awmod@divisor
  3499     0665  3000               	movlw	0
  3500     0666  00A1               	movwf	___awmod@divisor+1
  3501     0667  120A  158A  2113  120A  118A  	fcall	___awmod
  3502     066C  0821               	movf	?___awmod+1,w
  3503     066D  00A9               	movwf	___awdiv@dividend+1
  3504     066E  0820               	movf	?___awmod,w
  3505     066F  00A8               	movwf	___awdiv@dividend
  3506     0670  300A               	movlw	10
  3507     0671  00A6               	movwf	___awdiv@divisor
  3508     0672  3000               	movlw	0
  3509     0673  00A7               	movwf	___awdiv@divisor+1
  3510     0674  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3511     0679  0826               	movf	?___awdiv,w
  3512     067A  160A  118A  26D8  120A  118A  	fcall	___bmul
  3513     067F  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3514     0680  0084               	movwf	4
  3515     0681  120A  158A  2000  120A  118A  	fcall	stringdir
  3516     0686  00B1               	movwf	___ftmul@f1
  3517     0687  120A  158A  2000  120A  118A  	fcall	stringdir
  3518     068C  00B2               	movwf	___ftmul@f1+1
  3519     068D  120A  158A  2000  120A  118A  	fcall	stringdir
  3520     0692  00B3               	movwf	___ftmul@f1+2
  3521     0693  3003               	movlw	3
  3522     0694  00AE               	movwf	___bmul@multiplicand
  3523     0695  0846               	movf	scale@scl,w
  3524     0696  00A8               	movwf	___awdiv@dividend
  3525     0697  01A9               	clrf	___awdiv@dividend+1
  3526     0698  1BA8               	btfsc	___awdiv@dividend,7
  3527     0699  03A9               	decf	___awdiv@dividend+1,f
  3528     069A  3064               	movlw	100
  3529     069B  00A6               	movwf	___awdiv@divisor
  3530     069C  3000               	movlw	0
  3531     069D  00A7               	movwf	___awdiv@divisor+1
  3532     069E  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3533     06A3  0826               	movf	?___awdiv,w
  3534     06A4  160A  118A  26D8  120A  118A  	fcall	___bmul
  3535     06A9  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  3536     06AA  0084               	movwf	4
  3537     06AB  120A  158A  2000  120A  118A  	fcall	stringdir
  3538     06B0  00B4               	movwf	___ftmul@f2
  3539     06B1  120A  158A  2000  120A  118A  	fcall	stringdir
  3540     06B6  00B5               	movwf	___ftmul@f2+1
  3541     06B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3542     06BC  00B6               	movwf	___ftmul@f2+2
  3543     06BD  120A  158A  240E  120A  118A  	fcall	___ftmul
  3544     06C2  0831               	movf	?___ftmul,w
  3545     06C3  00C3               	movwf	_scale$1260
  3546     06C4  0832               	movf	?___ftmul+1,w
  3547     06C5  00C4               	movwf	_scale$1260+1
  3548     06C6  0833               	movf	?___ftmul+2,w
  3549     06C7  00C5               	movwf	_scale$1260+2
  3550                           
  3551                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3552     06C8  3003               	movlw	3
  3553     06C9  00AE               	movwf	___bmul@multiplicand
  3554     06CA  0846               	movf	scale@scl,w
  3555     06CB  00A2               	movwf	___awmod@dividend
  3556     06CC  01A3               	clrf	___awmod@dividend+1
  3557     06CD  1BA2               	btfsc	___awmod@dividend,7
  3558     06CE  03A3               	decf	___awmod@dividend+1,f
  3559     06CF  300A               	movlw	10
  3560     06D0  00A0               	movwf	___awmod@divisor
  3561     06D1  3000               	movlw	0
  3562     06D2  00A1               	movwf	___awmod@divisor+1
  3563     06D3  120A  158A  2113  120A  118A  	fcall	___awmod
  3564     06D8  0820               	movf	?___awmod,w
  3565     06D9  160A  118A  26D8  120A  118A  	fcall	___bmul
  3566     06DE  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3567     06DF  0084               	movwf	4
  3568     06E0  120A  158A  2000  120A  118A  	fcall	stringdir
  3569     06E5  00B1               	movwf	___ftmul@f1
  3570     06E6  120A  158A  2000  120A  118A  	fcall	stringdir
  3571     06EB  00B2               	movwf	___ftmul@f1+1
  3572     06EC  120A  158A  2000  120A  118A  	fcall	stringdir
  3573     06F1  00B3               	movwf	___ftmul@f1+2
  3574     06F2  0843               	movf	_scale$1260,w
  3575     06F3  00B4               	movwf	___ftmul@f2
  3576     06F4  0844               	movf	_scale$1260+1,w
  3577     06F5  00B5               	movwf	___ftmul@f2+1
  3578     06F6  0845               	movf	_scale$1260+2,w
  3579     06F7  00B6               	movwf	___ftmul@f2+2
  3580     06F8  120A  158A  240E   	fcall	___ftmul
  3581     06FB  0831               	movf	?___ftmul,w
  3582     06FC  00C0               	movwf	?_scale
  3583     06FD  0832               	movf	?___ftmul+1,w
  3584     06FE  00C1               	movwf	?_scale+1
  3585     06FF  0833               	movf	?___ftmul+2,w
  3586     0700  00C2               	movwf	?_scale+2
  3587     0701  0008               	return
  3588     0702                     l2146:
  3589                           
  3590                           ;doprnt.c: 446: else if(scl > 10)
  3591     0702  0846               	movf	scale@scl,w
  3592     0703  3A80               	xorlw	128
  3593     0704  3E75               	addlw	-139
  3594     0705  1C03               	skipc
  3595     0706  2F65               	goto	l2152
  3596                           
  3597                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3598     0707  3003               	movlw	3
  3599     0708  00AE               	movwf	___bmul@multiplicand
  3600     0709  0846               	movf	scale@scl,w
  3601     070A  00A2               	movwf	___awmod@dividend
  3602     070B  01A3               	clrf	___awmod@dividend+1
  3603     070C  1BA2               	btfsc	___awmod@dividend,7
  3604     070D  03A3               	decf	___awmod@dividend+1,f
  3605     070E  300A               	movlw	10
  3606     070F  00A0               	movwf	___awmod@divisor
  3607     0710  3000               	movlw	0
  3608     0711  00A1               	movwf	___awmod@divisor+1
  3609     0712  120A  158A  2113  120A  118A  	fcall	___awmod
  3610     0717  0820               	movf	?___awmod,w
  3611     0718  160A  118A  26D8  120A  118A  	fcall	___bmul
  3612     071D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3613     071E  0084               	movwf	4
  3614     071F  120A  158A  2000  120A  118A  	fcall	stringdir
  3615     0724  00B1               	movwf	___ftmul@f1
  3616     0725  120A  158A  2000  120A  118A  	fcall	stringdir
  3617     072A  00B2               	movwf	___ftmul@f1+1
  3618     072B  120A  158A  2000  120A  118A  	fcall	stringdir
  3619     0730  00B3               	movwf	___ftmul@f1+2
  3620     0731  3003               	movlw	3
  3621     0732  00AE               	movwf	___bmul@multiplicand
  3622     0733  0846               	movf	scale@scl,w
  3623     0734  00A8               	movwf	___awdiv@dividend
  3624     0735  01A9               	clrf	___awdiv@dividend+1
  3625     0736  1BA8               	btfsc	___awdiv@dividend,7
  3626     0737  03A9               	decf	___awdiv@dividend+1,f
  3627     0738  300A               	movlw	10
  3628     0739  00A6               	movwf	___awdiv@divisor
  3629     073A  3000               	movlw	0
  3630     073B  00A7               	movwf	___awdiv@divisor+1
  3631     073C  120A  158A  21AA  120A  118A  	fcall	___awdiv
  3632     0741  0826               	movf	?___awdiv,w
  3633     0742  160A  118A  26D8  120A  118A  	fcall	___bmul
  3634     0747  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3635     0748  0084               	movwf	4
  3636     0749  120A  158A  2000  120A  118A  	fcall	stringdir
  3637     074E  00B4               	movwf	___ftmul@f2
  3638     074F  120A  158A  2000  120A  118A  	fcall	stringdir
  3639     0754  00B5               	movwf	___ftmul@f2+1
  3640     0755  120A  158A  2000  120A  118A  	fcall	stringdir
  3641     075A  00B6               	movwf	___ftmul@f2+2
  3642     075B  120A  158A  240E   	fcall	___ftmul
  3643     075E  0831               	movf	?___ftmul,w
  3644     075F  00C0               	movwf	?_scale
  3645     0760  0832               	movf	?___ftmul+1,w
  3646     0761  00C1               	movwf	?_scale+1
  3647     0762  0833               	movf	?___ftmul+2,w
  3648     0763  00C2               	movwf	?_scale+2
  3649     0764  0008               	return
  3650     0765                     l2152:
  3651                           
  3652                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3653     0765  3003               	movlw	3
  3654     0766  00AE               	movwf	___bmul@multiplicand
  3655     0767  0846               	movf	scale@scl,w
  3656     0768  160A  118A  26D8  120A  118A  	fcall	___bmul
  3657     076D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3658     076E  0084               	movwf	4
  3659     076F  120A  158A  2000  120A  118A  	fcall	stringdir
  3660     0774  00C0               	movwf	?_scale
  3661     0775  120A  158A  2000  120A  118A  	fcall	stringdir
  3662     077A  00C1               	movwf	?_scale+1
  3663     077B  120A  158A  2000   	fcall	stringdir
  3664     077E  00C2               	movwf	?_scale+2
  3665     077F  0008               	return
  3666     0780                     __end_of_scale:
  3667                           
  3668                           	psect	text7
  3669     0913                     __ptext7:	
  3670 ;; *************** function ___awmod *****************
  3671 ;; Defined at:
  3672 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  divisor         2    0[BANK0 ] int 
  3675 ;;  dividend        2    2[BANK0 ] int 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  sign            1    5[BANK0 ] unsigned char 
  3678 ;;  counter         1    4[BANK0 ] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  2    0[BANK0 ] int 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, status,0, btemp+1
  3683 ;; Tracked objects:
  3684 ;;		On entry : 300/0
  3685 ;;		On exit  : 300/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3688 ;;      Params:         0       4       0       0       0
  3689 ;;      Locals:         0       2       0       0       0
  3690 ;;      Temps:          0       0       0       0       0
  3691 ;;      Totals:         0       6       0       0       0
  3692 ;;Total ram usage:        6 bytes
  3693 ;; Hardware stack levels used: 1
  3694 ;; Hardware stack levels required when called: 1
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_scale
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702     0913                     ___awmod:	
  3703                           ;psect for function ___awmod
  3704                           
  3705                           
  3706                           ;incstack = 0
  3707                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  3708     0913  01A5               	clrf	___awmod@sign
  3709     0914  1FA3               	btfss	___awmod@dividend+1,7
  3710     0915  291D               	goto	l1884
  3711     0916  09A2               	comf	___awmod@dividend,f
  3712     0917  09A3               	comf	___awmod@dividend+1,f
  3713     0918  0AA2               	incf	___awmod@dividend,f
  3714     0919  1903               	skipnz
  3715     091A  0AA3               	incf	___awmod@dividend+1,f
  3716     091B  01A5               	clrf	___awmod@sign
  3717     091C  0AA5               	incf	___awmod@sign,f
  3718     091D                     l1884:
  3719     091D  1FA1               	btfss	___awmod@divisor+1,7
  3720     091E  2924               	goto	l1888
  3721     091F  09A0               	comf	___awmod@divisor,f
  3722     0920  09A1               	comf	___awmod@divisor+1,f
  3723     0921  0AA0               	incf	___awmod@divisor,f
  3724     0922  1903               	skipnz
  3725     0923  0AA1               	incf	___awmod@divisor+1,f
  3726     0924                     l1888:
  3727     0924  0820               	movf	___awmod@divisor,w
  3728     0925  0421               	iorwf	___awmod@divisor+1,w
  3729     0926  1903               	btfsc	3,2
  3730     0927  2951               	goto	l1906
  3731     0928  01A4               	clrf	___awmod@counter
  3732     0929  0AA4               	incf	___awmod@counter,f
  3733     092A                     l1896:
  3734     092A  1BA1               	btfsc	___awmod@divisor+1,7
  3735     092B  2938               	goto	l1898
  3736     092C  3001               	movlw	1
  3737     092D                     u2045:
  3738     092D  1003               	clrc
  3739     092E  0DA0               	rlf	___awmod@divisor,f
  3740     092F  0DA1               	rlf	___awmod@divisor+1,f
  3741     0930  3EFF               	addlw	-1
  3742     0931  1D03               	skipz
  3743     0932  292D               	goto	u2045
  3744     0933  3001               	movlw	1
  3745     0934  00FF               	movwf	127
  3746     0935  087F               	movf	127,w
  3747     0936  07A4               	addwf	___awmod@counter,f
  3748     0937  292A               	goto	l1896
  3749     0938                     l1898:
  3750     0938  0821               	movf	___awmod@divisor+1,w
  3751     0939  0223               	subwf	___awmod@dividend+1,w
  3752     093A  1D03               	skipz
  3753     093B  293E               	goto	u2065
  3754     093C  0820               	movf	___awmod@divisor,w
  3755     093D  0222               	subwf	___awmod@dividend,w
  3756     093E                     u2065:
  3757     093E  1C03               	skipc
  3758     093F  2946               	goto	l1902
  3759     0940  0820               	movf	___awmod@divisor,w
  3760     0941  02A2               	subwf	___awmod@dividend,f
  3761     0942  0821               	movf	___awmod@divisor+1,w
  3762     0943  1C03               	skipc
  3763     0944  03A3               	decf	___awmod@dividend+1,f
  3764     0945  02A3               	subwf	___awmod@dividend+1,f
  3765     0946                     l1902:
  3766     0946  3001               	movlw	1
  3767     0947                     u2075:
  3768     0947  1003               	clrc
  3769     0948  0CA1               	rrf	___awmod@divisor+1,f
  3770     0949  0CA0               	rrf	___awmod@divisor,f
  3771     094A  3EFF               	addlw	-1
  3772     094B  1D03               	skipz
  3773     094C  2947               	goto	u2075
  3774     094D  3001               	movlw	1
  3775     094E  02A4               	subwf	___awmod@counter,f
  3776     094F  1D03               	btfss	3,2
  3777     0950  2938               	goto	l1898
  3778     0951                     l1906:
  3779     0951  0825               	movf	___awmod@sign,w
  3780     0952  1903               	btfsc	3,2
  3781     0953  2959               	goto	l1910
  3782     0954  09A2               	comf	___awmod@dividend,f
  3783     0955  09A3               	comf	___awmod@dividend+1,f
  3784     0956  0AA2               	incf	___awmod@dividend,f
  3785     0957  1903               	skipnz
  3786     0958  0AA3               	incf	___awmod@dividend+1,f
  3787     0959                     l1910:
  3788     0959  0823               	movf	___awmod@dividend+1,w
  3789     095A  00A1               	movwf	?___awmod+1
  3790     095B  0822               	movf	___awmod@dividend,w
  3791     095C  00A0               	movwf	?___awmod
  3792     095D  0008               	return
  3793     095E                     __end_of___awmod:
  3794                           
  3795                           	psect	text8
  3796     09AA                     __ptext8:	
  3797 ;; *************** function ___awdiv *****************
  3798 ;; Defined at:
  3799 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  divisor         2    6[BANK0 ] int 
  3802 ;;  dividend        2    8[BANK0 ] int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  quotient        2   12[BANK0 ] int 
  3805 ;;  sign            1   11[BANK0 ] unsigned char 
  3806 ;;  counter         1   10[BANK0 ] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  2    6[BANK0 ] int 
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0, btemp+1
  3811 ;; Tracked objects:
  3812 ;;		On entry : 300/0
  3813 ;;		On exit  : 300/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3816 ;;      Params:         0       4       0       0       0
  3817 ;;      Locals:         0       4       0       0       0
  3818 ;;      Temps:          0       0       0       0       0
  3819 ;;      Totals:         0       8       0       0       0
  3820 ;;Total ram usage:        8 bytes
  3821 ;; Hardware stack levels used: 1
  3822 ;; Hardware stack levels required when called: 1
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_scale
  3827 ;;		_sprintf
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831     09AA                     ___awdiv:	
  3832                           ;psect for function ___awdiv
  3833                           
  3834                           
  3835                           ;incstack = 0
  3836                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3837     09AA  01AB               	clrf	___awdiv@sign
  3838     09AB  1FA7               	btfss	___awdiv@divisor+1,7
  3839     09AC  29B4               	goto	l1840
  3840     09AD  09A6               	comf	___awdiv@divisor,f
  3841     09AE  09A7               	comf	___awdiv@divisor+1,f
  3842     09AF  0AA6               	incf	___awdiv@divisor,f
  3843     09B0  1903               	skipnz
  3844     09B1  0AA7               	incf	___awdiv@divisor+1,f
  3845     09B2  01AB               	clrf	___awdiv@sign
  3846     09B3  0AAB               	incf	___awdiv@sign,f
  3847     09B4                     l1840:
  3848     09B4  1FA9               	btfss	___awdiv@dividend+1,7
  3849     09B5  29BF               	goto	l1846
  3850     09B6  09A8               	comf	___awdiv@dividend,f
  3851     09B7  09A9               	comf	___awdiv@dividend+1,f
  3852     09B8  0AA8               	incf	___awdiv@dividend,f
  3853     09B9  1903               	skipnz
  3854     09BA  0AA9               	incf	___awdiv@dividend+1,f
  3855     09BB  3001               	movlw	1
  3856     09BC  00FF               	movwf	127
  3857     09BD  087F               	movf	127,w
  3858     09BE  06AB               	xorwf	___awdiv@sign,f
  3859     09BF                     l1846:
  3860     09BF  01AC               	clrf	___awdiv@quotient
  3861     09C0  01AD               	clrf	___awdiv@quotient+1
  3862     09C1  0826               	movf	___awdiv@divisor,w
  3863     09C2  0427               	iorwf	___awdiv@divisor+1,w
  3864     09C3  1903               	btfsc	3,2
  3865     09C4  29F6               	goto	l1868
  3866     09C5  01AA               	clrf	___awdiv@counter
  3867     09C6  0AAA               	incf	___awdiv@counter,f
  3868     09C7                     l1856:
  3869     09C7  1BA7               	btfsc	___awdiv@divisor+1,7
  3870     09C8  29D5               	goto	l1858
  3871     09C9  3001               	movlw	1
  3872     09CA                     u1945:
  3873     09CA  1003               	clrc
  3874     09CB  0DA6               	rlf	___awdiv@divisor,f
  3875     09CC  0DA7               	rlf	___awdiv@divisor+1,f
  3876     09CD  3EFF               	addlw	-1
  3877     09CE  1D03               	skipz
  3878     09CF  29CA               	goto	u1945
  3879     09D0  3001               	movlw	1
  3880     09D1  00FF               	movwf	127
  3881     09D2  087F               	movf	127,w
  3882     09D3  07AA               	addwf	___awdiv@counter,f
  3883     09D4  29C7               	goto	l1856
  3884     09D5                     l1858:
  3885     09D5  3001               	movlw	1
  3886     09D6                     u1965:
  3887     09D6  1003               	clrc
  3888     09D7  0DAC               	rlf	___awdiv@quotient,f
  3889     09D8  0DAD               	rlf	___awdiv@quotient+1,f
  3890     09D9  3EFF               	addlw	-1
  3891     09DA  1D03               	skipz
  3892     09DB  29D6               	goto	u1965
  3893     09DC  0827               	movf	___awdiv@divisor+1,w
  3894     09DD  0229               	subwf	___awdiv@dividend+1,w
  3895     09DE  1D03               	skipz
  3896     09DF  29E2               	goto	u1975
  3897     09E0  0826               	movf	___awdiv@divisor,w
  3898     09E1  0228               	subwf	___awdiv@dividend,w
  3899     09E2                     u1975:
  3900     09E2  1C03               	skipc
  3901     09E3  29EB               	goto	l1864
  3902     09E4  0826               	movf	___awdiv@divisor,w
  3903     09E5  02A8               	subwf	___awdiv@dividend,f
  3904     09E6  0827               	movf	___awdiv@divisor+1,w
  3905     09E7  1C03               	skipc
  3906     09E8  03A9               	decf	___awdiv@dividend+1,f
  3907     09E9  02A9               	subwf	___awdiv@dividend+1,f
  3908     09EA  142C               	bsf	___awdiv@quotient,0
  3909     09EB                     l1864:
  3910     09EB  3001               	movlw	1
  3911     09EC                     u1985:
  3912     09EC  1003               	clrc
  3913     09ED  0CA7               	rrf	___awdiv@divisor+1,f
  3914     09EE  0CA6               	rrf	___awdiv@divisor,f
  3915     09EF  3EFF               	addlw	-1
  3916     09F0  1D03               	skipz
  3917     09F1  29EC               	goto	u1985
  3918     09F2  3001               	movlw	1
  3919     09F3  02AA               	subwf	___awdiv@counter,f
  3920     09F4  1D03               	btfss	3,2
  3921     09F5  29D5               	goto	l1858
  3922     09F6                     l1868:
  3923     09F6  082B               	movf	___awdiv@sign,w
  3924     09F7  1903               	btfsc	3,2
  3925     09F8  29FE               	goto	l1872
  3926     09F9  09AC               	comf	___awdiv@quotient,f
  3927     09FA  09AD               	comf	___awdiv@quotient+1,f
  3928     09FB  0AAC               	incf	___awdiv@quotient,f
  3929     09FC  1903               	skipnz
  3930     09FD  0AAD               	incf	___awdiv@quotient+1,f
  3931     09FE                     l1872:
  3932     09FE  082D               	movf	___awdiv@quotient+1,w
  3933     09FF  00A7               	movwf	?___awdiv+1
  3934     0A00  082C               	movf	___awdiv@quotient,w
  3935     0A01  00A6               	movwf	?___awdiv
  3936     0A02  0008               	return
  3937     0A03                     __end_of___awdiv:
  3938                           
  3939                           	psect	text9
  3940     0EC1                     __ptext9:	
  3941 ;; *************** function _fround *****************
  3942 ;; Defined at:
  3943 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  prec            1    wreg     unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  prec            1   41[BANK0 ] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  3   32[BANK0 ] unsigned char 
  3950 ;; Registers used:
  3951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 200/100
  3954 ;;		On exit  : 300/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3957 ;;      Params:         0       3       0       0       0
  3958 ;;      Locals:         0       7       0       0       0
  3959 ;;      Temps:          0       0       0       0       0
  3960 ;;      Totals:         0      10       0       0       0
  3961 ;;Total ram usage:       10 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 3
  3964 ;; This function calls:
  3965 ;;		___bmul
  3966 ;;		___ftmul
  3967 ;;		___lbdiv
  3968 ;;		___lbmod
  3969 ;; This function is called by:
  3970 ;;		_sprintf
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974     0EC1                     _fround:	
  3975                           ;psect for function _fround
  3976                           
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3980                           ;fround@prec stored from wreg
  3981     0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  3982     0EC2  00C9               	movwf	fround@prec
  3983                           
  3984                           ;doprnt.c: 421: if(prec>=110)
  3985     0EC3  306E               	movlw	110
  3986     0EC4  0249               	subwf	fround@prec,w
  3987     0EC5  1C03               	skipc
  3988     0EC6  2F69               	goto	l2104
  3989                           
  3990                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3991     0EC7  3003               	movlw	3
  3992     0EC8  00AE               	movwf	___bmul@multiplicand
  3993     0EC9  300A               	movlw	10
  3994     0ECA  00A6               	movwf	___lbdiv@divisor
  3995     0ECB  3064               	movlw	100
  3996     0ECC  00A0               	movwf	___lbmod@divisor
  3997     0ECD  0849               	movf	fround@prec,w
  3998     0ECE  160A  118A  2759  120A  158A  	fcall	___lbmod
  3999     0ED3  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4000     0ED8  160A  118A  26D8  120A  158A  	fcall	___bmul
  4001     0EDD  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4002     0EDE  0084               	movwf	4
  4003     0EDF  120A  158A  2000  120A  158A  	fcall	stringdir
  4004     0EE4  00B1               	movwf	___ftmul@f1
  4005     0EE5  120A  158A  2000  120A  158A  	fcall	stringdir
  4006     0EEA  00B2               	movwf	___ftmul@f1+1
  4007     0EEB  120A  158A  2000  120A  158A  	fcall	stringdir
  4008     0EF0  00B3               	movwf	___ftmul@f1+2
  4009     0EF1  3003               	movlw	3
  4010     0EF2  00AE               	movwf	___bmul@multiplicand
  4011     0EF3  3064               	movlw	100
  4012     0EF4  00A6               	movwf	___lbdiv@divisor
  4013     0EF5  0849               	movf	fround@prec,w
  4014     0EF6  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4015     0EFB  160A  118A  26D8  120A  158A  	fcall	___bmul
  4016     0F00  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  4017     0F01  0084               	movwf	4
  4018     0F02  120A  158A  2000  120A  158A  	fcall	stringdir
  4019     0F07  00B4               	movwf	___ftmul@f2
  4020     0F08  120A  158A  2000  120A  158A  	fcall	stringdir
  4021     0F0D  00B5               	movwf	___ftmul@f2+1
  4022     0F0E  120A  158A  2000  120A  158A  	fcall	stringdir
  4023     0F13  00B6               	movwf	___ftmul@f2+2
  4024     0F14  120A  158A  240E  120A  158A  	fcall	___ftmul
  4025     0F19  0831               	movf	?___ftmul,w
  4026     0F1A  00C6               	movwf	_fround$1258
  4027     0F1B  0832               	movf	?___ftmul+1,w
  4028     0F1C  00C7               	movwf	_fround$1258+1
  4029     0F1D  0833               	movf	?___ftmul+2,w
  4030     0F1E  00C8               	movwf	_fround$1258+2
  4031                           
  4032                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4033     0F1F  3003               	movlw	3
  4034     0F20  00AE               	movwf	___bmul@multiplicand
  4035     0F21  300A               	movlw	10
  4036     0F22  00A0               	movwf	___lbmod@divisor
  4037     0F23  0849               	movf	fround@prec,w
  4038     0F24  160A  118A  2759  120A  158A  	fcall	___lbmod
  4039     0F29  160A  118A  26D8  120A  158A  	fcall	___bmul
  4040     0F2E  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4041     0F2F  0084               	movwf	4
  4042     0F30  120A  158A  2000  120A  158A  	fcall	stringdir
  4043     0F35  00B1               	movwf	___ftmul@f1
  4044     0F36  120A  158A  2000  120A  158A  	fcall	stringdir
  4045     0F3B  00B2               	movwf	___ftmul@f1+1
  4046     0F3C  120A  158A  2000  120A  158A  	fcall	stringdir
  4047     0F41  00B3               	movwf	___ftmul@f1+2
  4048     0F42  0846               	movf	_fround$1258,w
  4049     0F43  00B4               	movwf	___ftmul@f2
  4050     0F44  0847               	movf	_fround$1258+1,w
  4051     0F45  00B5               	movwf	___ftmul@f2+1
  4052     0F46  0848               	movf	_fround$1258+2,w
  4053     0F47  00B6               	movwf	___ftmul@f2+2
  4054     0F48  120A  158A  240E  120A  158A  	fcall	___ftmul
  4055     0F4D  0831               	movf	?___ftmul,w
  4056     0F4E  00C3               	movwf	_fround$1259
  4057     0F4F  0832               	movf	?___ftmul+1,w
  4058     0F50  00C4               	movwf	_fround$1259+1
  4059     0F51  0833               	movf	?___ftmul+2,w
  4060     0F52  00C5               	movwf	_fround$1259+2
  4061                           
  4062                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4063     0F53  3000               	movlw	0
  4064     0F54  00B1               	movwf	___ftmul@f1
  4065     0F55  3000               	movlw	0
  4066     0F56  00B2               	movwf	___ftmul@f1+1
  4067     0F57  303F               	movlw	63
  4068     0F58  00B3               	movwf	___ftmul@f1+2
  4069     0F59  0843               	movf	_fround$1259,w
  4070     0F5A  00B4               	movwf	___ftmul@f2
  4071     0F5B  0844               	movf	_fround$1259+1,w
  4072     0F5C  00B5               	movwf	___ftmul@f2+1
  4073     0F5D  0845               	movf	_fround$1259+2,w
  4074     0F5E  00B6               	movwf	___ftmul@f2+2
  4075     0F5F  120A  158A  240E   	fcall	___ftmul
  4076     0F62  0831               	movf	?___ftmul,w
  4077     0F63  00C0               	movwf	?_fround
  4078     0F64  0832               	movf	?___ftmul+1,w
  4079     0F65  00C1               	movwf	?_fround+1
  4080     0F66  0833               	movf	?___ftmul+2,w
  4081     0F67  00C2               	movwf	?_fround+2
  4082     0F68  0008               	return
  4083     0F69                     l2104:
  4084                           
  4085                           ;doprnt.c: 423: else if(prec > 10)
  4086     0F69  300B               	movlw	11
  4087     0F6A  0249               	subwf	fround@prec,w
  4088     0F6B  1C03               	skipc
  4089     0F6C  2FD4               	goto	l2112
  4090                           
  4091                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4092     0F6D  3003               	movlw	3
  4093     0F6E  00AE               	movwf	___bmul@multiplicand
  4094     0F6F  300A               	movlw	10
  4095     0F70  00A0               	movwf	___lbmod@divisor
  4096     0F71  0849               	movf	fround@prec,w
  4097     0F72  160A  118A  2759  120A  158A  	fcall	___lbmod
  4098     0F77  160A  118A  26D8  120A  158A  	fcall	___bmul
  4099     0F7C  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4100     0F7D  0084               	movwf	4
  4101     0F7E  120A  158A  2000  120A  158A  	fcall	stringdir
  4102     0F83  00B1               	movwf	___ftmul@f1
  4103     0F84  120A  158A  2000  120A  158A  	fcall	stringdir
  4104     0F89  00B2               	movwf	___ftmul@f1+1
  4105     0F8A  120A  158A  2000  120A  158A  	fcall	stringdir
  4106     0F8F  00B3               	movwf	___ftmul@f1+2
  4107     0F90  3003               	movlw	3
  4108     0F91  00AE               	movwf	___bmul@multiplicand
  4109     0F92  300A               	movlw	10
  4110     0F93  00A6               	movwf	___lbdiv@divisor
  4111     0F94  0849               	movf	fround@prec,w
  4112     0F95  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4113     0F9A  160A  118A  26D8  120A  158A  	fcall	___bmul
  4114     0F9F  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4115     0FA0  0084               	movwf	4
  4116     0FA1  120A  158A  2000  120A  158A  	fcall	stringdir
  4117     0FA6  00B4               	movwf	___ftmul@f2
  4118     0FA7  120A  158A  2000  120A  158A  	fcall	stringdir
  4119     0FAC  00B5               	movwf	___ftmul@f2+1
  4120     0FAD  120A  158A  2000  120A  158A  	fcall	stringdir
  4121     0FB2  00B6               	movwf	___ftmul@f2+2
  4122     0FB3  120A  158A  240E  120A  158A  	fcall	___ftmul
  4123     0FB8  0831               	movf	?___ftmul,w
  4124     0FB9  00C6               	movwf	_fround$1258
  4125     0FBA  0832               	movf	?___ftmul+1,w
  4126     0FBB  00C7               	movwf	_fround$1258+1
  4127     0FBC  0833               	movf	?___ftmul+2,w
  4128     0FBD  00C8               	movwf	_fround$1258+2
  4129                           
  4130                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4131     0FBE  3000               	movlw	0
  4132     0FBF  00B1               	movwf	___ftmul@f1
  4133     0FC0  3000               	movlw	0
  4134     0FC1  00B2               	movwf	___ftmul@f1+1
  4135     0FC2  303F               	movlw	63
  4136     0FC3  00B3               	movwf	___ftmul@f1+2
  4137     0FC4  0846               	movf	_fround$1258,w
  4138     0FC5  00B4               	movwf	___ftmul@f2
  4139     0FC6  0847               	movf	_fround$1258+1,w
  4140     0FC7  00B5               	movwf	___ftmul@f2+1
  4141     0FC8  0848               	movf	_fround$1258+2,w
  4142     0FC9  00B6               	movwf	___ftmul@f2+2
  4143     0FCA  120A  158A  240E   	fcall	___ftmul
  4144     0FCD  0831               	movf	?___ftmul,w
  4145     0FCE  00C0               	movwf	?_fround
  4146     0FCF  0832               	movf	?___ftmul+1,w
  4147     0FD0  00C1               	movwf	?_fround+1
  4148     0FD1  0833               	movf	?___ftmul+2,w
  4149     0FD2  00C2               	movwf	?_fround+2
  4150     0FD3  0008               	return
  4151     0FD4                     l2112:
  4152                           
  4153                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4154     0FD4  3000               	movlw	0
  4155     0FD5  00B1               	movwf	___ftmul@f1
  4156     0FD6  3000               	movlw	0
  4157     0FD7  00B2               	movwf	___ftmul@f1+1
  4158     0FD8  303F               	movlw	63
  4159     0FD9  00B3               	movwf	___ftmul@f1+2
  4160     0FDA  3003               	movlw	3
  4161     0FDB  00AE               	movwf	___bmul@multiplicand
  4162     0FDC  0849               	movf	fround@prec,w
  4163     0FDD  160A  118A  26D8  120A  158A  	fcall	___bmul
  4164     0FE2  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4165     0FE3  0084               	movwf	4
  4166     0FE4  120A  158A  2000  120A  158A  	fcall	stringdir
  4167     0FE9  00B4               	movwf	___ftmul@f2
  4168     0FEA  120A  158A  2000  120A  158A  	fcall	stringdir
  4169     0FEF  00B5               	movwf	___ftmul@f2+1
  4170     0FF0  120A  158A  2000  120A  158A  	fcall	stringdir
  4171     0FF5  00B6               	movwf	___ftmul@f2+2
  4172     0FF6  120A  158A  240E   	fcall	___ftmul
  4173     0FF9  0831               	movf	?___ftmul,w
  4174     0FFA  00C0               	movwf	?_fround
  4175     0FFB  0832               	movf	?___ftmul+1,w
  4176     0FFC  00C1               	movwf	?_fround+1
  4177     0FFD  0833               	movf	?___ftmul+2,w
  4178     0FFE  00C2               	movwf	?_fround+2
  4179     0FFF  0008               	return
  4180     1000                     __end_of_fround:
  4181                           
  4182                           	psect	text10
  4183     1759                     __ptext10:	
  4184 ;; *************** function ___lbmod *****************
  4185 ;; Defined at:
  4186 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  dividend        1    wreg     unsigned char 
  4189 ;;  divisor         1    0[BANK0 ] unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  dividend        1    3[BANK0 ] unsigned char 
  4192 ;;  rem             1    5[BANK0 ] unsigned char 
  4193 ;;  counter         1    4[BANK0 ] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      unsigned char 
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0
  4198 ;; Tracked objects:
  4199 ;;		On entry : 300/0
  4200 ;;		On exit  : 300/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4203 ;;      Params:         0       1       0       0       0
  4204 ;;      Locals:         0       3       0       0       0
  4205 ;;      Temps:          0       2       0       0       0
  4206 ;;      Totals:         0       6       0       0       0
  4207 ;;Total ram usage:        6 bytes
  4208 ;; Hardware stack levels used: 1
  4209 ;; Hardware stack levels required when called: 1
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_fround
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217     1759                     ___lbmod:	
  4218                           ;psect for function ___lbmod
  4219                           
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4223                           ;___lbmod@dividend stored from wreg
  4224     1759  00A3               	movwf	___lbmod@dividend
  4225     175A  3008               	movlw	8
  4226     175B  00A4               	movwf	___lbmod@counter
  4227     175C  01A5               	clrf	___lbmod@rem
  4228     175D                     l2074:
  4229     175D  0823               	movf	___lbmod@dividend,w
  4230     175E  00A1               	movwf	??___lbmod
  4231     175F  3007               	movlw	7
  4232     1760                     u2505:
  4233     1760  1003               	clrc
  4234     1761  0CA1               	rrf	??___lbmod,f
  4235     1762  3EFF               	addlw	-1
  4236     1763  1D03               	skipz
  4237     1764  2F60               	goto	u2505
  4238     1765  0825               	movf	___lbmod@rem,w
  4239     1766  00A2               	movwf	??___lbmod+1
  4240     1767  0722               	addwf	??___lbmod+1,w
  4241     1768  0421               	iorwf	??___lbmod,w
  4242     1769  00A5               	movwf	___lbmod@rem
  4243     176A  1003               	clrc
  4244     176B  0DA3               	rlf	___lbmod@dividend,f
  4245     176C  0820               	movf	___lbmod@divisor,w
  4246     176D  0225               	subwf	___lbmod@rem,w
  4247     176E  1C03               	skipc
  4248     176F  2F72               	goto	l701
  4249     1770  0820               	movf	___lbmod@divisor,w
  4250     1771  02A5               	subwf	___lbmod@rem,f
  4251     1772                     l701:
  4252     1772  3001               	movlw	1
  4253     1773  02A4               	subwf	___lbmod@counter,f
  4254     1774  1D03               	btfss	3,2
  4255     1775  2F5D               	goto	l2074
  4256     1776  0825               	movf	___lbmod@rem,w
  4257     1777  0008               	return
  4258     1778                     __end_of___lbmod:
  4259                           
  4260                           	psect	text11
  4261     1799                     __ptext11:	
  4262 ;; *************** function ___lbdiv *****************
  4263 ;; Defined at:
  4264 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  dividend        1    wreg     unsigned char 
  4267 ;;  divisor         1    6[BANK0 ] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  dividend        1    7[BANK0 ] unsigned char 
  4270 ;;  quotient        1    9[BANK0 ] unsigned char 
  4271 ;;  counter         1    8[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      unsigned char 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0, btemp+1
  4276 ;; Tracked objects:
  4277 ;;		On entry : 300/0
  4278 ;;		On exit  : 300/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         0       1       0       0       0
  4282 ;;      Locals:         0       3       0       0       0
  4283 ;;      Temps:          0       0       0       0       0
  4284 ;;      Totals:         0       4       0       0       0
  4285 ;;Total ram usage:        4 bytes
  4286 ;; Hardware stack levels used: 1
  4287 ;; Hardware stack levels required when called: 1
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_fround
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295     1799                     ___lbdiv:	
  4296                           ;psect for function ___lbdiv
  4297                           
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  4301                           ;___lbdiv@dividend stored from wreg
  4302     1799  00A7               	movwf	___lbdiv@dividend
  4303     179A  01A9               	clrf	___lbdiv@quotient
  4304     179B  0826               	movf	___lbdiv@divisor,w
  4305     179C  1903               	btfsc	3,2
  4306     179D  2FB8               	goto	l2066
  4307     179E  01A8               	clrf	___lbdiv@counter
  4308     179F  0AA8               	incf	___lbdiv@counter,f
  4309     17A0                     l2054:
  4310     17A0  1BA6               	btfsc	___lbdiv@divisor,7
  4311     17A1  2FA9               	goto	l2056
  4312     17A2  1003               	clrc
  4313     17A3  0DA6               	rlf	___lbdiv@divisor,f
  4314     17A4  3001               	movlw	1
  4315     17A5  00FF               	movwf	127
  4316     17A6  087F               	movf	127,w
  4317     17A7  07A8               	addwf	___lbdiv@counter,f
  4318     17A8  2FA0               	goto	l2054
  4319     17A9                     l2056:
  4320     17A9  1003               	clrc
  4321     17AA  0DA9               	rlf	___lbdiv@quotient,f
  4322     17AB  0826               	movf	___lbdiv@divisor,w
  4323     17AC  0227               	subwf	___lbdiv@dividend,w
  4324     17AD  1C03               	skipc
  4325     17AE  2FB3               	goto	L7
  4326     17AF  0826               	movf	___lbdiv@divisor,w
  4327     17B0  02A7               	subwf	___lbdiv@dividend,f
  4328     17B1  1429               	bsf	___lbdiv@quotient,0
  4329     17B2  1003               	clrc
  4330     17B3                     L7:
  4331     17B3  0CA6               	rrf	___lbdiv@divisor,f
  4332     17B4  3001               	movlw	1
  4333     17B5  02A8               	subwf	___lbdiv@counter,f
  4334     17B6  1D03               	btfss	3,2
  4335     17B7  2FA9               	goto	l2056
  4336     17B8                     l2066:
  4337     17B8  0829               	movf	___lbdiv@quotient,w
  4338     17B9  0008               	return
  4339     17BA                     __end_of___lbdiv:
  4340                           
  4341                           	psect	text12
  4342     0C0E                     __ptext12:	
  4343 ;; *************** function ___ftmul *****************
  4344 ;; Defined at:
  4345 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  f1              3   17[BANK0 ] float 
  4348 ;;  f2              3   20[BANK0 ] float 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4351 ;;  sign            1   31[BANK0 ] unsigned char 
  4352 ;;  cntr            1   30[BANK0 ] unsigned char 
  4353 ;;  exp             1   26[BANK0 ] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  3   17[BANK0 ] float 
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 300/800
  4360 ;;		On exit  : 300/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4363 ;;      Params:         0       6       0       0       0
  4364 ;;      Locals:         0       6       0       0       0
  4365 ;;      Temps:          0       3       0       0       0
  4366 ;;      Totals:         0      15       0       0       0
  4367 ;;Total ram usage:       15 bytes
  4368 ;; Hardware stack levels used: 1
  4369 ;; Hardware stack levels required when called: 2
  4370 ;; This function calls:
  4371 ;;		___ftpack
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;;		_fround
  4375 ;;		_scale
  4376 ;;		_sprintf
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380     0C0E                     ___ftmul:	
  4381                           ;psect for function ___ftmul
  4382                           
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4386     0C0E  0831               	movf	___ftmul@f1,w
  4387     0C0F  00B7               	movwf	??___ftmul
  4388     0C10  0832               	movf	___ftmul@f1+1,w
  4389     0C11  00B8               	movwf	??___ftmul+1
  4390     0C12  0833               	movf	___ftmul@f1+2,w
  4391     0C13  00B9               	movwf	??___ftmul+2
  4392     0C14  1003               	clrc
  4393     0C15  0D38               	rlf	??___ftmul+1,w
  4394     0C16  0D39               	rlf	??___ftmul+2,w
  4395     0C17  00BA               	movwf	___ftmul@exp
  4396     0C18  083A               	movf	___ftmul@exp,w
  4397     0C19  1D03               	btfss	3,2
  4398     0C1A  2C22               	goto	l1994
  4399     0C1B  3000               	movlw	0
  4400     0C1C  00B1               	movwf	?___ftmul
  4401     0C1D  3000               	movlw	0
  4402     0C1E  00B2               	movwf	?___ftmul+1
  4403     0C1F  3000               	movlw	0
  4404     0C20  00B3               	movwf	?___ftmul+2
  4405     0C21  0008               	return
  4406     0C22                     l1994:
  4407     0C22  0834               	movf	___ftmul@f2,w
  4408     0C23  00B7               	movwf	??___ftmul
  4409     0C24  0835               	movf	___ftmul@f2+1,w
  4410     0C25  00B8               	movwf	??___ftmul+1
  4411     0C26  0836               	movf	___ftmul@f2+2,w
  4412     0C27  00B9               	movwf	??___ftmul+2
  4413     0C28  1003               	clrc
  4414     0C29  0D38               	rlf	??___ftmul+1,w
  4415     0C2A  0D39               	rlf	??___ftmul+2,w
  4416     0C2B  00BF               	movwf	___ftmul@sign
  4417     0C2C  083F               	movf	___ftmul@sign,w
  4418     0C2D  1D03               	btfss	3,2
  4419     0C2E  2C36               	goto	l2000
  4420     0C2F  3000               	movlw	0
  4421     0C30  00B1               	movwf	?___ftmul
  4422     0C31  3000               	movlw	0
  4423     0C32  00B2               	movwf	?___ftmul+1
  4424     0C33  3000               	movlw	0
  4425     0C34  00B3               	movwf	?___ftmul+2
  4426     0C35  0008               	return
  4427     0C36                     l2000:
  4428     0C36  083F               	movf	___ftmul@sign,w
  4429     0C37  3E7B               	addlw	123
  4430     0C38  00FF               	movwf	127
  4431     0C39  087F               	movf	127,w
  4432     0C3A  07BA               	addwf	___ftmul@exp,f
  4433     0C3B  0833               	movf	___ftmul@f1+2,w
  4434     0C3C  00BF               	movwf	___ftmul@sign
  4435     0C3D  0836               	movf	___ftmul@f2+2,w
  4436     0C3E  00FF               	movwf	127
  4437     0C3F  087F               	movf	127,w
  4438     0C40  06BF               	xorwf	___ftmul@sign,f
  4439     0C41  3080               	movlw	128
  4440     0C42  00FF               	movwf	127
  4441     0C43  087F               	movf	127,w
  4442     0C44  05BF               	andwf	___ftmul@sign,f
  4443     0C45  17B2               	bsf	___ftmul@f1+1,7
  4444     0C46  17B5               	bsf	___ftmul@f2+1,7
  4445     0C47  30FF               	movlw	255
  4446     0C48  05B4               	andwf	___ftmul@f2,f
  4447     0C49  30FF               	movlw	255
  4448     0C4A  05B5               	andwf	___ftmul@f2+1,f
  4449     0C4B  3000               	movlw	0
  4450     0C4C  05B6               	andwf	___ftmul@f2+2,f
  4451     0C4D  3000               	movlw	0
  4452     0C4E  00BB               	movwf	___ftmul@f3_as_product
  4453     0C4F  3000               	movlw	0
  4454     0C50  00BC               	movwf	___ftmul@f3_as_product+1
  4455     0C51  3000               	movlw	0
  4456     0C52  00BD               	movwf	___ftmul@f3_as_product+2
  4457     0C53  3007               	movlw	7
  4458     0C54  00BE               	movwf	___ftmul@cntr
  4459     0C55                     l2018:
  4460     0C55  1C31               	btfss	___ftmul@f1,0
  4461     0C56  2C65               	goto	l2022
  4462     0C57  0834               	movf	___ftmul@f2,w
  4463     0C58  07BB               	addwf	___ftmul@f3_as_product,f
  4464     0C59  0835               	movf	___ftmul@f2+1,w
  4465     0C5A  1103               	clrz
  4466     0C5B  1803               	skipnc
  4467     0C5C  0A35               	incf	___ftmul@f2+1,w
  4468     0C5D  1D03               	btfss	3,2
  4469     0C5E  07BC               	addwf	___ftmul@f3_as_product+1,f
  4470     0C5F  0836               	movf	___ftmul@f2+2,w
  4471     0C60  1103               	clrz
  4472     0C61  1803               	skipnc
  4473     0C62  0A36               	incf	___ftmul@f2+2,w
  4474     0C63  1D03               	btfss	3,2
  4475     0C64  07BD               	addwf	___ftmul@f3_as_product+2,f
  4476     0C65                     l2022:
  4477     0C65  3001               	movlw	1
  4478     0C66                     u2385:
  4479     0C66  1003               	clrc
  4480     0C67  0CB3               	rrf	___ftmul@f1+2,f
  4481     0C68  0CB2               	rrf	___ftmul@f1+1,f
  4482     0C69  0CB1               	rrf	___ftmul@f1,f
  4483     0C6A  3EFF               	addlw	-1
  4484     0C6B  1D03               	skipz
  4485     0C6C  2C66               	goto	u2385
  4486     0C6D  3001               	movlw	1
  4487     0C6E                     u2395:
  4488     0C6E  1003               	clrc
  4489     0C6F  0DB4               	rlf	___ftmul@f2,f
  4490     0C70  0DB5               	rlf	___ftmul@f2+1,f
  4491     0C71  0DB6               	rlf	___ftmul@f2+2,f
  4492     0C72  3EFF               	addlw	-1
  4493     0C73  1D03               	skipz
  4494     0C74  2C6E               	goto	u2395
  4495     0C75  3001               	movlw	1
  4496     0C76  02BE               	subwf	___ftmul@cntr,f
  4497     0C77  1D03               	btfss	3,2
  4498     0C78  2C55               	goto	l2018
  4499     0C79  3009               	movlw	9
  4500     0C7A  00BE               	movwf	___ftmul@cntr
  4501     0C7B                     l2030:
  4502     0C7B  1C31               	btfss	___ftmul@f1,0
  4503     0C7C  2C8B               	goto	l2034
  4504     0C7D  0834               	movf	___ftmul@f2,w
  4505     0C7E  07BB               	addwf	___ftmul@f3_as_product,f
  4506     0C7F  0835               	movf	___ftmul@f2+1,w
  4507     0C80  1103               	clrz
  4508     0C81  1803               	skipnc
  4509     0C82  0A35               	incf	___ftmul@f2+1,w
  4510     0C83  1D03               	btfss	3,2
  4511     0C84  07BC               	addwf	___ftmul@f3_as_product+1,f
  4512     0C85  0836               	movf	___ftmul@f2+2,w
  4513     0C86  1103               	clrz
  4514     0C87  1803               	skipnc
  4515     0C88  0A36               	incf	___ftmul@f2+2,w
  4516     0C89  1D03               	btfss	3,2
  4517     0C8A  07BD               	addwf	___ftmul@f3_as_product+2,f
  4518     0C8B                     l2034:
  4519     0C8B  3001               	movlw	1
  4520     0C8C                     u2435:
  4521     0C8C  1003               	clrc
  4522     0C8D  0CB3               	rrf	___ftmul@f1+2,f
  4523     0C8E  0CB2               	rrf	___ftmul@f1+1,f
  4524     0C8F  0CB1               	rrf	___ftmul@f1,f
  4525     0C90  3EFF               	addlw	-1
  4526     0C91  1D03               	skipz
  4527     0C92  2C8C               	goto	u2435
  4528     0C93  3001               	movlw	1
  4529     0C94                     u2445:
  4530     0C94  1003               	clrc
  4531     0C95  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4532     0C96  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4533     0C97  0CBB               	rrf	___ftmul@f3_as_product,f
  4534     0C98  3EFF               	addlw	-1
  4535     0C99  1D03               	skipz
  4536     0C9A  2C94               	goto	u2445
  4537     0C9B  3001               	movlw	1
  4538     0C9C  02BE               	subwf	___ftmul@cntr,f
  4539     0C9D  1D03               	btfss	3,2
  4540     0C9E  2C7B               	goto	l2030
  4541     0C9F  083B               	movf	___ftmul@f3_as_product,w
  4542     0CA0  00A0               	movwf	___ftpack@arg
  4543     0CA1  083C               	movf	___ftmul@f3_as_product+1,w
  4544     0CA2  00A1               	movwf	___ftpack@arg+1
  4545     0CA3  083D               	movf	___ftmul@f3_as_product+2,w
  4546     0CA4  00A2               	movwf	___ftpack@arg+2
  4547     0CA5  083A               	movf	___ftmul@exp,w
  4548     0CA6  00A3               	movwf	___ftpack@exp
  4549     0CA7  083F               	movf	___ftmul@sign,w
  4550     0CA8  00A4               	movwf	___ftpack@sign
  4551     0CA9  120A  158A  2261   	fcall	___ftpack
  4552     0CAC  0820               	movf	?___ftpack,w
  4553     0CAD  00B1               	movwf	?___ftmul
  4554     0CAE  0821               	movf	?___ftpack+1,w
  4555     0CAF  00B2               	movwf	?___ftmul+1
  4556     0CB0  0822               	movf	?___ftpack+2,w
  4557     0CB1  00B3               	movwf	?___ftmul+2
  4558     0CB2  0008               	return
  4559     0CB3                     __end_of___ftmul:
  4560                           
  4561                           	psect	text13
  4562     16D8                     __ptext13:	
  4563 ;; *************** function ___bmul *****************
  4564 ;; Defined at:
  4565 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;  multiplier      1    wreg     unsigned char 
  4568 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  multiplier      1   16[BANK0 ] unsigned char 
  4571 ;;  product         1   15[BANK0 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  1    wreg      unsigned char 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0, btemp+1
  4576 ;; Tracked objects:
  4577 ;;		On entry : 300/0
  4578 ;;		On exit  : 300/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4581 ;;      Params:         0       1       0       0       0
  4582 ;;      Locals:         0       2       0       0       0
  4583 ;;      Temps:          0       0       0       0       0
  4584 ;;      Totals:         0       3       0       0       0
  4585 ;;Total ram usage:        3 bytes
  4586 ;; Hardware stack levels used: 1
  4587 ;; Hardware stack levels required when called: 1
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_fround
  4592 ;;		_scale
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596     16D8                     ___bmul:	
  4597                           ;psect for function ___bmul
  4598                           
  4599                           
  4600                           ;incstack = 0
  4601                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4602                           ;___bmul@multiplier stored from wreg
  4603     16D8  00B0               	movwf	___bmul@multiplier
  4604     16D9  01AF               	clrf	___bmul@product
  4605     16DA                     l1818:
  4606     16DA  1C30               	btfss	___bmul@multiplier,0
  4607     16DB  2EE0               	goto	l1822
  4608     16DC  082E               	movf	___bmul@multiplicand,w
  4609     16DD  00FF               	movwf	127
  4610     16DE  087F               	movf	127,w
  4611     16DF  07AF               	addwf	___bmul@product,f
  4612     16E0                     l1822:
  4613     16E0  1003               	clrc
  4614     16E1  0DAE               	rlf	___bmul@multiplicand,f
  4615     16E2  1003               	clrc
  4616     16E3  0CB0               	rrf	___bmul@multiplier,f
  4617     16E4  0830               	movf	___bmul@multiplier,w
  4618     16E5  1D03               	btfss	3,2
  4619     16E6  2EDA               	goto	l1818
  4620     16E7  082F               	movf	___bmul@product,w
  4621     16E8  0008               	return
  4622     16E9                     __end_of___bmul:
  4623                           
  4624                           	psect	text14
  4625     0B6D                     __ptext14:	
  4626 ;; *************** function __tdiv_to_l_ *****************
  4627 ;; Defined at:
  4628 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdivl.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  f1              3    0[BANK0 ] float 
  4631 ;;  f2              3    3[BANK0 ] float 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  quot            4    9[BANK0 ] unsigned long 
  4634 ;;  exp1            1   14[BANK0 ] unsigned char 
  4635 ;;  cntr            1   13[BANK0 ] unsigned char 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  4    0[BANK0 ] unsigned long 
  4638 ;; Registers used:
  4639 ;;		wreg, status,2, status,0, btemp+1
  4640 ;; Tracked objects:
  4641 ;;		On entry : 300/0
  4642 ;;		On exit  : 300/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4645 ;;      Params:         0       6       0       0       0
  4646 ;;      Locals:         0       6       0       0       0
  4647 ;;      Temps:          0       3       0       0       0
  4648 ;;      Totals:         0      15       0       0       0
  4649 ;;Total ram usage:       15 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; Hardware stack levels required when called: 1
  4652 ;; This function calls:
  4653 ;;		Nothing
  4654 ;; This function is called by:
  4655 ;;		_sprintf
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659     0B6D                     __tdiv_to_l_:	
  4660                           ;psect for function __tdiv_to_l_
  4661                           
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  4665     0B6D  0820               	movf	__tdiv_to_l_@f1,w
  4666     0B6E  00A6               	movwf	??__tdiv_to_l_
  4667     0B6F  0821               	movf	__tdiv_to_l_@f1+1,w
  4668     0B70  00A7               	movwf	??__tdiv_to_l_+1
  4669     0B71  0822               	movf	__tdiv_to_l_@f1+2,w
  4670     0B72  00A8               	movwf	??__tdiv_to_l_+2
  4671     0B73  1003               	clrc
  4672     0B74  0D27               	rlf	??__tdiv_to_l_+1,w
  4673     0B75  0D28               	rlf	??__tdiv_to_l_+2,w
  4674     0B76  00AE               	movwf	__tdiv_to_l_@exp1
  4675     0B77  082E               	movf	__tdiv_to_l_@exp1,w
  4676     0B78  1D03               	btfss	3,2
  4677     0B79  2B83               	goto	l2162
  4678     0B7A                     l2158:
  4679     0B7A  3000               	movlw	0
  4680     0B7B  00A3               	movwf	?__tdiv_to_l_+3
  4681     0B7C  3000               	movlw	0
  4682     0B7D  00A2               	movwf	?__tdiv_to_l_+2
  4683     0B7E  3000               	movlw	0
  4684     0B7F  00A1               	movwf	?__tdiv_to_l_+1
  4685     0B80  3000               	movlw	0
  4686     0B81  00A0               	movwf	?__tdiv_to_l_
  4687     0B82  0008               	return
  4688     0B83                     l2162:
  4689     0B83  0823               	movf	__tdiv_to_l_@f2,w
  4690     0B84  00A6               	movwf	??__tdiv_to_l_
  4691     0B85  0824               	movf	__tdiv_to_l_@f2+1,w
  4692     0B86  00A7               	movwf	??__tdiv_to_l_+1
  4693     0B87  0825               	movf	__tdiv_to_l_@f2+2,w
  4694     0B88  00A8               	movwf	??__tdiv_to_l_+2
  4695     0B89  1003               	clrc
  4696     0B8A  0D27               	rlf	??__tdiv_to_l_+1,w
  4697     0B8B  0D28               	rlf	??__tdiv_to_l_+2,w
  4698     0B8C  00AD               	movwf	__tdiv_to_l_@cntr
  4699     0B8D  082D               	movf	__tdiv_to_l_@cntr,w
  4700     0B8E  1903               	btfsc	3,2
  4701     0B8F  2B7A               	goto	l2158
  4702     0B90  17A1               	bsf	__tdiv_to_l_@f1+1,7
  4703     0B91  30FF               	movlw	255
  4704     0B92  05A0               	andwf	__tdiv_to_l_@f1,f
  4705     0B93  30FF               	movlw	255
  4706     0B94  05A1               	andwf	__tdiv_to_l_@f1+1,f
  4707     0B95  3000               	movlw	0
  4708     0B96  05A2               	andwf	__tdiv_to_l_@f1+2,f
  4709     0B97  17A4               	bsf	__tdiv_to_l_@f2+1,7
  4710     0B98  30FF               	movlw	255
  4711     0B99  05A3               	andwf	__tdiv_to_l_@f2,f
  4712     0B9A  30FF               	movlw	255
  4713     0B9B  05A4               	andwf	__tdiv_to_l_@f2+1,f
  4714     0B9C  3000               	movlw	0
  4715     0B9D  05A5               	andwf	__tdiv_to_l_@f2+2,f
  4716     0B9E  3000               	movlw	0
  4717     0B9F  00AC               	movwf	__tdiv_to_l_@quot+3
  4718     0BA0  3000               	movlw	0
  4719     0BA1  00AB               	movwf	__tdiv_to_l_@quot+2
  4720     0BA2  3000               	movlw	0
  4721     0BA3  00AA               	movwf	__tdiv_to_l_@quot+1
  4722     0BA4  3000               	movlw	0
  4723     0BA5  00A9               	movwf	__tdiv_to_l_@quot
  4724     0BA6  307F               	movlw	127
  4725     0BA7  02AE               	subwf	__tdiv_to_l_@exp1,f
  4726     0BA8  3098               	movlw	152
  4727     0BA9  072D               	addwf	__tdiv_to_l_@cntr,w
  4728     0BAA  00A6               	movwf	??__tdiv_to_l_
  4729     0BAB  0826               	movf	??__tdiv_to_l_,w
  4730     0BAC  02AE               	subwf	__tdiv_to_l_@exp1,f
  4731     0BAD  3018               	movlw	24
  4732     0BAE  00AD               	movwf	__tdiv_to_l_@cntr
  4733     0BAF                     l2176:
  4734     0BAF  3001               	movlw	1
  4735     0BB0  00A6               	movwf	??__tdiv_to_l_
  4736     0BB1                     u2635:
  4737     0BB1  1003               	clrc
  4738     0BB2  0DA9               	rlf	__tdiv_to_l_@quot,f
  4739     0BB3  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4740     0BB4  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4741     0BB5  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4742     0BB6  0BA6               	decfsz	??__tdiv_to_l_,f
  4743     0BB7  2BB1               	goto	u2635
  4744     0BB8  0825               	movf	__tdiv_to_l_@f2+2,w
  4745     0BB9  0222               	subwf	__tdiv_to_l_@f1+2,w
  4746     0BBA  1D03               	skipz
  4747     0BBB  2BC2               	goto	u2645
  4748     0BBC  0824               	movf	__tdiv_to_l_@f2+1,w
  4749     0BBD  0221               	subwf	__tdiv_to_l_@f1+1,w
  4750     0BBE  1D03               	skipz
  4751     0BBF  2BC2               	goto	u2645
  4752     0BC0  0823               	movf	__tdiv_to_l_@f2,w
  4753     0BC1  0220               	subwf	__tdiv_to_l_@f1,w
  4754     0BC2                     u2645:
  4755     0BC2  1C03               	skipc
  4756     0BC3  2BCF               	goto	l2184
  4757     0BC4  0823               	movf	__tdiv_to_l_@f2,w
  4758     0BC5  02A0               	subwf	__tdiv_to_l_@f1,f
  4759     0BC6  0824               	movf	__tdiv_to_l_@f2+1,w
  4760     0BC7  1C03               	skipc
  4761     0BC8  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  4762     0BC9  02A1               	subwf	__tdiv_to_l_@f1+1,f
  4763     0BCA  0825               	movf	__tdiv_to_l_@f2+2,w
  4764     0BCB  1C03               	skipc
  4765     0BCC  0A25               	incf	__tdiv_to_l_@f2+2,w
  4766     0BCD  02A2               	subwf	__tdiv_to_l_@f1+2,f
  4767     0BCE  1429               	bsf	__tdiv_to_l_@quot,0
  4768     0BCF                     l2184:
  4769     0BCF  3001               	movlw	1
  4770     0BD0                     u2655:
  4771     0BD0  1003               	clrc
  4772     0BD1  0DA0               	rlf	__tdiv_to_l_@f1,f
  4773     0BD2  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  4774     0BD3  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  4775     0BD4  3EFF               	addlw	-1
  4776     0BD5  1D03               	skipz
  4777     0BD6  2BD0               	goto	u2655
  4778     0BD7  3001               	movlw	1
  4779     0BD8  02AD               	subwf	__tdiv_to_l_@cntr,f
  4780     0BD9  1D03               	btfss	3,2
  4781     0BDA  2BAF               	goto	l2176
  4782     0BDB  1FAE               	btfss	__tdiv_to_l_@exp1,7
  4783     0BDC  2BF2               	goto	l2198
  4784     0BDD  082E               	movf	__tdiv_to_l_@exp1,w
  4785     0BDE  3A80               	xorlw	128
  4786     0BDF  3E97               	addlw	151
  4787     0BE0  1C03               	btfss	3,0
  4788     0BE1  2B7A               	goto	l2158
  4789     0BE2                     l2194:
  4790     0BE2  3001               	movlw	1
  4791     0BE3                     u2695:
  4792     0BE3  1003               	clrc
  4793     0BE4  0CAC               	rrf	__tdiv_to_l_@quot+3,f
  4794     0BE5  0CAB               	rrf	__tdiv_to_l_@quot+2,f
  4795     0BE6  0CAA               	rrf	__tdiv_to_l_@quot+1,f
  4796     0BE7  0CA9               	rrf	__tdiv_to_l_@quot,f
  4797     0BE8  3EFF               	addlw	-1
  4798     0BE9  1D03               	skipz
  4799     0BEA  2BE3               	goto	u2695
  4800     0BEB  3001               	movlw	1
  4801     0BEC  00FF               	movwf	127
  4802     0BED  087F               	movf	127,w
  4803     0BEE  07AE               	addwf	__tdiv_to_l_@exp1,f
  4804     0BEF  1903               	btfsc	3,2
  4805     0BF0  2C05               	goto	l2206
  4806     0BF1  2BE2               	goto	l2194
  4807     0BF2                     l2198:
  4808     0BF2  3018               	movlw	24
  4809     0BF3  022E               	subwf	__tdiv_to_l_@exp1,w
  4810     0BF4  1803               	btfsc	3,0
  4811     0BF5  2B7A               	goto	l2158
  4812     0BF6                     l643:
  4813     0BF6  082E               	movf	__tdiv_to_l_@exp1,w
  4814     0BF7  1903               	btfsc	3,2
  4815     0BF8  2C05               	goto	l2206
  4816     0BF9  3001               	movlw	1
  4817     0BFA  00A6               	movwf	??__tdiv_to_l_
  4818     0BFB                     u2725:
  4819     0BFB  1003               	clrc
  4820     0BFC  0DA9               	rlf	__tdiv_to_l_@quot,f
  4821     0BFD  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4822     0BFE  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4823     0BFF  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4824     0C00  0BA6               	decfsz	??__tdiv_to_l_,f
  4825     0C01  2BFB               	goto	u2725
  4826     0C02  3001               	movlw	1
  4827     0C03  02AE               	subwf	__tdiv_to_l_@exp1,f
  4828     0C04  2BF6               	goto	l643
  4829     0C05                     l2206:
  4830     0C05  082C               	movf	__tdiv_to_l_@quot+3,w
  4831     0C06  00A3               	movwf	?__tdiv_to_l_+3
  4832     0C07  082B               	movf	__tdiv_to_l_@quot+2,w
  4833     0C08  00A2               	movwf	?__tdiv_to_l_+2
  4834     0C09  082A               	movf	__tdiv_to_l_@quot+1,w
  4835     0C0A  00A1               	movwf	?__tdiv_to_l_+1
  4836     0C0B  0829               	movf	__tdiv_to_l_@quot,w
  4837     0C0C  00A0               	movwf	?__tdiv_to_l_
  4838     0C0D  0008               	return
  4839     0C0E                     __end_of__tdiv_to_l_:
  4840                           
  4841                           	psect	text15
  4842     0DAE                     __ptext15:	
  4843 ;; *************** function __div_to_l_ *****************
  4844 ;; Defined at:
  4845 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fldivl.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  f1              3    0[BANK0 ] unsigned long 
  4848 ;;  f2              3    3[BANK0 ] unsigned long 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  quot            4   14[BANK0 ] unsigned long 
  4851 ;;  exp1            1   19[BANK0 ] unsigned char 
  4852 ;;  cntr            1   18[BANK0 ] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  4    0[BANK0 ] unsigned long 
  4855 ;; Registers used:
  4856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 300/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4862 ;;      Params:         0       6       0       0       0
  4863 ;;      Locals:         0       6       0       0       0
  4864 ;;      Temps:          0       8       0       0       0
  4865 ;;      Totals:         0      20       0       0       0
  4866 ;;Total ram usage:       20 bytes
  4867 ;; Hardware stack levels used: 1
  4868 ;; Hardware stack levels required when called: 1
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_sprintf
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876     0DAE                     __div_to_l_:	
  4877                           ;psect for function __div_to_l_
  4878                           
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  4882     0DAE  3020               	movlw	low (__div_to_l_@f1| 0)
  4883     0DAF  0084               	movwf	4
  4884     0DB0  1383               	bcf	3,7	;select IRP bank0
  4885     0DB1  0800               	movf	0,w
  4886     0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4887     0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4888     0DB4  00A6               	movwf	??__div_to_l_
  4889     0DB5  0A84               	incf	4,f
  4890     0DB6  0800               	movf	0,w
  4891     0DB7  00A7               	movwf	??__div_to_l_+1
  4892     0DB8  0A84               	incf	4,f
  4893     0DB9  0800               	movf	0,w
  4894     0DBA  00A8               	movwf	??__div_to_l_+2
  4895     0DBB  0A84               	incf	4,f
  4896     0DBC  0800               	movf	0,w
  4897     0DBD  00A9               	movwf	??__div_to_l_+3
  4898     0DBE  1003               	clrc
  4899     0DBF  0D28               	rlf	??__div_to_l_+2,w
  4900     0DC0  0D29               	rlf	??__div_to_l_+3,w
  4901     0DC1  00B3               	movwf	__div_to_l_@exp1
  4902     0DC2  0833               	movf	__div_to_l_@exp1,w
  4903     0DC3  1D03               	btfss	3,2
  4904     0DC4  2DCE               	goto	l2216
  4905     0DC5                     l2212:
  4906     0DC5  3000               	movlw	0
  4907     0DC6  00A3               	movwf	?__div_to_l_+3
  4908     0DC7  3000               	movlw	0
  4909     0DC8  00A2               	movwf	?__div_to_l_+2
  4910     0DC9  3000               	movlw	0
  4911     0DCA  00A1               	movwf	?__div_to_l_+1
  4912     0DCB  3000               	movlw	0
  4913     0DCC  00A0               	movwf	?__div_to_l_
  4914     0DCD  0008               	return
  4915     0DCE                     l2216:
  4916     0DCE  3023               	movlw	low (__div_to_l_@f2| 0)
  4917     0DCF  0084               	movwf	4
  4918     0DD0  0800               	movf	0,w
  4919     0DD1  00A6               	movwf	??__div_to_l_
  4920     0DD2  0A84               	incf	4,f
  4921     0DD3  0800               	movf	0,w
  4922     0DD4  00A7               	movwf	??__div_to_l_+1
  4923     0DD5  0A84               	incf	4,f
  4924     0DD6  0800               	movf	0,w
  4925     0DD7  00A8               	movwf	??__div_to_l_+2
  4926     0DD8  0A84               	incf	4,f
  4927     0DD9  0800               	movf	0,w
  4928     0DDA  00A9               	movwf	??__div_to_l_+3
  4929     0DDB  1003               	clrc
  4930     0DDC  0D28               	rlf	??__div_to_l_+2,w
  4931     0DDD  0D29               	rlf	??__div_to_l_+3,w
  4932     0DDE  00B2               	movwf	__div_to_l_@cntr
  4933     0DDF  0832               	movf	__div_to_l_@cntr,w
  4934     0DE0  1903               	btfsc	3,2
  4935     0DE1  2DC5               	goto	l2212
  4936     0DE2  3020               	movlw	low (__div_to_l_@f1| 0)
  4937     0DE3  0084               	movwf	4
  4938     0DE4  3000               	movlw	0
  4939     0DE5  0480               	iorwf	0,f
  4940     0DE6  0A84               	incf	4,f
  4941     0DE7  3000               	movlw	0
  4942     0DE8  0480               	iorwf	0,f
  4943     0DE9  0A84               	incf	4,f
  4944     0DEA  3080               	movlw	128
  4945     0DEB  0480               	iorwf	0,f
  4946     0DEC  0A84               	incf	4,f
  4947     0DED  3000               	movlw	0
  4948     0DEE  0480               	iorwf	0,f
  4949     0DEF  3020               	movlw	low (__div_to_l_@f1| 0)
  4950     0DF0  0084               	movwf	4
  4951     0DF1  30FF               	movlw	255
  4952     0DF2  0580               	andwf	0,f
  4953     0DF3  0A84               	incf	4,f
  4954     0DF4  30FF               	movlw	255
  4955     0DF5  0580               	andwf	0,f
  4956     0DF6  0A84               	incf	4,f
  4957     0DF7  30FF               	movlw	255
  4958     0DF8  0580               	andwf	0,f
  4959     0DF9  0A84               	incf	4,f
  4960     0DFA  3000               	movlw	0
  4961     0DFB  0580               	andwf	0,f
  4962     0DFC  3023               	movlw	low (__div_to_l_@f2| 0)
  4963     0DFD  0084               	movwf	4
  4964     0DFE  3000               	movlw	0
  4965     0DFF  0480               	iorwf	0,f
  4966     0E00  0A84               	incf	4,f
  4967     0E01  3000               	movlw	0
  4968     0E02  0480               	iorwf	0,f
  4969     0E03  0A84               	incf	4,f
  4970     0E04  3080               	movlw	128
  4971     0E05  0480               	iorwf	0,f
  4972     0E06  0A84               	incf	4,f
  4973     0E07  3000               	movlw	0
  4974     0E08  0480               	iorwf	0,f
  4975     0E09  3023               	movlw	low (__div_to_l_@f2| 0)
  4976     0E0A  0084               	movwf	4
  4977     0E0B  30FF               	movlw	255
  4978     0E0C  0580               	andwf	0,f
  4979     0E0D  0A84               	incf	4,f
  4980     0E0E  30FF               	movlw	255
  4981     0E0F  0580               	andwf	0,f
  4982     0E10  0A84               	incf	4,f
  4983     0E11  30FF               	movlw	255
  4984     0E12  0580               	andwf	0,f
  4985     0E13  0A84               	incf	4,f
  4986     0E14  3000               	movlw	0
  4987     0E15  0580               	andwf	0,f
  4988     0E16  3000               	movlw	0
  4989     0E17  00B1               	movwf	__div_to_l_@quot+3
  4990     0E18  3000               	movlw	0
  4991     0E19  00B0               	movwf	__div_to_l_@quot+2
  4992     0E1A  3000               	movlw	0
  4993     0E1B  00AF               	movwf	__div_to_l_@quot+1
  4994     0E1C  3000               	movlw	0
  4995     0E1D  00AE               	movwf	__div_to_l_@quot
  4996     0E1E  307F               	movlw	127
  4997     0E1F  02B3               	subwf	__div_to_l_@exp1,f
  4998     0E20  30A0               	movlw	160
  4999     0E21  0732               	addwf	__div_to_l_@cntr,w
  5000     0E22  00A6               	movwf	??__div_to_l_
  5001     0E23  0826               	movf	??__div_to_l_,w
  5002     0E24  02B3               	subwf	__div_to_l_@exp1,f
  5003     0E25  3020               	movlw	32
  5004     0E26  00B2               	movwf	__div_to_l_@cntr
  5005     0E27                     l2232:
  5006     0E27  3001               	movlw	1
  5007     0E28  00A6               	movwf	??__div_to_l_
  5008     0E29                     u2765:
  5009     0E29  1003               	clrc
  5010     0E2A  0DAE               	rlf	__div_to_l_@quot,f
  5011     0E2B  0DAF               	rlf	__div_to_l_@quot+1,f
  5012     0E2C  0DB0               	rlf	__div_to_l_@quot+2,f
  5013     0E2D  0DB1               	rlf	__div_to_l_@quot+3,f
  5014     0E2E  0BA6               	decfsz	??__div_to_l_,f
  5015     0E2F  2E29               	goto	u2765
  5016     0E30  3023               	movlw	low (__div_to_l_@f2| 0)
  5017     0E31  0084               	movwf	4
  5018     0E32  0800               	movf	0,w
  5019     0E33  00A6               	movwf	??__div_to_l_
  5020     0E34  0A84               	incf	4,f
  5021     0E35  0800               	movf	0,w
  5022     0E36  00A7               	movwf	??__div_to_l_+1
  5023     0E37  0A84               	incf	4,f
  5024     0E38  0800               	movf	0,w
  5025     0E39  00A8               	movwf	??__div_to_l_+2
  5026     0E3A  0A84               	incf	4,f
  5027     0E3B  0800               	movf	0,w
  5028     0E3C  00A9               	movwf	??__div_to_l_+3
  5029     0E3D  3020               	movlw	low (__div_to_l_@f1| 0)
  5030     0E3E  0084               	movwf	4
  5031     0E3F  0800               	movf	0,w
  5032     0E40  00AA               	movwf	??__div_to_l_+4
  5033     0E41  0A84               	incf	4,f
  5034     0E42  0800               	movf	0,w
  5035     0E43  00AB               	movwf	??__div_to_l_+5
  5036     0E44  0A84               	incf	4,f
  5037     0E45  0800               	movf	0,w
  5038     0E46  00AC               	movwf	??__div_to_l_+6
  5039     0E47  0A84               	incf	4,f
  5040     0E48  0800               	movf	0,w
  5041     0E49  00AD               	movwf	??__div_to_l_+7
  5042     0E4A  0829               	movf	??__div_to_l_+3,w
  5043     0E4B  022D               	subwf	??__div_to_l_+7,w
  5044     0E4C  1D03               	skipz
  5045     0E4D  2E58               	goto	u2775
  5046     0E4E  0828               	movf	??__div_to_l_+2,w
  5047     0E4F  022C               	subwf	??__div_to_l_+6,w
  5048     0E50  1D03               	skipz
  5049     0E51  2E58               	goto	u2775
  5050     0E52  0827               	movf	??__div_to_l_+1,w
  5051     0E53  022B               	subwf	??__div_to_l_+5,w
  5052     0E54  1D03               	skipz
  5053     0E55  2E58               	goto	u2775
  5054     0E56  0826               	movf	??__div_to_l_,w
  5055     0E57  022A               	subwf	??__div_to_l_+4,w
  5056     0E58                     u2775:
  5057     0E58  1C03               	skipc
  5058     0E59  2E7D               	goto	l556
  5059     0E5A  3023               	movlw	low (__div_to_l_@f2| 0)
  5060     0E5B  0084               	movwf	4
  5061     0E5C  0800               	movf	0,w
  5062     0E5D  00A6               	movwf	??__div_to_l_
  5063     0E5E  0A84               	incf	4,f
  5064     0E5F  0800               	movf	0,w
  5065     0E60  00A7               	movwf	??__div_to_l_+1
  5066     0E61  0A84               	incf	4,f
  5067     0E62  0800               	movf	0,w
  5068     0E63  00A8               	movwf	??__div_to_l_+2
  5069     0E64  0A84               	incf	4,f
  5070     0E65  0800               	movf	0,w
  5071     0E66  00A9               	movwf	??__div_to_l_+3
  5072     0E67  3020               	movlw	low (__div_to_l_@f1| 0)
  5073     0E68  0084               	movwf	4
  5074     0E69  0826               	movf	??__div_to_l_,w
  5075     0E6A  0280               	subwf	0,f
  5076     0E6B  0A84               	incf	4,f
  5077     0E6C  0827               	movf	??__div_to_l_+1,w
  5078     0E6D  1C03               	skipc
  5079     0E6E  0F27               	incfsz	??__div_to_l_+1,w
  5080     0E6F  0280               	subwf	0,f
  5081     0E70  0A84               	incf	4,f
  5082     0E71  0828               	movf	??__div_to_l_+2,w
  5083     0E72  1C03               	skipc
  5084     0E73  0F28               	incfsz	??__div_to_l_+2,w
  5085     0E74  0280               	subwf	0,f
  5086     0E75  0A84               	incf	4,f
  5087     0E76  0829               	movf	??__div_to_l_+3,w
  5088     0E77  1C03               	skipc
  5089     0E78  0A29               	incf	??__div_to_l_+3,w
  5090     0E79  0280               	subwf	0,f
  5091     0E7A  3003               	movlw	3
  5092     0E7B  0284               	subwf	4,f
  5093     0E7C  142E               	bsf	__div_to_l_@quot,0
  5094     0E7D                     l556:
  5095     0E7D  3020               	movlw	low (__div_to_l_@f1| 0)
  5096     0E7E  0084               	movwf	4
  5097     0E7F  1003               	clrc
  5098     0E80  0D80               	rlf	0,f
  5099     0E81  0A84               	incf	4,f
  5100     0E82  0D80               	rlf	0,f
  5101     0E83  0A84               	incf	4,f
  5102     0E84  0D80               	rlf	0,f
  5103     0E85  0A84               	incf	4,f
  5104     0E86  0D80               	rlf	0,f
  5105     0E87  0384               	decf	4,f
  5106     0E88  0384               	decf	4,f
  5107     0E89  0384               	decf	4,f
  5108     0E8A  3001               	movlw	1
  5109     0E8B  02B2               	subwf	__div_to_l_@cntr,f
  5110     0E8C  1D03               	btfss	3,2
  5111     0E8D  2E27               	goto	l2232
  5112     0E8E  1FB3               	btfss	__div_to_l_@exp1,7
  5113     0E8F  2EA5               	goto	l2252
  5114     0E90  0833               	movf	__div_to_l_@exp1,w
  5115     0E91  3A80               	xorlw	128
  5116     0E92  3E9F               	addlw	159
  5117     0E93  1C03               	btfss	3,0
  5118     0E94  2DC5               	goto	l2212
  5119     0E95                     l2248:
  5120     0E95  3001               	movlw	1
  5121     0E96                     u2815:
  5122     0E96  1003               	clrc
  5123     0E97  0CB1               	rrf	__div_to_l_@quot+3,f
  5124     0E98  0CB0               	rrf	__div_to_l_@quot+2,f
  5125     0E99  0CAF               	rrf	__div_to_l_@quot+1,f
  5126     0E9A  0CAE               	rrf	__div_to_l_@quot,f
  5127     0E9B  3EFF               	addlw	-1
  5128     0E9C  1D03               	skipz
  5129     0E9D  2E96               	goto	u2815
  5130     0E9E  3001               	movlw	1
  5131     0E9F  00FF               	movwf	127
  5132     0EA0  087F               	movf	127,w
  5133     0EA1  07B3               	addwf	__div_to_l_@exp1,f
  5134     0EA2  1903               	btfsc	3,2
  5135     0EA3  2EB8               	goto	l2260
  5136     0EA4  2E95               	goto	l2248
  5137     0EA5                     l2252:
  5138     0EA5  3020               	movlw	32
  5139     0EA6  0233               	subwf	__div_to_l_@exp1,w
  5140     0EA7  1803               	btfsc	3,0
  5141     0EA8  2DC5               	goto	l2212
  5142     0EA9                     l564:
  5143     0EA9  0833               	movf	__div_to_l_@exp1,w
  5144     0EAA  1903               	btfsc	3,2
  5145     0EAB  2EB8               	goto	l2260
  5146     0EAC  3001               	movlw	1
  5147     0EAD  00A6               	movwf	??__div_to_l_
  5148     0EAE                     u2845:
  5149     0EAE  1003               	clrc
  5150     0EAF  0DAE               	rlf	__div_to_l_@quot,f
  5151     0EB0  0DAF               	rlf	__div_to_l_@quot+1,f
  5152     0EB1  0DB0               	rlf	__div_to_l_@quot+2,f
  5153     0EB2  0DB1               	rlf	__div_to_l_@quot+3,f
  5154     0EB3  0BA6               	decfsz	??__div_to_l_,f
  5155     0EB4  2EAE               	goto	u2845
  5156     0EB5  3001               	movlw	1
  5157     0EB6  02B3               	subwf	__div_to_l_@exp1,f
  5158     0EB7  2EA9               	goto	l564
  5159     0EB8                     l2260:
  5160     0EB8  0831               	movf	__div_to_l_@quot+3,w
  5161     0EB9  00A3               	movwf	?__div_to_l_+3
  5162     0EBA  0830               	movf	__div_to_l_@quot+2,w
  5163     0EBB  00A2               	movwf	?__div_to_l_+2
  5164     0EBC  082F               	movf	__div_to_l_@quot+1,w
  5165     0EBD  00A1               	movwf	?__div_to_l_+1
  5166     0EBE  082E               	movf	__div_to_l_@quot,w
  5167     0EBF  00A0               	movwf	?__div_to_l_
  5168     0EC0  0008               	return
  5169     0EC1                     __end_of__div_to_l_:
  5170                           
  5171                           	psect	text16
  5172     1778                     __ptext16:	
  5173 ;; *************** function ___wmul *****************
  5174 ;; Defined at:
  5175 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5178 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  product         2    4[BANK0 ] unsigned int 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  2    0[BANK0 ] unsigned int 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2, status,0
  5185 ;; Tracked objects:
  5186 ;;		On entry : B00/0
  5187 ;;		On exit  : B00/0
  5188 ;;		Unchanged: 800/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5190 ;;      Params:         0       4       0       0       0
  5191 ;;      Locals:         0       2       0       0       0
  5192 ;;      Temps:          0       0       0       0       0
  5193 ;;      Totals:         0       6       0       0       0
  5194 ;;Total ram usage:        6 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 1
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_sprintf
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204     1778                     ___wmul:	
  5205                           ;psect for function ___wmul
  5206                           
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5210     1778  01A4               	clrf	___wmul@product
  5211     1779  01A5               	clrf	___wmul@product+1
  5212     177A                     l2266:
  5213     177A  1C20               	btfss	___wmul@multiplier,0
  5214     177B  2F82               	goto	l347
  5215     177C  0822               	movf	___wmul@multiplicand,w
  5216     177D  07A4               	addwf	___wmul@product,f
  5217     177E  1803               	skipnc
  5218     177F  0AA5               	incf	___wmul@product+1,f
  5219     1780  0823               	movf	___wmul@multiplicand+1,w
  5220     1781  07A5               	addwf	___wmul@product+1,f
  5221     1782                     l347:
  5222     1782  3001               	movlw	1
  5223     1783                     u2875:
  5224     1783  1003               	clrc
  5225     1784  0DA2               	rlf	___wmul@multiplicand,f
  5226     1785  0DA3               	rlf	___wmul@multiplicand+1,f
  5227     1786  3EFF               	addlw	-1
  5228     1787  1D03               	skipz
  5229     1788  2F83               	goto	u2875
  5230     1789  3001               	movlw	1
  5231     178A                     u2885:
  5232     178A  1003               	clrc
  5233     178B  0CA1               	rrf	___wmul@multiplier+1,f
  5234     178C  0CA0               	rrf	___wmul@multiplier,f
  5235     178D  3EFF               	addlw	-1
  5236     178E  1D03               	skipz
  5237     178F  2F8A               	goto	u2885
  5238     1790  0820               	movf	___wmul@multiplier,w
  5239     1791  0421               	iorwf	___wmul@multiplier+1,w
  5240     1792  1D03               	btfss	3,2
  5241     1793  2F7A               	goto	l2266
  5242     1794  0825               	movf	___wmul@product+1,w
  5243     1795  00A1               	movwf	?___wmul+1
  5244     1796  0824               	movf	___wmul@product,w
  5245     1797  00A0               	movwf	?___wmul
  5246     1798  0008               	return
  5247     1799                     __end_of___wmul:
  5248                           
  5249                           	psect	text17
  5250     0887                     __ptext17:	
  5251 ;; *************** function ___lltoft *****************
  5252 ;; Defined at:
  5253 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lltoft.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  c               4    8[BANK0 ] unsigned long 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  exp             1   12[BANK0 ] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  3    8[BANK0 ] float 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 300/0
  5264 ;;		On exit  : 300/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5267 ;;      Params:         0       4       0       0       0
  5268 ;;      Locals:         0       1       0       0       0
  5269 ;;      Temps:          0       0       0       0       0
  5270 ;;      Totals:         0       5       0       0       0
  5271 ;;Total ram usage:        5 bytes
  5272 ;; Hardware stack levels used: 1
  5273 ;; Hardware stack levels required when called: 2
  5274 ;; This function calls:
  5275 ;;		___ftpack
  5276 ;; This function is called by:
  5277 ;;		_sprintf
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281     0887                     ___lltoft:	
  5282                           ;psect for function ___lltoft
  5283                           
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5287     0887  308E               	movlw	142
  5288     0888  00AC               	movwf	___lltoft@exp
  5289     0889                     l2412:
  5290     0889  30FF               	movlw	255
  5291     088A  052B               	andwf	___lltoft@c+3,w
  5292     088B  1903               	btfsc	3,2
  5293     088C  289B               	goto	l2414
  5294     088D  3001               	movlw	1
  5295     088E                     u3185:
  5296     088E  1003               	clrc
  5297     088F  0CAB               	rrf	___lltoft@c+3,f
  5298     0890  0CAA               	rrf	___lltoft@c+2,f
  5299     0891  0CA9               	rrf	___lltoft@c+1,f
  5300     0892  0CA8               	rrf	___lltoft@c,f
  5301     0893  3EFF               	addlw	-1
  5302     0894  1D03               	skipz
  5303     0895  288E               	goto	u3185
  5304     0896  3001               	movlw	1
  5305     0897  00FF               	movwf	127
  5306     0898  087F               	movf	127,w
  5307     0899  07AC               	addwf	___lltoft@exp,f
  5308     089A  2889               	goto	l2412
  5309     089B                     l2414:
  5310     089B  0828               	movf	___lltoft@c,w
  5311     089C  00A0               	movwf	___ftpack@arg
  5312     089D  0829               	movf	___lltoft@c+1,w
  5313     089E  00A1               	movwf	___ftpack@arg+1
  5314     089F  082A               	movf	___lltoft@c+2,w
  5315     08A0  00A2               	movwf	___ftpack@arg+2
  5316     08A1  082C               	movf	___lltoft@exp,w
  5317     08A2  00A3               	movwf	___ftpack@exp
  5318     08A3  01A4               	clrf	___ftpack@sign
  5319     08A4  120A  158A  2261   	fcall	___ftpack
  5320     08A7  0820               	movf	?___ftpack,w
  5321     08A8  00A8               	movwf	?___lltoft
  5322     08A9  0821               	movf	?___ftpack+1,w
  5323     08AA  00A9               	movwf	?___lltoft+1
  5324     08AB  0822               	movf	?___ftpack+2,w
  5325     08AC  00AA               	movwf	?___lltoft+2
  5326     08AD  0008               	return
  5327     08AE                     __end_of___lltoft:
  5328                           
  5329                           	psect	text18
  5330     095E                     __ptext18:	
  5331 ;; *************** function ___llmod *****************
  5332 ;; Defined at:
  5333 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  divisor         4    0[BANK0 ] unsigned long 
  5336 ;;  dividend        4    4[BANK0 ] unsigned long 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  counter         1    9[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  4    0[BANK0 ] unsigned long 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0, btemp+1
  5343 ;; Tracked objects:
  5344 ;;		On entry : 300/0
  5345 ;;		On exit  : 300/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5348 ;;      Params:         0       8       0       0       0
  5349 ;;      Locals:         0       1       0       0       0
  5350 ;;      Temps:          0       1       0       0       0
  5351 ;;      Totals:         0      10       0       0       0
  5352 ;;Total ram usage:       10 bytes
  5353 ;; Hardware stack levels used: 1
  5354 ;; Hardware stack levels required when called: 1
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_sprintf
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362     095E                     ___llmod:	
  5363                           ;psect for function ___llmod
  5364                           
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  5368     095E  0823               	movf	___llmod@divisor+3,w
  5369     095F  0422               	iorwf	___llmod@divisor+2,w
  5370     0960  0421               	iorwf	___llmod@divisor+1,w
  5371     0961  0420               	iorwf	___llmod@divisor,w
  5372     0962  1903               	skipnz
  5373     0963  29A1               	goto	l2402
  5374     0964  01A9               	clrf	___llmod@counter
  5375     0965  0AA9               	incf	___llmod@counter,f
  5376     0966                     l2392:
  5377     0966  1BA3               	btfsc	___llmod@divisor+3,7
  5378     0967  2976               	goto	l2394
  5379     0968  3001               	movlw	1
  5380     0969  00A8               	movwf	??___llmod
  5381     096A                     u3135:
  5382     096A  1003               	clrc
  5383     096B  0DA0               	rlf	___llmod@divisor,f
  5384     096C  0DA1               	rlf	___llmod@divisor+1,f
  5385     096D  0DA2               	rlf	___llmod@divisor+2,f
  5386     096E  0DA3               	rlf	___llmod@divisor+3,f
  5387     096F  0BA8               	decfsz	??___llmod,f
  5388     0970  296A               	goto	u3135
  5389     0971  3001               	movlw	1
  5390     0972  00FF               	movwf	127
  5391     0973  087F               	movf	127,w
  5392     0974  07A9               	addwf	___llmod@counter,f
  5393     0975  2966               	goto	l2392
  5394     0976                     l2394:
  5395     0976  0823               	movf	___llmod@divisor+3,w
  5396     0977  0227               	subwf	___llmod@dividend+3,w
  5397     0978  1D03               	skipz
  5398     0979  2984               	goto	u3155
  5399     097A  0822               	movf	___llmod@divisor+2,w
  5400     097B  0226               	subwf	___llmod@dividend+2,w
  5401     097C  1D03               	skipz
  5402     097D  2984               	goto	u3155
  5403     097E  0821               	movf	___llmod@divisor+1,w
  5404     097F  0225               	subwf	___llmod@dividend+1,w
  5405     0980  1D03               	skipz
  5406     0981  2984               	goto	u3155
  5407     0982  0820               	movf	___llmod@divisor,w
  5408     0983  0224               	subwf	___llmod@dividend,w
  5409     0984                     u3155:
  5410     0984  1C03               	skipc
  5411     0985  2994               	goto	l2398
  5412     0986  0820               	movf	___llmod@divisor,w
  5413     0987  02A4               	subwf	___llmod@dividend,f
  5414     0988  0821               	movf	___llmod@divisor+1,w
  5415     0989  1C03               	skipc
  5416     098A  0F21               	incfsz	___llmod@divisor+1,w
  5417     098B  02A5               	subwf	___llmod@dividend+1,f
  5418     098C  0822               	movf	___llmod@divisor+2,w
  5419     098D  1C03               	skipc
  5420     098E  0F22               	incfsz	___llmod@divisor+2,w
  5421     098F  02A6               	subwf	___llmod@dividend+2,f
  5422     0990  0823               	movf	___llmod@divisor+3,w
  5423     0991  1C03               	skipc
  5424     0992  0F23               	incfsz	___llmod@divisor+3,w
  5425     0993  02A7               	subwf	___llmod@dividend+3,f
  5426     0994                     l2398:
  5427     0994  3001               	movlw	1
  5428     0995                     u3165:
  5429     0995  1003               	clrc
  5430     0996  0CA3               	rrf	___llmod@divisor+3,f
  5431     0997  0CA2               	rrf	___llmod@divisor+2,f
  5432     0998  0CA1               	rrf	___llmod@divisor+1,f
  5433     0999  0CA0               	rrf	___llmod@divisor,f
  5434     099A  3EFF               	addlw	-1
  5435     099B  1D03               	skipz
  5436     099C  2995               	goto	u3165
  5437     099D  3001               	movlw	1
  5438     099E  02A9               	subwf	___llmod@counter,f
  5439     099F  1D03               	btfss	3,2
  5440     09A0  2976               	goto	l2394
  5441     09A1                     l2402:
  5442     09A1  0827               	movf	___llmod@dividend+3,w
  5443     09A2  00A3               	movwf	?___llmod+3
  5444     09A3  0826               	movf	___llmod@dividend+2,w
  5445     09A4  00A2               	movwf	?___llmod+2
  5446     09A5  0825               	movf	___llmod@dividend+1,w
  5447     09A6  00A1               	movwf	?___llmod+1
  5448     09A7  0824               	movf	___llmod@dividend,w
  5449     09A8  00A0               	movwf	?___llmod
  5450     09A9  0008               	return
  5451     09AA                     __end_of___llmod:
  5452                           
  5453                           	psect	text19
  5454     0A03                     __ptext19:	
  5455 ;; *************** function ___lldiv *****************
  5456 ;; Defined at:
  5457 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  divisor         4    0[BANK0 ] unsigned long 
  5460 ;;  dividend        4    4[BANK0 ] unsigned long 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  quotient        4    9[BANK0 ] unsigned long 
  5463 ;;  counter         1   13[BANK0 ] unsigned char 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;                  4    0[BANK0 ] unsigned long 
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0, btemp+1
  5468 ;; Tracked objects:
  5469 ;;		On entry : 300/0
  5470 ;;		On exit  : 300/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5473 ;;      Params:         0       8       0       0       0
  5474 ;;      Locals:         0       5       0       0       0
  5475 ;;      Temps:          0       1       0       0       0
  5476 ;;      Totals:         0      14       0       0       0
  5477 ;;Total ram usage:       14 bytes
  5478 ;; Hardware stack levels used: 1
  5479 ;; Hardware stack levels required when called: 1
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_sprintf
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487     0A03                     ___lldiv:	
  5488                           ;psect for function ___lldiv
  5489                           
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  5493     0A03  3000               	movlw	0
  5494     0A04  00AC               	movwf	___lldiv@quotient+3
  5495     0A05  3000               	movlw	0
  5496     0A06  00AB               	movwf	___lldiv@quotient+2
  5497     0A07  3000               	movlw	0
  5498     0A08  00AA               	movwf	___lldiv@quotient+1
  5499     0A09  3000               	movlw	0
  5500     0A0A  00A9               	movwf	___lldiv@quotient
  5501     0A0B  0823               	movf	___lldiv@divisor+3,w
  5502     0A0C  0422               	iorwf	___lldiv@divisor+2,w
  5503     0A0D  0421               	iorwf	___lldiv@divisor+1,w
  5504     0A0E  0420               	iorwf	___lldiv@divisor,w
  5505     0A0F  1903               	skipnz
  5506     0A10  2A58               	goto	l2300
  5507     0A11  01AD               	clrf	___lldiv@counter
  5508     0A12  0AAD               	incf	___lldiv@counter,f
  5509     0A13                     l2286:
  5510     0A13  1BA3               	btfsc	___lldiv@divisor+3,7
  5511     0A14  2A23               	goto	l2288
  5512     0A15  3001               	movlw	1
  5513     0A16  00A8               	movwf	??___lldiv
  5514     0A17                     u2915:
  5515     0A17  1003               	clrc
  5516     0A18  0DA0               	rlf	___lldiv@divisor,f
  5517     0A19  0DA1               	rlf	___lldiv@divisor+1,f
  5518     0A1A  0DA2               	rlf	___lldiv@divisor+2,f
  5519     0A1B  0DA3               	rlf	___lldiv@divisor+3,f
  5520     0A1C  0BA8               	decfsz	??___lldiv,f
  5521     0A1D  2A17               	goto	u2915
  5522     0A1E  3001               	movlw	1
  5523     0A1F  00FF               	movwf	127
  5524     0A20  087F               	movf	127,w
  5525     0A21  07AD               	addwf	___lldiv@counter,f
  5526     0A22  2A13               	goto	l2286
  5527     0A23                     l2288:
  5528     0A23  3001               	movlw	1
  5529     0A24  00A8               	movwf	??___lldiv
  5530     0A25                     u2935:
  5531     0A25  1003               	clrc
  5532     0A26  0DA9               	rlf	___lldiv@quotient,f
  5533     0A27  0DAA               	rlf	___lldiv@quotient+1,f
  5534     0A28  0DAB               	rlf	___lldiv@quotient+2,f
  5535     0A29  0DAC               	rlf	___lldiv@quotient+3,f
  5536     0A2A  0BA8               	decfsz	??___lldiv,f
  5537     0A2B  2A25               	goto	u2935
  5538     0A2C  0823               	movf	___lldiv@divisor+3,w
  5539     0A2D  0227               	subwf	___lldiv@dividend+3,w
  5540     0A2E  1D03               	skipz
  5541     0A2F  2A3A               	goto	u2945
  5542     0A30  0822               	movf	___lldiv@divisor+2,w
  5543     0A31  0226               	subwf	___lldiv@dividend+2,w
  5544     0A32  1D03               	skipz
  5545     0A33  2A3A               	goto	u2945
  5546     0A34  0821               	movf	___lldiv@divisor+1,w
  5547     0A35  0225               	subwf	___lldiv@dividend+1,w
  5548     0A36  1D03               	skipz
  5549     0A37  2A3A               	goto	u2945
  5550     0A38  0820               	movf	___lldiv@divisor,w
  5551     0A39  0224               	subwf	___lldiv@dividend,w
  5552     0A3A                     u2945:
  5553     0A3A  1C03               	skipc
  5554     0A3B  2A4B               	goto	l2296
  5555     0A3C  0820               	movf	___lldiv@divisor,w
  5556     0A3D  02A4               	subwf	___lldiv@dividend,f
  5557     0A3E  0821               	movf	___lldiv@divisor+1,w
  5558     0A3F  1C03               	skipc
  5559     0A40  0F21               	incfsz	___lldiv@divisor+1,w
  5560     0A41  02A5               	subwf	___lldiv@dividend+1,f
  5561     0A42  0822               	movf	___lldiv@divisor+2,w
  5562     0A43  1C03               	skipc
  5563     0A44  0F22               	incfsz	___lldiv@divisor+2,w
  5564     0A45  02A6               	subwf	___lldiv@dividend+2,f
  5565     0A46  0823               	movf	___lldiv@divisor+3,w
  5566     0A47  1C03               	skipc
  5567     0A48  0F23               	incfsz	___lldiv@divisor+3,w
  5568     0A49  02A7               	subwf	___lldiv@dividend+3,f
  5569     0A4A  1429               	bsf	___lldiv@quotient,0
  5570     0A4B                     l2296:
  5571     0A4B  3001               	movlw	1
  5572     0A4C                     u2955:
  5573     0A4C  1003               	clrc
  5574     0A4D  0CA3               	rrf	___lldiv@divisor+3,f
  5575     0A4E  0CA2               	rrf	___lldiv@divisor+2,f
  5576     0A4F  0CA1               	rrf	___lldiv@divisor+1,f
  5577     0A50  0CA0               	rrf	___lldiv@divisor,f
  5578     0A51  3EFF               	addlw	-1
  5579     0A52  1D03               	skipz
  5580     0A53  2A4C               	goto	u2955
  5581     0A54  3001               	movlw	1
  5582     0A55  02AD               	subwf	___lldiv@counter,f
  5583     0A56  1D03               	btfss	3,2
  5584     0A57  2A23               	goto	l2288
  5585     0A58                     l2300:
  5586     0A58  082C               	movf	___lldiv@quotient+3,w
  5587     0A59  00A3               	movwf	?___lldiv+3
  5588     0A5A  082B               	movf	___lldiv@quotient+2,w
  5589     0A5B  00A2               	movwf	?___lldiv+2
  5590     0A5C  082A               	movf	___lldiv@quotient+1,w
  5591     0A5D  00A1               	movwf	?___lldiv+1
  5592     0A5E  0829               	movf	___lldiv@quotient,w
  5593     0A5F  00A0               	movwf	?___lldiv
  5594     0A60  0008               	return
  5595     0A61                     __end_of___lldiv:
  5596                           
  5597                           	psect	text20
  5598     0780                     __ptext20:	
  5599 ;; *************** function ___fttol *****************
  5600 ;; Defined at:
  5601 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;  f1              3   39[BANK0 ] float 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;  lval            4   47[BANK0 ] unsigned long 
  5606 ;;  exp1            1   51[BANK0 ] unsigned char 
  5607 ;;  sign1           1   46[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  4   39[BANK0 ] long 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, btemp+1
  5612 ;; Tracked objects:
  5613 ;;		On entry : 300/0
  5614 ;;		On exit  : 300/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5617 ;;      Params:         0       4       0       0       0
  5618 ;;      Locals:         0       6       0       0       0
  5619 ;;      Temps:          0       3       0       0       0
  5620 ;;      Totals:         0      13       0       0       0
  5621 ;;Total ram usage:       13 bytes
  5622 ;; Hardware stack levels used: 1
  5623 ;; Hardware stack levels required when called: 1
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_sprintf
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631     0780                     ___fttol:	
  5632                           ;psect for function ___fttol
  5633                           
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  5637     0780  0847               	movf	___fttol@f1,w
  5638     0781  00CB               	movwf	??___fttol
  5639     0782  0848               	movf	___fttol@f1+1,w
  5640     0783  00CC               	movwf	??___fttol+1
  5641     0784  0849               	movf	___fttol@f1+2,w
  5642     0785  00CD               	movwf	??___fttol+2
  5643     0786  1003               	clrc
  5644     0787  0D4C               	rlf	??___fttol+1,w
  5645     0788  0D4D               	rlf	??___fttol+2,w
  5646     0789  00D3               	movwf	___fttol@exp1
  5647     078A  0853               	movf	___fttol@exp1,w
  5648     078B  1D03               	btfss	3,2
  5649     078C  2F96               	goto	l2346
  5650     078D                     l2342:
  5651     078D  3000               	movlw	0
  5652     078E  00CA               	movwf	?___fttol+3
  5653     078F  3000               	movlw	0
  5654     0790  00C9               	movwf	?___fttol+2
  5655     0791  3000               	movlw	0
  5656     0792  00C8               	movwf	?___fttol+1
  5657     0793  3000               	movlw	0
  5658     0794  00C7               	movwf	?___fttol
  5659     0795  0008               	return
  5660     0796                     l2346:
  5661     0796  0847               	movf	___fttol@f1,w
  5662     0797  00CB               	movwf	??___fttol
  5663     0798  0848               	movf	___fttol@f1+1,w
  5664     0799  00CC               	movwf	??___fttol+1
  5665     079A  0849               	movf	___fttol@f1+2,w
  5666     079B  00CD               	movwf	??___fttol+2
  5667     079C  3017               	movlw	23
  5668     079D                     u3035:
  5669     079D  1003               	clrc
  5670     079E  0CCD               	rrf	??___fttol+2,f
  5671     079F  0CCC               	rrf	??___fttol+1,f
  5672     07A0  0CCB               	rrf	??___fttol,f
  5673     07A1  3EFF               	addlw	-1
  5674     07A2  1D03               	skipz
  5675     07A3  2F9D               	goto	u3035
  5676     07A4  084B               	movf	??___fttol,w
  5677     07A5  00CE               	movwf	___fttol@sign1
  5678     07A6  17C8               	bsf	___fttol@f1+1,7
  5679     07A7  30FF               	movlw	255
  5680     07A8  05C7               	andwf	___fttol@f1,f
  5681     07A9  30FF               	movlw	255
  5682     07AA  05C8               	andwf	___fttol@f1+1,f
  5683     07AB  3000               	movlw	0
  5684     07AC  05C9               	andwf	___fttol@f1+2,f
  5685     07AD  0847               	movf	___fttol@f1,w
  5686     07AE  00CF               	movwf	___fttol@lval
  5687     07AF  0848               	movf	___fttol@f1+1,w
  5688     07B0  00D0               	movwf	___fttol@lval+1
  5689     07B1  0849               	movf	___fttol@f1+2,w
  5690     07B2  00D1               	movwf	___fttol@lval+2
  5691     07B3  01D2               	clrf	___fttol@lval+3
  5692     07B4  308E               	movlw	142
  5693     07B5  02D3               	subwf	___fttol@exp1,f
  5694     07B6  1FD3               	btfss	___fttol@exp1,7
  5695     07B7  2FCD               	goto	l2368
  5696     07B8  0853               	movf	___fttol@exp1,w
  5697     07B9  3A80               	xorlw	128
  5698     07BA  3E8F               	addlw	143
  5699     07BB  1C03               	btfss	3,0
  5700     07BC  2F8D               	goto	l2342
  5701     07BD                     l2364:
  5702     07BD  3001               	movlw	1
  5703     07BE                     u3065:
  5704     07BE  1003               	clrc
  5705     07BF  0CD2               	rrf	___fttol@lval+3,f
  5706     07C0  0CD1               	rrf	___fttol@lval+2,f
  5707     07C1  0CD0               	rrf	___fttol@lval+1,f
  5708     07C2  0CCF               	rrf	___fttol@lval,f
  5709     07C3  3EFF               	addlw	-1
  5710     07C4  1D03               	skipz
  5711     07C5  2FBE               	goto	u3065
  5712     07C6  3001               	movlw	1
  5713     07C7  00FF               	movwf	127
  5714     07C8  087F               	movf	127,w
  5715     07C9  07D3               	addwf	___fttol@exp1,f
  5716     07CA  1903               	btfsc	3,2
  5717     07CB  2FE0               	goto	l2376
  5718     07CC  2FBD               	goto	l2364
  5719     07CD                     l2368:
  5720     07CD  3018               	movlw	24
  5721     07CE  0253               	subwf	___fttol@exp1,w
  5722     07CF  1803               	btfsc	3,0
  5723     07D0  2F8D               	goto	l2342
  5724     07D1                     l684:
  5725     07D1  0853               	movf	___fttol@exp1,w
  5726     07D2  1903               	btfsc	3,2
  5727     07D3  2FE0               	goto	l2376
  5728     07D4  3001               	movlw	1
  5729     07D5  00CB               	movwf	??___fttol
  5730     07D6                     u3095:
  5731     07D6  1003               	clrc
  5732     07D7  0DCF               	rlf	___fttol@lval,f
  5733     07D8  0DD0               	rlf	___fttol@lval+1,f
  5734     07D9  0DD1               	rlf	___fttol@lval+2,f
  5735     07DA  0DD2               	rlf	___fttol@lval+3,f
  5736     07DB  0BCB               	decfsz	??___fttol,f
  5737     07DC  2FD6               	goto	u3095
  5738     07DD  3001               	movlw	1
  5739     07DE  02D3               	subwf	___fttol@exp1,f
  5740     07DF  2FD1               	goto	l684
  5741     07E0                     l2376:
  5742     07E0  084E               	movf	___fttol@sign1,w
  5743     07E1  1903               	btfsc	3,2
  5744     07E2  2FEE               	goto	l2380
  5745     07E3  09CF               	comf	___fttol@lval,f
  5746     07E4  09D0               	comf	___fttol@lval+1,f
  5747     07E5  09D1               	comf	___fttol@lval+2,f
  5748     07E6  09D2               	comf	___fttol@lval+3,f
  5749     07E7  0ACF               	incf	___fttol@lval,f
  5750     07E8  1903               	skipnz
  5751     07E9  0AD0               	incf	___fttol@lval+1,f
  5752     07EA  1903               	skipnz
  5753     07EB  0AD1               	incf	___fttol@lval+2,f
  5754     07EC  1903               	skipnz
  5755     07ED  0AD2               	incf	___fttol@lval+3,f
  5756     07EE                     l2380:
  5757     07EE  0852               	movf	___fttol@lval+3,w
  5758     07EF  00CA               	movwf	?___fttol+3
  5759     07F0  0851               	movf	___fttol@lval+2,w
  5760     07F1  00C9               	movwf	?___fttol+2
  5761     07F2  0850               	movf	___fttol@lval+1,w
  5762     07F3  00C8               	movwf	?___fttol+1
  5763     07F4  084F               	movf	___fttol@lval,w
  5764     07F5  00C7               	movwf	?___fttol
  5765     07F6  0008               	return
  5766     07F7                     __end_of___fttol:
  5767                           
  5768                           	psect	text21
  5769     173C                     __ptext21:	
  5770 ;; *************** function ___ftsub *****************
  5771 ;; Defined at:
  5772 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftsub.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  f2              3   54[BANK0 ] float 
  5775 ;;  f1              3   57[BANK0 ] float 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  3   54[BANK0 ] float 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 300/0
  5784 ;;		On exit  : 300/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5787 ;;      Params:         0       6       0       0       0
  5788 ;;      Locals:         0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0
  5790 ;;      Totals:         0       6       0       0       0
  5791 ;;Total ram usage:        6 bytes
  5792 ;; Hardware stack levels used: 1
  5793 ;; Hardware stack levels required when called: 3
  5794 ;; This function calls:
  5795 ;;		___ftadd
  5796 ;; This function is called by:
  5797 ;;		_sprintf
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801     173C                     ___ftsub:	
  5802                           ;psect for function ___ftsub
  5803                           
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5807     173C  0858               	movf	___ftsub@f2+2,w
  5808     173D  0457               	iorwf	___ftsub@f2+1,w
  5809     173E  0456               	iorwf	___ftsub@f2,w
  5810     173F  1903               	skipnz
  5811     1740  2F43               	goto	l2336
  5812     1741  3080               	movlw	128
  5813     1742  06D8               	xorwf	___ftsub@f2+2,f
  5814     1743                     l2336:
  5815     1743  0859               	movf	___ftsub@f1,w
  5816     1744  00CA               	movwf	___ftadd@f1
  5817     1745  085A               	movf	___ftsub@f1+1,w
  5818     1746  00CB               	movwf	___ftadd@f1+1
  5819     1747  085B               	movf	___ftsub@f1+2,w
  5820     1748  00CC               	movwf	___ftadd@f1+2
  5821     1749  0856               	movf	___ftsub@f2,w
  5822     174A  00CD               	movwf	___ftadd@f2
  5823     174B  0857               	movf	___ftsub@f2+1,w
  5824     174C  00CE               	movwf	___ftadd@f2+1
  5825     174D  0858               	movf	___ftsub@f2+2,w
  5826     174E  00CF               	movwf	___ftadd@f2+2
  5827     174F  120A  158A  24B3   	fcall	___ftadd
  5828     1752  084A               	movf	?___ftadd,w
  5829     1753  00D6               	movwf	?___ftsub
  5830     1754  084B               	movf	?___ftadd+1,w
  5831     1755  00D7               	movwf	?___ftsub+1
  5832     1756  084C               	movf	?___ftadd+2,w
  5833     1757  00D8               	movwf	?___ftsub+2
  5834     1758  0008               	return
  5835     1759                     __end_of___ftsub:
  5836                           
  5837                           	psect	text22
  5838     0CB3                     __ptext22:	
  5839 ;; *************** function ___ftadd *****************
  5840 ;; Defined at:
  5841 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftadd.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;  f1              3   42[BANK0 ] float 
  5844 ;;  f2              3   45[BANK0 ] float 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;  exp1            1   53[BANK0 ] unsigned char 
  5847 ;;  exp2            1   52[BANK0 ] unsigned char 
  5848 ;;  sign            1   51[BANK0 ] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  3   42[BANK0 ] float 
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 300/0
  5855 ;;		On exit  : 300/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5858 ;;      Params:         0       6       0       0       0
  5859 ;;      Locals:         0       3       0       0       0
  5860 ;;      Temps:          0       3       0       0       0
  5861 ;;      Totals:         0      12       0       0       0
  5862 ;;Total ram usage:       12 bytes
  5863 ;; Hardware stack levels used: 1
  5864 ;; Hardware stack levels required when called: 2
  5865 ;; This function calls:
  5866 ;;		___ftpack
  5867 ;; This function is called by:
  5868 ;;		_sprintf
  5869 ;;		___ftsub
  5870 ;; This function uses a non-reentrant model
  5871 ;;
  5872                           
  5873     0CB3                     ___ftadd:	
  5874                           ;psect for function ___ftadd
  5875                           
  5876                           
  5877                           ;incstack = 0
  5878                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5879     0CB3  084A               	movf	___ftadd@f1,w
  5880     0CB4  00D0               	movwf	??___ftadd
  5881     0CB5  084B               	movf	___ftadd@f1+1,w
  5882     0CB6  00D1               	movwf	??___ftadd+1
  5883     0CB7  084C               	movf	___ftadd@f1+2,w
  5884     0CB8  00D2               	movwf	??___ftadd+2
  5885     0CB9  1003               	clrc
  5886     0CBA  0D51               	rlf	??___ftadd+1,w
  5887     0CBB  0D52               	rlf	??___ftadd+2,w
  5888     0CBC  00D5               	movwf	___ftadd@exp1
  5889     0CBD  084D               	movf	___ftadd@f2,w
  5890     0CBE  00D0               	movwf	??___ftadd
  5891     0CBF  084E               	movf	___ftadd@f2+1,w
  5892     0CC0  00D1               	movwf	??___ftadd+1
  5893     0CC1  084F               	movf	___ftadd@f2+2,w
  5894     0CC2  00D2               	movwf	??___ftadd+2
  5895     0CC3  1003               	clrc
  5896     0CC4  0D51               	rlf	??___ftadd+1,w
  5897     0CC5  0D52               	rlf	??___ftadd+2,w
  5898     0CC6  00D4               	movwf	___ftadd@exp2
  5899     0CC7  0855               	movf	___ftadd@exp1,w
  5900     0CC8  1903               	btfsc	3,2
  5901     0CC9  2CD6               	goto	l1920
  5902     0CCA  0854               	movf	___ftadd@exp2,w
  5903     0CCB  0255               	subwf	___ftadd@exp1,w
  5904     0CCC  1803               	skipnc
  5905     0CCD  2CDD               	goto	l1924
  5906     0CCE  0854               	movf	___ftadd@exp2,w
  5907     0CCF  00D0               	movwf	??___ftadd
  5908     0CD0  0855               	movf	___ftadd@exp1,w
  5909     0CD1  02D0               	subwf	??___ftadd,f
  5910     0CD2  3019               	movlw	25
  5911     0CD3  0250               	subwf	??___ftadd,w
  5912     0CD4  1C03               	skipc
  5913     0CD5  2CDD               	goto	l1924
  5914     0CD6                     l1920:
  5915     0CD6  084D               	movf	___ftadd@f2,w
  5916     0CD7  00CA               	movwf	?___ftadd
  5917     0CD8  084E               	movf	___ftadd@f2+1,w
  5918     0CD9  00CB               	movwf	?___ftadd+1
  5919     0CDA  084F               	movf	___ftadd@f2+2,w
  5920     0CDB  00CC               	movwf	?___ftadd+2
  5921     0CDC  0008               	return
  5922     0CDD                     l1924:
  5923     0CDD  0854               	movf	___ftadd@exp2,w
  5924     0CDE  1903               	btfsc	3,2
  5925     0CDF  0008               	return
  5926     0CE0  0855               	movf	___ftadd@exp1,w
  5927     0CE1  0254               	subwf	___ftadd@exp2,w
  5928     0CE2  1803               	skipnc
  5929     0CE3  2CEC               	goto	l1930
  5930     0CE4  0855               	movf	___ftadd@exp1,w
  5931     0CE5  00D0               	movwf	??___ftadd
  5932     0CE6  0854               	movf	___ftadd@exp2,w
  5933     0CE7  02D0               	subwf	??___ftadd,f
  5934     0CE8  3019               	movlw	25
  5935     0CE9  0250               	subwf	??___ftadd,w
  5936     0CEA  1803               	btfsc	3,0
  5937     0CEB  0008               	return
  5938     0CEC                     l1930:
  5939     0CEC  3006               	movlw	6
  5940     0CED  00D3               	movwf	___ftadd@sign
  5941     0CEE  1BCC               	btfsc	___ftadd@f1+2,7
  5942     0CEF  17D3               	bsf	___ftadd@sign,7
  5943     0CF0  1BCF               	btfsc	___ftadd@f2+2,7
  5944     0CF1  1753               	bsf	___ftadd@sign,6
  5945     0CF2  17CB               	bsf	___ftadd@f1+1,7
  5946     0CF3  30FF               	movlw	255
  5947     0CF4  05CA               	andwf	___ftadd@f1,f
  5948     0CF5  30FF               	movlw	255
  5949     0CF6  05CB               	andwf	___ftadd@f1+1,f
  5950     0CF7  3000               	movlw	0
  5951     0CF8  05CC               	andwf	___ftadd@f1+2,f
  5952     0CF9  17CE               	bsf	___ftadd@f2+1,7
  5953     0CFA  30FF               	movlw	255
  5954     0CFB  05CD               	andwf	___ftadd@f2,f
  5955     0CFC  30FF               	movlw	255
  5956     0CFD  05CE               	andwf	___ftadd@f2+1,f
  5957     0CFE  3000               	movlw	0
  5958     0CFF  05CF               	andwf	___ftadd@f2+2,f
  5959     0D00  0854               	movf	___ftadd@exp2,w
  5960     0D01  0255               	subwf	___ftadd@exp1,w
  5961     0D02  1803               	skipnc
  5962     0D03  2D2A               	goto	l1954
  5963     0D04                     l1942:
  5964     0D04  3001               	movlw	1
  5965     0D05                     u2195:
  5966     0D05  1003               	clrc
  5967     0D06  0DCD               	rlf	___ftadd@f2,f
  5968     0D07  0DCE               	rlf	___ftadd@f2+1,f
  5969     0D08  0DCF               	rlf	___ftadd@f2+2,f
  5970     0D09  3EFF               	addlw	-1
  5971     0D0A  1D03               	skipz
  5972     0D0B  2D05               	goto	u2195
  5973     0D0C  3001               	movlw	1
  5974     0D0D  02D4               	subwf	___ftadd@exp2,f
  5975     0D0E  0854               	movf	___ftadd@exp2,w
  5976     0D0F  0655               	xorwf	___ftadd@exp1,w
  5977     0D10  1903               	skipnz
  5978     0D11  2D25               	goto	l1952
  5979     0D12  3001               	movlw	1
  5980     0D13  02D3               	subwf	___ftadd@sign,f
  5981     0D14  0853               	movf	___ftadd@sign,w
  5982     0D15  3907               	andlw	7
  5983     0D16  1903               	btfsc	3,2
  5984     0D17  2D25               	goto	l1952
  5985     0D18  2D04               	goto	l1942
  5986     0D19                     l1948:
  5987     0D19  3001               	movlw	1
  5988     0D1A                     u2225:
  5989     0D1A  1003               	clrc
  5990     0D1B  0CCC               	rrf	___ftadd@f1+2,f
  5991     0D1C  0CCB               	rrf	___ftadd@f1+1,f
  5992     0D1D  0CCA               	rrf	___ftadd@f1,f
  5993     0D1E  3EFF               	addlw	-1
  5994     0D1F  1D03               	skipz
  5995     0D20  2D1A               	goto	u2225
  5996     0D21  3001               	movlw	1
  5997     0D22  00FF               	movwf	127
  5998     0D23  087F               	movf	127,w
  5999     0D24  07D5               	addwf	___ftadd@exp1,f
  6000     0D25                     l1952:
  6001     0D25  0855               	movf	___ftadd@exp1,w
  6002     0D26  0654               	xorwf	___ftadd@exp2,w
  6003     0D27  1903               	btfsc	3,2
  6004     0D28  2D53               	goto	l607
  6005     0D29  2D19               	goto	l1948
  6006     0D2A                     l1954:
  6007     0D2A  0855               	movf	___ftadd@exp1,w
  6008     0D2B  0254               	subwf	___ftadd@exp2,w
  6009     0D2C  1803               	skipnc
  6010     0D2D  2D53               	goto	l607
  6011     0D2E                     l1956:
  6012     0D2E  3001               	movlw	1
  6013     0D2F                     u2255:
  6014     0D2F  1003               	clrc
  6015     0D30  0DCA               	rlf	___ftadd@f1,f
  6016     0D31  0DCB               	rlf	___ftadd@f1+1,f
  6017     0D32  0DCC               	rlf	___ftadd@f1+2,f
  6018     0D33  3EFF               	addlw	-1
  6019     0D34  1D03               	skipz
  6020     0D35  2D2F               	goto	u2255
  6021     0D36  3001               	movlw	1
  6022     0D37  02D5               	subwf	___ftadd@exp1,f
  6023     0D38  0854               	movf	___ftadd@exp2,w
  6024     0D39  0655               	xorwf	___ftadd@exp1,w
  6025     0D3A  1903               	skipnz
  6026     0D3B  2D4F               	goto	l1966
  6027     0D3C  3001               	movlw	1
  6028     0D3D  02D3               	subwf	___ftadd@sign,f
  6029     0D3E  0853               	movf	___ftadd@sign,w
  6030     0D3F  3907               	andlw	7
  6031     0D40  1903               	btfsc	3,2
  6032     0D41  2D4F               	goto	l1966
  6033     0D42  2D2E               	goto	l1956
  6034     0D43                     l1962:
  6035     0D43  3001               	movlw	1
  6036     0D44                     u2285:
  6037     0D44  1003               	clrc
  6038     0D45  0CCF               	rrf	___ftadd@f2+2,f
  6039     0D46  0CCE               	rrf	___ftadd@f2+1,f
  6040     0D47  0CCD               	rrf	___ftadd@f2,f
  6041     0D48  3EFF               	addlw	-1
  6042     0D49  1D03               	skipz
  6043     0D4A  2D44               	goto	u2285
  6044     0D4B  3001               	movlw	1
  6045     0D4C  00FF               	movwf	127
  6046     0D4D  087F               	movf	127,w
  6047     0D4E  07D4               	addwf	___ftadd@exp2,f
  6048     0D4F                     l1966:
  6049     0D4F  0855               	movf	___ftadd@exp1,w
  6050     0D50  0654               	xorwf	___ftadd@exp2,w
  6051     0D51  1D03               	skipz
  6052     0D52  2D43               	goto	l1962
  6053     0D53                     l607:
  6054     0D53  1FD3               	btfss	___ftadd@sign,7
  6055     0D54  2D65               	goto	l1970
  6056     0D55  30FF               	movlw	255
  6057     0D56  06CA               	xorwf	___ftadd@f1,f
  6058     0D57  30FF               	movlw	255
  6059     0D58  06CB               	xorwf	___ftadd@f1+1,f
  6060     0D59  30FF               	movlw	255
  6061     0D5A  06CC               	xorwf	___ftadd@f1+2,f
  6062     0D5B  3001               	movlw	1
  6063     0D5C  07CA               	addwf	___ftadd@f1,f
  6064     0D5D  3000               	movlw	0
  6065     0D5E  1803               	skipnc
  6066     0D5F  3001               	movlw	1
  6067     0D60  07CB               	addwf	___ftadd@f1+1,f
  6068     0D61  3000               	movlw	0
  6069     0D62  1803               	skipnc
  6070     0D63  3001               	movlw	1
  6071     0D64  07CC               	addwf	___ftadd@f1+2,f
  6072     0D65                     l1970:
  6073     0D65  1F53               	btfss	___ftadd@sign,6
  6074     0D66  2D77               	goto	l1974
  6075     0D67  30FF               	movlw	255
  6076     0D68  06CD               	xorwf	___ftadd@f2,f
  6077     0D69  30FF               	movlw	255
  6078     0D6A  06CE               	xorwf	___ftadd@f2+1,f
  6079     0D6B  30FF               	movlw	255
  6080     0D6C  06CF               	xorwf	___ftadd@f2+2,f
  6081     0D6D  3001               	movlw	1
  6082     0D6E  07CD               	addwf	___ftadd@f2,f
  6083     0D6F  3000               	movlw	0
  6084     0D70  1803               	skipnc
  6085     0D71  3001               	movlw	1
  6086     0D72  07CE               	addwf	___ftadd@f2+1,f
  6087     0D73  3000               	movlw	0
  6088     0D74  1803               	skipnc
  6089     0D75  3001               	movlw	1
  6090     0D76  07CF               	addwf	___ftadd@f2+2,f
  6091     0D77                     l1974:
  6092     0D77  01D3               	clrf	___ftadd@sign
  6093     0D78  084A               	movf	___ftadd@f1,w
  6094     0D79  07CD               	addwf	___ftadd@f2,f
  6095     0D7A  084B               	movf	___ftadd@f1+1,w
  6096     0D7B  1103               	clrz
  6097     0D7C  1803               	skipnc
  6098     0D7D  0A4B               	incf	___ftadd@f1+1,w
  6099     0D7E  1D03               	btfss	3,2
  6100     0D7F  07CE               	addwf	___ftadd@f2+1,f
  6101     0D80  084C               	movf	___ftadd@f1+2,w
  6102     0D81  1103               	clrz
  6103     0D82  1803               	skipnc
  6104     0D83  0A4C               	incf	___ftadd@f1+2,w
  6105     0D84  1D03               	btfss	3,2
  6106     0D85  07CF               	addwf	___ftadd@f2+2,f
  6107     0D86  1FCF               	btfss	___ftadd@f2+2,7
  6108     0D87  2D9A               	goto	l1984
  6109     0D88  30FF               	movlw	255
  6110     0D89  06CD               	xorwf	___ftadd@f2,f
  6111     0D8A  30FF               	movlw	255
  6112     0D8B  06CE               	xorwf	___ftadd@f2+1,f
  6113     0D8C  30FF               	movlw	255
  6114     0D8D  06CF               	xorwf	___ftadd@f2+2,f
  6115     0D8E  3001               	movlw	1
  6116     0D8F  07CD               	addwf	___ftadd@f2,f
  6117     0D90  3000               	movlw	0
  6118     0D91  1803               	skipnc
  6119     0D92  3001               	movlw	1
  6120     0D93  07CE               	addwf	___ftadd@f2+1,f
  6121     0D94  3000               	movlw	0
  6122     0D95  1803               	skipnc
  6123     0D96  3001               	movlw	1
  6124     0D97  07CF               	addwf	___ftadd@f2+2,f
  6125     0D98  01D3               	clrf	___ftadd@sign
  6126     0D99  0AD3               	incf	___ftadd@sign,f
  6127     0D9A                     l1984:
  6128     0D9A  084D               	movf	___ftadd@f2,w
  6129     0D9B  00A0               	movwf	___ftpack@arg
  6130     0D9C  084E               	movf	___ftadd@f2+1,w
  6131     0D9D  00A1               	movwf	___ftpack@arg+1
  6132     0D9E  084F               	movf	___ftadd@f2+2,w
  6133     0D9F  00A2               	movwf	___ftpack@arg+2
  6134     0DA0  0855               	movf	___ftadd@exp1,w
  6135     0DA1  00A3               	movwf	___ftpack@exp
  6136     0DA2  0853               	movf	___ftadd@sign,w
  6137     0DA3  00A4               	movwf	___ftpack@sign
  6138     0DA4  120A  158A  2261   	fcall	___ftpack
  6139     0DA7  0820               	movf	?___ftpack,w
  6140     0DA8  00CA               	movwf	?___ftadd
  6141     0DA9  0821               	movf	?___ftpack+1,w
  6142     0DAA  00CB               	movwf	?___ftadd+1
  6143     0DAB  0822               	movf	?___ftpack+2,w
  6144     0DAC  00CC               	movwf	?___ftadd+2
  6145     0DAD  0008               	return
  6146     0DAE                     __end_of___ftadd:
  6147                           
  6148                           	psect	text23
  6149     169D                     __ptext23:	
  6150 ;; *************** function ___ftneg *****************
  6151 ;; Defined at:
  6152 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftneg.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  f1              3    0[BANK0 ] float 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;                  3    0[BANK0 ] float 
  6159 ;; Registers used:
  6160 ;;		wreg
  6161 ;; Tracked objects:
  6162 ;;		On entry : 300/0
  6163 ;;		On exit  : 300/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6166 ;;      Params:         0       3       0       0       0
  6167 ;;      Locals:         0       0       0       0       0
  6168 ;;      Temps:          0       0       0       0       0
  6169 ;;      Totals:         0       3       0       0       0
  6170 ;;Total ram usage:        3 bytes
  6171 ;; Hardware stack levels used: 1
  6172 ;; Hardware stack levels required when called: 1
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_sprintf
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180     169D                     ___ftneg:	
  6181                           ;psect for function ___ftneg
  6182                           
  6183                           
  6184                           ;incstack = 0
  6185                           ; Regs used in ___ftneg: [wreg]
  6186     169D  0822               	movf	___ftneg@f1+2,w
  6187     169E  0421               	iorwf	___ftneg@f1+1,w
  6188     169F  0420               	iorwf	___ftneg@f1,w
  6189     16A0  1903               	skipnz
  6190     16A1  0008               	return
  6191     16A2  3080               	movlw	128
  6192     16A3  06A2               	xorwf	___ftneg@f1+2,f
  6193     16A4  0008               	return
  6194     16A5                     __end_of___ftneg:
  6195                           
  6196                           	psect	text24
  6197     08AE                     __ptext24:	
  6198 ;; *************** function ___ftge *****************
  6199 ;; Defined at:
  6200 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftge.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  ff1             3    0[BANK0 ] float 
  6203 ;;  ff2             3    3[BANK0 ] float 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;		None               void
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 300/0
  6212 ;;		On exit  : 300/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6215 ;;      Params:         0       6       0       0       0
  6216 ;;      Locals:         0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0
  6218 ;;      Totals:         0       6       0       0       0
  6219 ;;Total ram usage:        6 bytes
  6220 ;; Hardware stack levels used: 1
  6221 ;; Hardware stack levels required when called: 1
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_sprintf
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229     08AE                     ___ftge:	
  6230                           ;psect for function ___ftge
  6231                           
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6235     08AE  1FA2               	btfss	___ftge@ff1+2,7
  6236     08AF  28BD               	goto	l2308
  6237     08B0  0820               	movf	___ftge@ff1,w
  6238     08B1  3C00               	sublw	0
  6239     08B2  00A0               	movwf	___ftge@ff1
  6240     08B3  0821               	movf	___ftge@ff1+1,w
  6241     08B4  1C03               	skipc
  6242     08B5  0F21               	incfsz	___ftge@ff1+1,w
  6243     08B6  3C00               	sublw	0
  6244     08B7  00A1               	movwf	___ftge@ff1+1
  6245     08B8  0822               	movf	___ftge@ff1+2,w
  6246     08B9  1C03               	skipc
  6247     08BA  0F22               	incfsz	___ftge@ff1+2,w
  6248     08BB  3C80               	sublw	128
  6249     08BC  00A2               	movwf	___ftge@ff1+2
  6250     08BD                     l2308:
  6251     08BD  1FA5               	btfss	___ftge@ff2+2,7
  6252     08BE  28CC               	goto	l2312
  6253     08BF  0823               	movf	___ftge@ff2,w
  6254     08C0  3C00               	sublw	0
  6255     08C1  00A3               	movwf	___ftge@ff2
  6256     08C2  0824               	movf	___ftge@ff2+1,w
  6257     08C3  1C03               	skipc
  6258     08C4  0F24               	incfsz	___ftge@ff2+1,w
  6259     08C5  3C00               	sublw	0
  6260     08C6  00A4               	movwf	___ftge@ff2+1
  6261     08C7  0825               	movf	___ftge@ff2+2,w
  6262     08C8  1C03               	skipc
  6263     08C9  0F25               	incfsz	___ftge@ff2+2,w
  6264     08CA  3C80               	sublw	128
  6265     08CB  00A5               	movwf	___ftge@ff2+2
  6266     08CC                     l2312:
  6267     08CC  3080               	movlw	128
  6268     08CD  06A2               	xorwf	___ftge@ff1+2,f
  6269     08CE  3080               	movlw	128
  6270     08CF  06A5               	xorwf	___ftge@ff2+2,f
  6271     08D0  0825               	movf	___ftge@ff2+2,w
  6272     08D1  0222               	subwf	___ftge@ff1+2,w
  6273     08D2  1D03               	skipz
  6274     08D3  0008               	return
  6275     08D4  0824               	movf	___ftge@ff2+1,w
  6276     08D5  0221               	subwf	___ftge@ff1+1,w
  6277     08D6  1D03               	skipz
  6278     08D7  0008               	return
  6279     08D8  0823               	movf	___ftge@ff2,w
  6280     08D9  0220               	subwf	___ftge@ff1,w
  6281     08DA  0008               	return
  6282     08DB                     __end_of___ftge:
  6283                           
  6284                           	psect	text25
  6285     16BA                     __ptext25:	
  6286 ;; *************** function _init_inttimer *****************
  6287 ;; Defined at:
  6288 ;;		line 4 in file "inttimer.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2, status,0
  6297 ;; Tracked objects:
  6298 ;;		On entry : 300/0
  6299 ;;		On exit  : 300/100
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6302 ;;      Params:         0       0       0       0       0
  6303 ;;      Locals:         0       0       0       0       0
  6304 ;;      Temps:          0       0       0       0       0
  6305 ;;      Totals:         0       0       0       0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used: 1
  6308 ;; Hardware stack levels required when called: 1
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316     16BA                     _init_inttimer:	
  6317                           ;psect for function _init_inttimer
  6318                           
  6319                           
  6320                           ;inttimer.c: 6: T1CONbits.TMR1CS = 0;
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _init_inttimer: [wreg+status,2+status,0]
  6324     16BA  1090               	bcf	16,1	;volatile
  6325                           
  6326                           ;inttimer.c: 7: T1CONbits.T1CKPS = 0b00;
  6327     16BB  30CF               	movlw	-49
  6328     16BC  0590               	andwf	16,f	;volatile
  6329                           
  6330                           ;inttimer.c: 8: T1CONbits.T1SYNC = 0;
  6331     16BD  1110               	bcf	16,2	;volatile
  6332                           
  6333                           ;inttimer.c: 9: TMR1H = 0xFF;
  6334     16BE  30FF               	movlw	255
  6335     16BF  008F               	movwf	15	;volatile
  6336                           
  6337                           ;inttimer.c: 10: TMR1L = 0xE7;
  6338     16C0  30E7               	movlw	231
  6339     16C1  008E               	movwf	14	;volatile
  6340                           
  6341                           ;inttimer.c: 13: PIR1bits.ADIF = 0;
  6342     16C2  130C               	bcf	12,6	;volatile
  6343                           
  6344                           ;inttimer.c: 14: PIE1bits.ADIE = 1;
  6345     16C3  1683               	bsf	3,5	;RP0=1, select bank1
  6346     16C4  170C               	bsf	12,6	;volatile
  6347                           
  6348                           ;inttimer.c: 15: INTCONbits.PEIE = 1;
  6349     16C5  170B               	bsf	11,6	;volatile
  6350                           
  6351                           ;inttimer.c: 16: INTCONbits.GIE = 1;
  6352     16C6  178B               	bsf	11,7	;volatile
  6353     16C7  0008               	return
  6354     16C8                     __end_of_init_inttimer:
  6355                           
  6356                           	psect	text26
  6357     17DC                     __ptext26:	
  6358 ;; *************** function _init_ADC *****************
  6359 ;; Defined at:
  6360 ;;		line 3 in file "adc.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      void 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0, pclath, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : B00/300
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6374 ;;      Params:         0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0
  6376 ;;      Temps:          0       3       0       0       0
  6377 ;;      Totals:         0       3       0       0       0
  6378 ;;Total ram usage:        3 bytes
  6379 ;; Hardware stack levels used: 1
  6380 ;; Hardware stack levels required when called: 2
  6381 ;; This function calls:
  6382 ;;		_set_CHANNEL
  6383 ;; This function is called by:
  6384 ;;		_main
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388     17DC                     _init_ADC:	
  6389                           ;psect for function _init_ADC
  6390                           
  6391                           
  6392                           ;adc.c: 7: TRISAbits.TRISA0 = 1;
  6393                           
  6394                           ;incstack = 0
  6395                           ; Regs used in _init_ADC: [wreg+status,2+status,0+pclath+cstack]
  6396     17DC  1303               	bcf	3,6	;RP1=0, select bank1
  6397     17DD  1405               	bsf	5,0	;volatile
  6398                           
  6399                           ;adc.c: 8: ANSELbits.ANS0 = 1;
  6400     17DE  1703               	bsf	3,6	;RP1=1, select bank3
  6401     17DF  1408               	bsf	8,0	;volatile
  6402                           
  6403                           ;adc.c: 9: set_CHANNEL(0);
  6404     17E0  3000               	movlw	0
  6405     17E1  160A  118A  26AD  160A  118A  	fcall	_set_CHANNEL
  6406                           
  6407                           ;adc.c: 10: ADCON0bits.ADCS = 0b010;
  6408     17E6  081F               	movf	31,w	;volatile
  6409     17E7  393F               	andlw	-193
  6410     17E8  3880               	iorlw	128
  6411     17E9  009F               	movwf	31	;volatile
  6412                           
  6413                           ;adc.c: 11: ADCON1bits.ADFM = 1;
  6414     17EA  1683               	bsf	3,5	;RP0=1, select bank1
  6415     17EB  179F               	bsf	31,7	;volatile
  6416                           
  6417                           ;adc.c: 12: ADCON1bits.VCFG1 = 0;
  6418     17EC  129F               	bcf	31,5	;volatile
  6419                           
  6420                           ;adc.c: 13: ADCON1bits.VCFG0 = 0;
  6421     17ED  121F               	bcf	31,4	;volatile
  6422                           
  6423                           ;adc.c: 14: ADCON0bits.ADON = 1;
  6424     17EE  1283               	bcf	3,5	;RP0=0, select bank0
  6425     17EF  141F               	bsf	31,0	;volatile
  6426                           
  6427                           ;adc.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  6428     17F0  3002               	movlw	2
  6429     17F1  1283               	bcf	3,5	;RP0=0, select bank0
  6430     17F2  1303               	bcf	3,6	;RP1=0, select bank0
  6431     17F3  00A4               	movwf	??_init_ADC+2
  6432     17F4  3004               	movlw	4
  6433     17F5  00A3               	movwf	??_init_ADC+1
  6434     17F6  30B9               	movlw	185
  6435     17F7  00A2               	movwf	??_init_ADC
  6436     17F8                     u3537:
  6437     17F8  0BA2               	decfsz	??_init_ADC,f
  6438     17F9  2FF8               	goto	u3537
  6439     17FA  0BA3               	decfsz	??_init_ADC+1,f
  6440     17FB  2FF8               	goto	u3537
  6441     17FC  0BA4               	decfsz	??_init_ADC+2,f
  6442     17FD  2FF8               	goto	u3537
  6443     17FE  2FFF               	nop2
  6444     17FF  0008               	return
  6445     1800                     __end_of_init_ADC:
  6446                           
  6447                           	psect	text27
  6448     16AD                     __ptext27:	
  6449 ;; *************** function _set_CHANNEL *****************
  6450 ;; Defined at:
  6451 ;;		line 19 in file "adc.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;  channel         1    wreg     unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  channel         1    1[BANK0 ] unsigned char 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      void 
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0
  6460 ;; Tracked objects:
  6461 ;;		On entry : B00/300
  6462 ;;		On exit  : B00/0
  6463 ;;		Unchanged: 800/0
  6464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6465 ;;      Params:         0       0       0       0       0
  6466 ;;      Locals:         0       1       0       0       0
  6467 ;;      Temps:          0       1       0       0       0
  6468 ;;      Totals:         0       2       0       0       0
  6469 ;;Total ram usage:        2 bytes
  6470 ;; Hardware stack levels used: 1
  6471 ;; Hardware stack levels required when called: 1
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		_init_ADC
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479     16AD                     _set_CHANNEL:	
  6480                           ;psect for function _set_CHANNEL
  6481                           
  6482                           
  6483                           ;incstack = 0
  6484                           ; Regs used in _set_CHANNEL: [wreg+status,2+status,0]
  6485                           ;set_CHANNEL@channel stored from wreg
  6486     16AD  1283               	bcf	3,5	;RP0=0, select bank0
  6487     16AE  1303               	bcf	3,6	;RP1=0, select bank0
  6488     16AF  00A1               	movwf	set_CHANNEL@channel
  6489                           
  6490                           ;adc.c: 22: {;adc.c: 23: ADCON0bits.CHS = channel;
  6491     16B0  0821               	movf	set_CHANNEL@channel,w
  6492     16B1  00A0               	movwf	??_set_CHANNEL
  6493     16B2  0DA0               	rlf	??_set_CHANNEL,f
  6494     16B3  0DA0               	rlf	??_set_CHANNEL,f
  6495     16B4  081F               	movf	31,w	;volatile
  6496     16B5  0620               	xorwf	??_set_CHANNEL,w
  6497     16B6  39C3               	andlw	-61
  6498     16B7  0620               	xorwf	??_set_CHANNEL,w
  6499     16B8  009F               	movwf	31	;volatile
  6500                           
  6501                           ;adc.c: 24: }else
  6502     16B9  0008               	return
  6503     16BA                     __end_of_set_CHANNEL:
  6504                           
  6505                           	psect	text28
  6506     1697                     __ptext28:	
  6507 ;; *************** function _config_HAL *****************
  6508 ;; Defined at:
  6509 ;;		line 70 in file "newmain.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;		None
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      void 
  6516 ;; Registers used:
  6517 ;;		status,2
  6518 ;; Tracked objects:
  6519 ;;		On entry : B00/100
  6520 ;;		On exit  : B00/300
  6521 ;;		Unchanged: 800/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6523 ;;      Params:         0       0       0       0       0
  6524 ;;      Locals:         0       0       0       0       0
  6525 ;;      Temps:          0       0       0       0       0
  6526 ;;      Totals:         0       0       0       0       0
  6527 ;;Total ram usage:        0 bytes
  6528 ;; Hardware stack levels used: 1
  6529 ;; Hardware stack levels required when called: 1
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_main
  6534 ;; This function uses a non-reentrant model
  6535 ;;
  6536                           
  6537     1697                     _config_HAL:	
  6538                           ;psect for function _config_HAL
  6539                           
  6540                           
  6541                           ;newmain.c: 72: TRISD = 0x00;
  6542                           
  6543                           ;incstack = 0
  6544                           ; Regs used in _config_HAL: [status,2]
  6545     1697  0188               	clrf	8	;volatile
  6546                           
  6547                           ;newmain.c: 73: TRISE = 0x00;
  6548     1698  0189               	clrf	9	;volatile
  6549                           
  6550                           ;newmain.c: 74: ANSEL = 0x00;
  6551     1699  1703               	bsf	3,6	;RP1=1, select bank3
  6552     169A  0188               	clrf	8	;volatile
  6553                           
  6554                           ;newmain.c: 75: ANSELH = 0x00;
  6555     169B  0189               	clrf	9	;volatile
  6556     169C  0008               	return
  6557     169D                     __end_of_config_HAL:
  6558                           
  6559                           	psect	text29
  6560     16FA                     __ptext29:	
  6561 ;; *************** function ___lwtoft *****************
  6562 ;; Defined at:
  6563 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwtoft.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  c               2    8[BANK0 ] unsigned int 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  3    8[BANK0 ] float 
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : B00/800
  6574 ;;		On exit  : 300/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6577 ;;      Params:         0       3       0       0       0
  6578 ;;      Locals:         0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0
  6580 ;;      Totals:         0       3       0       0       0
  6581 ;;Total ram usage:        3 bytes
  6582 ;; Hardware stack levels used: 1
  6583 ;; Hardware stack levels required when called: 2
  6584 ;; This function calls:
  6585 ;;		___ftpack
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591     16FA                     ___lwtoft:	
  6592                           ;psect for function ___lwtoft
  6593                           
  6594                           
  6595                           ;incstack = 0
  6596                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6597     16FA  0828               	movf	___lwtoft@c,w
  6598     16FB  00A0               	movwf	___ftpack@arg
  6599     16FC  0829               	movf	___lwtoft@c+1,w
  6600     16FD  00A1               	movwf	___ftpack@arg+1
  6601     16FE  01A2               	clrf	___ftpack@arg+2
  6602     16FF  308E               	movlw	142
  6603     1700  00A3               	movwf	___ftpack@exp
  6604     1701  01A4               	clrf	___ftpack@sign
  6605     1702  120A  158A  2261   	fcall	___ftpack
  6606     1705  0820               	movf	?___ftpack,w
  6607     1706  00A8               	movwf	?___lwtoft
  6608     1707  0821               	movf	?___ftpack+1,w
  6609     1708  00A9               	movwf	?___lwtoft+1
  6610     1709  0822               	movf	?___ftpack+2,w
  6611     170A  00AA               	movwf	?___lwtoft+2
  6612     170B  0008               	return
  6613     170C                     __end_of___lwtoft:
  6614                           
  6615                           	psect	text30
  6616     0A61                     __ptext30:	
  6617 ;; *************** function ___ftpack *****************
  6618 ;; Defined at:
  6619 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  arg             3    0[BANK0 ] unsigned um
  6622 ;;  exp             1    3[BANK0 ] unsigned char 
  6623 ;;  sign            1    4[BANK0 ] unsigned char 
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  3    0[BANK0 ] float 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, btemp+1
  6630 ;; Tracked objects:
  6631 ;;		On entry : 300/800
  6632 ;;		On exit  : 300/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6635 ;;      Params:         0       5       0       0       0
  6636 ;;      Locals:         0       0       0       0       0
  6637 ;;      Temps:          0       3       0       0       0
  6638 ;;      Totals:         0       8       0       0       0
  6639 ;;Total ram usage:        8 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		___ftadd
  6646 ;;		___ftmul
  6647 ;;		___lltoft
  6648 ;;		___lwtoft
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652     0A61                     ___ftpack:	
  6653                           ;psect for function ___ftpack
  6654                           
  6655                           
  6656                           ;incstack = 0
  6657                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6658     0A61  0823               	movf	___ftpack@exp,w
  6659     0A62  1903               	btfsc	3,2
  6660     0A63  2A69               	goto	l1784
  6661     0A64  0822               	movf	___ftpack@arg+2,w
  6662     0A65  0421               	iorwf	___ftpack@arg+1,w
  6663     0A66  0420               	iorwf	___ftpack@arg,w
  6664     0A67  1D03               	skipz
  6665     0A68  2A7C               	goto	l1792
  6666     0A69                     l1784:
  6667     0A69  3000               	movlw	0
  6668     0A6A  00A0               	movwf	?___ftpack
  6669     0A6B  3000               	movlw	0
  6670     0A6C  00A1               	movwf	?___ftpack+1
  6671     0A6D  3000               	movlw	0
  6672     0A6E  00A2               	movwf	?___ftpack+2
  6673     0A6F  0008               	return
  6674     0A70                     l1788:
  6675     0A70  3001               	movlw	1
  6676     0A71  00FF               	movwf	127
  6677     0A72  087F               	movf	127,w
  6678     0A73  07A3               	addwf	___ftpack@exp,f
  6679     0A74  3001               	movlw	1
  6680     0A75                     u1795:
  6681     0A75  1003               	clrc
  6682     0A76  0CA2               	rrf	___ftpack@arg+2,f
  6683     0A77  0CA1               	rrf	___ftpack@arg+1,f
  6684     0A78  0CA0               	rrf	___ftpack@arg,f
  6685     0A79  3EFF               	addlw	-1
  6686     0A7A  1D03               	skipz
  6687     0A7B  2A75               	goto	u1795
  6688     0A7C                     l1792:
  6689     0A7C  30FE               	movlw	254
  6690     0A7D  0522               	andwf	___ftpack@arg+2,w
  6691     0A7E  1903               	btfsc	3,2
  6692     0A7F  2A97               	goto	l1800
  6693     0A80  2A70               	goto	l1788
  6694     0A81                     l1794:
  6695     0A81  3001               	movlw	1
  6696     0A82  00FF               	movwf	127
  6697     0A83  087F               	movf	127,w
  6698     0A84  07A3               	addwf	___ftpack@exp,f
  6699     0A85  3001               	movlw	1
  6700     0A86  07A0               	addwf	___ftpack@arg,f
  6701     0A87  3000               	movlw	0
  6702     0A88  1803               	skipnc
  6703     0A89  3001               	movlw	1
  6704     0A8A  07A1               	addwf	___ftpack@arg+1,f
  6705     0A8B  3000               	movlw	0
  6706     0A8C  1803               	skipnc
  6707     0A8D  3001               	movlw	1
  6708     0A8E  07A2               	addwf	___ftpack@arg+2,f
  6709     0A8F  3001               	movlw	1
  6710     0A90                     u1815:
  6711     0A90  1003               	clrc
  6712     0A91  0CA2               	rrf	___ftpack@arg+2,f
  6713     0A92  0CA1               	rrf	___ftpack@arg+1,f
  6714     0A93  0CA0               	rrf	___ftpack@arg,f
  6715     0A94  3EFF               	addlw	-1
  6716     0A95  1D03               	skipz
  6717     0A96  2A90               	goto	u1815
  6718     0A97                     l1800:
  6719     0A97  30FF               	movlw	255
  6720     0A98  0522               	andwf	___ftpack@arg+2,w
  6721     0A99  1903               	btfsc	3,2
  6722     0A9A  2AAA               	goto	l1804
  6723     0A9B  2A81               	goto	l1794
  6724     0A9C                     l1806:
  6725     0A9C  3002               	movlw	2
  6726     0A9D  0223               	subwf	___ftpack@exp,w
  6727     0A9E  1C03               	btfss	3,0
  6728     0A9F  2AAC               	goto	l583
  6729     0AA0  3001               	movlw	1
  6730     0AA1  02A3               	subwf	___ftpack@exp,f
  6731     0AA2  3001               	movlw	1
  6732     0AA3                     u1835:
  6733     0AA3  1003               	clrc
  6734     0AA4  0DA0               	rlf	___ftpack@arg,f
  6735     0AA5  0DA1               	rlf	___ftpack@arg+1,f
  6736     0AA6  0DA2               	rlf	___ftpack@arg+2,f
  6737     0AA7  3EFF               	addlw	-1
  6738     0AA8  1D03               	skipz
  6739     0AA9  2AA3               	goto	u1835
  6740     0AAA                     l1804:
  6741     0AAA  1FA1               	btfss	___ftpack@arg+1,7
  6742     0AAB  2A9C               	goto	l1806
  6743     0AAC                     l583:
  6744     0AAC  1823               	btfsc	___ftpack@exp,0
  6745     0AAD  2AB4               	goto	l584
  6746     0AAE  30FF               	movlw	255
  6747     0AAF  05A0               	andwf	___ftpack@arg,f
  6748     0AB0  307F               	movlw	127
  6749     0AB1  05A1               	andwf	___ftpack@arg+1,f
  6750     0AB2  30FF               	movlw	255
  6751     0AB3  05A2               	andwf	___ftpack@arg+2,f
  6752     0AB4                     l584:
  6753     0AB4  1003               	clrc
  6754     0AB5  0CA3               	rrf	___ftpack@exp,f
  6755     0AB6  0823               	movf	___ftpack@exp,w
  6756     0AB7  00A5               	movwf	??___ftpack
  6757     0AB8  01A6               	clrf	??___ftpack+1
  6758     0AB9  01A7               	clrf	??___ftpack+2
  6759     0ABA  3010               	movlw	16
  6760     0ABB                     u1875:
  6761     0ABB  1003               	clrc
  6762     0ABC  0DA5               	rlf	??___ftpack,f
  6763     0ABD  0DA6               	rlf	??___ftpack+1,f
  6764     0ABE  0DA7               	rlf	??___ftpack+2,f
  6765     0ABF  3EFF               	addlw	-1
  6766     0AC0  1D03               	skipz
  6767     0AC1  2ABB               	goto	u1875
  6768     0AC2  0825               	movf	??___ftpack,w
  6769     0AC3  04A0               	iorwf	___ftpack@arg,f
  6770     0AC4  0826               	movf	??___ftpack+1,w
  6771     0AC5  04A1               	iorwf	___ftpack@arg+1,f
  6772     0AC6  0827               	movf	??___ftpack+2,w
  6773     0AC7  04A2               	iorwf	___ftpack@arg+2,f
  6774     0AC8  0824               	movf	___ftpack@sign,w
  6775     0AC9  1903               	btfsc	3,2
  6776     0ACA  0008               	return
  6777     0ACB  17A2               	bsf	___ftpack@arg+2,7
  6778     0ACC  0008               	return
  6779     0ACD                     __end_of___ftpack:
  6780                           
  6781                           	psect	text31
  6782     08DB                     __ptext31:	
  6783 ;; *************** function _TMR1_ISR *****************
  6784 ;; Defined at:
  6785 ;;		line 58 in file "newmain.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : B00/800
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6799 ;;      Params:         0       0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0
  6801 ;;      Temps:         13       0       0       0       0
  6802 ;;      Totals:        13       0       0       0       0
  6803 ;;Total ram usage:       13 bytes
  6804 ;; Hardware stack levels used: 1
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		Interrupt level 1
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812     08DB                     _TMR1_ISR:	
  6813                           ;psect for function _TMR1_ISR
  6814                           
  6815                           
  6816                           ;newmain.c: 59: PIR1bits.ADIF = 0;
  6817     08DB  1283               	bcf	3,5	;RP0=0, select bank0
  6818     08DC  1303               	bcf	3,6	;RP1=0, select bank0
  6819     08DD  130C               	bcf	12,6	;volatile
  6820                           
  6821                           ;newmain.c: 60: muestras[contador] = ((ADRESH << 8) & 0b1100000000) | ADRESL;
  6822     08DE  1683               	bsf	3,5	;RP0=1, select bank1
  6823     08DF  081E               	movf	30,w	;volatile
  6824     08E0  00F0               	movwf	??_TMR1_ISR
  6825     08E1  01F1               	clrf	??_TMR1_ISR+1
  6826     08E2  1283               	bcf	3,5	;RP0=0, select bank0
  6827     08E3  081E               	movf	30,w	;volatile
  6828     08E4  00F2               	movwf	??_TMR1_ISR+2
  6829     08E5  01F3               	clrf	??_TMR1_ISR+3
  6830     08E6  0872               	movf	??_TMR1_ISR+2,w
  6831     08E7  00F3               	movwf	??_TMR1_ISR+3
  6832     08E8  01F2               	clrf	??_TMR1_ISR+2
  6833     08E9  3000               	movlw	0
  6834     08EA  0572               	andwf	??_TMR1_ISR+2,w
  6835     08EB  00F4               	movwf	??_TMR1_ISR+4
  6836     08EC  3003               	movlw	3
  6837     08ED  0573               	andwf	??_TMR1_ISR+3,w
  6838     08EE  00F5               	movwf	??_TMR1_ISR+5
  6839     08EF  0870               	movf	??_TMR1_ISR,w
  6840     08F0  0474               	iorwf	??_TMR1_ISR+4,w
  6841     08F1  00F6               	movwf	??_TMR1_ISR+6
  6842     08F2  0871               	movf	??_TMR1_ISR+1,w
  6843     08F3  0475               	iorwf	??_TMR1_ISR+5,w
  6844     08F4  00F7               	movwf	??_TMR1_ISR+7
  6845     08F5  086C               	movf	_contador,w	;volatile
  6846     08F6  00F8               	movwf	??_TMR1_ISR+8
  6847     08F7  0778               	addwf	??_TMR1_ISR+8,w
  6848     08F8  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  6849     08F9  0084               	movwf	4
  6850     08FA  0876               	movf	??_TMR1_ISR+6,w
  6851     08FB  1783               	bsf	3,7	;select IRP bank3
  6852     08FC  0080               	movwf	0
  6853     08FD  0A84               	incf	4,f
  6854     08FE  0877               	movf	??_TMR1_ISR+7,w
  6855     08FF  0080               	movwf	0
  6856                           
  6857                           ;newmain.c: 62: contador++;
  6858     0900  3001               	movlw	1
  6859     0901  00FF               	movwf	127
  6860     0902  087F               	movf	127,w
  6861     0903  07EC               	addwf	_contador,f	;volatile
  6862                           
  6863                           ;newmain.c: 63: if (contador < 40) {
  6864     0904  3028               	movlw	40
  6865     0905  026C               	subwf	_contador,w	;volatile
  6866     0906  1C03               	btfss	3,0
  6867                           
  6868                           ;newmain.c: 64: ADCON0bits.GO = 1;
  6869     0907  149F               	bsf	31,1	;volatile
  6870     0908  087C               	movf	??_TMR1_ISR+12,w
  6871     0909  00FF               	movwf	127
  6872     090A  087B               	movf	??_TMR1_ISR+11,w
  6873     090B  008A               	movwf	10
  6874     090C  087A               	movf	??_TMR1_ISR+10,w
  6875     090D  0084               	movwf	4
  6876     090E  0E79               	swapf	??_TMR1_ISR+9,w
  6877     090F  0083               	movwf	3
  6878     0910  0EFE               	swapf	126,f
  6879     0911  0E7E               	swapf	126,w
  6880     0912  0009               	retfie
  6881     0913                     __end_of_TMR1_ISR:
  6882     007E                     btemp	set	126	;btemp
  6883     007E                     wtemp0	set	126
  6884                           
  6885                           	psect	intentry
  6886     0004                     __pintentry:	
  6887                           ;incstack = 0
  6888                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  6889                           
  6890     0004                     interrupt_function:
  6891     007E                     saved_w	set	btemp
  6892     0004  00FE               	movwf	btemp
  6893     0005  0E03               	swapf	3,w
  6894     0006  00F9               	movwf	??_TMR1_ISR+9
  6895     0007  0804               	movf	4,w
  6896     0008  00FA               	movwf	??_TMR1_ISR+10
  6897     0009  080A               	movf	10,w
  6898     000A  00FB               	movwf	??_TMR1_ISR+11
  6899     000B  087F               	movf	btemp+1,w
  6900     000C  00FC               	movwf	??_TMR1_ISR+12
  6901     000D  120A  158A  28DB   	ljmp	_TMR1_ISR
  6902                           
  6903                           	psect	config
  6904                           
  6905                           ;Config register CONFIG1 @ 0x2007
  6906                           ;	Oscillator Selection bits
  6907                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  6908                           ;	Watchdog Timer Enable bit
  6909                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6910                           ;	Power-up Timer Enable bit
  6911                           ;	PWRTE = OFF, PWRT disabled
  6912                           ;	RE3/MCLR pin function select bit
  6913                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  6914                           ;	Code Protection bit
  6915                           ;	CP = OFF, Program memory code protection is disabled
  6916                           ;	Data Code Protection bit
  6917                           ;	CPD = OFF, Data memory code protection is disabled
  6918                           ;	Brown Out Reset Selection bits
  6919                           ;	BOREN = OFF, BOR disabled
  6920                           ;	Internal External Switchover bit
  6921                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  6922                           ;	Fail-Safe Clock Monitor Enabled bit
  6923                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  6924                           ;	Low Voltage Programming Enable bit
  6925                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6926                           ;	In-Circuit Debugger Mode bit
  6927                           ;	DEBUG = 0x1, unprogrammed default
  6928     2007                     	org	8199
  6929     2007  20D4               	dw	8404
  6930                           
  6931                           ;Config register CONFIG2 @ 0x2008
  6932                           ;	Brown-out Reset Selection bit
  6933                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  6934                           ;	Flash Program Memory Self Write Enable bits
  6935                           ;	WRT = OFF, Write protection off
  6936     2008                     	org	8200
  6937     2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    118
    Data        23
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     73      80
    BANK1            80     23      43
    BANK3            96      0      80
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_4(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_text@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _TMR1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _uart_send_text->_uart_send
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_ADC->_set_CHANNEL
    ___lwtoft->___ftpack

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   43614
                                             70 BANK0      3     3      0
                            ___ftmul
                           ___lwtoft
                         _config_HAL
                           _init_ADC
                      _init_inttimer
                            _sprintf
                             _strcpy
                          _uart_init
                     _uart_send_text
 ---------------------------------------------------------------------------------
 (1) _uart_send_text                                       2     2      0     150
                                              1 BANK0      2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     263
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   36025
                                             60 BANK0     10     6      4
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    7887
                                             32 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    6134
                                             32 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     351
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              6 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4624
                                             17 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     560
                                             14 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1588
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    2509
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     444
                                             39 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3667
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3472
                                             42 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     648
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _init_inttimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             3     3      0      22
                                              2 BANK0      3     3      0
                        _set_CHANNEL
 ---------------------------------------------------------------------------------
 (2) _set_CHANNEL                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_HAL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2462
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2376
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                            13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
     ___lbmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
   _config_HAL
   _init_ADC
     _set_CHANNEL
   _init_inttimer
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _scale
   _strcpy
   _uart_init
   _uart_send_text
     _uart_send

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      2B       7       53.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D8      12        0.0%
ABS                  0      0      D8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Apr 30 19:35:46 2023

                      pc 0002           ___bmul@product 002F             ___awdiv@sign 002B  
                     fsr 0004      ___wmul@multiplicand 0022             ___ftadd@exp1 0055  
           ___ftadd@exp2 0054             ___ftadd@sign 0053                      l301 005C  
                    l161 07FA                      l175 17BC                      l347 1782  
                    l701 1772                      l607 0D53                      l643 0BF6  
                    l564 0EA9                      l556 0E7D                      l583 0AAC  
                    l584 0AB4                      l684 07D1                      fsr0 0004  
                    indf 0000             ___awmod@sign 0025                     l2000 0C36  
                   l2030 0C7B                     l2022 0C65                     l2112 0FD4  
                   l2104 0F69                     l2034 0C8B                     l2018 0C55  
                   l2300 0A58                     l2212 0DC5                     l2206 0C05  
                   l2054 17A0                     l2134 063C                     l2312 08CC  
                   l2232 0E27                     l2216 0DCE                     l2056 17A9  
                   l2152 0765                     l2128 05D9                     l2402 09A1  
                   l2162 0B83                     l2066 17B8                     l2074 175D  
                   l2146 0702                     l2138 0657                     l2308 08BD  
                   l2412 0889                     l2260 0EB8                     l2252 0EA5  
                   l2342 078D                     l2414 089B                     l2158 0B7A  
                   l1800 0A97                     l2336 1743                     l2248 0E95  
                   l2184 0BCF                     l2176 0BAF                     l2520 0194  
                   l2512 013C                     l2346 0796                     l2266 177A  
                   l2194 0BE2                     l1804 0AAA                     l2380 07EE  
                   l2364 07BD                     l2620 0500                     l2604 03EC  
                   l2540 022C                     l1806 0A9C                     l2286 0A13  
                   l2198 0BF2                     l1822 16E0                     l1910 0959  
                   l1902 0946                     l2550 0276                     l2526 01B4  
                   l1920 0CD6                     l2376 07E0                     l2368 07CD  
                   l2296 0A4B                     l2288 0A23                     l2392 0966  
                   l1840 09B4                     l2560 02D1                     l2536 0210  
                   l2480 005E                     l1930 0CEC                     l2394 0976  
                   l1818 16DA                     l1906 0951                     l2626 050F  
                   l2554 02CF                     l2482 0072                     l2634 0041  
                   l2466 1723                     l1924 0CDD                     l2628 0514  
                   l2636 0523                     l2476 0059                     l1942 0D04  
                   l2398 0994                     l1846 09BF                     l2590 03B3  
                   l2582 0322                     l1792 0A7C                     l1784 0A69  
                   l1952 0D25                     l1872 09FE                     l1864 09EB  
                   l1856 09C7                     l2584 03A2                     l2568 0315  
                   l2496 00CB                     l1794 0A81                     l1970 0D65  
                   l1962 0D43                     l1954 0D2A                     l1858 09D5  
                   l2674 0AF0                     l2666 0AE6                     l1788 0A70  
                   l1956 0D2E                     l1948 0D19                     l1868 09F6  
                   l1884 091D                     l2596 03CF                     l1974 0D77  
                   l1966 0D4F                     l1984 0D9A                     l1896 092A  
                   l1888 0924                     l1994 0C22                     l1898 0938  
                   STR_1 087C                     STR_2 0880                     STR_3 087C  
                   STR_4 0880                     u2045 092D                     u2225 0D1A  
                   u2065 093E                     u3035 079D                     u2075 0947  
                   u2255 0D2F                     u3135 096A                     u3065 07BE  
                   u2505 1760                     u2195 0D05                     u3155 0984  
                   u2435 0C8C                     u2285 0D44                     u3165 0995  
                   u2445 0C94                     u3405 03BC                     u3325 020E  
                   u1815 0A90                     u3095 07D6                     u3415 03C9  
                   u3255 00E3                     u3185 088E                     u2385 0C66  
                   u3345 02D5                     u1835 0AA3                     u2635 0BB1  
                   u2395 0C6E                     u3435 043C                     u3355 030B  
                   u3515 0B46                     u2725 0BFB                     u2645 0BC2  
                   u3445 04BC                     u2815 0E96                     u2655 0BD0  
                   u3295 01E5                     u3537 17F8                     u1945 09CA  
                   u3385 032B                     u1875 0ABB                     u1795 0A75  
                   u2915 0A17                     u2845 0EAE                     u2765 0E29  
                   u1965 09D6                     u2935 0A25                     u2775 0E58  
                   u2695 0BE3                     u1975 09E2                     u2945 0A3A  
                   u1985 09EC                     u2955 0A4C                     u2875 1783  
                   u2885 178A                     _TXEN 04C5                     _TXIF 0064  
                   _main 0ACD             ___ftpack@arg 0020             ___ftpack@exp 0023  
                   btemp 007E                     _stop 006D                     start 0010  
           _sprintf$1261 00A0        ___bmul@multiplier 0030             ___ftmul@cntr 003E  
           ___ftmul@sign 003F         ??_uart_send_text 0021             ___fttol@exp1 0053  
           ___fttol@lval 004F                    ?_main 0070          __end_of___awdiv 0A03  
        __end_of___lbdiv 17BA          __end_of___ftadd 0DAE          __end_of___awmod 095E  
        __end_of___lbmod 1778          __end_of___ftneg 16A5                    _ANSEL 0188  
        __end_of___lldiv 0A61          __end_of___ftmul 0CB3          ___awdiv@divisor 0026  
        __end_of___llmod 09AA          __end_of___ftsub 1759          __end_of___fttol 07F7  
        ___awdiv@counter 002A                    _RCSTA 0018                    _TMR1H 000F  
                  _TMR1L 000E                    _SPBRG 0099                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019             ___lltoft@exp 002C  
       __end_of_TMR1_ISR 0913          __end_of_dpowers 087C                    _scale 0528  
          ___ftpack@sign 0024                    main@i 0067                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 0528  
           ?_set_CHANNEL 0070          ___lbdiv@divisor 0026          ___lbdiv@counter 0028  
        __initialization 0013             __end_of_main 0B6D                   ??_main 0066  
          ___fttol@sign1 004E         ___llmod@dividend 0024                   ?_scale 0040  
                 _ADRESH 001E                   _ADRESL 009E         ___awdiv@dividend 0028  
       __end_of___ftpack 0ACD                   _ANSELH 0189         __end_of___lltoft 08AE  
       __end_of___lwtoft 170C         __end_of__powers_ 082D                   ___bmul 16D8  
                 ___ftge 08AE                   ___wmul 1778                ??___awdiv 002A  
              ??___lbdiv 0027                ??___ftadd 0050                ??___awmod 0024  
              ??___lbmod 0021                ??___ftneg 0023                ??___lldiv 0028  
              ??___ftmul 0037                ??___llmod 0028                ??___ftsub 005C  
              ??___fttol 004B         __end_of_init_ADC 1800                   _buffer 00B7  
                 _fround 0EC1         ___awdiv@quotient 002C          ___awmod@divisor 0020  
        ___awmod@counter 0024                   _strcpy 1720    ___ftmul@f3_as_product 003B  
                 saved_w 007E                ??_sprintf 0060         ___lbdiv@dividend 0027  
        ___lbmod@divisor 0020  __end_of__initialization 0039          ___lbmod@counter 0024  
             ___ftadd@f1 004A               ___ftadd@f2 004D               ___ftge@ff1 0020  
             ___ftge@ff2 0023               ___ftneg@f1 0020      ___bmul@multiplicand 002E  
             ___ftmul@f1 0031               ___ftmul@f2 0034               ___ftsub@f1 0059  
             ___ftsub@f2 0056               ___fttol@f1 0047           __pcstackCOMMON 0070  
           __pidataBANK0 0884             __pidataBANK1 170C                ?_TMR1_ISR 0070  
             ___lltoft@c 0028            __end_of_scale 0780         ___lbdiv@quotient 0029  
             ___lwtoft@c 0028               __div_to_l_ 0DAE          __div_to_l_@exp1 0033  
        __div_to_l_@cntr 0032     uart_send_text@buffer 0022                  ??_scale 0043  
        __div_to_l_@quot 002E               __pbssBANK0 0069               __pbssBANK3 0190  
          _init_inttimer 16BA            __div_to_l_@f1 0020            __div_to_l_@f2 0023  
             __pmaintext 0ACD                  ?___bmul 002E                  ?___ftge 0020  
                ?___wmul 0020               ??_TMR1_ISR 0070               __pintentry 0004  
                ?_fround 0040                ?___ftpack 0020                ?___lltoft 0028  
                ?_strcpy 0020                ?___lwtoft 0028               _config_HAL 1697  
             __stringtab 0800           ?_init_inttimer 0070                ?_init_ADC 0070  
      __end_of__npowers_ 0854               _scale$1260 0043                  ___awdiv 09AA  
                ___lbdiv 1799                  ___ftadd 0CB3                  ___awmod 0913  
                ___lbmod 1759                  ___ftneg 169D                  ___lldiv 0A03  
                ___ftmul 0C0E                  ___llmod 095E                  ___ftsub 173C  
                ___fttol 0780        uart_send_text@aux 0021               ??___ftpack 0025  
              _ANSELbits 0188                  _datoenv 0069               ??___lltoft 002C  
                __ptext1 17BA                  __ptext2 07F7                  __ptext3 16C8  
                __ptext4 1720                  __ptext5 003D                  __ptext6 0528  
                __ptext7 0913                  __ptext8 09AA                  __ptext9 0EC1  
             ??___lwtoft 002B                _T1CONbits 0010              ?__div_to_l_ 0020  
                _dpowers 0854         ___awmod@dividend 0022                  _sprintf 003D  
                clrloop0 16A6     end_of_initialization 0039               ??_init_ADC 0022  
      __end_of_uart_init 16D8        __end_of_uart_send 0800          ___lldiv@divisor 0020  
        ___lldiv@counter 002D                _RCSTAbits 0018           __tdiv_to_l_@f1 0020  
         __tdiv_to_l_@f2 0023            ??__tdiv_to_l_ 0026              ?_config_HAL 0070  
       ___lbmod@dividend 0023                _TRISAbits 0085                _TRISCbits 0087  
        ??_init_inttimer 0020              ___lbmod@rem 0025                _TXSTAbits 0098  
            ___ftmul@exp 003A           __end_of___bmul 16E9           __end_of___ftge 08DB  
         __end_of___wmul 1799              _BAUDCTLbits 0187           __end_of_fround 1000  
         __end_of_strcpy 173C      start_initialization 0013      __end_of__tdiv_to_l_ 0C0E  
        ___llmod@divisor 0020          ___llmod@counter 0029                 ??___bmul 002F  
               ??___ftge 0026                 ??___wmul 0024               init_fetch0 16E9  
            __pdataBANK0 006D              __pdataBANK1 00B7                 ??_fround 0043  
          sprintf@tmpval 00AE                 ??_strcpy 0021               fround@prec 0049  
              ___latbits 0002            __pcstackBANK0 0020            __pcstackBANK1 00A0  
            sprintf@flag 00A4              sprintf@eexp 00AC              sprintf@fval 00B3  
          ??_set_CHANNEL 0020              sprintf@prec 00A6                 ?___awdiv 0026  
               ?___lbdiv 0026                 ?___ftadd 004A                 ?___awmod 0020  
               ?___lbmod 0020                 ?___ftneg 0020                 ?___lldiv 0020  
               ?___ftmul 0031                 ?___llmod 0020                 ?___ftsub 0056  
              __npowers_ 082D                 ?___fttol 0047                __pstrings 0800  
            __tdiv_to_l_ 0B6D             ??__div_to_l_ 0026           _uart_send_text 17BA  
               ?_sprintf 005C        interrupt_function 0004           ___wmul@product 0024  
              clear_ram0 16A5                 _PIE1bits 008C                 _PIR1bits 000C  
     __end_of__div_to_l_ 0EC1      __end_of_set_CHANNEL 16BA                _uart_init 16C8  
              _uart_send 07F7                 _TMR1_ISR 08DB   __end_of_uart_send_text 17DC  
             _ADCON0bits 001F              __stringbase 0805               _ADCON1bits 009F  
      ___wmul@multiplier 0020             ??_config_HAL 0020       __end_of_config_HAL 169D  
             ?_uart_init 0070               ?_uart_send 0070                 ___ftpack 0A61  
            _fround$1258 0046              _fround$1259 0043       __end_of__stringtab 0806  
               ___lltoft 0887          ?_uart_send_text 0070                 ___lwtoft 16FA  
             sprintf@val 00A8       set_CHANNEL@channel 0021                 __ptext10 1759  
               __ptext11 1799                 __ptext20 0780                 __ptext12 0C0E  
               __ptext21 173C                 __ptext13 16D8                 __ptext30 0A61  
               __ptext22 0CB3                 __ptext14 0B6D                 __ptext31 08DB  
               __ptext23 169D                 __ptext15 0DAE                 __ptext24 08AE  
               __ptext16 1778                 __ptext25 16BA                 __ptext17 0887  
               __ptext26 17DC                 __ptext18 095E                 __ptext27 16AD  
               __ptext19 0A03                 __ptext28 1697                 __ptext29 16FA  
               __powers_ 0806                 _contador 006C    __end_of_init_inttimer 16C8  
             strcpy@from 0020                 _init_ADC 17DC              _set_CHANNEL 16AD  
               _muestras 0190               _INTCONbits 000B                 init_ram0 16ED  
               scale@scl 0046                 intlevel1 0000                sprintf@ap 00A3  
       __tdiv_to_l_@exp1 002E         __tdiv_to_l_@cntr 002D                sprintf@sp 00B2  
       __tdiv_to_l_@quot 0029         ___lldiv@dividend 0024                stringcode 0800  
             _OSCCONbits 008F              ??_uart_init 0020              ??_uart_send 0020  
           ?__tdiv_to_l_ 0020            uart_send@data 0020                 sprintf@c 00B6  
               sprintf@f 005C         ___lldiv@quotient 0029                 strcpy@cp 0021  
               strcpy@to 0022                 stringdir 0800                 stringtab 0800  
