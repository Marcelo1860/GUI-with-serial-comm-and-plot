

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon May 01 15:52:34 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    51                           	dabs	1,0x7E,2
    52     0000                     
    53                           ; Generated 09/02/2023 GMT
    54                           ; 
    55                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F887 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87     0000                     	;# 
    88     0001                     	;# 
    89     0002                     	;# 
    90     0003                     	;# 
    91     0004                     	;# 
    92     0005                     	;# 
    93     0006                     	;# 
    94     0007                     	;# 
    95     0008                     	;# 
    96     0009                     	;# 
    97     000A                     	;# 
    98     000B                     	;# 
    99     000C                     	;# 
   100     000D                     	;# 
   101     000E                     	;# 
   102     000E                     	;# 
   103     000F                     	;# 
   104     0010                     	;# 
   105     0011                     	;# 
   106     0012                     	;# 
   107     0013                     	;# 
   108     0014                     	;# 
   109     0015                     	;# 
   110     0015                     	;# 
   111     0016                     	;# 
   112     0017                     	;# 
   113     0018                     	;# 
   114     0019                     	;# 
   115     001A                     	;# 
   116     001B                     	;# 
   117     001B                     	;# 
   118     001C                     	;# 
   119     001D                     	;# 
   120     001E                     	;# 
   121     001F                     	;# 
   122     0081                     	;# 
   123     0085                     	;# 
   124     0086                     	;# 
   125     0087                     	;# 
   126     0088                     	;# 
   127     0089                     	;# 
   128     008C                     	;# 
   129     008D                     	;# 
   130     008E                     	;# 
   131     008F                     	;# 
   132     0090                     	;# 
   133     0091                     	;# 
   134     0092                     	;# 
   135     0093                     	;# 
   136     0093                     	;# 
   137     0093                     	;# 
   138     0094                     	;# 
   139     0095                     	;# 
   140     0096                     	;# 
   141     0097                     	;# 
   142     0098                     	;# 
   143     0099                     	;# 
   144     009A                     	;# 
   145     009B                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     0105                     	;# 
   151     0107                     	;# 
   152     0108                     	;# 
   153     0109                     	;# 
   154     010C                     	;# 
   155     010C                     	;# 
   156     010D                     	;# 
   157     010E                     	;# 
   158     010F                     	;# 
   159     0185                     	;# 
   160     0187                     	;# 
   161     0188                     	;# 
   162     0189                     	;# 
   163     018C                     	;# 
   164     018D                     	;# 
   165     0000                     	;# 
   166     0001                     	;# 
   167     0002                     	;# 
   168     0003                     	;# 
   169     0004                     	;# 
   170     0005                     	;# 
   171     0006                     	;# 
   172     0007                     	;# 
   173     0008                     	;# 
   174     0009                     	;# 
   175     000A                     	;# 
   176     000B                     	;# 
   177     000C                     	;# 
   178     000D                     	;# 
   179     000E                     	;# 
   180     000E                     	;# 
   181     000F                     	;# 
   182     0010                     	;# 
   183     0011                     	;# 
   184     0012                     	;# 
   185     0013                     	;# 
   186     0014                     	;# 
   187     0015                     	;# 
   188     0015                     	;# 
   189     0016                     	;# 
   190     0017                     	;# 
   191     0018                     	;# 
   192     0019                     	;# 
   193     001A                     	;# 
   194     001B                     	;# 
   195     001B                     	;# 
   196     001C                     	;# 
   197     001D                     	;# 
   198     001E                     	;# 
   199     001F                     	;# 
   200     0081                     	;# 
   201     0085                     	;# 
   202     0086                     	;# 
   203     0087                     	;# 
   204     0088                     	;# 
   205     0089                     	;# 
   206     008C                     	;# 
   207     008D                     	;# 
   208     008E                     	;# 
   209     008F                     	;# 
   210     0090                     	;# 
   211     0091                     	;# 
   212     0092                     	;# 
   213     0093                     	;# 
   214     0093                     	;# 
   215     0093                     	;# 
   216     0094                     	;# 
   217     0095                     	;# 
   218     0096                     	;# 
   219     0097                     	;# 
   220     0098                     	;# 
   221     0099                     	;# 
   222     009A                     	;# 
   223     009B                     	;# 
   224     009C                     	;# 
   225     009D                     	;# 
   226     009E                     	;# 
   227     009F                     	;# 
   228     0105                     	;# 
   229     0107                     	;# 
   230     0108                     	;# 
   231     0109                     	;# 
   232     010C                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     0185                     	;# 
   238     0187                     	;# 
   239     0188                     	;# 
   240     0189                     	;# 
   241     018C                     	;# 
   242     018D                     	;# 
   243     0000                     	;# 
   244     0001                     	;# 
   245     0002                     	;# 
   246     0003                     	;# 
   247     0004                     	;# 
   248     0005                     	;# 
   249     0006                     	;# 
   250     0007                     	;# 
   251     0008                     	;# 
   252     0009                     	;# 
   253     000A                     	;# 
   254     000B                     	;# 
   255     000C                     	;# 
   256     000D                     	;# 
   257     000E                     	;# 
   258     000E                     	;# 
   259     000F                     	;# 
   260     0010                     	;# 
   261     0011                     	;# 
   262     0012                     	;# 
   263     0013                     	;# 
   264     0014                     	;# 
   265     0015                     	;# 
   266     0015                     	;# 
   267     0016                     	;# 
   268     0017                     	;# 
   269     0018                     	;# 
   270     0019                     	;# 
   271     001A                     	;# 
   272     001B                     	;# 
   273     001B                     	;# 
   274     001C                     	;# 
   275     001D                     	;# 
   276     001E                     	;# 
   277     001F                     	;# 
   278     0081                     	;# 
   279     0085                     	;# 
   280     0086                     	;# 
   281     0087                     	;# 
   282     0088                     	;# 
   283     0089                     	;# 
   284     008C                     	;# 
   285     008D                     	;# 
   286     008E                     	;# 
   287     008F                     	;# 
   288     0090                     	;# 
   289     0091                     	;# 
   290     0092                     	;# 
   291     0093                     	;# 
   292     0093                     	;# 
   293     0093                     	;# 
   294     0094                     	;# 
   295     0095                     	;# 
   296     0096                     	;# 
   297     0097                     	;# 
   298     0098                     	;# 
   299     0099                     	;# 
   300     009A                     	;# 
   301     009B                     	;# 
   302     009C                     	;# 
   303     009D                     	;# 
   304     009E                     	;# 
   305     009F                     	;# 
   306     0105                     	;# 
   307     0107                     	;# 
   308     0108                     	;# 
   309     0109                     	;# 
   310     010C                     	;# 
   311     010C                     	;# 
   312     010D                     	;# 
   313     010E                     	;# 
   314     010F                     	;# 
   315     0185                     	;# 
   316     0187                     	;# 
   317     0188                     	;# 
   318     0189                     	;# 
   319     018C                     	;# 
   320     018D                     	;# 
   321     0000                     	;# 
   322     0001                     	;# 
   323     0002                     	;# 
   324     0003                     	;# 
   325     0004                     	;# 
   326     0005                     	;# 
   327     0006                     	;# 
   328     0007                     	;# 
   329     0008                     	;# 
   330     0009                     	;# 
   331     000A                     	;# 
   332     000B                     	;# 
   333     000C                     	;# 
   334     000D                     	;# 
   335     000E                     	;# 
   336     000E                     	;# 
   337     000F                     	;# 
   338     0010                     	;# 
   339     0011                     	;# 
   340     0012                     	;# 
   341     0013                     	;# 
   342     0014                     	;# 
   343     0015                     	;# 
   344     0015                     	;# 
   345     0016                     	;# 
   346     0017                     	;# 
   347     0018                     	;# 
   348     0019                     	;# 
   349     001A                     	;# 
   350     001B                     	;# 
   351     001B                     	;# 
   352     001C                     	;# 
   353     001D                     	;# 
   354     001E                     	;# 
   355     001F                     	;# 
   356     0081                     	;# 
   357     0085                     	;# 
   358     0086                     	;# 
   359     0087                     	;# 
   360     0088                     	;# 
   361     0089                     	;# 
   362     008C                     	;# 
   363     008D                     	;# 
   364     008E                     	;# 
   365     008F                     	;# 
   366     0090                     	;# 
   367     0091                     	;# 
   368     0092                     	;# 
   369     0093                     	;# 
   370     0093                     	;# 
   371     0093                     	;# 
   372     0094                     	;# 
   373     0095                     	;# 
   374     0096                     	;# 
   375     0097                     	;# 
   376     0098                     	;# 
   377     0099                     	;# 
   378     009A                     	;# 
   379     009B                     	;# 
   380     009C                     	;# 
   381     009D                     	;# 
   382     009E                     	;# 
   383     009F                     	;# 
   384     0105                     	;# 
   385     0107                     	;# 
   386     0108                     	;# 
   387     0109                     	;# 
   388     010C                     	;# 
   389     010C                     	;# 
   390     010D                     	;# 
   391     010E                     	;# 
   392     010F                     	;# 
   393     0185                     	;# 
   394     0187                     	;# 
   395     0188                     	;# 
   396     0189                     	;# 
   397     018C                     	;# 
   398     018D                     	;# 
   399     0000                     	;# 
   400     0001                     	;# 
   401     0002                     	;# 
   402     0003                     	;# 
   403     0004                     	;# 
   404     0005                     	;# 
   405     0006                     	;# 
   406     0007                     	;# 
   407     0008                     	;# 
   408     0009                     	;# 
   409     000A                     	;# 
   410     000B                     	;# 
   411     000C                     	;# 
   412     000D                     	;# 
   413     000E                     	;# 
   414     000E                     	;# 
   415     000F                     	;# 
   416     0010                     	;# 
   417     0011                     	;# 
   418     0012                     	;# 
   419     0013                     	;# 
   420     0014                     	;# 
   421     0015                     	;# 
   422     0015                     	;# 
   423     0016                     	;# 
   424     0017                     	;# 
   425     0018                     	;# 
   426     0019                     	;# 
   427     001A                     	;# 
   428     001B                     	;# 
   429     001B                     	;# 
   430     001C                     	;# 
   431     001D                     	;# 
   432     001E                     	;# 
   433     001F                     	;# 
   434     0081                     	;# 
   435     0085                     	;# 
   436     0086                     	;# 
   437     0087                     	;# 
   438     0088                     	;# 
   439     0089                     	;# 
   440     008C                     	;# 
   441     008D                     	;# 
   442     008E                     	;# 
   443     008F                     	;# 
   444     0090                     	;# 
   445     0091                     	;# 
   446     0092                     	;# 
   447     0093                     	;# 
   448     0093                     	;# 
   449     0093                     	;# 
   450     0094                     	;# 
   451     0095                     	;# 
   452     0096                     	;# 
   453     0097                     	;# 
   454     0098                     	;# 
   455     0099                     	;# 
   456     009A                     	;# 
   457     009B                     	;# 
   458     009C                     	;# 
   459     009D                     	;# 
   460     009E                     	;# 
   461     009F                     	;# 
   462     0105                     	;# 
   463     0107                     	;# 
   464     0108                     	;# 
   465     0109                     	;# 
   466     010C                     	;# 
   467     010C                     	;# 
   468     010D                     	;# 
   469     010E                     	;# 
   470     010F                     	;# 
   471     0185                     	;# 
   472     0187                     	;# 
   473     0188                     	;# 
   474     0189                     	;# 
   475     018C                     	;# 
   476     018D                     	;# 
   477     0000                     	;# 
   478     0001                     	;# 
   479     0002                     	;# 
   480     0003                     	;# 
   481     0004                     	;# 
   482     0005                     	;# 
   483     0006                     	;# 
   484     0007                     	;# 
   485     0008                     	;# 
   486     0009                     	;# 
   487     000A                     	;# 
   488     000B                     	;# 
   489     000C                     	;# 
   490     000D                     	;# 
   491     000E                     	;# 
   492     000E                     	;# 
   493     000F                     	;# 
   494     0010                     	;# 
   495     0011                     	;# 
   496     0012                     	;# 
   497     0013                     	;# 
   498     0014                     	;# 
   499     0015                     	;# 
   500     0015                     	;# 
   501     0016                     	;# 
   502     0017                     	;# 
   503     0018                     	;# 
   504     0019                     	;# 
   505     001A                     	;# 
   506     001B                     	;# 
   507     001B                     	;# 
   508     001C                     	;# 
   509     001D                     	;# 
   510     001E                     	;# 
   511     001F                     	;# 
   512     0081                     	;# 
   513     0085                     	;# 
   514     0086                     	;# 
   515     0087                     	;# 
   516     0088                     	;# 
   517     0089                     	;# 
   518     008C                     	;# 
   519     008D                     	;# 
   520     008E                     	;# 
   521     008F                     	;# 
   522     0090                     	;# 
   523     0091                     	;# 
   524     0092                     	;# 
   525     0093                     	;# 
   526     0093                     	;# 
   527     0093                     	;# 
   528     0094                     	;# 
   529     0095                     	;# 
   530     0096                     	;# 
   531     0097                     	;# 
   532     0098                     	;# 
   533     0099                     	;# 
   534     009A                     	;# 
   535     009B                     	;# 
   536     009C                     	;# 
   537     009D                     	;# 
   538     009E                     	;# 
   539     009F                     	;# 
   540     0105                     	;# 
   541     0107                     	;# 
   542     0108                     	;# 
   543     0109                     	;# 
   544     010C                     	;# 
   545     010C                     	;# 
   546     010D                     	;# 
   547     010E                     	;# 
   548     010F                     	;# 
   549     0185                     	;# 
   550     0187                     	;# 
   551     0188                     	;# 
   552     0189                     	;# 
   553     018C                     	;# 
   554     018D                     	;# 
   555                           
   556                           	psect	idataBANK0
   557     1694                     __pidataBANK0:
   558                           
   559                           ;initializer for _stop
   560     1694  3400               	retlw	0
   561     1695  3480               	retlw	128
   562     1696  343F               	retlw	63
   563                           
   564                           	psect	idataBANK1
   565     170C                     __pidataBANK1:
   566                           
   567                           ;initializer for _buffer
   568     170C  3420               	retlw	32
   569     170D  3400               	retlw	0
   570     170E  3400               	retlw	0
   571     170F  3400               	retlw	0
   572     1710  3400               	retlw	0
   573     1711  3400               	retlw	0
   574     1712  3400               	retlw	0
   575     1713  3400               	retlw	0
   576     1714  3400               	retlw	0
   577     1715  3400               	retlw	0
   578     1716  3400               	retlw	0
   579     1717  3400               	retlw	0
   580     1718  3400               	retlw	0
   581     1719  3400               	retlw	0
   582     171A  3400               	retlw	0
   583     171B  3400               	retlw	0
   584     171C  3400               	retlw	0
   585     171D  3400               	retlw	0
   586     171E  3400               	retlw	0
   587     171F  3400               	retlw	0
   588                           
   589                           	psect	strings
   590     0800                     __pstrings:
   591     0800                     stringtab:
   592     0800                     __stringtab:
   593     0800                     stringcode:	
   594                           ;	String table - string pointers are 1 byte each
   595                           
   596     0800                     stringdir:
   597     0800  3008               	movlw	high stringdir
   598     0801  008A               	movwf	10
   599     0802  0804               	movf	4,w
   600     0803  0A84               	incf	4,f
   601     0804  0782               	addwf	2,f
   602     0805                     __stringbase:
   603     0805  3400               	retlw	0
   604     0806                     __end_of__stringtab:
   605     0806                     __powers_:
   606     0806  3400               	retlw	0
   607     0807  3480               	retlw	128
   608     0808  343F               	retlw	63
   609     0809  3400               	retlw	0
   610     080A  3420               	retlw	32
   611     080B  3441               	retlw	65
   612     080C  3400               	retlw	0
   613     080D  34C8               	retlw	200
   614     080E  3442               	retlw	66
   615     080F  3400               	retlw	0
   616     0810  347A               	retlw	122
   617     0811  3444               	retlw	68
   618     0812  3440               	retlw	64
   619     0813  341C               	retlw	28
   620     0814  3446               	retlw	70
   621     0815  3450               	retlw	80
   622     0816  34C3               	retlw	195
   623     0817  3447               	retlw	71
   624     0818  3424               	retlw	36
   625     0819  3474               	retlw	116
   626     081A  3449               	retlw	73
   627     081B  3497               	retlw	151
   628     081C  3418               	retlw	24
   629     081D  344B               	retlw	75
   630     081E  34BC               	retlw	188
   631     081F  34BE               	retlw	190
   632     0820  344C               	retlw	76
   633     0821  346B               	retlw	107
   634     0822  346E               	retlw	110
   635     0823  344E               	retlw	78
   636     0824  3403               	retlw	3
   637     0825  3415               	retlw	21
   638     0826  3450               	retlw	80
   639     0827  3479               	retlw	121
   640     0828  34AD               	retlw	173
   641     0829  3460               	retlw	96
   642     082A  34F3               	retlw	243
   643     082B  3449               	retlw	73
   644     082C  3471               	retlw	113
   645     082D                     __end_of__powers_:
   646     082D                     __npowers_:
   647     082D  3400               	retlw	0
   648     082E  3480               	retlw	128
   649     082F  343F               	retlw	63
   650     0830  34CD               	retlw	205
   651     0831  34CC               	retlw	204
   652     0832  343D               	retlw	61
   653     0833  34D7               	retlw	215
   654     0834  3423               	retlw	35
   655     0835  343C               	retlw	60
   656     0836  3412               	retlw	18
   657     0837  3483               	retlw	131
   658     0838  343A               	retlw	58
   659     0839  34B7               	retlw	183
   660     083A  34D1               	retlw	209
   661     083B  3438               	retlw	56
   662     083C  34C6               	retlw	198
   663     083D  3427               	retlw	39
   664     083E  3437               	retlw	55
   665     083F  3438               	retlw	56
   666     0840  3486               	retlw	134
   667     0841  3435               	retlw	53
   668     0842  34C0               	retlw	192
   669     0843  34D6               	retlw	214
   670     0844  3433               	retlw	51
   671     0845  34CC               	retlw	204
   672     0846  342B               	retlw	43
   673     0847  3432               	retlw	50
   674     0848  3470               	retlw	112
   675     0849  3489               	retlw	137
   676     084A  3430               	retlw	48
   677     084B  34E7               	retlw	231
   678     084C  34DB               	retlw	219
   679     084D  342E               	retlw	46
   680     084E  34E5               	retlw	229
   681     084F  343C               	retlw	60
   682     0850  341E               	retlw	30
   683     0851  3442               	retlw	66
   684     0852  34A2               	retlw	162
   685     0853  340D               	retlw	13
   686     0854                     __end_of__npowers_:
   687     0854                     _dpowers:
   688     0854  3401               	retlw	1
   689     0855  3400               	retlw	0
   690     0856  3400               	retlw	0
   691     0857  3400               	retlw	0
   692     0858  340A               	retlw	10
   693     0859  3400               	retlw	0
   694     085A  3400               	retlw	0
   695     085B  3400               	retlw	0
   696     085C  3464               	retlw	100
   697     085D  3400               	retlw	0
   698     085E  3400               	retlw	0
   699     085F  3400               	retlw	0
   700     0860  34E8               	retlw	232
   701     0861  3403               	retlw	3
   702     0862  3400               	retlw	0
   703     0863  3400               	retlw	0
   704     0864  3410               	retlw	16
   705     0865  3427               	retlw	39
   706     0866  3400               	retlw	0
   707     0867  3400               	retlw	0
   708     0868  34A0               	retlw	160
   709     0869  3486               	retlw	134
   710     086A  3401               	retlw	1
   711     086B  3400               	retlw	0
   712     086C  3440               	retlw	64
   713     086D  3442               	retlw	66
   714     086E  340F               	retlw	15
   715     086F  3400               	retlw	0
   716     0870  3480               	retlw	128
   717     0871  3496               	retlw	150
   718     0872  3498               	retlw	152
   719     0873  3400               	retlw	0
   720     0874  3400               	retlw	0
   721     0875  34E1               	retlw	225
   722     0876  34F5               	retlw	245
   723     0877  3405               	retlw	5
   724     0878  3400               	retlw	0
   725     0879  34CA               	retlw	202
   726     087A  349A               	retlw	154
   727     087B  343B               	retlw	59
   728     087C                     __end_of_dpowers:
   729     0019                     _TXREG	set	25
   730     0018                     _RCSTA	set	24
   731     0018                     _RCSTAbits	set	24
   732     000B                     _INTCONbits	set	11
   733     000C                     _PIR1bits	set	12
   734     000E                     _TMR1L	set	14
   735     000F                     _TMR1H	set	15
   736     0010                     _T1CONbits	set	16
   737     001E                     _ADRESH	set	30
   738     001F                     _ADCON0bits	set	31
   739     0064                     _TXIF	set	100
   740     0099                     _SPBRG	set	153
   741     0098                     _TXSTAbits	set	152
   742     0087                     _TRISCbits	set	135
   743     0089                     _TRISE	set	137
   744     0088                     _TRISD	set	136
   745     008F                     _OSCCONbits	set	143
   746     008C                     _PIE1bits	set	140
   747     009E                     _ADRESL	set	158
   748     009F                     _ADCON1bits	set	159
   749     0085                     _TRISAbits	set	133
   750     04C5                     _TXEN	set	1221
   751     0187                     _BAUDCTLbits	set	391
   752     0189                     _ANSELH	set	393
   753     0188                     _ANSEL	set	392
   754     0188                     _ANSELbits	set	392
   755     087C                     STR_1:
   756     087C  3420               	retlw	32	;' '
   757     087D  3420               	retlw	32	;' '
   758     087E  3420               	retlw	32	;' '
   759     087F  3400               	retlw	0
   760     0880                     STR_2:
   761     0880  3425               	retlw	37	;'%'
   762     0881  3466               	retlw	102	;'f'
   763     0882  3400               	retlw	0
   764     087C                     
   765                           	psect	cinit
   766     0013                     start_initialization:	
   767                           ; #config settings
   768                           
   769     0013                     __initialization:
   770                           
   771                           ; Initialize objects allocated to BANK1
   772     0013  1383               	bcf	3,7	;select IRP bank0
   773     0014  30CB               	movlw	low (__pdataBANK1+20)
   774     0015  00FD               	movwf	btemp+-1
   775     0016  3017               	movlw	high __pidataBANK1
   776     0017  00FE               	movwf	btemp
   777     0018  300C               	movlw	low __pidataBANK1
   778     0019  00FF               	movwf	btemp+1
   779     001A  30B7               	movlw	low __pdataBANK1
   780     001B  0084               	movwf	4
   781     001C  160A  118A  26ED  120A  118A  	fcall	init_ram0
   782                           
   783                           ; Initialize objects allocated to BANK0
   784     0021  3070               	movlw	low (__pdataBANK0+3)
   785     0022  00FD               	movwf	btemp+-1
   786     0023  3016               	movlw	high __pidataBANK0
   787     0024  00FE               	movwf	btemp
   788     0025  3094               	movlw	low __pidataBANK0
   789     0026  00FF               	movwf	btemp+1
   790     0027  306D               	movlw	low __pdataBANK0
   791     0028  0084               	movwf	4
   792     0029  160A  118A  26ED  120A  118A  	fcall	init_ram0
   793                           
   794                           ; Clear objects allocated to BANK3
   795     002E  1783               	bsf	3,7	;select IRP bank2
   796     002F  3090               	movlw	low __pbssBANK3
   797     0030  0084               	movwf	4
   798     0031  30E0               	movlw	low (__pbssBANK3+80)
   799     0032  160A  118A  26A5   	fcall	clear_ram0
   800                           
   801                           ; Clear objects allocated to BANK0
   802     0035  01E9               	clrf	__pbssBANK0& (0+127)
   803     0036  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   804     0037  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   805     0038  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   806     0039                     end_of_initialization:	
   807                           ;End of C runtime variable initialization code
   808                           
   809     0039                     __end_of__initialization:
   810     0039  0183               	clrf	3
   811     003A  120A  158A  2B6C   	ljmp	_main	;jump to C main() function
   812                           
   813                           	psect	bssBANK0
   814     0069                     __pbssBANK0:
   815     0069                     _datoenv:
   816     0069                     	ds	3
   817     006C                     _contador:
   818     006C                     	ds	1
   819                           
   820                           	psect	dataBANK0
   821     006D                     __pdataBANK0:
   822     006D                     _stop:
   823     006D                     	ds	3
   824                           
   825                           	psect	dataBANK1
   826     00B7                     __pdataBANK1:
   827     00B7                     _buffer:
   828     00B7                     	ds	20
   829                           
   830                           	psect	bssBANK3
   831     0190                     __pbssBANK3:
   832     0190                     _muestras:
   833     0190                     	ds	80
   834                           
   835                           	psect	inittext
   836     16E9                     init_fetch0:	
   837                           ;	Called with low address in FSR and high address in W
   838                           
   839     16E9  087E               	movf	126,w
   840     16EA  008A               	movwf	10
   841     16EB  087F               	movf	127,w
   842     16EC  0082               	movwf	2
   843     16ED                     init_ram0:	
   844                           ;Called with:
   845                           ;	high address of idata address in btemp 
   846                           ;	low address of idata address in btemp+1 
   847                           ;	low address of data in FSR
   848                           ;	high address + 1 of data in btemp-1
   849                           
   850     16ED  26E9  160A  118A   	fcall	init_fetch0
   851     16F0  0080               	movwf	0
   852     16F1  0A84               	incf	4,f
   853     16F2  0804               	movf	4,w
   854     16F3  067D               	xorwf	125,w
   855     16F4  1903               	btfsc	3,2
   856     16F5  3400               	retlw	0
   857     16F6  0AFF               	incf	127,f
   858     16F7  1903               	btfsc	3,2
   859     16F8  0AFE               	incf	126,f
   860     16F9  2EED               	goto	init_ram0
   861                           
   862                           	psect	clrtext
   863     16A5                     clear_ram0:	
   864                           ;	Called with FSR containing the base address, and
   865                           ;	W with the last address+1
   866                           
   867     16A5  0064               	clrwdt	;clear the watchdog before getting into this loop
   868     16A6                     clrloop0:
   869     16A6  0180               	clrf	0	;clear RAM location pointed to by FSR
   870     16A7  0A84               	incf	4,f	;increment pointer
   871     16A8  0604               	xorwf	4,w	;XOR with final address
   872     16A9  1903               	btfsc	3,2	;have we reached the end yet?
   873     16AA  3400               	retlw	0	;all done for this memory range, return
   874     16AB  0604               	xorwf	4,w	;XOR again to restore value
   875     16AC  2EA6               	goto	clrloop0	;do the next byte
   876                           
   877                           	psect	cstackBANK1
   878     00A0                     __pcstackBANK1:
   879     00A0                     _sprintf$1261:
   880                           
   881                           ; 3 bytes @ 0x0
   882     00A0                     	ds	3
   883     00A3                     sprintf@ap:
   884                           
   885                           ; 1 bytes @ 0x3
   886     00A3                     	ds	1
   887     00A4                     sprintf@flag:
   888                           
   889                           ; 2 bytes @ 0x4
   890     00A4                     	ds	2
   891     00A6                     sprintf@prec:
   892                           
   893                           ; 2 bytes @ 0x6
   894     00A6                     	ds	2
   895     00A8                     sprintf@val:
   896                           
   897                           ; 4 bytes @ 0x8
   898     00A8                     	ds	4
   899     00AC                     sprintf@eexp:
   900                           
   901                           ; 2 bytes @ 0xC
   902     00AC                     	ds	2
   903     00AE                     sprintf@tmpval:
   904                           
   905                           ; 4 bytes @ 0xE
   906     00AE                     	ds	4
   907     00B2                     sprintf@sp:
   908                           
   909                           ; 1 bytes @ 0x12
   910     00B2                     	ds	1
   911     00B3                     sprintf@fval:
   912                           
   913                           ; 3 bytes @ 0x13
   914     00B3                     	ds	3
   915     00B6                     sprintf@c:
   916                           
   917                           ; 1 bytes @ 0x16
   918     00B6                     	ds	1
   919                           
   920                           	psect	cstackCOMMON
   921     0070                     __pcstackCOMMON:
   922     0070                     ?_set_CHANNEL:
   923     0070                     ?_config_HAL:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     0070                     ?_uart_init:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     0070                     ?_uart_send_text:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     0070                     ?_init_ADC:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     0070                     ?_init_inttimer:	
   936                           ; 1 bytes @ 0x0
   937                           
   938     0070                     ?_TMR1_ISR:	
   939                           ; 1 bytes @ 0x0
   940                           
   941     0070                     ??_TMR1_ISR:	
   942                           ; 1 bytes @ 0x0
   943                           
   944     0070                     ?_uart_send:	
   945                           ; 1 bytes @ 0x0
   946                           
   947     0070                     ?_main:	
   948                           ; 1 bytes @ 0x0
   949                           
   950                           
   951                           ; 2 bytes @ 0x0
   952     0070                     	ds	13
   953                           
   954                           	psect	cstackBANK0
   955     0020                     __pcstackBANK0:
   956     0020                     ?___ftge:
   957     0020                     ??_set_CHANNEL:	
   958                           ; 1 bit 
   959                           
   960     0020                     ??_config_HAL:	
   961                           ; 1 bytes @ 0x0
   962                           
   963     0020                     ??_uart_init:	
   964                           ; 1 bytes @ 0x0
   965                           
   966     0020                     ?_strcpy:	
   967                           ; 1 bytes @ 0x0
   968                           
   969     0020                     ??_init_inttimer:	
   970                           ; 1 bytes @ 0x0
   971                           
   972     0020                     ??_uart_send:	
   973                           ; 1 bytes @ 0x0
   974                           
   975     0020                     ?___lbmod:	
   976                           ; 1 bytes @ 0x0
   977                           
   978     0020                     ?___wmul:	
   979                           ; 1 bytes @ 0x0
   980                           
   981     0020                     ?___awmod:	
   982                           ; 2 bytes @ 0x0
   983                           
   984     0020                     ?___ftpack:	
   985                           ; 2 bytes @ 0x0
   986                           
   987     0020                     ?___ftneg:	
   988                           ; 3 bytes @ 0x0
   989                           
   990     0020                     ?__tdiv_to_l_:	
   991                           ; 3 bytes @ 0x0
   992                           
   993     0020                     ?__div_to_l_:	
   994                           ; 4 bytes @ 0x0
   995                           
   996     0020                     ?___lldiv:	
   997                           ; 4 bytes @ 0x0
   998                           
   999     0020                     ?___llmod:	
  1000                           ; 4 bytes @ 0x0
  1001                           
  1002     0020                     uart_send@data:	
  1003                           ; 4 bytes @ 0x0
  1004                           
  1005     0020                     ___lbmod@divisor:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008     0020                     strcpy@from:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011     0020                     ___wmul@multiplier:	
  1012                           ; 1 bytes @ 0x0
  1013                           
  1014     0020                     ___awmod@divisor:	
  1015                           ; 2 bytes @ 0x0
  1016                           
  1017     0020                     __div_to_l_@f1:	
  1018                           ; 2 bytes @ 0x0
  1019                           
  1020     0020                     ___ftpack@arg:	
  1021                           ; 3 bytes @ 0x0
  1022                           
  1023     0020                     __tdiv_to_l_@f1:	
  1024                           ; 3 bytes @ 0x0
  1025                           
  1026     0020                     ___ftge@ff1:	
  1027                           ; 3 bytes @ 0x0
  1028                           
  1029     0020                     ___ftneg@f1:	
  1030                           ; 3 bytes @ 0x0
  1031                           
  1032     0020                     ___lldiv@divisor:	
  1033                           ; 3 bytes @ 0x0
  1034                           
  1035     0020                     ___llmod@divisor:	
  1036                           ; 4 bytes @ 0x0
  1037                           
  1038                           
  1039                           ; 4 bytes @ 0x0
  1040     0020                     	ds	1
  1041     0021                     ??_strcpy:
  1042     0021                     ??_uart_send_text:	
  1043                           ; 1 bytes @ 0x1
  1044                           
  1045     0021                     ??___lbmod:	
  1046                           ; 1 bytes @ 0x1
  1047                           
  1048     0021                     set_CHANNEL@channel:	
  1049                           ; 1 bytes @ 0x1
  1050                           
  1051     0021                     uart_send_text@aux:	
  1052                           ; 1 bytes @ 0x1
  1053                           
  1054     0021                     strcpy@cp:	
  1055                           ; 1 bytes @ 0x1
  1056                           
  1057                           
  1058                           ; 1 bytes @ 0x1
  1059     0021                     	ds	1
  1060     0022                     ??_init_ADC:
  1061     0022                     uart_send_text@buffer:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064     0022                     strcpy@to:	
  1065                           ; 1 bytes @ 0x2
  1066                           
  1067     0022                     ___wmul@multiplicand:	
  1068                           ; 1 bytes @ 0x2
  1069                           
  1070     0022                     ___awmod@dividend:	
  1071                           ; 2 bytes @ 0x2
  1072                           
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075     0022                     	ds	1
  1076     0023                     ??___ftneg:
  1077     0023                     ___ftpack@exp:	
  1078                           ; 1 bytes @ 0x3
  1079                           
  1080     0023                     ___lbmod@dividend:	
  1081                           ; 1 bytes @ 0x3
  1082                           
  1083     0023                     __div_to_l_@f2:	
  1084                           ; 1 bytes @ 0x3
  1085                           
  1086     0023                     __tdiv_to_l_@f2:	
  1087                           ; 3 bytes @ 0x3
  1088                           
  1089     0023                     ___ftge@ff2:	
  1090                           ; 3 bytes @ 0x3
  1091                           
  1092                           
  1093                           ; 3 bytes @ 0x3
  1094     0023                     	ds	1
  1095     0024                     ??___wmul:
  1096     0024                     ??___awmod:	
  1097                           ; 1 bytes @ 0x4
  1098                           
  1099     0024                     ___awmod@counter:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102     0024                     ___ftpack@sign:	
  1103                           ; 1 bytes @ 0x4
  1104                           
  1105     0024                     ___lbmod@counter:	
  1106                           ; 1 bytes @ 0x4
  1107                           
  1108     0024                     ___wmul@product:	
  1109                           ; 1 bytes @ 0x4
  1110                           
  1111     0024                     ___lldiv@dividend:	
  1112                           ; 2 bytes @ 0x4
  1113                           
  1114     0024                     ___llmod@dividend:	
  1115                           ; 4 bytes @ 0x4
  1116                           
  1117                           
  1118                           ; 4 bytes @ 0x4
  1119     0024                     	ds	1
  1120     0025                     ??___ftpack:
  1121     0025                     ___awmod@sign:	
  1122                           ; 1 bytes @ 0x5
  1123                           
  1124     0025                     ___lbmod@rem:	
  1125                           ; 1 bytes @ 0x5
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x5
  1129     0025                     	ds	1
  1130     0026                     ??__tdiv_to_l_:
  1131     0026                     ??__div_to_l_:	
  1132                           ; 1 bytes @ 0x6
  1133                           
  1134     0026                     ??___ftge:	
  1135                           ; 1 bytes @ 0x6
  1136                           
  1137     0026                     ?___lbdiv:	
  1138                           ; 1 bytes @ 0x6
  1139                           
  1140     0026                     ?___awdiv:	
  1141                           ; 1 bytes @ 0x6
  1142                           
  1143     0026                     ___lbdiv@divisor:	
  1144                           ; 2 bytes @ 0x6
  1145                           
  1146     0026                     ___awdiv@divisor:	
  1147                           ; 1 bytes @ 0x6
  1148                           
  1149                           
  1150                           ; 2 bytes @ 0x6
  1151     0026                     	ds	1
  1152     0027                     ??___lbdiv:
  1153     0027                     ___lbdiv@dividend:	
  1154                           ; 1 bytes @ 0x7
  1155                           
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158     0027                     	ds	1
  1159     0028                     ??___lldiv:
  1160     0028                     ??___llmod:	
  1161                           ; 1 bytes @ 0x8
  1162                           
  1163     0028                     ?___lltoft:	
  1164                           ; 1 bytes @ 0x8
  1165                           
  1166     0028                     ?___lwtoft:	
  1167                           ; 3 bytes @ 0x8
  1168                           
  1169     0028                     ___lbdiv@counter:	
  1170                           ; 3 bytes @ 0x8
  1171                           
  1172     0028                     ___awdiv@dividend:	
  1173                           ; 1 bytes @ 0x8
  1174                           
  1175     0028                     ___lwtoft@c:	
  1176                           ; 2 bytes @ 0x8
  1177                           
  1178     0028                     ___lltoft@c:	
  1179                           ; 2 bytes @ 0x8
  1180                           
  1181                           
  1182                           ; 4 bytes @ 0x8
  1183     0028                     	ds	1
  1184     0029                     ___lbdiv@quotient:
  1185     0029                     ___llmod@counter:	
  1186                           ; 1 bytes @ 0x9
  1187                           
  1188     0029                     ___lldiv@quotient:	
  1189                           ; 1 bytes @ 0x9
  1190                           
  1191     0029                     __tdiv_to_l_@quot:	
  1192                           ; 4 bytes @ 0x9
  1193                           
  1194                           
  1195                           ; 4 bytes @ 0x9
  1196     0029                     	ds	1
  1197     002A                     ??___awdiv:
  1198     002A                     ___awdiv@counter:	
  1199                           ; 1 bytes @ 0xA
  1200                           
  1201                           
  1202                           ; 1 bytes @ 0xA
  1203     002A                     	ds	1
  1204     002B                     ??___lwtoft:
  1205     002B                     ___awdiv@sign:	
  1206                           ; 1 bytes @ 0xB
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0xB
  1210     002B                     	ds	1
  1211     002C                     ??___lltoft:
  1212     002C                     ___lltoft@exp:	
  1213                           ; 1 bytes @ 0xC
  1214                           
  1215     002C                     ___awdiv@quotient:	
  1216                           ; 1 bytes @ 0xC
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0xC
  1220     002C                     	ds	1
  1221     002D                     ___lldiv@counter:
  1222     002D                     __tdiv_to_l_@cntr:	
  1223                           ; 1 bytes @ 0xD
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0xD
  1227     002D                     	ds	1
  1228     002E                     ?___bmul:
  1229     002E                     ___bmul@multiplicand:	
  1230                           ; 1 bytes @ 0xE
  1231                           
  1232     002E                     __tdiv_to_l_@exp1:	
  1233                           ; 1 bytes @ 0xE
  1234                           
  1235     002E                     __div_to_l_@quot:	
  1236                           ; 1 bytes @ 0xE
  1237                           
  1238                           
  1239                           ; 4 bytes @ 0xE
  1240     002E                     	ds	1
  1241     002F                     ??___bmul:
  1242     002F                     ___bmul@product:	
  1243                           ; 1 bytes @ 0xF
  1244                           
  1245                           
  1246                           ; 1 bytes @ 0xF
  1247     002F                     	ds	1
  1248     0030                     ___bmul@multiplier:
  1249                           
  1250                           ; 1 bytes @ 0x10
  1251     0030                     	ds	1
  1252     0031                     ?___ftmul:
  1253     0031                     ___ftmul@f1:	
  1254                           ; 3 bytes @ 0x11
  1255                           
  1256                           
  1257                           ; 3 bytes @ 0x11
  1258     0031                     	ds	1
  1259     0032                     __div_to_l_@cntr:
  1260                           
  1261                           ; 1 bytes @ 0x12
  1262     0032                     	ds	1
  1263     0033                     __div_to_l_@exp1:
  1264                           
  1265                           ; 1 bytes @ 0x13
  1266     0033                     	ds	1
  1267     0034                     ___ftmul@f2:
  1268                           
  1269                           ; 3 bytes @ 0x14
  1270     0034                     	ds	3
  1271     0037                     ??___ftmul:
  1272                           
  1273                           ; 1 bytes @ 0x17
  1274     0037                     	ds	3
  1275     003A                     ___ftmul@exp:
  1276                           
  1277                           ; 1 bytes @ 0x1A
  1278     003A                     	ds	1
  1279     003B                     ___ftmul@f3_as_product:
  1280                           
  1281                           ; 3 bytes @ 0x1B
  1282     003B                     	ds	3
  1283     003E                     ___ftmul@cntr:
  1284                           
  1285                           ; 1 bytes @ 0x1E
  1286     003E                     	ds	1
  1287     003F                     ___ftmul@sign:
  1288                           
  1289                           ; 1 bytes @ 0x1F
  1290     003F                     	ds	1
  1291     0040                     ?_fround:
  1292     0040                     ?_scale:	
  1293                           ; 3 bytes @ 0x20
  1294                           
  1295                           
  1296                           ; 3 bytes @ 0x20
  1297     0040                     	ds	3
  1298     0043                     ??_fround:
  1299     0043                     ??_scale:	
  1300                           ; 1 bytes @ 0x23
  1301                           
  1302     0043                     _fround$1259:	
  1303                           ; 1 bytes @ 0x23
  1304                           
  1305     0043                     _scale$1260:	
  1306                           ; 3 bytes @ 0x23
  1307                           
  1308                           
  1309                           ; 3 bytes @ 0x23
  1310     0043                     	ds	3
  1311     0046                     scale@scl:
  1312     0046                     _fround$1258:	
  1313                           ; 1 bytes @ 0x26
  1314                           
  1315                           
  1316                           ; 3 bytes @ 0x26
  1317     0046                     	ds	1
  1318     0047                     ?___fttol:
  1319     0047                     ___fttol@f1:	
  1320                           ; 4 bytes @ 0x27
  1321                           
  1322                           
  1323                           ; 3 bytes @ 0x27
  1324     0047                     	ds	2
  1325     0049                     fround@prec:
  1326                           
  1327                           ; 1 bytes @ 0x29
  1328     0049                     	ds	1
  1329     004A                     ?___ftadd:
  1330     004A                     ___ftadd@f1:	
  1331                           ; 3 bytes @ 0x2A
  1332                           
  1333                           
  1334                           ; 3 bytes @ 0x2A
  1335     004A                     	ds	1
  1336     004B                     ??___fttol:
  1337                           
  1338                           ; 1 bytes @ 0x2B
  1339     004B                     	ds	2
  1340     004D                     ___ftadd@f2:
  1341                           
  1342                           ; 3 bytes @ 0x2D
  1343     004D                     	ds	1
  1344     004E                     ___fttol@sign1:
  1345                           
  1346                           ; 1 bytes @ 0x2E
  1347     004E                     	ds	1
  1348     004F                     ___fttol@lval:
  1349                           
  1350                           ; 4 bytes @ 0x2F
  1351     004F                     	ds	1
  1352     0050                     ??___ftadd:
  1353                           
  1354                           ; 1 bytes @ 0x30
  1355     0050                     	ds	3
  1356     0053                     ___ftadd@sign:
  1357     0053                     ___fttol@exp1:	
  1358                           ; 1 bytes @ 0x33
  1359                           
  1360                           
  1361                           ; 1 bytes @ 0x33
  1362     0053                     	ds	1
  1363     0054                     ___ftadd@exp2:
  1364                           
  1365                           ; 1 bytes @ 0x34
  1366     0054                     	ds	1
  1367     0055                     ___ftadd@exp1:
  1368                           
  1369                           ; 1 bytes @ 0x35
  1370     0055                     	ds	1
  1371     0056                     ?___ftsub:
  1372     0056                     ___ftsub@f2:	
  1373                           ; 3 bytes @ 0x36
  1374                           
  1375                           
  1376                           ; 3 bytes @ 0x36
  1377     0056                     	ds	3
  1378     0059                     ___ftsub@f1:
  1379                           
  1380                           ; 3 bytes @ 0x39
  1381     0059                     	ds	3
  1382     005C                     ??___ftsub:
  1383     005C                     ?_sprintf:	
  1384                           ; 1 bytes @ 0x3C
  1385                           
  1386     005C                     sprintf@f:	
  1387                           ; 2 bytes @ 0x3C
  1388                           
  1389                           
  1390                           ; 1 bytes @ 0x3C
  1391     005C                     	ds	4
  1392     0060                     ??_sprintf:
  1393                           
  1394                           ; 1 bytes @ 0x40
  1395     0060                     	ds	6
  1396     0066                     ??_main:
  1397                           
  1398                           ; 1 bytes @ 0x46
  1399     0066                     	ds	1
  1400     0067                     main@i:
  1401                           
  1402                           ; 2 bytes @ 0x47
  1403     0067                     	ds	2
  1404                           
  1405                           	psect	maintext
  1406     0B6C                     __pmaintext:	
  1407 ;;
  1408 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1409 ;;
  1410 ;; *************** function _main *****************
  1411 ;; Defined at:
  1412 ;;		line 16 in file "newmain.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  i               2   71[BANK0 ] int 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  2   96[None  ] int 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : B00/0
  1423 ;;		On exit  : 300/100
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         0       0       0       0       0
  1427 ;;      Locals:         0       2       0       0       0
  1428 ;;      Temps:          0       1       0       0       0
  1429 ;;      Totals:         0       3       0       0       0
  1430 ;;Total ram usage:        3 bytes
  1431 ;; Hardware stack levels required when called: 5
  1432 ;; This function calls:
  1433 ;;		___ftmul
  1434 ;;		___lwtoft
  1435 ;;		_config_HAL
  1436 ;;		_init_ADC
  1437 ;;		_init_inttimer
  1438 ;;		_sprintf
  1439 ;;		_strcpy
  1440 ;;		_uart_init
  1441 ;;		_uart_send_text
  1442 ;; This function is called by:
  1443 ;;		Startup code after reset
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447     0B6C                     _main:	
  1448                           ;psect for function _main
  1449                           
  1450                           
  1451                           ;newmain.c: 20: OSCCONbits.OSTS = 1;
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1455     0B6C  1683               	bsf	3,5	;RP0=1, select bank1
  1456     0B6D  158F               	bsf	15,3	;volatile
  1457                           
  1458                           ;newmain.c: 21: OSCCONbits.HTS = 0;
  1459     0B6E  110F               	bcf	15,2	;volatile
  1460                           
  1461                           ;newmain.c: 22: OSCCONbits.HTS = 0;
  1462     0B6F  110F               	bcf	15,2	;volatile
  1463                           
  1464                           ;newmain.c: 23: OSCCONbits.SCS = 0;
  1465     0B70  100F               	bcf	15,0	;volatile
  1466                           
  1467                           ;newmain.c: 24: config_HAL();
  1468     0B71  160A  118A  2697  120A  158A  	fcall	_config_HAL
  1469                           
  1470                           ;newmain.c: 25: init_ADC();
  1471     0B76  160A  118A  27DC  120A  158A  	fcall	_init_ADC
  1472                           
  1473                           ;newmain.c: 26: uart_init();
  1474     0B7B  160A  118A  26C8  120A  158A  	fcall	_uart_init
  1475                           
  1476                           ;newmain.c: 27: init_inttimer();
  1477     0B80  160A  118A  26BA  120A  158A  	fcall	_init_inttimer
  1478                           
  1479                           ;newmain.c: 28: ADCON0bits.GO = 1;
  1480     0B85  1283               	bcf	3,5	;RP0=0, select bank0
  1481     0B86  149F               	bsf	31,1	;volatile
  1482     0B87                     l2666:
  1483     0B87  3028               	movlw	40
  1484     0B88  1283               	bcf	3,5	;RP0=0, select bank0
  1485     0B89  026C               	subwf	_contador,w	;volatile
  1486     0B8A  1C03               	skipc
  1487     0B8B  2B87               	goto	l2666
  1488                           
  1489                           ;newmain.c: 36: PIE1bits.ADIE = 0;
  1490     0B8C  1683               	bsf	3,5	;RP0=1, select bank1
  1491     0B8D  130C               	bcf	12,6	;volatile
  1492                           
  1493                           ;newmain.c: 38: for(int i=0; i<=40; i++){
  1494     0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  1495     0B8F  01E7               	clrf	main@i
  1496     0B90  01E8               	clrf	main@i+1
  1497     0B91                     l2674:
  1498                           
  1499                           ;newmain.c: 39: strcpy(buffer,"   ");
  1500     0B91  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1501     0B92  1283               	bcf	3,5	;RP0=0, select bank0
  1502     0B93  1303               	bcf	3,6	;RP1=0, select bank0
  1503     0B94  00A0               	movwf	strcpy@from
  1504     0B95  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1505     0B96  160A  118A  2720  120A  158A  	fcall	_strcpy
  1506                           
  1507                           ;newmain.c: 40: datoenv = muestras[i]*(5.0/1023.0);
  1508     0B9B  3028               	movlw	40
  1509     0B9C  00B1               	movwf	___ftmul@f1
  1510     0B9D  30A0               	movlw	160
  1511     0B9E  00B2               	movwf	___ftmul@f1+1
  1512     0B9F  303B               	movlw	59
  1513     0BA0  00B3               	movwf	___ftmul@f1+2
  1514     0BA1  0867               	movf	main@i,w
  1515     0BA2  00E6               	movwf	??_main
  1516     0BA3  0766               	addwf	??_main,w
  1517     0BA4  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  1518     0BA5  0084               	movwf	4
  1519     0BA6  1783               	bsf	3,7	;select IRP bank3
  1520     0BA7  0800               	movf	0,w
  1521     0BA8  00A8               	movwf	___lwtoft@c
  1522     0BA9  0A84               	incf	4,f
  1523     0BAA  0800               	movf	0,w
  1524     0BAB  00A9               	movwf	___lwtoft@c+1
  1525     0BAC  160A  118A  26FA  120A  158A  	fcall	___lwtoft
  1526     0BB1  0828               	movf	?___lwtoft,w
  1527     0BB2  00B4               	movwf	___ftmul@f2
  1528     0BB3  0829               	movf	?___lwtoft+1,w
  1529     0BB4  00B5               	movwf	___ftmul@f2+1
  1530     0BB5  082A               	movf	?___lwtoft+2,w
  1531     0BB6  00B6               	movwf	___ftmul@f2+2
  1532     0BB7  120A  158A  240E  120A  158A  	fcall	___ftmul
  1533     0BBC  0831               	movf	?___ftmul,w
  1534     0BBD  00E9               	movwf	_datoenv	;volatile
  1535     0BBE  0832               	movf	?___ftmul+1,w
  1536     0BBF  00EA               	movwf	_datoenv+1	;volatile
  1537     0BC0  0833               	movf	?___ftmul+2,w
  1538     0BC1  00EB               	movwf	_datoenv+2	;volatile
  1539                           
  1540                           ;newmain.c: 41: sprintf(buffer, "%f", datoenv);
  1541     0BC2  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1542     0BC3  00DC               	movwf	sprintf@f
  1543     0BC4  0869               	movf	_datoenv,w	;volatile
  1544     0BC5  00DD               	movwf	?_sprintf+1
  1545     0BC6  086A               	movf	_datoenv+1,w	;volatile
  1546     0BC7  00DE               	movwf	?_sprintf+2
  1547     0BC8  086B               	movf	_datoenv+2,w	;volatile
  1548     0BC9  00DF               	movwf	?_sprintf+3
  1549     0BCA  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1550     0BCB  120A  118A  203D  120A  158A  	fcall	_sprintf
  1551                           
  1552                           ;newmain.c: 42: buffer[19] = ';';
  1553     0BD0  303B               	movlw	59
  1554     0BD1  00CA               	movwf	(_buffer^(0+128)+19)
  1555                           
  1556                           ;newmain.c: 43: uart_send_text(buffer);
  1557     0BD2  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1558     0BD3  160A  118A  27BA  120A  158A  	fcall	_uart_send_text
  1559     0BD8  3001               	movlw	1
  1560     0BD9  07E7               	addwf	main@i,f
  1561     0BDA  1803               	skipnc
  1562     0BDB  0AE8               	incf	main@i+1,f
  1563     0BDC  3000               	movlw	0
  1564     0BDD  07E8               	addwf	main@i+1,f
  1565     0BDE  0868               	movf	main@i+1,w
  1566     0BDF  3A80               	xorlw	128
  1567     0BE0  00FF               	movwf	127
  1568     0BE1  3080               	movlw	128
  1569     0BE2  027F               	subwf	127,w
  1570     0BE3  1D03               	skipz
  1571     0BE4  2BE7               	goto	u3515
  1572     0BE5  3029               	movlw	41
  1573     0BE6  0267               	subwf	main@i,w
  1574     0BE7                     u3515:
  1575     0BE7  1C03               	skipc
  1576     0BE8  2B91               	goto	l2674
  1577                           
  1578                           ;newmain.c: 44: };newmain.c: 45: strcpy(buffer,"   ");
  1579     0BE9  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1580     0BEA  1283               	bcf	3,5	;RP0=0, select bank0
  1581     0BEB  1303               	bcf	3,6	;RP1=0, select bank0
  1582     0BEC  00A0               	movwf	strcpy@from
  1583     0BED  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1584     0BEE  160A  118A  2720  120A  158A  	fcall	_strcpy
  1585                           
  1586                           ;newmain.c: 46: sprintf(buffer, "%f",stop );
  1587     0BF3  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1588     0BF4  00DC               	movwf	sprintf@f
  1589     0BF5  086D               	movf	_stop,w	;volatile
  1590     0BF6  00DD               	movwf	?_sprintf+1
  1591     0BF7  086E               	movf	_stop+1,w	;volatile
  1592     0BF8  00DE               	movwf	?_sprintf+2
  1593     0BF9  086F               	movf	_stop+2,w	;volatile
  1594     0BFA  00DF               	movwf	?_sprintf+3
  1595     0BFB  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1596     0BFC  120A  118A  203D  120A  158A  	fcall	_sprintf
  1597                           
  1598                           ;newmain.c: 47: buffer[19] = ';';
  1599     0C01  303B               	movlw	59
  1600     0C02  00CA               	movwf	(_buffer^(0+128)+19)
  1601                           
  1602                           ;newmain.c: 48: uart_send_text(buffer);
  1603     0C03  30B7               	movlw	(low (_buffer| 0))& (0+255)
  1604     0C04  160A  118A  27BA  120A  158A  	fcall	_uart_send_text
  1605                           
  1606                           ;newmain.c: 52: contador = 0;
  1607     0C09  01EC               	clrf	_contador	;volatile
  1608                           
  1609                           ;newmain.c: 53: ADCON0bits.GO = 1;
  1610     0C0A  149F               	bsf	31,1	;volatile
  1611                           
  1612                           ;newmain.c: 55: PIE1bits.ADIE = 1;
  1613     0C0B  1683               	bsf	3,5	;RP0=1, select bank1
  1614     0C0C  170C               	bsf	12,6	;volatile
  1615     0C0D  2B87               	goto	l2666
  1616     0C0E                     __end_of_main:
  1617                           
  1618                           	psect	text1
  1619     17BA                     __ptext1:	
  1620 ;; *************** function _uart_send_text *****************
  1621 ;; Defined at:
  1622 ;;		line 89 in file "uart.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  buffer          1    wreg     PTR unsigned char 
  1625 ;;		 -> buffer(20), 
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;  buffer          1    2[BANK0 ] PTR unsigned char 
  1628 ;;		 -> buffer(20), 
  1629 ;;  aux             1    1[BANK0 ] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : B00/100
  1636 ;;		On exit  : 300/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         0       0       0       0       0
  1640 ;;      Locals:         0       2       0       0       0
  1641 ;;      Temps:          0       0       0       0       0
  1642 ;;      Totals:         0       2       0       0       0
  1643 ;;Total ram usage:        2 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; Hardware stack levels required when called: 2
  1646 ;; This function calls:
  1647 ;;		_uart_send
  1648 ;; This function is called by:
  1649 ;;		_main
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653     17BA                     _uart_send_text:	
  1654                           ;psect for function _uart_send_text
  1655                           
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _uart_send_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1659                           ;uart_send_text@buffer stored from wreg
  1660     17BA  1283               	bcf	3,5	;RP0=0, select bank0
  1661     17BB  00A2               	movwf	uart_send_text@buffer
  1662     17BC                     l175:	
  1663                           ;uart.c: 91: char aux;;uart.c: 92: do{
  1664                           
  1665                           
  1666                           ;uart.c: 93: aux = *buffer;
  1667     17BC  0822               	movf	uart_send_text@buffer,w
  1668     17BD  0084               	movwf	4
  1669     17BE  0800               	movf	0,w
  1670     17BF  00A1               	movwf	uart_send_text@aux
  1671                           
  1672                           ;uart.c: 94: uart_send(aux);
  1673     17C0  0821               	movf	uart_send_text@aux,w
  1674     17C1  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1675                           
  1676                           ;uart.c: 95: buffer++;
  1677     17C6  3001               	movlw	1
  1678     17C7  00FF               	movwf	127
  1679     17C8  087F               	movf	127,w
  1680     17C9  07A2               	addwf	uart_send_text@buffer,f
  1681                           
  1682                           ;uart.c: 96: }while(*buffer != ';');
  1683     17CA  0822               	movf	uart_send_text@buffer,w
  1684     17CB  0084               	movwf	4
  1685     17CC  303B               	movlw	59
  1686     17CD  1383               	bcf	3,7	;select IRP bank0
  1687     17CE  0600               	xorwf	0,w
  1688     17CF  1D03               	btfss	3,2
  1689     17D0  2FBC               	goto	l175
  1690                           
  1691                           ;uart.c: 97: uart_send('\r');
  1692     17D1  300D               	movlw	13
  1693     17D2  120A  118A  27F7  160A  118A  	fcall	_uart_send
  1694                           
  1695                           ;uart.c: 98: uart_send('\n');
  1696     17D7  300A               	movlw	10
  1697     17D8  120A  118A  27F7   	fcall	_uart_send
  1698     17DB  0008               	return
  1699     17DC                     __end_of_uart_send_text:
  1700                           
  1701                           	psect	text2
  1702     07F7                     __ptext2:	
  1703 ;; *************** function _uart_send *****************
  1704 ;; Defined at:
  1705 ;;		line 66 in file "uart.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  data            1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  data            1    0[BANK0 ] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg
  1714 ;; Tracked objects:
  1715 ;;		On entry : 300/0
  1716 ;;		On exit  : 300/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         0       0       0       0       0
  1720 ;;      Locals:         0       1       0       0       0
  1721 ;;      Temps:          0       0       0       0       0
  1722 ;;      Totals:         0       1       0       0       0
  1723 ;;Total ram usage:        1 bytes
  1724 ;; Hardware stack levels used: 1
  1725 ;; Hardware stack levels required when called: 1
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_uart_send_text
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733     07F7                     _uart_send:	
  1734                           ;psect for function _uart_send
  1735                           
  1736                           
  1737                           ;incstack = 0
  1738                           ; Regs used in _uart_send: [wreg]
  1739                           ;uart_send@data stored from wreg
  1740     07F7  00A0               	movwf	uart_send@data
  1741                           
  1742                           ;uart.c: 68: TXEN = 1;
  1743     07F8  1683               	bsf	3,5	;RP0=1, select bank1
  1744     07F9  1698               	bsf	24,5	;volatile
  1745     07FA                     l161:	
  1746                           ;uart.c: 69: while (TXIF == 0);
  1747                           
  1748     07FA  1283               	bcf	3,5	;RP0=0, select bank0
  1749     07FB  1E0C               	btfss	12,4	;volatile
  1750     07FC  2FFA               	goto	l161
  1751                           
  1752                           ;uart.c: 70: TXREG = data;
  1753     07FD  0820               	movf	uart_send@data,w
  1754     07FE  0099               	movwf	25	;volatile
  1755     07FF  0008               	return
  1756     0800                     __end_of_uart_send:
  1757                           
  1758                           	psect	text3
  1759     16C8                     __ptext3:	
  1760 ;; *************** function _uart_init *****************
  1761 ;; Defined at:
  1762 ;;		line 3 in file "uart.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/300
  1773 ;;		On exit  : 300/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1776 ;;      Params:         0       0       0       0       0
  1777 ;;      Locals:         0       0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0
  1779 ;;      Totals:         0       0       0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used: 1
  1782 ;; Hardware stack levels required when called: 1
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790     16C8                     _uart_init:	
  1791                           ;psect for function _uart_init
  1792                           
  1793                           
  1794                           ;uart.c: 6: TRISCbits.TRISC6 = 0;
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _uart_init: [wreg]
  1798     16C8  1683               	bsf	3,5	;RP0=1, select bank1
  1799     16C9  1303               	bcf	3,6	;RP1=0, select bank1
  1800     16CA  1307               	bcf	7,6	;volatile
  1801                           
  1802                           ;uart.c: 7: TRISCbits.TRISC7 = 1;
  1803     16CB  1787               	bsf	7,7	;volatile
  1804                           
  1805                           ;uart.c: 8: TXSTAbits.BRGH = 0;
  1806     16CC  1118               	bcf	24,2	;volatile
  1807                           
  1808                           ;uart.c: 9: BAUDCTLbits.BRG16 = 1;
  1809     16CD  1703               	bsf	3,6	;RP1=1, select bank3
  1810     16CE  1587               	bsf	7,3	;volatile
  1811                           
  1812                           ;uart.c: 20: SPBRG = 51;
  1813     16CF  3033               	movlw	51
  1814     16D0  1303               	bcf	3,6	;RP1=0, select bank1
  1815     16D1  0099               	movwf	25	;volatile
  1816                           
  1817                           ;uart.c: 21: TXSTAbits.SYNC = 0;
  1818     16D2  1218               	bcf	24,4	;volatile
  1819                           
  1820                           ;uart.c: 22: RCSTAbits.SPEN = 1;
  1821     16D3  1283               	bcf	3,5	;RP0=0, select bank0
  1822     16D4  1798               	bsf	24,7	;volatile
  1823                           
  1824                           ;uart.c: 23: RCSTA = 0b10010000;
  1825     16D5  3090               	movlw	144
  1826     16D6  0098               	movwf	24	;volatile
  1827     16D7  0008               	return
  1828     16D8                     __end_of_uart_init:
  1829                           
  1830                           	psect	text4
  1831     1720                     __ptext4:	
  1832 ;; *************** function _strcpy *****************
  1833 ;; Defined at:
  1834 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  to              1    wreg     PTR unsigned char 
  1837 ;;		 -> buffer(20), 
  1838 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  1839 ;;		 -> STR_3(4), STR_1(4), 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  to              1    2[BANK0 ] PTR unsigned char 
  1842 ;;		 -> buffer(20), 
  1843 ;;  cp              1    1[BANK0 ] PTR unsigned char 
  1844 ;;		 -> buffer(20), 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      PTR unsigned char 
  1847 ;; Registers used:
  1848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1849 ;; Tracked objects:
  1850 ;;		On entry : 300/0
  1851 ;;		On exit  : B00/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1854 ;;      Params:         0       1       0       0       0
  1855 ;;      Locals:         0       2       0       0       0
  1856 ;;      Temps:          0       0       0       0       0
  1857 ;;      Totals:         0       3       0       0       0
  1858 ;;Total ram usage:        3 bytes
  1859 ;; Hardware stack levels used: 2
  1860 ;; Hardware stack levels required when called: 1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868     1720                     _strcpy:	
  1869                           ;psect for function _strcpy
  1870                           
  1871                           
  1872                           ;incstack = 0
  1873                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1874                           ;strcpy@to stored from wreg
  1875     1720  00A2               	movwf	strcpy@to
  1876     1721  0822               	movf	strcpy@to,w
  1877     1722  00A1               	movwf	strcpy@cp
  1878     1723                     l2466:
  1879     1723  0820               	movf	strcpy@from,w
  1880     1724  0084               	movwf	4
  1881     1725  120A  158A  2000  160A  118A  	fcall	stringdir
  1882     172A  00FF               	movwf	127
  1883     172B  0821               	movf	strcpy@cp,w
  1884     172C  0084               	movwf	4
  1885     172D  087F               	movf	127,w
  1886     172E  1383               	bcf	3,7	;select IRP bank0
  1887     172F  0080               	movwf	0
  1888     1730  0800               	movf	0,w
  1889     1731  1903               	btfsc	3,2
  1890     1732  0008               	return
  1891     1733  3001               	movlw	1
  1892     1734  00FF               	movwf	127
  1893     1735  087F               	movf	127,w
  1894     1736  07A1               	addwf	strcpy@cp,f
  1895     1737  3001               	movlw	1
  1896     1738  00FF               	movwf	127
  1897     1739  087F               	movf	127,w
  1898     173A  07A0               	addwf	strcpy@from,f
  1899     173B  2F23               	goto	l2466
  1900     173C                     __end_of_strcpy:
  1901                           
  1902                           	psect	text5
  1903     003D                     __ptext5:	
  1904 ;; *************** function _sprintf *****************
  1905 ;; Defined at:
  1906 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  sp              1    wreg     PTR unsigned char 
  1909 ;;		 -> buffer(20), 
  1910 ;;  f               1   60[BANK0 ] PTR const unsigned char 
  1911 ;;		 -> STR_4(3), STR_2(3), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1914 ;;		 -> buffer(20), 
  1915 ;;  tmpval          4   14[BANK1 ] struct .
  1916 ;;  val             4    8[BANK1 ] unsigned long 
  1917 ;;  fval            3   19[BANK1 ] unsigned long 
  1918 ;;  eexp            2   12[BANK1 ] int 
  1919 ;;  prec            2    6[BANK1 ] int 
  1920 ;;  flag            2    4[BANK1 ] unsigned short 
  1921 ;;  cp              2    0        PTR const unsigned char 
  1922 ;;  len             2    0        unsigned int 
  1923 ;;  width           2    0        int 
  1924 ;;  c               1   22[BANK1 ] unsigned char 
  1925 ;;  ap              1    3[BANK1 ] PTR void [1]
  1926 ;;		 -> ?_sprintf(2), 
  1927 ;;  d               1    0        unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  2   60[BANK0 ] int 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 300/800
  1934 ;;		On exit  : B00/100
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1937 ;;      Params:         0       4       0       0       0
  1938 ;;      Locals:         0       0      23       0       0
  1939 ;;      Temps:          0       6       0       0       0
  1940 ;;      Totals:         0      10      23       0       0
  1941 ;;Total ram usage:       33 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 4
  1944 ;; This function calls:
  1945 ;;		___awdiv
  1946 ;;		___ftadd
  1947 ;;		___ftge
  1948 ;;		___ftmul
  1949 ;;		___ftneg
  1950 ;;		___ftsub
  1951 ;;		___fttol
  1952 ;;		___lldiv
  1953 ;;		___llmod
  1954 ;;		___lltoft
  1955 ;;		___wmul
  1956 ;;		__div_to_l_
  1957 ;;		__tdiv_to_l_
  1958 ;;		_fround
  1959 ;;		_scale
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965     003D                     _sprintf:	
  1966                           ;psect for function _sprintf
  1967                           
  1968                           
  1969                           ;incstack = 0
  1970                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1971                           ;sprintf@sp stored from wreg
  1972     003D  1683               	bsf	3,5	;RP0=1, select bank1
  1973     003E  00B2               	movwf	sprintf@sp^(0+128)
  1974                           
  1975                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1976     003F  305D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1977     0040  00A3               	movwf	sprintf@ap^(0+128)
  1978     0041                     l2634:	
  1979                           ;doprnt.c: 553: while((c = *f++)) {
  1980                           
  1981     0041  3001               	movlw	1
  1982     0042  1283               	bcf	3,5	;RP0=0, select bank0
  1983     0043  07DC               	addwf	sprintf@f,f
  1984     0044  30FF               	movlw	-1
  1985     0045  075C               	addwf	sprintf@f,w
  1986     0046  0084               	movwf	4
  1987     0047  120A  158A  2000  120A  118A  	fcall	stringdir
  1988     004C  1683               	bsf	3,5	;RP0=1, select bank1
  1989     004D  00B6               	movwf	sprintf@c^(0+128)
  1990     004E  0836               	movf	sprintf@c^(0+128),w
  1991     004F  1903               	btfsc	3,2
  1992     0050  2D23               	goto	l2636
  1993                           
  1994                           ;doprnt.c: 555: if(c != '%')
  1995     0051  3025               	movlw	37
  1996     0052  0636               	xorwf	sprintf@c^(0+128),w
  1997     0053  1903               	btfsc	3,2
  1998     0054  2859               	goto	l2476
  1999                           
  2000                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  2001     0055  0832               	movf	sprintf@sp^(0+128),w
  2002     0056  0084               	movwf	4
  2003     0057  0836               	movf	sprintf@c^(0+128),w
  2004     0058  2D1C               	goto	L4
  2005     0059                     l2476:	
  2006                           ;doprnt.c: 559: continue;
  2007                           
  2008                           
  2009                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  2010     0059  01A4               	clrf	sprintf@flag^(0+128)
  2011     005A  01A5               	clrf	(sprintf@flag+1)^(0+128)
  2012                           
  2013                           ;doprnt.c: 661: switch(c = *f++) {
  2014     005B  285E               	goto	l2480
  2015     005C                     l301:	
  2016                           ;doprnt.c: 688: case 'f':
  2017                           
  2018                           
  2019                           ;doprnt.c: 689: flag |= 0x400;
  2020     005C  1525               	bsf	(sprintf@flag^(0+128)+1),2
  2021                           
  2022                           ;doprnt.c: 690: break;
  2023     005D  2872               	goto	l2482
  2024     005E                     l2480:
  2025     005E  3001               	movlw	1
  2026     005F  1283               	bcf	3,5	;RP0=0, select bank0
  2027     0060  07DC               	addwf	sprintf@f,f
  2028     0061  30FF               	movlw	-1
  2029     0062  075C               	addwf	sprintf@f,w
  2030     0063  0084               	movwf	4
  2031     0064  120A  158A  2000  120A  118A  	fcall	stringdir
  2032     0069  1683               	bsf	3,5	;RP0=1, select bank1
  2033     006A  00B6               	movwf	sprintf@c^(0+128)
  2034                           
  2035                           ; Switch size 1, requested type "simple"
  2036                           ; Number of cases is 2, Range of values is 0 to 102
  2037                           ; switch strategies available:
  2038                           ; Name         Instructions Cycles
  2039                           ; simple_byte            7     4 (average)
  2040                           ; jumptable            260     6 (fixed)
  2041                           ;	Chosen strategy is simple_byte
  2042     006B  3A00               	xorlw	0	; case 0
  2043     006C  1903               	skipnz
  2044     006D  2D23               	goto	l2636
  2045     006E  3A66               	xorlw	102	; case 102
  2046     006F  1903               	skipnz
  2047     0070  285C               	goto	l301
  2048     0071  2841               	goto	l2634
  2049     0072                     l2482:
  2050                           
  2051                           ;doprnt.c: 851: if(flag & (0x700)) {
  2052     0072  3000               	movlw	0
  2053     0073  0524               	andwf	sprintf@flag^(0+128),w
  2054     0074  1283               	bcf	3,5	;RP0=0, select bank0
  2055     0075  00E0               	movwf	??_sprintf
  2056     0076  3007               	movlw	7
  2057     0077  1683               	bsf	3,5	;RP0=1, select bank1
  2058     0078  0525               	andwf	(sprintf@flag+1)^(0+128),w
  2059     0079  1283               	bcf	3,5	;RP0=0, select bank0
  2060     007A  00E1               	movwf	??_sprintf+1
  2061     007B  0860               	movf	??_sprintf,w
  2062     007C  0461               	iorwf	??_sprintf+1,w
  2063     007D  1903               	btfsc	3,2
  2064     007E  2D14               	goto	l2628
  2065                           
  2066                           ;doprnt.c: 855: prec = 6;
  2067     007F  3006               	movlw	6
  2068     0080  1683               	bsf	3,5	;RP0=1, select bank1
  2069     0081  00A6               	movwf	sprintf@prec^(0+128)
  2070     0082  3000               	movlw	0
  2071     0083  00A7               	movwf	(sprintf@prec^(0+128)+1)
  2072                           
  2073                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2074     0084  0823               	movf	sprintf@ap^(0+128),w
  2075     0085  0084               	movwf	4
  2076     0086  1383               	bcf	3,7	;select IRP bank0
  2077     0087  0800               	movf	0,w
  2078     0088  00B3               	movwf	sprintf@fval^(0+128)
  2079     0089  0A84               	incf	4,f
  2080     008A  0800               	movf	0,w
  2081     008B  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2082     008C  0A84               	incf	4,f
  2083     008D  0800               	movf	0,w
  2084     008E  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2085     008F  3003               	movlw	3
  2086     0090  00FF               	movwf	127
  2087     0091  087F               	movf	127,w
  2088     0092  07A3               	addwf	sprintf@ap^(0+128),f
  2089                           
  2090                           ;doprnt.c: 857: if(fval < 0.0) {
  2091     0093  0833               	movf	sprintf@fval^(0+128),w
  2092     0094  1283               	bcf	3,5	;RP0=0, select bank0
  2093     0095  00A0               	movwf	___ftge@ff1
  2094     0096  1683               	bsf	3,5	;RP0=1, select bank1
  2095     0097  0834               	movf	(sprintf@fval+1)^(0+128),w
  2096     0098  1283               	bcf	3,5	;RP0=0, select bank0
  2097     0099  00A1               	movwf	___ftge@ff1+1
  2098     009A  1683               	bsf	3,5	;RP0=1, select bank1
  2099     009B  0835               	movf	(sprintf@fval+2)^(0+128),w
  2100     009C  1283               	bcf	3,5	;RP0=0, select bank0
  2101     009D  00A2               	movwf	___ftge@ff1+2
  2102     009E  3000               	movlw	0
  2103     009F  00A3               	movwf	___ftge@ff2
  2104     00A0  3000               	movlw	0
  2105     00A1  00A4               	movwf	___ftge@ff2+1
  2106     00A2  3000               	movlw	0
  2107     00A3  00A5               	movwf	___ftge@ff2+2
  2108     00A4  120A  158A  20AC  120A  118A  	fcall	___ftge
  2109     00A9  1803               	btfsc	3,0
  2110     00AA  28CB               	goto	l2496
  2111                           
  2112                           ;doprnt.c: 858: fval = -fval;
  2113     00AB  1683               	bsf	3,5	;RP0=1, select bank1
  2114     00AC  0833               	movf	sprintf@fval^(0+128),w
  2115     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2116     00AE  00A0               	movwf	___ftneg@f1
  2117     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  2118     00B0  0834               	movf	(sprintf@fval+1)^(0+128),w
  2119     00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2120     00B2  00A1               	movwf	___ftneg@f1+1
  2121     00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2122     00B4  0835               	movf	(sprintf@fval+2)^(0+128),w
  2123     00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2124     00B6  00A2               	movwf	___ftneg@f1+2
  2125     00B7  160A  118A  269D  120A  118A  	fcall	___ftneg
  2126     00BC  0820               	movf	?___ftneg,w
  2127     00BD  1683               	bsf	3,5	;RP0=1, select bank1
  2128     00BE  00B3               	movwf	sprintf@fval^(0+128)
  2129     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  2130     00C0  0821               	movf	?___ftneg+1,w
  2131     00C1  1683               	bsf	3,5	;RP0=1, select bank1
  2132     00C2  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2133     00C3  1283               	bcf	3,5	;RP0=0, select bank0
  2134     00C4  0822               	movf	?___ftneg+2,w
  2135     00C5  1683               	bsf	3,5	;RP0=1, select bank1
  2136     00C6  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2137                           
  2138                           ;doprnt.c: 859: flag |= 0x03;
  2139     00C7  3003               	movlw	3
  2140     00C8  04A4               	iorwf	sprintf@flag^(0+128),f
  2141     00C9  3000               	movlw	0
  2142     00CA  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  2143     00CB                     l2496:
  2144                           
  2145                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2146     00CB  1683               	bsf	3,5	;RP0=1, select bank1
  2147     00CC  01AC               	clrf	sprintf@eexp^(0+128)
  2148     00CD  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2149                           
  2150                           ;doprnt.c: 862: if( fval!=0) {
  2151     00CE  0835               	movf	(sprintf@fval+2)^(0+128),w
  2152     00CF  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2153     00D0  0433               	iorwf	sprintf@fval^(0+128),w
  2154     00D1  1903               	skipnz
  2155     00D2  29B4               	goto	l2526
  2156                           
  2157                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2158     00D3  30B3               	movlw	low (sprintf@fval| 0)
  2159     00D4  0084               	movwf	4
  2160     00D5  1383               	bcf	3,7	;select IRP bank1
  2161     00D6  0800               	movf	0,w
  2162     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2163     00D8  00E0               	movwf	??_sprintf
  2164     00D9  0A84               	incf	4,f
  2165     00DA  0800               	movf	0,w
  2166     00DB  00E1               	movwf	??_sprintf+1
  2167     00DC  0A84               	incf	4,f
  2168     00DD  0800               	movf	0,w
  2169     00DE  00E2               	movwf	??_sprintf+2
  2170     00DF  0A84               	incf	4,f
  2171     00E0  0800               	movf	0,w
  2172     00E1  00E3               	movwf	??_sprintf+3
  2173     00E2  300F               	movlw	15
  2174     00E3                     u3255:
  2175     00E3  1003               	clrc
  2176     00E4  0CE3               	rrf	??_sprintf+3,f
  2177     00E5  0CE2               	rrf	??_sprintf+2,f
  2178     00E6  0CE1               	rrf	??_sprintf+1,f
  2179     00E7  0CE0               	rrf	??_sprintf,f
  2180     00E8  3EFF               	addlw	-1
  2181     00E9  1D03               	skipz
  2182     00EA  28E3               	goto	u3255
  2183     00EB  30FF               	movlw	255
  2184     00EC  0560               	andwf	??_sprintf,w
  2185     00ED  00E4               	movwf	??_sprintf+4
  2186     00EE  3000               	movlw	0
  2187     00EF  0561               	andwf	??_sprintf+1,w
  2188     00F0  00E5               	movwf	??_sprintf+5
  2189     00F1  0864               	movf	??_sprintf+4,w
  2190     00F2  3E82               	addlw	130
  2191     00F3  1683               	bsf	3,5	;RP0=1, select bank1
  2192     00F4  00AC               	movwf	sprintf@eexp^(0+128)
  2193     00F5  1283               	bcf	3,5	;RP0=0, select bank0
  2194     00F6  0865               	movf	??_sprintf+5,w
  2195     00F7  1803               	skipnc
  2196     00F8  3E01               	addlw	1
  2197     00F9  3EFF               	addlw	255
  2198     00FA  1683               	bsf	3,5	;RP0=1, select bank1
  2199     00FB  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2200                           
  2201                           ;doprnt.c: 864: eexp--;
  2202     00FC  30FF               	movlw	255
  2203     00FD  07AC               	addwf	sprintf@eexp^(0+128),f
  2204     00FE  1803               	skipnc
  2205     00FF  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2206     0100  30FF               	movlw	255
  2207     0101  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2208                           
  2209                           ;doprnt.c: 865: eexp *= 3;
  2210     0102  3003               	movlw	3
  2211     0103  1283               	bcf	3,5	;RP0=0, select bank0
  2212     0104  00A0               	movwf	___wmul@multiplier
  2213     0105  3000               	movlw	0
  2214     0106  00A1               	movwf	___wmul@multiplier+1
  2215     0107  1683               	bsf	3,5	;RP0=1, select bank1
  2216     0108  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2217     0109  1283               	bcf	3,5	;RP0=0, select bank0
  2218     010A  00A3               	movwf	___wmul@multiplicand+1
  2219     010B  1683               	bsf	3,5	;RP0=1, select bank1
  2220     010C  082C               	movf	sprintf@eexp^(0+128),w
  2221     010D  1283               	bcf	3,5	;RP0=0, select bank0
  2222     010E  00A2               	movwf	___wmul@multiplicand
  2223     010F  160A  118A  2778  120A  118A  	fcall	___wmul
  2224     0114  0821               	movf	?___wmul+1,w
  2225     0115  1683               	bsf	3,5	;RP0=1, select bank1
  2226     0116  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2227     0117  1283               	bcf	3,5	;RP0=0, select bank0
  2228     0118  0820               	movf	?___wmul,w
  2229     0119  1683               	bsf	3,5	;RP0=1, select bank1
  2230     011A  00AC               	movwf	sprintf@eexp^(0+128)
  2231                           
  2232                           ;doprnt.c: 866: eexp /= 10;
  2233     011B  300A               	movlw	10
  2234     011C  1283               	bcf	3,5	;RP0=0, select bank0
  2235     011D  00A6               	movwf	___awdiv@divisor
  2236     011E  3000               	movlw	0
  2237     011F  00A7               	movwf	___awdiv@divisor+1
  2238     0120  1683               	bsf	3,5	;RP0=1, select bank1
  2239     0121  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2240     0122  1283               	bcf	3,5	;RP0=0, select bank0
  2241     0123  00A9               	movwf	___awdiv@dividend+1
  2242     0124  1683               	bsf	3,5	;RP0=1, select bank1
  2243     0125  082C               	movf	sprintf@eexp^(0+128),w
  2244     0126  1283               	bcf	3,5	;RP0=0, select bank0
  2245     0127  00A8               	movwf	___awdiv@dividend
  2246     0128  120A  158A  21A8  120A  118A  	fcall	___awdiv
  2247     012D  0827               	movf	?___awdiv+1,w
  2248     012E  1683               	bsf	3,5	;RP0=1, select bank1
  2249     012F  00AD               	movwf	(sprintf@eexp+1)^(0+128)
  2250     0130  1283               	bcf	3,5	;RP0=0, select bank0
  2251     0131  0826               	movf	?___awdiv,w
  2252     0132  1683               	bsf	3,5	;RP0=1, select bank1
  2253     0133  00AC               	movwf	sprintf@eexp^(0+128)
  2254                           
  2255                           ;doprnt.c: 867: if(eexp < 0)
  2256     0134  1FAD               	btfss	(sprintf@eexp+1)^(0+128),7
  2257     0135  293C               	goto	l2512
  2258                           
  2259                           ;doprnt.c: 868: eexp--;
  2260     0136  30FF               	movlw	255
  2261     0137  07AC               	addwf	sprintf@eexp^(0+128),f
  2262     0138  1803               	skipnc
  2263     0139  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2264     013A  30FF               	movlw	255
  2265     013B  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2266     013C                     l2512:
  2267                           
  2268                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2269     013C  032C               	decf	sprintf@eexp^(0+128),w
  2270     013D  3AFF               	xorlw	255
  2271     013E  120A  118A  2528  120A  118A  	fcall	_scale
  2272     0143  0840               	movf	?_scale,w
  2273     0144  1683               	bsf	3,5	;RP0=1, select bank1
  2274     0145  00AE               	movwf	sprintf@tmpval^(0+128)
  2275     0146  1283               	bcf	3,5	;RP0=0, select bank0
  2276     0147  0841               	movf	?_scale+1,w
  2277     0148  1683               	bsf	3,5	;RP0=1, select bank1
  2278     0149  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2279     014A  1283               	bcf	3,5	;RP0=0, select bank0
  2280     014B  0842               	movf	?_scale+2,w
  2281     014C  1683               	bsf	3,5	;RP0=1, select bank1
  2282     014D  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2283                           
  2284                           ;doprnt.c: 873: tmpval.integ *= fval;
  2285     014E  0833               	movf	sprintf@fval^(0+128),w
  2286     014F  1283               	bcf	3,5	;RP0=0, select bank0
  2287     0150  00B1               	movwf	___ftmul@f1
  2288     0151  1683               	bsf	3,5	;RP0=1, select bank1
  2289     0152  0834               	movf	(sprintf@fval+1)^(0+128),w
  2290     0153  1283               	bcf	3,5	;RP0=0, select bank0
  2291     0154  00B2               	movwf	___ftmul@f1+1
  2292     0155  1683               	bsf	3,5	;RP0=1, select bank1
  2293     0156  0835               	movf	(sprintf@fval+2)^(0+128),w
  2294     0157  1283               	bcf	3,5	;RP0=0, select bank0
  2295     0158  00B3               	movwf	___ftmul@f1+2
  2296     0159  1683               	bsf	3,5	;RP0=1, select bank1
  2297     015A  082E               	movf	sprintf@tmpval^(0+128),w
  2298     015B  1283               	bcf	3,5	;RP0=0, select bank0
  2299     015C  00B4               	movwf	___ftmul@f2
  2300     015D  1683               	bsf	3,5	;RP0=1, select bank1
  2301     015E  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2302     015F  1283               	bcf	3,5	;RP0=0, select bank0
  2303     0160  00B5               	movwf	___ftmul@f2+1
  2304     0161  1683               	bsf	3,5	;RP0=1, select bank1
  2305     0162  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2306     0163  1283               	bcf	3,5	;RP0=0, select bank0
  2307     0164  00B6               	movwf	___ftmul@f2+2
  2308     0165  120A  158A  240E  120A  118A  	fcall	___ftmul
  2309     016A  0831               	movf	?___ftmul,w
  2310     016B  1683               	bsf	3,5	;RP0=1, select bank1
  2311     016C  00AE               	movwf	sprintf@tmpval^(0+128)
  2312     016D  1283               	bcf	3,5	;RP0=0, select bank0
  2313     016E  0832               	movf	?___ftmul+1,w
  2314     016F  1683               	bsf	3,5	;RP0=1, select bank1
  2315     0170  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2316     0171  1283               	bcf	3,5	;RP0=0, select bank0
  2317     0172  0833               	movf	?___ftmul+2,w
  2318     0173  1683               	bsf	3,5	;RP0=1, select bank1
  2319     0174  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2320                           
  2321                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2322     0175  082E               	movf	sprintf@tmpval^(0+128),w
  2323     0176  1283               	bcf	3,5	;RP0=0, select bank0
  2324     0177  00A0               	movwf	___ftge@ff1
  2325     0178  1683               	bsf	3,5	;RP0=1, select bank1
  2326     0179  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2327     017A  1283               	bcf	3,5	;RP0=0, select bank0
  2328     017B  00A1               	movwf	___ftge@ff1+1
  2329     017C  1683               	bsf	3,5	;RP0=1, select bank1
  2330     017D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2331     017E  1283               	bcf	3,5	;RP0=0, select bank0
  2332     017F  00A2               	movwf	___ftge@ff1+2
  2333     0180  3000               	movlw	0
  2334     0181  00A3               	movwf	___ftge@ff2
  2335     0182  3080               	movlw	128
  2336     0183  00A4               	movwf	___ftge@ff2+1
  2337     0184  303F               	movlw	63
  2338     0185  00A5               	movwf	___ftge@ff2+2
  2339     0186  120A  158A  20AC  120A  118A  	fcall	___ftge
  2340     018B  1803               	btfsc	3,0
  2341     018C  2994               	goto	l2520
  2342                           
  2343                           ;doprnt.c: 875: eexp--;
  2344     018D  30FF               	movlw	255
  2345     018E  1683               	bsf	3,5	;RP0=1, select bank1
  2346     018F  07AC               	addwf	sprintf@eexp^(0+128),f
  2347     0190  1803               	skipnc
  2348     0191  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2349     0192  30FF               	movlw	255
  2350     0193  29B3               	goto	L5
  2351     0194                     l2520:
  2352                           
  2353                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2354     0194  1683               	bsf	3,5	;RP0=1, select bank1
  2355     0195  082E               	movf	sprintf@tmpval^(0+128),w
  2356     0196  1283               	bcf	3,5	;RP0=0, select bank0
  2357     0197  00A0               	movwf	___ftge@ff1
  2358     0198  1683               	bsf	3,5	;RP0=1, select bank1
  2359     0199  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2360     019A  1283               	bcf	3,5	;RP0=0, select bank0
  2361     019B  00A1               	movwf	___ftge@ff1+1
  2362     019C  1683               	bsf	3,5	;RP0=1, select bank1
  2363     019D  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2364     019E  1283               	bcf	3,5	;RP0=0, select bank0
  2365     019F  00A2               	movwf	___ftge@ff1+2
  2366     01A0  3000               	movlw	0
  2367     01A1  00A3               	movwf	___ftge@ff2
  2368     01A2  3020               	movlw	32
  2369     01A3  00A4               	movwf	___ftge@ff2+1
  2370     01A4  3041               	movlw	65
  2371     01A5  00A5               	movwf	___ftge@ff2+2
  2372     01A6  120A  158A  20AC  120A  118A  	fcall	___ftge
  2373     01AB  1C03               	btfss	3,0
  2374     01AC  29B4               	goto	l2526
  2375                           
  2376                           ;doprnt.c: 877: eexp++;
  2377     01AD  3001               	movlw	1
  2378     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2379     01AF  07AC               	addwf	sprintf@eexp^(0+128),f
  2380     01B0  1803               	skipnc
  2381     01B1  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2382     01B2  3000               	movlw	0
  2383     01B3                     L5:
  2384     01B3  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2385     01B4                     l2526:	
  2386                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2387                           
  2388                           
  2389                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2390     01B4  3006               	movlw	6
  2391     01B5  120A  158A  26C1  120A  118A  	fcall	_fround
  2392     01BA  0840               	movf	?_fround,w
  2393     01BB  00CA               	movwf	___ftadd@f1
  2394     01BC  0841               	movf	?_fround+1,w
  2395     01BD  00CB               	movwf	___ftadd@f1+1
  2396     01BE  0842               	movf	?_fround+2,w
  2397     01BF  00CC               	movwf	___ftadd@f1+2
  2398     01C0  1683               	bsf	3,5	;RP0=1, select bank1
  2399     01C1  0833               	movf	sprintf@fval^(0+128),w
  2400     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  2401     01C3  00CD               	movwf	___ftadd@f2
  2402     01C4  1683               	bsf	3,5	;RP0=1, select bank1
  2403     01C5  0834               	movf	(sprintf@fval+1)^(0+128),w
  2404     01C6  1283               	bcf	3,5	;RP0=0, select bank0
  2405     01C7  00CE               	movwf	___ftadd@f2+1
  2406     01C8  1683               	bsf	3,5	;RP0=1, select bank1
  2407     01C9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2408     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2409     01CB  00CF               	movwf	___ftadd@f2+2
  2410     01CC  120A  158A  24B3  120A  118A  	fcall	___ftadd
  2411     01D1  084A               	movf	?___ftadd,w
  2412     01D2  1683               	bsf	3,5	;RP0=1, select bank1
  2413     01D3  00B3               	movwf	sprintf@fval^(0+128)
  2414     01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2415     01D5  084B               	movf	?___ftadd+1,w
  2416     01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2417     01D7  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2418     01D8  1283               	bcf	3,5	;RP0=0, select bank0
  2419     01D9  084C               	movf	?___ftadd+2,w
  2420     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  2421     01DB  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2422                           
  2423                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2424     01DC  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2425     01DD  3A80               	xorlw	128
  2426     01DE  00FF               	movwf	127
  2427     01DF  3080               	movlw	128
  2428     01E0  027F               	subwf	127,w
  2429     01E1  1D03               	skipz
  2430     01E2  29E5               	goto	u3295
  2431     01E3  300A               	movlw	10
  2432     01E4  022C               	subwf	sprintf@eexp^(0+128),w
  2433     01E5                     u3295:
  2434     01E5  1803               	skipnc
  2435     01E6  2A10               	goto	l2536
  2436     01E7  1683               	bsf	3,5	;RP0=1, select bank1
  2437     01E8  1303               	bcf	3,6	;RP1=0, select bank1
  2438     01E9  0835               	movf	(sprintf@fval+2)^(0+128),w
  2439     01EA  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  2440     01EB  0433               	iorwf	sprintf@fval^(0+128),w
  2441     01EC  1903               	skipnz
  2442     01ED  2A76               	goto	l2550
  2443     01EE  0833               	movf	sprintf@fval^(0+128),w
  2444     01EF  1283               	bcf	3,5	;RP0=0, select bank0
  2445     01F0  00C7               	movwf	___fttol@f1
  2446     01F1  1683               	bsf	3,5	;RP0=1, select bank1
  2447     01F2  0834               	movf	(sprintf@fval+1)^(0+128),w
  2448     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2449     01F4  00C8               	movwf	___fttol@f1+1
  2450     01F5  1683               	bsf	3,5	;RP0=1, select bank1
  2451     01F6  0835               	movf	(sprintf@fval+2)^(0+128),w
  2452     01F7  1283               	bcf	3,5	;RP0=0, select bank0
  2453     01F8  00C9               	movwf	___fttol@f1+2
  2454     01F9  120A  118A  2780  120A  118A  	fcall	___fttol
  2455     01FE  084A               	movf	?___fttol+3,w
  2456     01FF  0449               	iorwf	?___fttol+2,w
  2457     0200  0448               	iorwf	?___fttol+1,w
  2458     0201  0447               	iorwf	?___fttol,w
  2459     0202  1D03               	skipz
  2460     0203  2A76               	goto	l2550
  2461     0204  1683               	bsf	3,5	;RP0=1, select bank1
  2462     0205  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2463     0206  3A80               	xorlw	128
  2464     0207  00FF               	movwf	127
  2465     0208  3080               	movlw	128
  2466     0209  027F               	subwf	127,w
  2467     020A  1D03               	skipz
  2468     020B  2A0E               	goto	u3325
  2469     020C  3002               	movlw	2
  2470     020D  022C               	subwf	sprintf@eexp^(0+128),w
  2471     020E                     u3325:
  2472     020E  1C03               	skipc
  2473     020F  2A76               	goto	l2550
  2474     0210                     l2536:
  2475                           
  2476                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2477     0210  1683               	bsf	3,5	;RP0=1, select bank1
  2478     0211  1303               	bcf	3,6	;RP1=0, select bank1
  2479     0212  082E               	movf	sprintf@tmpval^(0+128),w
  2480     0213  1283               	bcf	3,5	;RP0=0, select bank0
  2481     0214  00A0               	movwf	___ftge@ff1
  2482     0215  1683               	bsf	3,5	;RP0=1, select bank1
  2483     0216  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2484     0217  1283               	bcf	3,5	;RP0=0, select bank0
  2485     0218  00A1               	movwf	___ftge@ff1+1
  2486     0219  1683               	bsf	3,5	;RP0=1, select bank1
  2487     021A  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2488     021B  1283               	bcf	3,5	;RP0=0, select bank0
  2489     021C  00A2               	movwf	___ftge@ff1+2
  2490     021D  3070               	movlw	112
  2491     021E  00A3               	movwf	___ftge@ff2
  2492     021F  3089               	movlw	137
  2493     0220  00A4               	movwf	___ftge@ff2+1
  2494     0221  3040               	movlw	64
  2495     0222  00A5               	movwf	___ftge@ff2+2
  2496     0223  120A  158A  20AC  120A  118A  	fcall	___ftge
  2497     0228  1803               	btfsc	3,0
  2498     0229  2A2C               	goto	l2540
  2499                           
  2500                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2501     022A  30F7               	movlw	247
  2502     022B  2A2D               	goto	L1
  2503     022C                     l2540:	
  2504                           ;doprnt.c: 1148: }else{
  2505                           
  2506                           
  2507                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2508     022C  30F8               	movlw	248
  2509     022D                     L1:
  2510     022D  1683               	bsf	3,5	;RP0=1, select bank1
  2511     022E  07AC               	addwf	sprintf@eexp^(0+128),f
  2512     022F  1803               	skipnc
  2513     0230  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2514     0231  30FF               	movlw	255
  2515     0232  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2516                           
  2517                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2518     0233  082C               	movf	sprintf@eexp^(0+128),w
  2519     0234  120A  118A  2528  120A  118A  	fcall	_scale
  2520     0239  0840               	movf	?_scale,w
  2521     023A  1683               	bsf	3,5	;RP0=1, select bank1
  2522     023B  00AE               	movwf	sprintf@tmpval^(0+128)
  2523     023C  1283               	bcf	3,5	;RP0=0, select bank0
  2524     023D  0841               	movf	?_scale+1,w
  2525     023E  1683               	bsf	3,5	;RP0=1, select bank1
  2526     023F  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2527     0240  1283               	bcf	3,5	;RP0=0, select bank0
  2528     0241  0842               	movf	?_scale+2,w
  2529     0242  1683               	bsf	3,5	;RP0=1, select bank1
  2530     0243  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2531                           
  2532                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2533     0244  0833               	movf	sprintf@fval^(0+128),w
  2534     0245  1283               	bcf	3,5	;RP0=0, select bank0
  2535     0246  00A0               	movwf	__tdiv_to_l_@f1
  2536     0247  1683               	bsf	3,5	;RP0=1, select bank1
  2537     0248  0834               	movf	(sprintf@fval+1)^(0+128),w
  2538     0249  1283               	bcf	3,5	;RP0=0, select bank0
  2539     024A  00A1               	movwf	__tdiv_to_l_@f1+1
  2540     024B  1683               	bsf	3,5	;RP0=1, select bank1
  2541     024C  0835               	movf	(sprintf@fval+2)^(0+128),w
  2542     024D  1283               	bcf	3,5	;RP0=0, select bank0
  2543     024E  00A2               	movwf	__tdiv_to_l_@f1+2
  2544     024F  1683               	bsf	3,5	;RP0=1, select bank1
  2545     0250  082E               	movf	sprintf@tmpval^(0+128),w
  2546     0251  1283               	bcf	3,5	;RP0=0, select bank0
  2547     0252  00A3               	movwf	__tdiv_to_l_@f2
  2548     0253  1683               	bsf	3,5	;RP0=1, select bank1
  2549     0254  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2550     0255  1283               	bcf	3,5	;RP0=0, select bank0
  2551     0256  00A4               	movwf	__tdiv_to_l_@f2+1
  2552     0257  1683               	bsf	3,5	;RP0=1, select bank1
  2553     0258  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2554     0259  1283               	bcf	3,5	;RP0=0, select bank0
  2555     025A  00A5               	movwf	__tdiv_to_l_@f2+2
  2556     025B  120A  158A  22CB  120A  118A  	fcall	__tdiv_to_l_
  2557     0260  0823               	movf	?__tdiv_to_l_+3,w
  2558     0261  1683               	bsf	3,5	;RP0=1, select bank1
  2559     0262  00AB               	movwf	(sprintf@val+3)^(0+128)
  2560     0263  1283               	bcf	3,5	;RP0=0, select bank0
  2561     0264  0822               	movf	?__tdiv_to_l_+2,w
  2562     0265  1683               	bsf	3,5	;RP0=1, select bank1
  2563     0266  00AA               	movwf	(sprintf@val+2)^(0+128)
  2564     0267  1283               	bcf	3,5	;RP0=0, select bank0
  2565     0268  0821               	movf	?__tdiv_to_l_+1,w
  2566     0269  1683               	bsf	3,5	;RP0=1, select bank1
  2567     026A  00A9               	movwf	(sprintf@val+1)^(0+128)
  2568     026B  1283               	bcf	3,5	;RP0=0, select bank0
  2569     026C  0820               	movf	?__tdiv_to_l_,w
  2570     026D  1683               	bsf	3,5	;RP0=1, select bank1
  2571     026E  00A8               	movwf	sprintf@val^(0+128)
  2572                           
  2573                           ;doprnt.c: 1155: fval = 0.0;
  2574     026F  3000               	movlw	0
  2575     0270  00B3               	movwf	sprintf@fval^(0+128)
  2576     0271  3000               	movlw	0
  2577     0272  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2578     0273  3000               	movlw	0
  2579     0274  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2580                           
  2581                           ;doprnt.c: 1156: } else {
  2582     0275  2ACF               	goto	l2554
  2583     0276                     l2550:
  2584                           
  2585                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2586     0276  1683               	bsf	3,5	;RP0=1, select bank1
  2587     0277  1303               	bcf	3,6	;RP1=0, select bank1
  2588     0278  0833               	movf	sprintf@fval^(0+128),w
  2589     0279  1283               	bcf	3,5	;RP0=0, select bank0
  2590     027A  00C7               	movwf	___fttol@f1
  2591     027B  1683               	bsf	3,5	;RP0=1, select bank1
  2592     027C  0834               	movf	(sprintf@fval+1)^(0+128),w
  2593     027D  1283               	bcf	3,5	;RP0=0, select bank0
  2594     027E  00C8               	movwf	___fttol@f1+1
  2595     027F  1683               	bsf	3,5	;RP0=1, select bank1
  2596     0280  0835               	movf	(sprintf@fval+2)^(0+128),w
  2597     0281  1283               	bcf	3,5	;RP0=0, select bank0
  2598     0282  00C9               	movwf	___fttol@f1+2
  2599     0283  120A  118A  2780  120A  118A  	fcall	___fttol
  2600     0288  084A               	movf	?___fttol+3,w
  2601     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2602     028A  00AB               	movwf	(sprintf@val+3)^(0+128)
  2603     028B  1283               	bcf	3,5	;RP0=0, select bank0
  2604     028C  0849               	movf	?___fttol+2,w
  2605     028D  1683               	bsf	3,5	;RP0=1, select bank1
  2606     028E  00AA               	movwf	(sprintf@val+2)^(0+128)
  2607     028F  1283               	bcf	3,5	;RP0=0, select bank0
  2608     0290  0848               	movf	?___fttol+1,w
  2609     0291  1683               	bsf	3,5	;RP0=1, select bank1
  2610     0292  00A9               	movwf	(sprintf@val+1)^(0+128)
  2611     0293  1283               	bcf	3,5	;RP0=0, select bank0
  2612     0294  0847               	movf	?___fttol,w
  2613     0295  1683               	bsf	3,5	;RP0=1, select bank1
  2614     0296  00A8               	movwf	sprintf@val^(0+128)
  2615                           
  2616                           ;doprnt.c: 1158: fval -= (double)val;
  2617     0297  082B               	movf	(sprintf@val+3)^(0+128),w
  2618     0298  1283               	bcf	3,5	;RP0=0, select bank0
  2619     0299  00AB               	movwf	___lltoft@c+3
  2620     029A  1683               	bsf	3,5	;RP0=1, select bank1
  2621     029B  082A               	movf	(sprintf@val+2)^(0+128),w
  2622     029C  1283               	bcf	3,5	;RP0=0, select bank0
  2623     029D  00AA               	movwf	___lltoft@c+2
  2624     029E  1683               	bsf	3,5	;RP0=1, select bank1
  2625     029F  0829               	movf	(sprintf@val+1)^(0+128),w
  2626     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  2627     02A1  00A9               	movwf	___lltoft@c+1
  2628     02A2  1683               	bsf	3,5	;RP0=1, select bank1
  2629     02A3  0828               	movf	sprintf@val^(0+128),w
  2630     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2631     02A5  00A8               	movwf	___lltoft@c
  2632     02A6  120A  158A  2085  120A  118A  	fcall	___lltoft
  2633     02AB  0828               	movf	?___lltoft,w
  2634     02AC  00D6               	movwf	___ftsub@f2
  2635     02AD  0829               	movf	?___lltoft+1,w
  2636     02AE  00D7               	movwf	___ftsub@f2+1
  2637     02AF  082A               	movf	?___lltoft+2,w
  2638     02B0  00D8               	movwf	___ftsub@f2+2
  2639     02B1  1683               	bsf	3,5	;RP0=1, select bank1
  2640     02B2  0833               	movf	sprintf@fval^(0+128),w
  2641     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2642     02B4  00D9               	movwf	___ftsub@f1
  2643     02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2644     02B6  0834               	movf	(sprintf@fval+1)^(0+128),w
  2645     02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2646     02B8  00DA               	movwf	___ftsub@f1+1
  2647     02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2648     02BA  0835               	movf	(sprintf@fval+2)^(0+128),w
  2649     02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2650     02BC  00DB               	movwf	___ftsub@f1+2
  2651     02BD  160A  118A  273C  120A  118A  	fcall	___ftsub
  2652     02C2  0856               	movf	?___ftsub,w
  2653     02C3  1683               	bsf	3,5	;RP0=1, select bank1
  2654     02C4  00B3               	movwf	sprintf@fval^(0+128)
  2655     02C5  1283               	bcf	3,5	;RP0=0, select bank0
  2656     02C6  0857               	movf	?___ftsub+1,w
  2657     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2658     02C8  00B4               	movwf	(sprintf@fval+1)^(0+128)
  2659     02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2660     02CA  0858               	movf	?___ftsub+2,w
  2661     02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2662     02CC  00B5               	movwf	(sprintf@fval+2)^(0+128)
  2663                           
  2664                           ;doprnt.c: 1159: eexp = 0;
  2665     02CD  01AC               	clrf	sprintf@eexp^(0+128)
  2666     02CE  01AD               	clrf	(sprintf@eexp+1)^(0+128)
  2667     02CF                     l2554:
  2668                           
  2669                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2670     02CF  01B6               	clrf	sprintf@c^(0+128)
  2671     02D0  0AB6               	incf	sprintf@c^(0+128),f
  2672     02D1                     l2560:
  2673                           
  2674                           ;doprnt.c: 1163: if(val < dpowers[c])
  2675     02D1  0836               	movf	sprintf@c^(0+128),w
  2676     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2677     02D3  00E0               	movwf	??_sprintf
  2678     02D4  3001               	movlw	1
  2679     02D5                     u3345:
  2680     02D5  1003               	clrc
  2681     02D6  0DE0               	rlf	??_sprintf,f
  2682     02D7  3EFF               	addlw	-1
  2683     02D8  1D03               	skipz
  2684     02D9  2AD5               	goto	u3345
  2685     02DA  1003               	clrc
  2686     02DB  0D60               	rlf	??_sprintf,w
  2687     02DC  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2688     02DD  0084               	movwf	4
  2689     02DE  120A  158A  2000  120A  118A  	fcall	stringdir
  2690     02E3  00E1               	movwf	??_sprintf+1
  2691     02E4  120A  158A  2000  120A  118A  	fcall	stringdir
  2692     02E9  00E2               	movwf	??_sprintf+2
  2693     02EA  120A  158A  2000  120A  118A  	fcall	stringdir
  2694     02EF  00E3               	movwf	??_sprintf+3
  2695     02F0  120A  158A  2000  120A  118A  	fcall	stringdir
  2696     02F5  00E4               	movwf	??_sprintf+4
  2697     02F6  0864               	movf	??_sprintf+4,w
  2698     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2699     02F8  022B               	subwf	(sprintf@val+3)^(0+128),w
  2700     02F9  1D03               	skipz
  2701     02FA  2B0B               	goto	u3355
  2702     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2703     02FC  0863               	movf	??_sprintf+3,w
  2704     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2705     02FE  022A               	subwf	(sprintf@val+2)^(0+128),w
  2706     02FF  1D03               	skipz
  2707     0300  2B0B               	goto	u3355
  2708     0301  1283               	bcf	3,5	;RP0=0, select bank0
  2709     0302  0862               	movf	??_sprintf+2,w
  2710     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2711     0304  0229               	subwf	(sprintf@val+1)^(0+128),w
  2712     0305  1D03               	skipz
  2713     0306  2B0B               	goto	u3355
  2714     0307  1283               	bcf	3,5	;RP0=0, select bank0
  2715     0308  0861               	movf	??_sprintf+1,w
  2716     0309  1683               	bsf	3,5	;RP0=1, select bank1
  2717     030A  0228               	subwf	sprintf@val^(0+128),w
  2718     030B                     u3355:
  2719     030B  1C03               	btfss	3,0
  2720     030C  2B15               	goto	l2568
  2721     030D  3001               	movlw	1
  2722     030E  00FF               	movwf	127
  2723     030F  087F               	movf	127,w
  2724     0310  07B6               	addwf	sprintf@c^(0+128),f
  2725     0311  300A               	movlw	10
  2726     0312  0636               	xorwf	sprintf@c^(0+128),w
  2727     0313  1D03               	btfss	3,2
  2728     0314  2AD1               	goto	l2560
  2729     0315                     l2568:
  2730                           
  2731                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2732     0315  0824               	movf	sprintf@flag^(0+128),w
  2733     0316  3903               	andlw	3
  2734     0317  1903               	btfsc	3,2
  2735     0318  2B22               	goto	l2582
  2736                           
  2737                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2738     0319  0832               	movf	sprintf@sp^(0+128),w
  2739     031A  0084               	movwf	4
  2740     031B  302D               	movlw	45
  2741     031C                     L6:
  2742     031C  1383               	bcf	3,7	;select IRP bank0
  2743     031D  0080               	movwf	0
  2744     031E  3001               	movlw	1
  2745     031F  00FF               	movwf	127
  2746     0320  087F               	movf	127,w
  2747     0321  07B2               	addwf	sprintf@sp^(0+128),f
  2748     0322                     l2582:
  2749     0322  3001               	movlw	1
  2750     0323  02B6               	subwf	sprintf@c^(0+128),f
  2751     0324  0A36               	incf	sprintf@c^(0+128),w
  2752     0325  1903               	btfsc	3,2
  2753     0326  2BB3               	goto	l2590
  2754                           
  2755                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2756     0327  0836               	movf	sprintf@c^(0+128),w
  2757     0328  1283               	bcf	3,5	;RP0=0, select bank0
  2758     0329  00E0               	movwf	??_sprintf
  2759     032A  3001               	movlw	1
  2760     032B                     u3385:
  2761     032B  1003               	clrc
  2762     032C  0DE0               	rlf	??_sprintf,f
  2763     032D  3EFF               	addlw	-1
  2764     032E  1D03               	skipz
  2765     032F  2B2B               	goto	u3385
  2766     0330  1003               	clrc
  2767     0331  0D60               	rlf	??_sprintf,w
  2768     0332  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2769     0333  0084               	movwf	4
  2770     0334  120A  158A  2000  120A  118A  	fcall	stringdir
  2771     0339  00A0               	movwf	___lldiv@divisor
  2772     033A  120A  158A  2000  120A  118A  	fcall	stringdir
  2773     033F  00A1               	movwf	___lldiv@divisor+1
  2774     0340  120A  158A  2000  120A  118A  	fcall	stringdir
  2775     0345  00A2               	movwf	___lldiv@divisor+2
  2776     0346  120A  158A  2000  120A  118A  	fcall	stringdir
  2777     034B  00A3               	movwf	___lldiv@divisor+3
  2778     034C  1683               	bsf	3,5	;RP0=1, select bank1
  2779     034D  082B               	movf	(sprintf@val+3)^(0+128),w
  2780     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2781     034F  00A7               	movwf	___lldiv@dividend+3
  2782     0350  1683               	bsf	3,5	;RP0=1, select bank1
  2783     0351  082A               	movf	(sprintf@val+2)^(0+128),w
  2784     0352  1283               	bcf	3,5	;RP0=0, select bank0
  2785     0353  00A6               	movwf	___lldiv@dividend+2
  2786     0354  1683               	bsf	3,5	;RP0=1, select bank1
  2787     0355  0829               	movf	(sprintf@val+1)^(0+128),w
  2788     0356  1283               	bcf	3,5	;RP0=0, select bank0
  2789     0357  00A5               	movwf	___lldiv@dividend+1
  2790     0358  1683               	bsf	3,5	;RP0=1, select bank1
  2791     0359  0828               	movf	sprintf@val^(0+128),w
  2792     035A  1283               	bcf	3,5	;RP0=0, select bank0
  2793     035B  00A4               	movwf	___lldiv@dividend
  2794     035C  120A  158A  2201  120A  118A  	fcall	___lldiv
  2795     0361  0823               	movf	?___lldiv+3,w
  2796     0362  1683               	bsf	3,5	;RP0=1, select bank1
  2797     0363  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2798     0364  1283               	bcf	3,5	;RP0=0, select bank0
  2799     0365  0822               	movf	?___lldiv+2,w
  2800     0366  1683               	bsf	3,5	;RP0=1, select bank1
  2801     0367  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2802     0368  1283               	bcf	3,5	;RP0=0, select bank0
  2803     0369  0821               	movf	?___lldiv+1,w
  2804     036A  1683               	bsf	3,5	;RP0=1, select bank1
  2805     036B  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2806     036C  1283               	bcf	3,5	;RP0=0, select bank0
  2807     036D  0820               	movf	?___lldiv,w
  2808     036E  1683               	bsf	3,5	;RP0=1, select bank1
  2809     036F  00AE               	movwf	sprintf@tmpval^(0+128)
  2810                           
  2811                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2812     0370  3000               	movlw	0
  2813     0371  1283               	bcf	3,5	;RP0=0, select bank0
  2814     0372  00A3               	movwf	___llmod@divisor+3
  2815     0373  3000               	movlw	0
  2816     0374  00A2               	movwf	___llmod@divisor+2
  2817     0375  3000               	movlw	0
  2818     0376  00A1               	movwf	___llmod@divisor+1
  2819     0377  300A               	movlw	10
  2820     0378  00A0               	movwf	___llmod@divisor
  2821     0379  1683               	bsf	3,5	;RP0=1, select bank1
  2822     037A  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  2823     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2824     037C  00A7               	movwf	___llmod@dividend+3
  2825     037D  1683               	bsf	3,5	;RP0=1, select bank1
  2826     037E  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  2827     037F  1283               	bcf	3,5	;RP0=0, select bank0
  2828     0380  00A6               	movwf	___llmod@dividend+2
  2829     0381  1683               	bsf	3,5	;RP0=1, select bank1
  2830     0382  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  2831     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2832     0384  00A5               	movwf	___llmod@dividend+1
  2833     0385  1683               	bsf	3,5	;RP0=1, select bank1
  2834     0386  082E               	movf	sprintf@tmpval^(0+128),w
  2835     0387  1283               	bcf	3,5	;RP0=0, select bank0
  2836     0388  00A4               	movwf	___llmod@dividend
  2837     0389  120A  158A  215C  120A  118A  	fcall	___llmod
  2838     038E  0823               	movf	?___llmod+3,w
  2839     038F  1683               	bsf	3,5	;RP0=1, select bank1
  2840     0390  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  2841     0391  1283               	bcf	3,5	;RP0=0, select bank0
  2842     0392  0822               	movf	?___llmod+2,w
  2843     0393  1683               	bsf	3,5	;RP0=1, select bank1
  2844     0394  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  2845     0395  1283               	bcf	3,5	;RP0=0, select bank0
  2846     0396  0821               	movf	?___llmod+1,w
  2847     0397  1683               	bsf	3,5	;RP0=1, select bank1
  2848     0398  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  2849     0399  1283               	bcf	3,5	;RP0=0, select bank0
  2850     039A  0820               	movf	?___llmod,w
  2851     039B  1683               	bsf	3,5	;RP0=1, select bank1
  2852     039C  00AE               	movwf	sprintf@tmpval^(0+128)
  2853                           
  2854                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2855     039D  0832               	movf	sprintf@sp^(0+128),w
  2856     039E  0084               	movwf	4
  2857     039F  082E               	movf	sprintf@tmpval^(0+128),w
  2858     03A0  3E30               	addlw	48
  2859     03A1  2B1C               	goto	L6
  2860     03A2                     l2584:
  2861                           
  2862                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2863     03A2  1683               	bsf	3,5	;RP0=1, select bank1
  2864     03A3  1303               	bcf	3,6	;RP1=0, select bank1
  2865     03A4  0832               	movf	sprintf@sp^(0+128),w
  2866     03A5  0084               	movwf	4
  2867     03A6  3030               	movlw	48
  2868     03A7  1383               	bcf	3,7	;select IRP bank0
  2869     03A8  0080               	movwf	0
  2870     03A9  3001               	movlw	1
  2871     03AA  00FF               	movwf	127
  2872     03AB  087F               	movf	127,w
  2873     03AC  07B2               	addwf	sprintf@sp^(0+128),f
  2874                           
  2875                           ;doprnt.c: 1235: eexp--;
  2876     03AD  30FF               	movlw	255
  2877     03AE  07AC               	addwf	sprintf@eexp^(0+128),f
  2878     03AF  1803               	skipnc
  2879     03B0  0AAD               	incf	(sprintf@eexp+1)^(0+128),f
  2880     03B1  30FF               	movlw	255
  2881     03B2  07AD               	addwf	(sprintf@eexp+1)^(0+128),f
  2882     03B3                     l2590:
  2883     03B3  082D               	movf	(sprintf@eexp+1)^(0+128),w
  2884     03B4  3A80               	xorlw	128
  2885     03B5  00FF               	movwf	127
  2886     03B6  3080               	movlw	128
  2887     03B7  027F               	subwf	127,w
  2888     03B8  1D03               	skipz
  2889     03B9  2BBC               	goto	u3405
  2890     03BA  3001               	movlw	1
  2891     03BB  022C               	subwf	sprintf@eexp^(0+128),w
  2892     03BC                     u3405:
  2893     03BC  1803               	skipnc
  2894     03BD  2BA2               	goto	l2584
  2895                           
  2896                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2897     03BE  1683               	bsf	3,5	;RP0=1, select bank1
  2898     03BF  1303               	bcf	3,6	;RP1=0, select bank1
  2899     03C0  0827               	movf	(sprintf@prec+1)^(0+128),w
  2900     03C1  3A80               	xorlw	128
  2901     03C2  00FF               	movwf	127
  2902     03C3  3080               	movlw	128
  2903     03C4  027F               	subwf	127,w
  2904     03C5  1D03               	skipz
  2905     03C6  2BC9               	goto	u3415
  2906     03C7  3009               	movlw	9
  2907     03C8  0226               	subwf	sprintf@prec^(0+128),w
  2908     03C9                     u3415:
  2909     03C9  1C03               	skipc
  2910     03CA  2BCF               	goto	l2596
  2911                           
  2912                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2913     03CB  3008               	movlw	8
  2914     03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2915     03CD  1303               	bcf	3,6	;RP1=0, select bank1
  2916     03CE  2BD2               	goto	L2
  2917     03CF                     l2596:
  2918                           
  2919                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2920     03CF  1683               	bsf	3,5	;RP0=1, select bank1
  2921     03D0  1303               	bcf	3,6	;RP1=0, select bank1
  2922     03D1  0826               	movf	sprintf@prec^(0+128),w
  2923     03D2                     L2:
  2924     03D2  00B6               	movwf	sprintf@c^(0+128)
  2925                           
  2926                           ;doprnt.c: 1241: prec -= (int)c;
  2927     03D3  0836               	movf	sprintf@c^(0+128),w
  2928     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2929     03D5  00E0               	movwf	??_sprintf
  2930     03D6  01E1               	clrf	??_sprintf+1
  2931     03D7  0860               	movf	??_sprintf,w
  2932     03D8  1683               	bsf	3,5	;RP0=1, select bank1
  2933     03D9  02A6               	subwf	sprintf@prec^(0+128),f
  2934     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2935     03DB  0861               	movf	??_sprintf+1,w
  2936     03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2937     03DD  1C03               	skipc
  2938     03DE  03A7               	decf	(sprintf@prec+1)^(0+128),f
  2939     03DF  02A7               	subwf	(sprintf@prec+1)^(0+128),f
  2940                           
  2941                           ;doprnt.c: 1245: if(c)
  2942     03E0  0836               	movf	sprintf@c^(0+128),w
  2943     03E1  1903               	btfsc	3,2
  2944     03E2  2BEC               	goto	l2604
  2945                           
  2946                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2947     03E3  0832               	movf	sprintf@sp^(0+128),w
  2948     03E4  0084               	movwf	4
  2949     03E5  302E               	movlw	46
  2950     03E6  1383               	bcf	3,7	;select IRP bank0
  2951     03E7  0080               	movwf	0
  2952     03E8  3001               	movlw	1
  2953     03E9  00FF               	movwf	127
  2954     03EA  087F               	movf	127,w
  2955     03EB  07B2               	addwf	sprintf@sp^(0+128),f
  2956     03EC                     l2604:
  2957                           
  2958                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2959     03EC  0836               	movf	sprintf@c^(0+128),w
  2960     03ED  120A  118A  2528  120A  118A  	fcall	_scale
  2961     03F2  0840               	movf	?_scale,w
  2962     03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2963     03F4  00A0               	movwf	_sprintf$1261^(0+128)
  2964     03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2965     03F6  0841               	movf	?_scale+1,w
  2966     03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2967     03F8  00A1               	movwf	(_sprintf$1261+1)^(0+128)
  2968     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2969     03FA  0842               	movf	?_scale+2,w
  2970     03FB  1683               	bsf	3,5	;RP0=1, select bank1
  2971     03FC  00A2               	movwf	(_sprintf$1261+2)^(0+128)
  2972                           
  2973                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2974     03FD  0820               	movf	_sprintf$1261^(0+128),w
  2975     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2976     03FF  00B4               	movwf	___ftmul@f2
  2977     0400  1683               	bsf	3,5	;RP0=1, select bank1
  2978     0401  0821               	movf	(_sprintf$1261+1)^(0+128),w
  2979     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2980     0403  00B5               	movwf	___ftmul@f2+1
  2981     0404  1683               	bsf	3,5	;RP0=1, select bank1
  2982     0405  0822               	movf	(_sprintf$1261+2)^(0+128),w
  2983     0406  1283               	bcf	3,5	;RP0=0, select bank0
  2984     0407  00B6               	movwf	___ftmul@f2+2
  2985     0408  1683               	bsf	3,5	;RP0=1, select bank1
  2986     0409  0833               	movf	sprintf@fval^(0+128),w
  2987     040A  1283               	bcf	3,5	;RP0=0, select bank0
  2988     040B  00B1               	movwf	___ftmul@f1
  2989     040C  1683               	bsf	3,5	;RP0=1, select bank1
  2990     040D  0834               	movf	(sprintf@fval+1)^(0+128),w
  2991     040E  1283               	bcf	3,5	;RP0=0, select bank0
  2992     040F  00B2               	movwf	___ftmul@f1+1
  2993     0410  1683               	bsf	3,5	;RP0=1, select bank1
  2994     0411  0835               	movf	(sprintf@fval+2)^(0+128),w
  2995     0412  1283               	bcf	3,5	;RP0=0, select bank0
  2996     0413  00B3               	movwf	___ftmul@f1+2
  2997     0414  120A  158A  240E  120A  118A  	fcall	___ftmul
  2998     0419  0831               	movf	?___ftmul,w
  2999     041A  00C7               	movwf	___fttol@f1
  3000     041B  0832               	movf	?___ftmul+1,w
  3001     041C  00C8               	movwf	___fttol@f1+1
  3002     041D  0833               	movf	?___ftmul+2,w
  3003     041E  00C9               	movwf	___fttol@f1+2
  3004     041F  120A  118A  2780  120A  118A  	fcall	___fttol
  3005     0424  084A               	movf	?___fttol+3,w
  3006     0425  1683               	bsf	3,5	;RP0=1, select bank1
  3007     0426  00AB               	movwf	(sprintf@val+3)^(0+128)
  3008     0427  1283               	bcf	3,5	;RP0=0, select bank0
  3009     0428  0849               	movf	?___fttol+2,w
  3010     0429  1683               	bsf	3,5	;RP0=1, select bank1
  3011     042A  00AA               	movwf	(sprintf@val+2)^(0+128)
  3012     042B  1283               	bcf	3,5	;RP0=0, select bank0
  3013     042C  0848               	movf	?___fttol+1,w
  3014     042D  1683               	bsf	3,5	;RP0=1, select bank1
  3015     042E  00A9               	movwf	(sprintf@val+1)^(0+128)
  3016     042F  1283               	bcf	3,5	;RP0=0, select bank0
  3017     0430  0847               	movf	?___fttol,w
  3018     0431                     L3:
  3019     0431  1683               	bsf	3,5	;RP0=1, select bank1
  3020     0432  00A8               	movwf	sprintf@val^(0+128)
  3021     0433  3001               	movlw	1
  3022     0434  02B6               	subwf	sprintf@c^(0+128),f
  3023     0435  0A36               	incf	sprintf@c^(0+128),w
  3024     0436  1903               	btfsc	3,2
  3025     0437  2D0F               	goto	l2626
  3026                           
  3027                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3028                           
  3029                           ;doprnt.c: 1254: while(c--) {
  3030     0438  0836               	movf	sprintf@c^(0+128),w
  3031     0439  1283               	bcf	3,5	;RP0=0, select bank0
  3032     043A  00E0               	movwf	??_sprintf
  3033     043B  3001               	movlw	1
  3034     043C                     u3435:
  3035     043C  1003               	clrc
  3036     043D  0DE0               	rlf	??_sprintf,f
  3037     043E  3EFF               	addlw	-1
  3038     043F  1D03               	skipz
  3039     0440  2C3C               	goto	u3435
  3040     0441  1003               	clrc
  3041     0442  0D60               	rlf	??_sprintf,w
  3042     0443  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3043     0444  0084               	movwf	4
  3044     0445  120A  158A  2000  120A  118A  	fcall	stringdir
  3045     044A  00A0               	movwf	___lldiv@divisor
  3046     044B  120A  158A  2000  120A  118A  	fcall	stringdir
  3047     0450  00A1               	movwf	___lldiv@divisor+1
  3048     0451  120A  158A  2000  120A  118A  	fcall	stringdir
  3049     0456  00A2               	movwf	___lldiv@divisor+2
  3050     0457  120A  158A  2000  120A  118A  	fcall	stringdir
  3051     045C  00A3               	movwf	___lldiv@divisor+3
  3052     045D  1683               	bsf	3,5	;RP0=1, select bank1
  3053     045E  082B               	movf	(sprintf@val+3)^(0+128),w
  3054     045F  1283               	bcf	3,5	;RP0=0, select bank0
  3055     0460  00A7               	movwf	___lldiv@dividend+3
  3056     0461  1683               	bsf	3,5	;RP0=1, select bank1
  3057     0462  082A               	movf	(sprintf@val+2)^(0+128),w
  3058     0463  1283               	bcf	3,5	;RP0=0, select bank0
  3059     0464  00A6               	movwf	___lldiv@dividend+2
  3060     0465  1683               	bsf	3,5	;RP0=1, select bank1
  3061     0466  0829               	movf	(sprintf@val+1)^(0+128),w
  3062     0467  1283               	bcf	3,5	;RP0=0, select bank0
  3063     0468  00A5               	movwf	___lldiv@dividend+1
  3064     0469  1683               	bsf	3,5	;RP0=1, select bank1
  3065     046A  0828               	movf	sprintf@val^(0+128),w
  3066     046B  1283               	bcf	3,5	;RP0=0, select bank0
  3067     046C  00A4               	movwf	___lldiv@dividend
  3068     046D  120A  158A  2201  120A  118A  	fcall	___lldiv
  3069     0472  0823               	movf	?___lldiv+3,w
  3070     0473  1683               	bsf	3,5	;RP0=1, select bank1
  3071     0474  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3072     0475  1283               	bcf	3,5	;RP0=0, select bank0
  3073     0476  0822               	movf	?___lldiv+2,w
  3074     0477  1683               	bsf	3,5	;RP0=1, select bank1
  3075     0478  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3076     0479  1283               	bcf	3,5	;RP0=0, select bank0
  3077     047A  0821               	movf	?___lldiv+1,w
  3078     047B  1683               	bsf	3,5	;RP0=1, select bank1
  3079     047C  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3080     047D  1283               	bcf	3,5	;RP0=0, select bank0
  3081     047E  0820               	movf	?___lldiv,w
  3082     047F  1683               	bsf	3,5	;RP0=1, select bank1
  3083     0480  00AE               	movwf	sprintf@tmpval^(0+128)
  3084                           
  3085                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3086     0481  3000               	movlw	0
  3087     0482  1283               	bcf	3,5	;RP0=0, select bank0
  3088     0483  00A3               	movwf	___llmod@divisor+3
  3089     0484  3000               	movlw	0
  3090     0485  00A2               	movwf	___llmod@divisor+2
  3091     0486  3000               	movlw	0
  3092     0487  00A1               	movwf	___llmod@divisor+1
  3093     0488  300A               	movlw	10
  3094     0489  00A0               	movwf	___llmod@divisor
  3095     048A  1683               	bsf	3,5	;RP0=1, select bank1
  3096     048B  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  3097     048C  1283               	bcf	3,5	;RP0=0, select bank0
  3098     048D  00A7               	movwf	___llmod@dividend+3
  3099     048E  1683               	bsf	3,5	;RP0=1, select bank1
  3100     048F  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  3101     0490  1283               	bcf	3,5	;RP0=0, select bank0
  3102     0491  00A6               	movwf	___llmod@dividend+2
  3103     0492  1683               	bsf	3,5	;RP0=1, select bank1
  3104     0493  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  3105     0494  1283               	bcf	3,5	;RP0=0, select bank0
  3106     0495  00A5               	movwf	___llmod@dividend+1
  3107     0496  1683               	bsf	3,5	;RP0=1, select bank1
  3108     0497  082E               	movf	sprintf@tmpval^(0+128),w
  3109     0498  1283               	bcf	3,5	;RP0=0, select bank0
  3110     0499  00A4               	movwf	___llmod@dividend
  3111     049A  120A  158A  215C  120A  118A  	fcall	___llmod
  3112     049F  0823               	movf	?___llmod+3,w
  3113     04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3114     04A1  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  3115     04A2  1283               	bcf	3,5	;RP0=0, select bank0
  3116     04A3  0822               	movf	?___llmod+2,w
  3117     04A4  1683               	bsf	3,5	;RP0=1, select bank1
  3118     04A5  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  3119     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  3120     04A7  0821               	movf	?___llmod+1,w
  3121     04A8  1683               	bsf	3,5	;RP0=1, select bank1
  3122     04A9  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  3123     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3124     04AB  0820               	movf	?___llmod,w
  3125     04AC  1683               	bsf	3,5	;RP0=1, select bank1
  3126     04AD  00AE               	movwf	sprintf@tmpval^(0+128)
  3127                           
  3128                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  3129     04AE  0832               	movf	sprintf@sp^(0+128),w
  3130     04AF  0084               	movwf	4
  3131     04B0  082E               	movf	sprintf@tmpval^(0+128),w
  3132     04B1  3E30               	addlw	48
  3133     04B2  1383               	bcf	3,7	;select IRP bank0
  3134     04B3  0080               	movwf	0
  3135     04B4  3001               	movlw	1
  3136     04B5  00FF               	movwf	127
  3137     04B6  087F               	movf	127,w
  3138     04B7  07B2               	addwf	sprintf@sp^(0+128),f
  3139                           
  3140                           ;doprnt.c: 1258: val %= dpowers[c];
  3141     04B8  0836               	movf	sprintf@c^(0+128),w
  3142     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3143     04BA  00E0               	movwf	??_sprintf
  3144     04BB  3001               	movlw	1
  3145     04BC                     u3445:
  3146     04BC  1003               	clrc
  3147     04BD  0DE0               	rlf	??_sprintf,f
  3148     04BE  3EFF               	addlw	-1
  3149     04BF  1D03               	skipz
  3150     04C0  2CBC               	goto	u3445
  3151     04C1  1003               	clrc
  3152     04C2  0D60               	rlf	??_sprintf,w
  3153     04C3  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3154     04C4  0084               	movwf	4
  3155     04C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3156     04CA  00A0               	movwf	___llmod@divisor
  3157     04CB  120A  158A  2000  120A  118A  	fcall	stringdir
  3158     04D0  00A1               	movwf	___llmod@divisor+1
  3159     04D1  120A  158A  2000  120A  118A  	fcall	stringdir
  3160     04D6  00A2               	movwf	___llmod@divisor+2
  3161     04D7  120A  158A  2000  120A  118A  	fcall	stringdir
  3162     04DC  00A3               	movwf	___llmod@divisor+3
  3163     04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3164     04DE  082B               	movf	(sprintf@val+3)^(0+128),w
  3165     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3166     04E0  00A7               	movwf	___llmod@dividend+3
  3167     04E1  1683               	bsf	3,5	;RP0=1, select bank1
  3168     04E2  082A               	movf	(sprintf@val+2)^(0+128),w
  3169     04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3170     04E4  00A6               	movwf	___llmod@dividend+2
  3171     04E5  1683               	bsf	3,5	;RP0=1, select bank1
  3172     04E6  0829               	movf	(sprintf@val+1)^(0+128),w
  3173     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  3174     04E8  00A5               	movwf	___llmod@dividend+1
  3175     04E9  1683               	bsf	3,5	;RP0=1, select bank1
  3176     04EA  0828               	movf	sprintf@val^(0+128),w
  3177     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3178     04EC  00A4               	movwf	___llmod@dividend
  3179     04ED  120A  158A  215C  120A  118A  	fcall	___llmod
  3180     04F2  0823               	movf	?___llmod+3,w
  3181     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3182     04F4  00AB               	movwf	(sprintf@val+3)^(0+128)
  3183     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  3184     04F6  0822               	movf	?___llmod+2,w
  3185     04F7  1683               	bsf	3,5	;RP0=1, select bank1
  3186     04F8  00AA               	movwf	(sprintf@val+2)^(0+128)
  3187     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3188     04FA  0821               	movf	?___llmod+1,w
  3189     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3190     04FC  00A9               	movwf	(sprintf@val+1)^(0+128)
  3191     04FD  1283               	bcf	3,5	;RP0=0, select bank0
  3192     04FE  0820               	movf	?___llmod,w
  3193     04FF  2C31               	goto	L3
  3194     0500                     l2620:
  3195                           
  3196                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  3197     0500  0832               	movf	sprintf@sp^(0+128),w
  3198     0501  0084               	movwf	4
  3199     0502  3030               	movlw	48
  3200     0503  1383               	bcf	3,7	;select IRP bank0
  3201     0504  0080               	movwf	0
  3202     0505  3001               	movlw	1
  3203     0506  00FF               	movwf	127
  3204     0507  087F               	movf	127,w
  3205     0508  07B2               	addwf	sprintf@sp^(0+128),f
  3206                           
  3207                           ;doprnt.c: 1263: prec--;
  3208     0509  30FF               	movlw	255
  3209     050A  07A6               	addwf	sprintf@prec^(0+128),f
  3210     050B  1803               	skipnc
  3211     050C  0AA7               	incf	(sprintf@prec+1)^(0+128),f
  3212     050D  30FF               	movlw	255
  3213     050E  07A7               	addwf	(sprintf@prec+1)^(0+128),f
  3214     050F                     l2626:
  3215     050F  0826               	movf	sprintf@prec^(0+128),w
  3216     0510  0427               	iorwf	(sprintf@prec+1)^(0+128),w
  3217     0511  1903               	btfsc	3,2
  3218     0512  2841               	goto	l2634
  3219     0513  2D00               	goto	l2620
  3220     0514                     l2628:
  3221                           
  3222                           ;doprnt.c: 1272: };doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3223     0514  1683               	bsf	3,5	;RP0=1, select bank1
  3224     0515  0824               	movf	sprintf@flag^(0+128),w
  3225     0516  3903               	andlw	3
  3226     0517  1903               	btfsc	3,2
  3227     0518  2841               	goto	l2634
  3228                           
  3229                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3230     0519  0832               	movf	sprintf@sp^(0+128),w
  3231     051A  0084               	movwf	4
  3232     051B  302D               	movlw	45
  3233     051C                     L4:
  3234     051C  1383               	bcf	3,7	;select IRP bank0
  3235     051D  0080               	movwf	0
  3236     051E  3001               	movlw	1
  3237     051F  00FF               	movwf	127
  3238     0520  087F               	movf	127,w
  3239     0521  07B2               	addwf	sprintf@sp^(0+128),f
  3240     0522  2841               	goto	l2634
  3241     0523                     l2636:
  3242                           
  3243                           ;doprnt.c: 1564: *sp = 0;
  3244     0523  0832               	movf	sprintf@sp^(0+128),w
  3245     0524  0084               	movwf	4
  3246     0525  1383               	bcf	3,7	;select IRP bank0
  3247     0526  0180               	clrf	0
  3248     0527  0008               	return
  3249     0528                     __end_of_sprintf:
  3250                           
  3251                           	psect	text6
  3252     0528                     __ptext6:	
  3253 ;; *************** function _scale *****************
  3254 ;; Defined at:
  3255 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  scl             1    wreg     char 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  scl             1   38[BANK0 ] char 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  3   32[BANK0 ] char 
  3262 ;; Registers used:
  3263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 300/100
  3266 ;;		On exit  : 300/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3269 ;;      Params:         0       3       0       0       0
  3270 ;;      Locals:         0       4       0       0       0
  3271 ;;      Temps:          0       0       0       0       0
  3272 ;;      Totals:         0       7       0       0       0
  3273 ;;Total ram usage:        7 bytes
  3274 ;; Hardware stack levels used: 1
  3275 ;; Hardware stack levels required when called: 3
  3276 ;; This function calls:
  3277 ;;		___awdiv
  3278 ;;		___awmod
  3279 ;;		___bmul
  3280 ;;		___ftmul
  3281 ;; This function is called by:
  3282 ;;		_sprintf
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286     0528                     _scale:	
  3287                           ;psect for function _scale
  3288                           
  3289                           
  3290                           ;incstack = 0
  3291                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3292                           ;scale@scl stored from wreg
  3293     0528  1283               	bcf	3,5	;RP0=0, select bank0
  3294     0529  00C6               	movwf	scale@scl
  3295                           
  3296                           ;doprnt.c: 436: if(scl < 0) {
  3297     052A  1FC6               	btfss	scale@scl,7
  3298     052B  2E57               	goto	l2138
  3299                           
  3300                           ;doprnt.c: 437: scl = -scl;
  3301     052C  09C6               	comf	scale@scl,f
  3302     052D  0AC6               	incf	scale@scl,f
  3303                           
  3304                           ;doprnt.c: 438: if(scl>=110)
  3305     052E  0846               	movf	scale@scl,w
  3306     052F  3A80               	xorlw	128
  3307     0530  3E12               	addlw	-238
  3308     0531  1C03               	skipc
  3309     0532  2DD9               	goto	l2128
  3310                           
  3311                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3312     0533  3003               	movlw	3
  3313     0534  00AE               	movwf	___bmul@multiplicand
  3314     0535  0846               	movf	scale@scl,w
  3315     0536  00A2               	movwf	___awmod@dividend
  3316     0537  01A3               	clrf	___awmod@dividend+1
  3317     0538  1BA2               	btfsc	___awmod@dividend,7
  3318     0539  03A3               	decf	___awmod@dividend+1,f
  3319     053A  3064               	movlw	100
  3320     053B  00A0               	movwf	___awmod@divisor
  3321     053C  3000               	movlw	0
  3322     053D  00A1               	movwf	___awmod@divisor+1
  3323     053E  120A  158A  2111  120A  118A  	fcall	___awmod
  3324     0543  0821               	movf	?___awmod+1,w
  3325     0544  00A9               	movwf	___awdiv@dividend+1
  3326     0545  0820               	movf	?___awmod,w
  3327     0546  00A8               	movwf	___awdiv@dividend
  3328     0547  300A               	movlw	10
  3329     0548  00A6               	movwf	___awdiv@divisor
  3330     0549  3000               	movlw	0
  3331     054A  00A7               	movwf	___awdiv@divisor+1
  3332     054B  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3333     0550  0826               	movf	?___awdiv,w
  3334     0551  160A  118A  26D8  120A  118A  	fcall	___bmul
  3335     0556  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3336     0557  0084               	movwf	4
  3337     0558  120A  158A  2000  120A  118A  	fcall	stringdir
  3338     055D  00B1               	movwf	___ftmul@f1
  3339     055E  120A  158A  2000  120A  118A  	fcall	stringdir
  3340     0563  00B2               	movwf	___ftmul@f1+1
  3341     0564  120A  158A  2000  120A  118A  	fcall	stringdir
  3342     0569  00B3               	movwf	___ftmul@f1+2
  3343     056A  3003               	movlw	3
  3344     056B  00AE               	movwf	___bmul@multiplicand
  3345     056C  0846               	movf	scale@scl,w
  3346     056D  00A8               	movwf	___awdiv@dividend
  3347     056E  01A9               	clrf	___awdiv@dividend+1
  3348     056F  1BA8               	btfsc	___awdiv@dividend,7
  3349     0570  03A9               	decf	___awdiv@dividend+1,f
  3350     0571  3064               	movlw	100
  3351     0572  00A6               	movwf	___awdiv@divisor
  3352     0573  3000               	movlw	0
  3353     0574  00A7               	movwf	___awdiv@divisor+1
  3354     0575  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3355     057A  0826               	movf	?___awdiv,w
  3356     057B  160A  118A  26D8  120A  118A  	fcall	___bmul
  3357     0580  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3358     0581  0084               	movwf	4
  3359     0582  120A  158A  2000  120A  118A  	fcall	stringdir
  3360     0587  00B4               	movwf	___ftmul@f2
  3361     0588  120A  158A  2000  120A  118A  	fcall	stringdir
  3362     058D  00B5               	movwf	___ftmul@f2+1
  3363     058E  120A  158A  2000  120A  118A  	fcall	stringdir
  3364     0593  00B6               	movwf	___ftmul@f2+2
  3365     0594  120A  158A  240E  120A  118A  	fcall	___ftmul
  3366     0599  0831               	movf	?___ftmul,w
  3367     059A  00C3               	movwf	_scale$1260
  3368     059B  0832               	movf	?___ftmul+1,w
  3369     059C  00C4               	movwf	_scale$1260+1
  3370     059D  0833               	movf	?___ftmul+2,w
  3371     059E  00C5               	movwf	_scale$1260+2
  3372                           
  3373                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3374     059F  3003               	movlw	3
  3375     05A0  00AE               	movwf	___bmul@multiplicand
  3376     05A1  0846               	movf	scale@scl,w
  3377     05A2  00A2               	movwf	___awmod@dividend
  3378     05A3  01A3               	clrf	___awmod@dividend+1
  3379     05A4  1BA2               	btfsc	___awmod@dividend,7
  3380     05A5  03A3               	decf	___awmod@dividend+1,f
  3381     05A6  300A               	movlw	10
  3382     05A7  00A0               	movwf	___awmod@divisor
  3383     05A8  3000               	movlw	0
  3384     05A9  00A1               	movwf	___awmod@divisor+1
  3385     05AA  120A  158A  2111  120A  118A  	fcall	___awmod
  3386     05AF  0820               	movf	?___awmod,w
  3387     05B0  160A  118A  26D8  120A  118A  	fcall	___bmul
  3388     05B5  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3389     05B6  0084               	movwf	4
  3390     05B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3391     05BC  00B1               	movwf	___ftmul@f1
  3392     05BD  120A  158A  2000  120A  118A  	fcall	stringdir
  3393     05C2  00B2               	movwf	___ftmul@f1+1
  3394     05C3  120A  158A  2000  120A  118A  	fcall	stringdir
  3395     05C8  00B3               	movwf	___ftmul@f1+2
  3396     05C9  0843               	movf	_scale$1260,w
  3397     05CA  00B4               	movwf	___ftmul@f2
  3398     05CB  0844               	movf	_scale$1260+1,w
  3399     05CC  00B5               	movwf	___ftmul@f2+1
  3400     05CD  0845               	movf	_scale$1260+2,w
  3401     05CE  00B6               	movwf	___ftmul@f2+2
  3402     05CF  120A  158A  240E   	fcall	___ftmul
  3403     05D2  0831               	movf	?___ftmul,w
  3404     05D3  00C0               	movwf	?_scale
  3405     05D4  0832               	movf	?___ftmul+1,w
  3406     05D5  00C1               	movwf	?_scale+1
  3407     05D6  0833               	movf	?___ftmul+2,w
  3408     05D7  00C2               	movwf	?_scale+2
  3409     05D8  0008               	return
  3410     05D9                     l2128:
  3411                           
  3412                           ;doprnt.c: 440: else if(scl > 10)
  3413     05D9  0846               	movf	scale@scl,w
  3414     05DA  3A80               	xorlw	128
  3415     05DB  3E75               	addlw	-139
  3416     05DC  1C03               	skipc
  3417     05DD  2E3C               	goto	l2134
  3418                           
  3419                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3420     05DE  3003               	movlw	3
  3421     05DF  00AE               	movwf	___bmul@multiplicand
  3422     05E0  0846               	movf	scale@scl,w
  3423     05E1  00A2               	movwf	___awmod@dividend
  3424     05E2  01A3               	clrf	___awmod@dividend+1
  3425     05E3  1BA2               	btfsc	___awmod@dividend,7
  3426     05E4  03A3               	decf	___awmod@dividend+1,f
  3427     05E5  300A               	movlw	10
  3428     05E6  00A0               	movwf	___awmod@divisor
  3429     05E7  3000               	movlw	0
  3430     05E8  00A1               	movwf	___awmod@divisor+1
  3431     05E9  120A  158A  2111  120A  118A  	fcall	___awmod
  3432     05EE  0820               	movf	?___awmod,w
  3433     05EF  160A  118A  26D8  120A  118A  	fcall	___bmul
  3434     05F4  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3435     05F5  0084               	movwf	4
  3436     05F6  120A  158A  2000  120A  118A  	fcall	stringdir
  3437     05FB  00B1               	movwf	___ftmul@f1
  3438     05FC  120A  158A  2000  120A  118A  	fcall	stringdir
  3439     0601  00B2               	movwf	___ftmul@f1+1
  3440     0602  120A  158A  2000  120A  118A  	fcall	stringdir
  3441     0607  00B3               	movwf	___ftmul@f1+2
  3442     0608  3003               	movlw	3
  3443     0609  00AE               	movwf	___bmul@multiplicand
  3444     060A  0846               	movf	scale@scl,w
  3445     060B  00A8               	movwf	___awdiv@dividend
  3446     060C  01A9               	clrf	___awdiv@dividend+1
  3447     060D  1BA8               	btfsc	___awdiv@dividend,7
  3448     060E  03A9               	decf	___awdiv@dividend+1,f
  3449     060F  300A               	movlw	10
  3450     0610  00A6               	movwf	___awdiv@divisor
  3451     0611  3000               	movlw	0
  3452     0612  00A7               	movwf	___awdiv@divisor+1
  3453     0613  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3454     0618  0826               	movf	?___awdiv,w
  3455     0619  160A  118A  26D8  120A  118A  	fcall	___bmul
  3456     061E  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3457     061F  0084               	movwf	4
  3458     0620  120A  158A  2000  120A  118A  	fcall	stringdir
  3459     0625  00B4               	movwf	___ftmul@f2
  3460     0626  120A  158A  2000  120A  118A  	fcall	stringdir
  3461     062B  00B5               	movwf	___ftmul@f2+1
  3462     062C  120A  158A  2000  120A  118A  	fcall	stringdir
  3463     0631  00B6               	movwf	___ftmul@f2+2
  3464     0632  120A  158A  240E   	fcall	___ftmul
  3465     0635  0831               	movf	?___ftmul,w
  3466     0636  00C0               	movwf	?_scale
  3467     0637  0832               	movf	?___ftmul+1,w
  3468     0638  00C1               	movwf	?_scale+1
  3469     0639  0833               	movf	?___ftmul+2,w
  3470     063A  00C2               	movwf	?_scale+2
  3471     063B  0008               	return
  3472     063C                     l2134:
  3473                           
  3474                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3475     063C  3003               	movlw	3
  3476     063D  00AE               	movwf	___bmul@multiplicand
  3477     063E  0846               	movf	scale@scl,w
  3478     063F  160A  118A  26D8  120A  118A  	fcall	___bmul
  3479     0644  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3480     0645  0084               	movwf	4
  3481     0646  120A  158A  2000  120A  118A  	fcall	stringdir
  3482     064B  00C0               	movwf	?_scale
  3483     064C  120A  158A  2000  120A  118A  	fcall	stringdir
  3484     0651  00C1               	movwf	?_scale+1
  3485     0652  120A  158A  2000   	fcall	stringdir
  3486     0655  00C2               	movwf	?_scale+2
  3487     0656  0008               	return
  3488     0657                     l2138:
  3489                           
  3490                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3491     0657  0846               	movf	scale@scl,w
  3492     0658  3A80               	xorlw	128
  3493     0659  3E12               	addlw	-238
  3494     065A  1C03               	skipc
  3495     065B  2F02               	goto	l2146
  3496                           
  3497                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3498     065C  3003               	movlw	3
  3499     065D  00AE               	movwf	___bmul@multiplicand
  3500     065E  0846               	movf	scale@scl,w
  3501     065F  00A2               	movwf	___awmod@dividend
  3502     0660  01A3               	clrf	___awmod@dividend+1
  3503     0661  1BA2               	btfsc	___awmod@dividend,7
  3504     0662  03A3               	decf	___awmod@dividend+1,f
  3505     0663  3064               	movlw	100
  3506     0664  00A0               	movwf	___awmod@divisor
  3507     0665  3000               	movlw	0
  3508     0666  00A1               	movwf	___awmod@divisor+1
  3509     0667  120A  158A  2111  120A  118A  	fcall	___awmod
  3510     066C  0821               	movf	?___awmod+1,w
  3511     066D  00A9               	movwf	___awdiv@dividend+1
  3512     066E  0820               	movf	?___awmod,w
  3513     066F  00A8               	movwf	___awdiv@dividend
  3514     0670  300A               	movlw	10
  3515     0671  00A6               	movwf	___awdiv@divisor
  3516     0672  3000               	movlw	0
  3517     0673  00A7               	movwf	___awdiv@divisor+1
  3518     0674  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3519     0679  0826               	movf	?___awdiv,w
  3520     067A  160A  118A  26D8  120A  118A  	fcall	___bmul
  3521     067F  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3522     0680  0084               	movwf	4
  3523     0681  120A  158A  2000  120A  118A  	fcall	stringdir
  3524     0686  00B1               	movwf	___ftmul@f1
  3525     0687  120A  158A  2000  120A  118A  	fcall	stringdir
  3526     068C  00B2               	movwf	___ftmul@f1+1
  3527     068D  120A  158A  2000  120A  118A  	fcall	stringdir
  3528     0692  00B3               	movwf	___ftmul@f1+2
  3529     0693  3003               	movlw	3
  3530     0694  00AE               	movwf	___bmul@multiplicand
  3531     0695  0846               	movf	scale@scl,w
  3532     0696  00A8               	movwf	___awdiv@dividend
  3533     0697  01A9               	clrf	___awdiv@dividend+1
  3534     0698  1BA8               	btfsc	___awdiv@dividend,7
  3535     0699  03A9               	decf	___awdiv@dividend+1,f
  3536     069A  3064               	movlw	100
  3537     069B  00A6               	movwf	___awdiv@divisor
  3538     069C  3000               	movlw	0
  3539     069D  00A7               	movwf	___awdiv@divisor+1
  3540     069E  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3541     06A3  0826               	movf	?___awdiv,w
  3542     06A4  160A  118A  26D8  120A  118A  	fcall	___bmul
  3543     06A9  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  3544     06AA  0084               	movwf	4
  3545     06AB  120A  158A  2000  120A  118A  	fcall	stringdir
  3546     06B0  00B4               	movwf	___ftmul@f2
  3547     06B1  120A  158A  2000  120A  118A  	fcall	stringdir
  3548     06B6  00B5               	movwf	___ftmul@f2+1
  3549     06B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3550     06BC  00B6               	movwf	___ftmul@f2+2
  3551     06BD  120A  158A  240E  120A  118A  	fcall	___ftmul
  3552     06C2  0831               	movf	?___ftmul,w
  3553     06C3  00C3               	movwf	_scale$1260
  3554     06C4  0832               	movf	?___ftmul+1,w
  3555     06C5  00C4               	movwf	_scale$1260+1
  3556     06C6  0833               	movf	?___ftmul+2,w
  3557     06C7  00C5               	movwf	_scale$1260+2
  3558                           
  3559                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3560     06C8  3003               	movlw	3
  3561     06C9  00AE               	movwf	___bmul@multiplicand
  3562     06CA  0846               	movf	scale@scl,w
  3563     06CB  00A2               	movwf	___awmod@dividend
  3564     06CC  01A3               	clrf	___awmod@dividend+1
  3565     06CD  1BA2               	btfsc	___awmod@dividend,7
  3566     06CE  03A3               	decf	___awmod@dividend+1,f
  3567     06CF  300A               	movlw	10
  3568     06D0  00A0               	movwf	___awmod@divisor
  3569     06D1  3000               	movlw	0
  3570     06D2  00A1               	movwf	___awmod@divisor+1
  3571     06D3  120A  158A  2111  120A  118A  	fcall	___awmod
  3572     06D8  0820               	movf	?___awmod,w
  3573     06D9  160A  118A  26D8  120A  118A  	fcall	___bmul
  3574     06DE  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3575     06DF  0084               	movwf	4
  3576     06E0  120A  158A  2000  120A  118A  	fcall	stringdir
  3577     06E5  00B1               	movwf	___ftmul@f1
  3578     06E6  120A  158A  2000  120A  118A  	fcall	stringdir
  3579     06EB  00B2               	movwf	___ftmul@f1+1
  3580     06EC  120A  158A  2000  120A  118A  	fcall	stringdir
  3581     06F1  00B3               	movwf	___ftmul@f1+2
  3582     06F2  0843               	movf	_scale$1260,w
  3583     06F3  00B4               	movwf	___ftmul@f2
  3584     06F4  0844               	movf	_scale$1260+1,w
  3585     06F5  00B5               	movwf	___ftmul@f2+1
  3586     06F6  0845               	movf	_scale$1260+2,w
  3587     06F7  00B6               	movwf	___ftmul@f2+2
  3588     06F8  120A  158A  240E   	fcall	___ftmul
  3589     06FB  0831               	movf	?___ftmul,w
  3590     06FC  00C0               	movwf	?_scale
  3591     06FD  0832               	movf	?___ftmul+1,w
  3592     06FE  00C1               	movwf	?_scale+1
  3593     06FF  0833               	movf	?___ftmul+2,w
  3594     0700  00C2               	movwf	?_scale+2
  3595     0701  0008               	return
  3596     0702                     l2146:
  3597                           
  3598                           ;doprnt.c: 446: else if(scl > 10)
  3599     0702  0846               	movf	scale@scl,w
  3600     0703  3A80               	xorlw	128
  3601     0704  3E75               	addlw	-139
  3602     0705  1C03               	skipc
  3603     0706  2F65               	goto	l2152
  3604                           
  3605                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3606     0707  3003               	movlw	3
  3607     0708  00AE               	movwf	___bmul@multiplicand
  3608     0709  0846               	movf	scale@scl,w
  3609     070A  00A2               	movwf	___awmod@dividend
  3610     070B  01A3               	clrf	___awmod@dividend+1
  3611     070C  1BA2               	btfsc	___awmod@dividend,7
  3612     070D  03A3               	decf	___awmod@dividend+1,f
  3613     070E  300A               	movlw	10
  3614     070F  00A0               	movwf	___awmod@divisor
  3615     0710  3000               	movlw	0
  3616     0711  00A1               	movwf	___awmod@divisor+1
  3617     0712  120A  158A  2111  120A  118A  	fcall	___awmod
  3618     0717  0820               	movf	?___awmod,w
  3619     0718  160A  118A  26D8  120A  118A  	fcall	___bmul
  3620     071D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3621     071E  0084               	movwf	4
  3622     071F  120A  158A  2000  120A  118A  	fcall	stringdir
  3623     0724  00B1               	movwf	___ftmul@f1
  3624     0725  120A  158A  2000  120A  118A  	fcall	stringdir
  3625     072A  00B2               	movwf	___ftmul@f1+1
  3626     072B  120A  158A  2000  120A  118A  	fcall	stringdir
  3627     0730  00B3               	movwf	___ftmul@f1+2
  3628     0731  3003               	movlw	3
  3629     0732  00AE               	movwf	___bmul@multiplicand
  3630     0733  0846               	movf	scale@scl,w
  3631     0734  00A8               	movwf	___awdiv@dividend
  3632     0735  01A9               	clrf	___awdiv@dividend+1
  3633     0736  1BA8               	btfsc	___awdiv@dividend,7
  3634     0737  03A9               	decf	___awdiv@dividend+1,f
  3635     0738  300A               	movlw	10
  3636     0739  00A6               	movwf	___awdiv@divisor
  3637     073A  3000               	movlw	0
  3638     073B  00A7               	movwf	___awdiv@divisor+1
  3639     073C  120A  158A  21A8  120A  118A  	fcall	___awdiv
  3640     0741  0826               	movf	?___awdiv,w
  3641     0742  160A  118A  26D8  120A  118A  	fcall	___bmul
  3642     0747  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3643     0748  0084               	movwf	4
  3644     0749  120A  158A  2000  120A  118A  	fcall	stringdir
  3645     074E  00B4               	movwf	___ftmul@f2
  3646     074F  120A  158A  2000  120A  118A  	fcall	stringdir
  3647     0754  00B5               	movwf	___ftmul@f2+1
  3648     0755  120A  158A  2000  120A  118A  	fcall	stringdir
  3649     075A  00B6               	movwf	___ftmul@f2+2
  3650     075B  120A  158A  240E   	fcall	___ftmul
  3651     075E  0831               	movf	?___ftmul,w
  3652     075F  00C0               	movwf	?_scale
  3653     0760  0832               	movf	?___ftmul+1,w
  3654     0761  00C1               	movwf	?_scale+1
  3655     0762  0833               	movf	?___ftmul+2,w
  3656     0763  00C2               	movwf	?_scale+2
  3657     0764  0008               	return
  3658     0765                     l2152:
  3659                           
  3660                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3661     0765  3003               	movlw	3
  3662     0766  00AE               	movwf	___bmul@multiplicand
  3663     0767  0846               	movf	scale@scl,w
  3664     0768  160A  118A  26D8  120A  118A  	fcall	___bmul
  3665     076D  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3666     076E  0084               	movwf	4
  3667     076F  120A  158A  2000  120A  118A  	fcall	stringdir
  3668     0774  00C0               	movwf	?_scale
  3669     0775  120A  158A  2000  120A  118A  	fcall	stringdir
  3670     077A  00C1               	movwf	?_scale+1
  3671     077B  120A  158A  2000   	fcall	stringdir
  3672     077E  00C2               	movwf	?_scale+2
  3673     077F  0008               	return
  3674     0780                     __end_of_scale:
  3675                           
  3676                           	psect	text7
  3677     0911                     __ptext7:	
  3678 ;; *************** function ___awmod *****************
  3679 ;; Defined at:
  3680 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  divisor         2    0[BANK0 ] int 
  3683 ;;  dividend        2    2[BANK0 ] int 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  sign            1    5[BANK0 ] unsigned char 
  3686 ;;  counter         1    4[BANK0 ] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  2    0[BANK0 ] int 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, btemp+1
  3691 ;; Tracked objects:
  3692 ;;		On entry : 300/0
  3693 ;;		On exit  : 300/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       4       0       0       0
  3697 ;;      Locals:         0       2       0       0       0
  3698 ;;      Temps:          0       0       0       0       0
  3699 ;;      Totals:         0       6       0       0       0
  3700 ;;Total ram usage:        6 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 1
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_scale
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710     0911                     ___awmod:	
  3711                           ;psect for function ___awmod
  3712                           
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  3716     0911  01A5               	clrf	___awmod@sign
  3717     0912  1FA3               	btfss	___awmod@dividend+1,7
  3718     0913  291B               	goto	l1884
  3719     0914  09A2               	comf	___awmod@dividend,f
  3720     0915  09A3               	comf	___awmod@dividend+1,f
  3721     0916  0AA2               	incf	___awmod@dividend,f
  3722     0917  1903               	skipnz
  3723     0918  0AA3               	incf	___awmod@dividend+1,f
  3724     0919  01A5               	clrf	___awmod@sign
  3725     091A  0AA5               	incf	___awmod@sign,f
  3726     091B                     l1884:
  3727     091B  1FA1               	btfss	___awmod@divisor+1,7
  3728     091C  2922               	goto	l1888
  3729     091D  09A0               	comf	___awmod@divisor,f
  3730     091E  09A1               	comf	___awmod@divisor+1,f
  3731     091F  0AA0               	incf	___awmod@divisor,f
  3732     0920  1903               	skipnz
  3733     0921  0AA1               	incf	___awmod@divisor+1,f
  3734     0922                     l1888:
  3735     0922  0820               	movf	___awmod@divisor,w
  3736     0923  0421               	iorwf	___awmod@divisor+1,w
  3737     0924  1903               	btfsc	3,2
  3738     0925  294F               	goto	l1906
  3739     0926  01A4               	clrf	___awmod@counter
  3740     0927  0AA4               	incf	___awmod@counter,f
  3741     0928                     l1896:
  3742     0928  1BA1               	btfsc	___awmod@divisor+1,7
  3743     0929  2936               	goto	l1898
  3744     092A  3001               	movlw	1
  3745     092B                     u2045:
  3746     092B  1003               	clrc
  3747     092C  0DA0               	rlf	___awmod@divisor,f
  3748     092D  0DA1               	rlf	___awmod@divisor+1,f
  3749     092E  3EFF               	addlw	-1
  3750     092F  1D03               	skipz
  3751     0930  292B               	goto	u2045
  3752     0931  3001               	movlw	1
  3753     0932  00FF               	movwf	127
  3754     0933  087F               	movf	127,w
  3755     0934  07A4               	addwf	___awmod@counter,f
  3756     0935  2928               	goto	l1896
  3757     0936                     l1898:
  3758     0936  0821               	movf	___awmod@divisor+1,w
  3759     0937  0223               	subwf	___awmod@dividend+1,w
  3760     0938  1D03               	skipz
  3761     0939  293C               	goto	u2065
  3762     093A  0820               	movf	___awmod@divisor,w
  3763     093B  0222               	subwf	___awmod@dividend,w
  3764     093C                     u2065:
  3765     093C  1C03               	skipc
  3766     093D  2944               	goto	l1902
  3767     093E  0820               	movf	___awmod@divisor,w
  3768     093F  02A2               	subwf	___awmod@dividend,f
  3769     0940  0821               	movf	___awmod@divisor+1,w
  3770     0941  1C03               	skipc
  3771     0942  03A3               	decf	___awmod@dividend+1,f
  3772     0943  02A3               	subwf	___awmod@dividend+1,f
  3773     0944                     l1902:
  3774     0944  3001               	movlw	1
  3775     0945                     u2075:
  3776     0945  1003               	clrc
  3777     0946  0CA1               	rrf	___awmod@divisor+1,f
  3778     0947  0CA0               	rrf	___awmod@divisor,f
  3779     0948  3EFF               	addlw	-1
  3780     0949  1D03               	skipz
  3781     094A  2945               	goto	u2075
  3782     094B  3001               	movlw	1
  3783     094C  02A4               	subwf	___awmod@counter,f
  3784     094D  1D03               	btfss	3,2
  3785     094E  2936               	goto	l1898
  3786     094F                     l1906:
  3787     094F  0825               	movf	___awmod@sign,w
  3788     0950  1903               	btfsc	3,2
  3789     0951  2957               	goto	l1910
  3790     0952  09A2               	comf	___awmod@dividend,f
  3791     0953  09A3               	comf	___awmod@dividend+1,f
  3792     0954  0AA2               	incf	___awmod@dividend,f
  3793     0955  1903               	skipnz
  3794     0956  0AA3               	incf	___awmod@dividend+1,f
  3795     0957                     l1910:
  3796     0957  0823               	movf	___awmod@dividend+1,w
  3797     0958  00A1               	movwf	?___awmod+1
  3798     0959  0822               	movf	___awmod@dividend,w
  3799     095A  00A0               	movwf	?___awmod
  3800     095B  0008               	return
  3801     095C                     __end_of___awmod:
  3802                           
  3803                           	psect	text8
  3804     09A8                     __ptext8:	
  3805 ;; *************** function ___awdiv *****************
  3806 ;; Defined at:
  3807 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  divisor         2    6[BANK0 ] int 
  3810 ;;  dividend        2    8[BANK0 ] int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  quotient        2   12[BANK0 ] int 
  3813 ;;  sign            1   11[BANK0 ] unsigned char 
  3814 ;;  counter         1   10[BANK0 ] unsigned char 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  2    6[BANK0 ] int 
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, btemp+1
  3819 ;; Tracked objects:
  3820 ;;		On entry : 300/0
  3821 ;;		On exit  : 300/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       4       0       0       0
  3825 ;;      Locals:         0       4       0       0       0
  3826 ;;      Temps:          0       0       0       0       0
  3827 ;;      Totals:         0       8       0       0       0
  3828 ;;Total ram usage:        8 bytes
  3829 ;; Hardware stack levels used: 1
  3830 ;; Hardware stack levels required when called: 1
  3831 ;; This function calls:
  3832 ;;		Nothing
  3833 ;; This function is called by:
  3834 ;;		_scale
  3835 ;;		_sprintf
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839     09A8                     ___awdiv:	
  3840                           ;psect for function ___awdiv
  3841                           
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3845     09A8  01AB               	clrf	___awdiv@sign
  3846     09A9  1FA7               	btfss	___awdiv@divisor+1,7
  3847     09AA  29B2               	goto	l1840
  3848     09AB  09A6               	comf	___awdiv@divisor,f
  3849     09AC  09A7               	comf	___awdiv@divisor+1,f
  3850     09AD  0AA6               	incf	___awdiv@divisor,f
  3851     09AE  1903               	skipnz
  3852     09AF  0AA7               	incf	___awdiv@divisor+1,f
  3853     09B0  01AB               	clrf	___awdiv@sign
  3854     09B1  0AAB               	incf	___awdiv@sign,f
  3855     09B2                     l1840:
  3856     09B2  1FA9               	btfss	___awdiv@dividend+1,7
  3857     09B3  29BD               	goto	l1846
  3858     09B4  09A8               	comf	___awdiv@dividend,f
  3859     09B5  09A9               	comf	___awdiv@dividend+1,f
  3860     09B6  0AA8               	incf	___awdiv@dividend,f
  3861     09B7  1903               	skipnz
  3862     09B8  0AA9               	incf	___awdiv@dividend+1,f
  3863     09B9  3001               	movlw	1
  3864     09BA  00FF               	movwf	127
  3865     09BB  087F               	movf	127,w
  3866     09BC  06AB               	xorwf	___awdiv@sign,f
  3867     09BD                     l1846:
  3868     09BD  01AC               	clrf	___awdiv@quotient
  3869     09BE  01AD               	clrf	___awdiv@quotient+1
  3870     09BF  0826               	movf	___awdiv@divisor,w
  3871     09C0  0427               	iorwf	___awdiv@divisor+1,w
  3872     09C1  1903               	btfsc	3,2
  3873     09C2  29F4               	goto	l1868
  3874     09C3  01AA               	clrf	___awdiv@counter
  3875     09C4  0AAA               	incf	___awdiv@counter,f
  3876     09C5                     l1856:
  3877     09C5  1BA7               	btfsc	___awdiv@divisor+1,7
  3878     09C6  29D3               	goto	l1858
  3879     09C7  3001               	movlw	1
  3880     09C8                     u1945:
  3881     09C8  1003               	clrc
  3882     09C9  0DA6               	rlf	___awdiv@divisor,f
  3883     09CA  0DA7               	rlf	___awdiv@divisor+1,f
  3884     09CB  3EFF               	addlw	-1
  3885     09CC  1D03               	skipz
  3886     09CD  29C8               	goto	u1945
  3887     09CE  3001               	movlw	1
  3888     09CF  00FF               	movwf	127
  3889     09D0  087F               	movf	127,w
  3890     09D1  07AA               	addwf	___awdiv@counter,f
  3891     09D2  29C5               	goto	l1856
  3892     09D3                     l1858:
  3893     09D3  3001               	movlw	1
  3894     09D4                     u1965:
  3895     09D4  1003               	clrc
  3896     09D5  0DAC               	rlf	___awdiv@quotient,f
  3897     09D6  0DAD               	rlf	___awdiv@quotient+1,f
  3898     09D7  3EFF               	addlw	-1
  3899     09D8  1D03               	skipz
  3900     09D9  29D4               	goto	u1965
  3901     09DA  0827               	movf	___awdiv@divisor+1,w
  3902     09DB  0229               	subwf	___awdiv@dividend+1,w
  3903     09DC  1D03               	skipz
  3904     09DD  29E0               	goto	u1975
  3905     09DE  0826               	movf	___awdiv@divisor,w
  3906     09DF  0228               	subwf	___awdiv@dividend,w
  3907     09E0                     u1975:
  3908     09E0  1C03               	skipc
  3909     09E1  29E9               	goto	l1864
  3910     09E2  0826               	movf	___awdiv@divisor,w
  3911     09E3  02A8               	subwf	___awdiv@dividend,f
  3912     09E4  0827               	movf	___awdiv@divisor+1,w
  3913     09E5  1C03               	skipc
  3914     09E6  03A9               	decf	___awdiv@dividend+1,f
  3915     09E7  02A9               	subwf	___awdiv@dividend+1,f
  3916     09E8  142C               	bsf	___awdiv@quotient,0
  3917     09E9                     l1864:
  3918     09E9  3001               	movlw	1
  3919     09EA                     u1985:
  3920     09EA  1003               	clrc
  3921     09EB  0CA7               	rrf	___awdiv@divisor+1,f
  3922     09EC  0CA6               	rrf	___awdiv@divisor,f
  3923     09ED  3EFF               	addlw	-1
  3924     09EE  1D03               	skipz
  3925     09EF  29EA               	goto	u1985
  3926     09F0  3001               	movlw	1
  3927     09F1  02AA               	subwf	___awdiv@counter,f
  3928     09F2  1D03               	btfss	3,2
  3929     09F3  29D3               	goto	l1858
  3930     09F4                     l1868:
  3931     09F4  082B               	movf	___awdiv@sign,w
  3932     09F5  1903               	btfsc	3,2
  3933     09F6  29FC               	goto	l1872
  3934     09F7  09AC               	comf	___awdiv@quotient,f
  3935     09F8  09AD               	comf	___awdiv@quotient+1,f
  3936     09F9  0AAC               	incf	___awdiv@quotient,f
  3937     09FA  1903               	skipnz
  3938     09FB  0AAD               	incf	___awdiv@quotient+1,f
  3939     09FC                     l1872:
  3940     09FC  082D               	movf	___awdiv@quotient+1,w
  3941     09FD  00A7               	movwf	?___awdiv+1
  3942     09FE  082C               	movf	___awdiv@quotient,w
  3943     09FF  00A6               	movwf	?___awdiv
  3944     0A00  0008               	return
  3945     0A01                     __end_of___awdiv:
  3946                           
  3947                           	psect	text9
  3948     0EC1                     __ptext9:	
  3949 ;; *************** function _fround *****************
  3950 ;; Defined at:
  3951 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  prec            1    wreg     unsigned char 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  prec            1   41[BANK0 ] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  3   32[BANK0 ] unsigned char 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 200/100
  3962 ;;		On exit  : 300/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3965 ;;      Params:         0       3       0       0       0
  3966 ;;      Locals:         0       7       0       0       0
  3967 ;;      Temps:          0       0       0       0       0
  3968 ;;      Totals:         0      10       0       0       0
  3969 ;;Total ram usage:       10 bytes
  3970 ;; Hardware stack levels used: 1
  3971 ;; Hardware stack levels required when called: 3
  3972 ;; This function calls:
  3973 ;;		___bmul
  3974 ;;		___ftmul
  3975 ;;		___lbdiv
  3976 ;;		___lbmod
  3977 ;; This function is called by:
  3978 ;;		_sprintf
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982     0EC1                     _fround:	
  3983                           ;psect for function _fround
  3984                           
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3988                           ;fround@prec stored from wreg
  3989     0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  3990     0EC2  00C9               	movwf	fround@prec
  3991                           
  3992                           ;doprnt.c: 421: if(prec>=110)
  3993     0EC3  306E               	movlw	110
  3994     0EC4  0249               	subwf	fround@prec,w
  3995     0EC5  1C03               	skipc
  3996     0EC6  2F69               	goto	l2104
  3997                           
  3998                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3999     0EC7  3003               	movlw	3
  4000     0EC8  00AE               	movwf	___bmul@multiplicand
  4001     0EC9  300A               	movlw	10
  4002     0ECA  00A6               	movwf	___lbdiv@divisor
  4003     0ECB  3064               	movlw	100
  4004     0ECC  00A0               	movwf	___lbmod@divisor
  4005     0ECD  0849               	movf	fround@prec,w
  4006     0ECE  160A  118A  2759  120A  158A  	fcall	___lbmod
  4007     0ED3  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4008     0ED8  160A  118A  26D8  120A  158A  	fcall	___bmul
  4009     0EDD  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4010     0EDE  0084               	movwf	4
  4011     0EDF  120A  158A  2000  120A  158A  	fcall	stringdir
  4012     0EE4  00B1               	movwf	___ftmul@f1
  4013     0EE5  120A  158A  2000  120A  158A  	fcall	stringdir
  4014     0EEA  00B2               	movwf	___ftmul@f1+1
  4015     0EEB  120A  158A  2000  120A  158A  	fcall	stringdir
  4016     0EF0  00B3               	movwf	___ftmul@f1+2
  4017     0EF1  3003               	movlw	3
  4018     0EF2  00AE               	movwf	___bmul@multiplicand
  4019     0EF3  3064               	movlw	100
  4020     0EF4  00A6               	movwf	___lbdiv@divisor
  4021     0EF5  0849               	movf	fround@prec,w
  4022     0EF6  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4023     0EFB  160A  118A  26D8  120A  158A  	fcall	___bmul
  4024     0F00  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  4025     0F01  0084               	movwf	4
  4026     0F02  120A  158A  2000  120A  158A  	fcall	stringdir
  4027     0F07  00B4               	movwf	___ftmul@f2
  4028     0F08  120A  158A  2000  120A  158A  	fcall	stringdir
  4029     0F0D  00B5               	movwf	___ftmul@f2+1
  4030     0F0E  120A  158A  2000  120A  158A  	fcall	stringdir
  4031     0F13  00B6               	movwf	___ftmul@f2+2
  4032     0F14  120A  158A  240E  120A  158A  	fcall	___ftmul
  4033     0F19  0831               	movf	?___ftmul,w
  4034     0F1A  00C6               	movwf	_fround$1258
  4035     0F1B  0832               	movf	?___ftmul+1,w
  4036     0F1C  00C7               	movwf	_fround$1258+1
  4037     0F1D  0833               	movf	?___ftmul+2,w
  4038     0F1E  00C8               	movwf	_fround$1258+2
  4039                           
  4040                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4041     0F1F  3003               	movlw	3
  4042     0F20  00AE               	movwf	___bmul@multiplicand
  4043     0F21  300A               	movlw	10
  4044     0F22  00A0               	movwf	___lbmod@divisor
  4045     0F23  0849               	movf	fround@prec,w
  4046     0F24  160A  118A  2759  120A  158A  	fcall	___lbmod
  4047     0F29  160A  118A  26D8  120A  158A  	fcall	___bmul
  4048     0F2E  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4049     0F2F  0084               	movwf	4
  4050     0F30  120A  158A  2000  120A  158A  	fcall	stringdir
  4051     0F35  00B1               	movwf	___ftmul@f1
  4052     0F36  120A  158A  2000  120A  158A  	fcall	stringdir
  4053     0F3B  00B2               	movwf	___ftmul@f1+1
  4054     0F3C  120A  158A  2000  120A  158A  	fcall	stringdir
  4055     0F41  00B3               	movwf	___ftmul@f1+2
  4056     0F42  0846               	movf	_fround$1258,w
  4057     0F43  00B4               	movwf	___ftmul@f2
  4058     0F44  0847               	movf	_fround$1258+1,w
  4059     0F45  00B5               	movwf	___ftmul@f2+1
  4060     0F46  0848               	movf	_fround$1258+2,w
  4061     0F47  00B6               	movwf	___ftmul@f2+2
  4062     0F48  120A  158A  240E  120A  158A  	fcall	___ftmul
  4063     0F4D  0831               	movf	?___ftmul,w
  4064     0F4E  00C3               	movwf	_fround$1259
  4065     0F4F  0832               	movf	?___ftmul+1,w
  4066     0F50  00C4               	movwf	_fround$1259+1
  4067     0F51  0833               	movf	?___ftmul+2,w
  4068     0F52  00C5               	movwf	_fround$1259+2
  4069                           
  4070                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4071     0F53  3000               	movlw	0
  4072     0F54  00B1               	movwf	___ftmul@f1
  4073     0F55  3000               	movlw	0
  4074     0F56  00B2               	movwf	___ftmul@f1+1
  4075     0F57  303F               	movlw	63
  4076     0F58  00B3               	movwf	___ftmul@f1+2
  4077     0F59  0843               	movf	_fround$1259,w
  4078     0F5A  00B4               	movwf	___ftmul@f2
  4079     0F5B  0844               	movf	_fround$1259+1,w
  4080     0F5C  00B5               	movwf	___ftmul@f2+1
  4081     0F5D  0845               	movf	_fround$1259+2,w
  4082     0F5E  00B6               	movwf	___ftmul@f2+2
  4083     0F5F  120A  158A  240E   	fcall	___ftmul
  4084     0F62  0831               	movf	?___ftmul,w
  4085     0F63  00C0               	movwf	?_fround
  4086     0F64  0832               	movf	?___ftmul+1,w
  4087     0F65  00C1               	movwf	?_fround+1
  4088     0F66  0833               	movf	?___ftmul+2,w
  4089     0F67  00C2               	movwf	?_fround+2
  4090     0F68  0008               	return
  4091     0F69                     l2104:
  4092                           
  4093                           ;doprnt.c: 423: else if(prec > 10)
  4094     0F69  300B               	movlw	11
  4095     0F6A  0249               	subwf	fround@prec,w
  4096     0F6B  1C03               	skipc
  4097     0F6C  2FD4               	goto	l2112
  4098                           
  4099                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4100     0F6D  3003               	movlw	3
  4101     0F6E  00AE               	movwf	___bmul@multiplicand
  4102     0F6F  300A               	movlw	10
  4103     0F70  00A0               	movwf	___lbmod@divisor
  4104     0F71  0849               	movf	fround@prec,w
  4105     0F72  160A  118A  2759  120A  158A  	fcall	___lbmod
  4106     0F77  160A  118A  26D8  120A  158A  	fcall	___bmul
  4107     0F7C  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4108     0F7D  0084               	movwf	4
  4109     0F7E  120A  158A  2000  120A  158A  	fcall	stringdir
  4110     0F83  00B1               	movwf	___ftmul@f1
  4111     0F84  120A  158A  2000  120A  158A  	fcall	stringdir
  4112     0F89  00B2               	movwf	___ftmul@f1+1
  4113     0F8A  120A  158A  2000  120A  158A  	fcall	stringdir
  4114     0F8F  00B3               	movwf	___ftmul@f1+2
  4115     0F90  3003               	movlw	3
  4116     0F91  00AE               	movwf	___bmul@multiplicand
  4117     0F92  300A               	movlw	10
  4118     0F93  00A6               	movwf	___lbdiv@divisor
  4119     0F94  0849               	movf	fround@prec,w
  4120     0F95  160A  118A  2799  120A  158A  	fcall	___lbdiv
  4121     0F9A  160A  118A  26D8  120A  158A  	fcall	___bmul
  4122     0F9F  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4123     0FA0  0084               	movwf	4
  4124     0FA1  120A  158A  2000  120A  158A  	fcall	stringdir
  4125     0FA6  00B4               	movwf	___ftmul@f2
  4126     0FA7  120A  158A  2000  120A  158A  	fcall	stringdir
  4127     0FAC  00B5               	movwf	___ftmul@f2+1
  4128     0FAD  120A  158A  2000  120A  158A  	fcall	stringdir
  4129     0FB2  00B6               	movwf	___ftmul@f2+2
  4130     0FB3  120A  158A  240E  120A  158A  	fcall	___ftmul
  4131     0FB8  0831               	movf	?___ftmul,w
  4132     0FB9  00C6               	movwf	_fround$1258
  4133     0FBA  0832               	movf	?___ftmul+1,w
  4134     0FBB  00C7               	movwf	_fround$1258+1
  4135     0FBC  0833               	movf	?___ftmul+2,w
  4136     0FBD  00C8               	movwf	_fround$1258+2
  4137                           
  4138                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4139     0FBE  3000               	movlw	0
  4140     0FBF  00B1               	movwf	___ftmul@f1
  4141     0FC0  3000               	movlw	0
  4142     0FC1  00B2               	movwf	___ftmul@f1+1
  4143     0FC2  303F               	movlw	63
  4144     0FC3  00B3               	movwf	___ftmul@f1+2
  4145     0FC4  0846               	movf	_fround$1258,w
  4146     0FC5  00B4               	movwf	___ftmul@f2
  4147     0FC6  0847               	movf	_fround$1258+1,w
  4148     0FC7  00B5               	movwf	___ftmul@f2+1
  4149     0FC8  0848               	movf	_fround$1258+2,w
  4150     0FC9  00B6               	movwf	___ftmul@f2+2
  4151     0FCA  120A  158A  240E   	fcall	___ftmul
  4152     0FCD  0831               	movf	?___ftmul,w
  4153     0FCE  00C0               	movwf	?_fround
  4154     0FCF  0832               	movf	?___ftmul+1,w
  4155     0FD0  00C1               	movwf	?_fround+1
  4156     0FD1  0833               	movf	?___ftmul+2,w
  4157     0FD2  00C2               	movwf	?_fround+2
  4158     0FD3  0008               	return
  4159     0FD4                     l2112:
  4160                           
  4161                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4162     0FD4  3000               	movlw	0
  4163     0FD5  00B1               	movwf	___ftmul@f1
  4164     0FD6  3000               	movlw	0
  4165     0FD7  00B2               	movwf	___ftmul@f1+1
  4166     0FD8  303F               	movlw	63
  4167     0FD9  00B3               	movwf	___ftmul@f1+2
  4168     0FDA  3003               	movlw	3
  4169     0FDB  00AE               	movwf	___bmul@multiplicand
  4170     0FDC  0849               	movf	fround@prec,w
  4171     0FDD  160A  118A  26D8  120A  158A  	fcall	___bmul
  4172     0FE2  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4173     0FE3  0084               	movwf	4
  4174     0FE4  120A  158A  2000  120A  158A  	fcall	stringdir
  4175     0FE9  00B4               	movwf	___ftmul@f2
  4176     0FEA  120A  158A  2000  120A  158A  	fcall	stringdir
  4177     0FEF  00B5               	movwf	___ftmul@f2+1
  4178     0FF0  120A  158A  2000  120A  158A  	fcall	stringdir
  4179     0FF5  00B6               	movwf	___ftmul@f2+2
  4180     0FF6  120A  158A  240E   	fcall	___ftmul
  4181     0FF9  0831               	movf	?___ftmul,w
  4182     0FFA  00C0               	movwf	?_fround
  4183     0FFB  0832               	movf	?___ftmul+1,w
  4184     0FFC  00C1               	movwf	?_fround+1
  4185     0FFD  0833               	movf	?___ftmul+2,w
  4186     0FFE  00C2               	movwf	?_fround+2
  4187     0FFF  0008               	return
  4188     1000                     __end_of_fround:
  4189                           
  4190                           	psect	text10
  4191     1759                     __ptext10:	
  4192 ;; *************** function ___lbmod *****************
  4193 ;; Defined at:
  4194 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  4195 ;; Parameters:    Size  Location     Type
  4196 ;;  dividend        1    wreg     unsigned char 
  4197 ;;  divisor         1    0[BANK0 ] unsigned char 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  dividend        1    3[BANK0 ] unsigned char 
  4200 ;;  rem             1    5[BANK0 ] unsigned char 
  4201 ;;  counter         1    4[BANK0 ] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 300/0
  4208 ;;		On exit  : 300/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4211 ;;      Params:         0       1       0       0       0
  4212 ;;      Locals:         0       3       0       0       0
  4213 ;;      Temps:          0       2       0       0       0
  4214 ;;      Totals:         0       6       0       0       0
  4215 ;;Total ram usage:        6 bytes
  4216 ;; Hardware stack levels used: 1
  4217 ;; Hardware stack levels required when called: 1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_fround
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225     1759                     ___lbmod:	
  4226                           ;psect for function ___lbmod
  4227                           
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4231                           ;___lbmod@dividend stored from wreg
  4232     1759  00A3               	movwf	___lbmod@dividend
  4233     175A  3008               	movlw	8
  4234     175B  00A4               	movwf	___lbmod@counter
  4235     175C  01A5               	clrf	___lbmod@rem
  4236     175D                     l2074:
  4237     175D  0823               	movf	___lbmod@dividend,w
  4238     175E  00A1               	movwf	??___lbmod
  4239     175F  3007               	movlw	7
  4240     1760                     u2505:
  4241     1760  1003               	clrc
  4242     1761  0CA1               	rrf	??___lbmod,f
  4243     1762  3EFF               	addlw	-1
  4244     1763  1D03               	skipz
  4245     1764  2F60               	goto	u2505
  4246     1765  0825               	movf	___lbmod@rem,w
  4247     1766  00A2               	movwf	??___lbmod+1
  4248     1767  0722               	addwf	??___lbmod+1,w
  4249     1768  0421               	iorwf	??___lbmod,w
  4250     1769  00A5               	movwf	___lbmod@rem
  4251     176A  1003               	clrc
  4252     176B  0DA3               	rlf	___lbmod@dividend,f
  4253     176C  0820               	movf	___lbmod@divisor,w
  4254     176D  0225               	subwf	___lbmod@rem,w
  4255     176E  1C03               	skipc
  4256     176F  2F72               	goto	l701
  4257     1770  0820               	movf	___lbmod@divisor,w
  4258     1771  02A5               	subwf	___lbmod@rem,f
  4259     1772                     l701:
  4260     1772  3001               	movlw	1
  4261     1773  02A4               	subwf	___lbmod@counter,f
  4262     1774  1D03               	btfss	3,2
  4263     1775  2F5D               	goto	l2074
  4264     1776  0825               	movf	___lbmod@rem,w
  4265     1777  0008               	return
  4266     1778                     __end_of___lbmod:
  4267                           
  4268                           	psect	text11
  4269     1799                     __ptext11:	
  4270 ;; *************** function ___lbdiv *****************
  4271 ;; Defined at:
  4272 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  dividend        1    wreg     unsigned char 
  4275 ;;  divisor         1    6[BANK0 ] unsigned char 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  dividend        1    7[BANK0 ] unsigned char 
  4278 ;;  quotient        1    9[BANK0 ] unsigned char 
  4279 ;;  counter         1    8[BANK0 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      unsigned char 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0, btemp+1
  4284 ;; Tracked objects:
  4285 ;;		On entry : 300/0
  4286 ;;		On exit  : 300/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4289 ;;      Params:         0       1       0       0       0
  4290 ;;      Locals:         0       3       0       0       0
  4291 ;;      Temps:          0       0       0       0       0
  4292 ;;      Totals:         0       4       0       0       0
  4293 ;;Total ram usage:        4 bytes
  4294 ;; Hardware stack levels used: 1
  4295 ;; Hardware stack levels required when called: 1
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_fround
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303     1799                     ___lbdiv:	
  4304                           ;psect for function ___lbdiv
  4305                           
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  4309                           ;___lbdiv@dividend stored from wreg
  4310     1799  00A7               	movwf	___lbdiv@dividend
  4311     179A  01A9               	clrf	___lbdiv@quotient
  4312     179B  0826               	movf	___lbdiv@divisor,w
  4313     179C  1903               	btfsc	3,2
  4314     179D  2FB8               	goto	l2066
  4315     179E  01A8               	clrf	___lbdiv@counter
  4316     179F  0AA8               	incf	___lbdiv@counter,f
  4317     17A0                     l2054:
  4318     17A0  1BA6               	btfsc	___lbdiv@divisor,7
  4319     17A1  2FA9               	goto	l2056
  4320     17A2  1003               	clrc
  4321     17A3  0DA6               	rlf	___lbdiv@divisor,f
  4322     17A4  3001               	movlw	1
  4323     17A5  00FF               	movwf	127
  4324     17A6  087F               	movf	127,w
  4325     17A7  07A8               	addwf	___lbdiv@counter,f
  4326     17A8  2FA0               	goto	l2054
  4327     17A9                     l2056:
  4328     17A9  1003               	clrc
  4329     17AA  0DA9               	rlf	___lbdiv@quotient,f
  4330     17AB  0826               	movf	___lbdiv@divisor,w
  4331     17AC  0227               	subwf	___lbdiv@dividend,w
  4332     17AD  1C03               	skipc
  4333     17AE  2FB3               	goto	L7
  4334     17AF  0826               	movf	___lbdiv@divisor,w
  4335     17B0  02A7               	subwf	___lbdiv@dividend,f
  4336     17B1  1429               	bsf	___lbdiv@quotient,0
  4337     17B2  1003               	clrc
  4338     17B3                     L7:
  4339     17B3  0CA6               	rrf	___lbdiv@divisor,f
  4340     17B4  3001               	movlw	1
  4341     17B5  02A8               	subwf	___lbdiv@counter,f
  4342     17B6  1D03               	btfss	3,2
  4343     17B7  2FA9               	goto	l2056
  4344     17B8                     l2066:
  4345     17B8  0829               	movf	___lbdiv@quotient,w
  4346     17B9  0008               	return
  4347     17BA                     __end_of___lbdiv:
  4348                           
  4349                           	psect	text12
  4350     0C0E                     __ptext12:	
  4351 ;; *************** function ___ftmul *****************
  4352 ;; Defined at:
  4353 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  f1              3   17[BANK0 ] float 
  4356 ;;  f2              3   20[BANK0 ] float 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4359 ;;  sign            1   31[BANK0 ] unsigned char 
  4360 ;;  cntr            1   30[BANK0 ] unsigned char 
  4361 ;;  exp             1   26[BANK0 ] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  3   17[BANK0 ] float 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 300/800
  4368 ;;		On exit  : 300/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4371 ;;      Params:         0       6       0       0       0
  4372 ;;      Locals:         0       6       0       0       0
  4373 ;;      Temps:          0       3       0       0       0
  4374 ;;      Totals:         0      15       0       0       0
  4375 ;;Total ram usage:       15 bytes
  4376 ;; Hardware stack levels used: 1
  4377 ;; Hardware stack levels required when called: 2
  4378 ;; This function calls:
  4379 ;;		___ftpack
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;;		_fround
  4383 ;;		_scale
  4384 ;;		_sprintf
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388     0C0E                     ___ftmul:	
  4389                           ;psect for function ___ftmul
  4390                           
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4394     0C0E  0831               	movf	___ftmul@f1,w
  4395     0C0F  00B7               	movwf	??___ftmul
  4396     0C10  0832               	movf	___ftmul@f1+1,w
  4397     0C11  00B8               	movwf	??___ftmul+1
  4398     0C12  0833               	movf	___ftmul@f1+2,w
  4399     0C13  00B9               	movwf	??___ftmul+2
  4400     0C14  1003               	clrc
  4401     0C15  0D38               	rlf	??___ftmul+1,w
  4402     0C16  0D39               	rlf	??___ftmul+2,w
  4403     0C17  00BA               	movwf	___ftmul@exp
  4404     0C18  083A               	movf	___ftmul@exp,w
  4405     0C19  1D03               	btfss	3,2
  4406     0C1A  2C22               	goto	l1994
  4407     0C1B  3000               	movlw	0
  4408     0C1C  00B1               	movwf	?___ftmul
  4409     0C1D  3000               	movlw	0
  4410     0C1E  00B2               	movwf	?___ftmul+1
  4411     0C1F  3000               	movlw	0
  4412     0C20  00B3               	movwf	?___ftmul+2
  4413     0C21  0008               	return
  4414     0C22                     l1994:
  4415     0C22  0834               	movf	___ftmul@f2,w
  4416     0C23  00B7               	movwf	??___ftmul
  4417     0C24  0835               	movf	___ftmul@f2+1,w
  4418     0C25  00B8               	movwf	??___ftmul+1
  4419     0C26  0836               	movf	___ftmul@f2+2,w
  4420     0C27  00B9               	movwf	??___ftmul+2
  4421     0C28  1003               	clrc
  4422     0C29  0D38               	rlf	??___ftmul+1,w
  4423     0C2A  0D39               	rlf	??___ftmul+2,w
  4424     0C2B  00BF               	movwf	___ftmul@sign
  4425     0C2C  083F               	movf	___ftmul@sign,w
  4426     0C2D  1D03               	btfss	3,2
  4427     0C2E  2C36               	goto	l2000
  4428     0C2F  3000               	movlw	0
  4429     0C30  00B1               	movwf	?___ftmul
  4430     0C31  3000               	movlw	0
  4431     0C32  00B2               	movwf	?___ftmul+1
  4432     0C33  3000               	movlw	0
  4433     0C34  00B3               	movwf	?___ftmul+2
  4434     0C35  0008               	return
  4435     0C36                     l2000:
  4436     0C36  083F               	movf	___ftmul@sign,w
  4437     0C37  3E7B               	addlw	123
  4438     0C38  00FF               	movwf	127
  4439     0C39  087F               	movf	127,w
  4440     0C3A  07BA               	addwf	___ftmul@exp,f
  4441     0C3B  0833               	movf	___ftmul@f1+2,w
  4442     0C3C  00BF               	movwf	___ftmul@sign
  4443     0C3D  0836               	movf	___ftmul@f2+2,w
  4444     0C3E  00FF               	movwf	127
  4445     0C3F  087F               	movf	127,w
  4446     0C40  06BF               	xorwf	___ftmul@sign,f
  4447     0C41  3080               	movlw	128
  4448     0C42  00FF               	movwf	127
  4449     0C43  087F               	movf	127,w
  4450     0C44  05BF               	andwf	___ftmul@sign,f
  4451     0C45  17B2               	bsf	___ftmul@f1+1,7
  4452     0C46  17B5               	bsf	___ftmul@f2+1,7
  4453     0C47  30FF               	movlw	255
  4454     0C48  05B4               	andwf	___ftmul@f2,f
  4455     0C49  30FF               	movlw	255
  4456     0C4A  05B5               	andwf	___ftmul@f2+1,f
  4457     0C4B  3000               	movlw	0
  4458     0C4C  05B6               	andwf	___ftmul@f2+2,f
  4459     0C4D  3000               	movlw	0
  4460     0C4E  00BB               	movwf	___ftmul@f3_as_product
  4461     0C4F  3000               	movlw	0
  4462     0C50  00BC               	movwf	___ftmul@f3_as_product+1
  4463     0C51  3000               	movlw	0
  4464     0C52  00BD               	movwf	___ftmul@f3_as_product+2
  4465     0C53  3007               	movlw	7
  4466     0C54  00BE               	movwf	___ftmul@cntr
  4467     0C55                     l2018:
  4468     0C55  1C31               	btfss	___ftmul@f1,0
  4469     0C56  2C65               	goto	l2022
  4470     0C57  0834               	movf	___ftmul@f2,w
  4471     0C58  07BB               	addwf	___ftmul@f3_as_product,f
  4472     0C59  0835               	movf	___ftmul@f2+1,w
  4473     0C5A  1103               	clrz
  4474     0C5B  1803               	skipnc
  4475     0C5C  0A35               	incf	___ftmul@f2+1,w
  4476     0C5D  1D03               	btfss	3,2
  4477     0C5E  07BC               	addwf	___ftmul@f3_as_product+1,f
  4478     0C5F  0836               	movf	___ftmul@f2+2,w
  4479     0C60  1103               	clrz
  4480     0C61  1803               	skipnc
  4481     0C62  0A36               	incf	___ftmul@f2+2,w
  4482     0C63  1D03               	btfss	3,2
  4483     0C64  07BD               	addwf	___ftmul@f3_as_product+2,f
  4484     0C65                     l2022:
  4485     0C65  3001               	movlw	1
  4486     0C66                     u2385:
  4487     0C66  1003               	clrc
  4488     0C67  0CB3               	rrf	___ftmul@f1+2,f
  4489     0C68  0CB2               	rrf	___ftmul@f1+1,f
  4490     0C69  0CB1               	rrf	___ftmul@f1,f
  4491     0C6A  3EFF               	addlw	-1
  4492     0C6B  1D03               	skipz
  4493     0C6C  2C66               	goto	u2385
  4494     0C6D  3001               	movlw	1
  4495     0C6E                     u2395:
  4496     0C6E  1003               	clrc
  4497     0C6F  0DB4               	rlf	___ftmul@f2,f
  4498     0C70  0DB5               	rlf	___ftmul@f2+1,f
  4499     0C71  0DB6               	rlf	___ftmul@f2+2,f
  4500     0C72  3EFF               	addlw	-1
  4501     0C73  1D03               	skipz
  4502     0C74  2C6E               	goto	u2395
  4503     0C75  3001               	movlw	1
  4504     0C76  02BE               	subwf	___ftmul@cntr,f
  4505     0C77  1D03               	btfss	3,2
  4506     0C78  2C55               	goto	l2018
  4507     0C79  3009               	movlw	9
  4508     0C7A  00BE               	movwf	___ftmul@cntr
  4509     0C7B                     l2030:
  4510     0C7B  1C31               	btfss	___ftmul@f1,0
  4511     0C7C  2C8B               	goto	l2034
  4512     0C7D  0834               	movf	___ftmul@f2,w
  4513     0C7E  07BB               	addwf	___ftmul@f3_as_product,f
  4514     0C7F  0835               	movf	___ftmul@f2+1,w
  4515     0C80  1103               	clrz
  4516     0C81  1803               	skipnc
  4517     0C82  0A35               	incf	___ftmul@f2+1,w
  4518     0C83  1D03               	btfss	3,2
  4519     0C84  07BC               	addwf	___ftmul@f3_as_product+1,f
  4520     0C85  0836               	movf	___ftmul@f2+2,w
  4521     0C86  1103               	clrz
  4522     0C87  1803               	skipnc
  4523     0C88  0A36               	incf	___ftmul@f2+2,w
  4524     0C89  1D03               	btfss	3,2
  4525     0C8A  07BD               	addwf	___ftmul@f3_as_product+2,f
  4526     0C8B                     l2034:
  4527     0C8B  3001               	movlw	1
  4528     0C8C                     u2435:
  4529     0C8C  1003               	clrc
  4530     0C8D  0CB3               	rrf	___ftmul@f1+2,f
  4531     0C8E  0CB2               	rrf	___ftmul@f1+1,f
  4532     0C8F  0CB1               	rrf	___ftmul@f1,f
  4533     0C90  3EFF               	addlw	-1
  4534     0C91  1D03               	skipz
  4535     0C92  2C8C               	goto	u2435
  4536     0C93  3001               	movlw	1
  4537     0C94                     u2445:
  4538     0C94  1003               	clrc
  4539     0C95  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4540     0C96  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4541     0C97  0CBB               	rrf	___ftmul@f3_as_product,f
  4542     0C98  3EFF               	addlw	-1
  4543     0C99  1D03               	skipz
  4544     0C9A  2C94               	goto	u2445
  4545     0C9B  3001               	movlw	1
  4546     0C9C  02BE               	subwf	___ftmul@cntr,f
  4547     0C9D  1D03               	btfss	3,2
  4548     0C9E  2C7B               	goto	l2030
  4549     0C9F  083B               	movf	___ftmul@f3_as_product,w
  4550     0CA0  00A0               	movwf	___ftpack@arg
  4551     0CA1  083C               	movf	___ftmul@f3_as_product+1,w
  4552     0CA2  00A1               	movwf	___ftpack@arg+1
  4553     0CA3  083D               	movf	___ftmul@f3_as_product+2,w
  4554     0CA4  00A2               	movwf	___ftpack@arg+2
  4555     0CA5  083A               	movf	___ftmul@exp,w
  4556     0CA6  00A3               	movwf	___ftpack@exp
  4557     0CA7  083F               	movf	___ftmul@sign,w
  4558     0CA8  00A4               	movwf	___ftpack@sign
  4559     0CA9  120A  158A  225F   	fcall	___ftpack
  4560     0CAC  0820               	movf	?___ftpack,w
  4561     0CAD  00B1               	movwf	?___ftmul
  4562     0CAE  0821               	movf	?___ftpack+1,w
  4563     0CAF  00B2               	movwf	?___ftmul+1
  4564     0CB0  0822               	movf	?___ftpack+2,w
  4565     0CB1  00B3               	movwf	?___ftmul+2
  4566     0CB2  0008               	return
  4567     0CB3                     __end_of___ftmul:
  4568                           
  4569                           	psect	text13
  4570     16D8                     __ptext13:	
  4571 ;; *************** function ___bmul *****************
  4572 ;; Defined at:
  4573 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  multiplier      1    wreg     unsigned char 
  4576 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  multiplier      1   16[BANK0 ] unsigned char 
  4579 ;;  product         1   15[BANK0 ] unsigned char 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      unsigned char 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, btemp+1
  4584 ;; Tracked objects:
  4585 ;;		On entry : 300/0
  4586 ;;		On exit  : 300/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4589 ;;      Params:         0       1       0       0       0
  4590 ;;      Locals:         0       2       0       0       0
  4591 ;;      Temps:          0       0       0       0       0
  4592 ;;      Totals:         0       3       0       0       0
  4593 ;;Total ram usage:        3 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 1
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_fround
  4600 ;;		_scale
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604     16D8                     ___bmul:	
  4605                           ;psect for function ___bmul
  4606                           
  4607                           
  4608                           ;incstack = 0
  4609                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4610                           ;___bmul@multiplier stored from wreg
  4611     16D8  00B0               	movwf	___bmul@multiplier
  4612     16D9  01AF               	clrf	___bmul@product
  4613     16DA                     l1818:
  4614     16DA  1C30               	btfss	___bmul@multiplier,0
  4615     16DB  2EE0               	goto	l1822
  4616     16DC  082E               	movf	___bmul@multiplicand,w
  4617     16DD  00FF               	movwf	127
  4618     16DE  087F               	movf	127,w
  4619     16DF  07AF               	addwf	___bmul@product,f
  4620     16E0                     l1822:
  4621     16E0  1003               	clrc
  4622     16E1  0DAE               	rlf	___bmul@multiplicand,f
  4623     16E2  1003               	clrc
  4624     16E3  0CB0               	rrf	___bmul@multiplier,f
  4625     16E4  0830               	movf	___bmul@multiplier,w
  4626     16E5  1D03               	btfss	3,2
  4627     16E6  2EDA               	goto	l1818
  4628     16E7  082F               	movf	___bmul@product,w
  4629     16E8  0008               	return
  4630     16E9                     __end_of___bmul:
  4631                           
  4632                           	psect	text14
  4633     0ACB                     __ptext14:	
  4634 ;; *************** function __tdiv_to_l_ *****************
  4635 ;; Defined at:
  4636 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdivl.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;  f1              3    0[BANK0 ] float 
  4639 ;;  f2              3    3[BANK0 ] float 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  quot            4    9[BANK0 ] unsigned long 
  4642 ;;  exp1            1   14[BANK0 ] unsigned char 
  4643 ;;  cntr            1   13[BANK0 ] unsigned char 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  4    0[BANK0 ] unsigned long 
  4646 ;; Registers used:
  4647 ;;		wreg, status,2, status,0, btemp+1
  4648 ;; Tracked objects:
  4649 ;;		On entry : 300/0
  4650 ;;		On exit  : 300/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4653 ;;      Params:         0       6       0       0       0
  4654 ;;      Locals:         0       6       0       0       0
  4655 ;;      Temps:          0       3       0       0       0
  4656 ;;      Totals:         0      15       0       0       0
  4657 ;;Total ram usage:       15 bytes
  4658 ;; Hardware stack levels used: 1
  4659 ;; Hardware stack levels required when called: 1
  4660 ;; This function calls:
  4661 ;;		Nothing
  4662 ;; This function is called by:
  4663 ;;		_sprintf
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667     0ACB                     __tdiv_to_l_:	
  4668                           ;psect for function __tdiv_to_l_
  4669                           
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  4673     0ACB  0820               	movf	__tdiv_to_l_@f1,w
  4674     0ACC  00A6               	movwf	??__tdiv_to_l_
  4675     0ACD  0821               	movf	__tdiv_to_l_@f1+1,w
  4676     0ACE  00A7               	movwf	??__tdiv_to_l_+1
  4677     0ACF  0822               	movf	__tdiv_to_l_@f1+2,w
  4678     0AD0  00A8               	movwf	??__tdiv_to_l_+2
  4679     0AD1  1003               	clrc
  4680     0AD2  0D27               	rlf	??__tdiv_to_l_+1,w
  4681     0AD3  0D28               	rlf	??__tdiv_to_l_+2,w
  4682     0AD4  00AE               	movwf	__tdiv_to_l_@exp1
  4683     0AD5  082E               	movf	__tdiv_to_l_@exp1,w
  4684     0AD6  1D03               	btfss	3,2
  4685     0AD7  2AE1               	goto	l2162
  4686     0AD8                     l2158:
  4687     0AD8  3000               	movlw	0
  4688     0AD9  00A3               	movwf	?__tdiv_to_l_+3
  4689     0ADA  3000               	movlw	0
  4690     0ADB  00A2               	movwf	?__tdiv_to_l_+2
  4691     0ADC  3000               	movlw	0
  4692     0ADD  00A1               	movwf	?__tdiv_to_l_+1
  4693     0ADE  3000               	movlw	0
  4694     0ADF  00A0               	movwf	?__tdiv_to_l_
  4695     0AE0  0008               	return
  4696     0AE1                     l2162:
  4697     0AE1  0823               	movf	__tdiv_to_l_@f2,w
  4698     0AE2  00A6               	movwf	??__tdiv_to_l_
  4699     0AE3  0824               	movf	__tdiv_to_l_@f2+1,w
  4700     0AE4  00A7               	movwf	??__tdiv_to_l_+1
  4701     0AE5  0825               	movf	__tdiv_to_l_@f2+2,w
  4702     0AE6  00A8               	movwf	??__tdiv_to_l_+2
  4703     0AE7  1003               	clrc
  4704     0AE8  0D27               	rlf	??__tdiv_to_l_+1,w
  4705     0AE9  0D28               	rlf	??__tdiv_to_l_+2,w
  4706     0AEA  00AD               	movwf	__tdiv_to_l_@cntr
  4707     0AEB  082D               	movf	__tdiv_to_l_@cntr,w
  4708     0AEC  1903               	btfsc	3,2
  4709     0AED  2AD8               	goto	l2158
  4710     0AEE  17A1               	bsf	__tdiv_to_l_@f1+1,7
  4711     0AEF  30FF               	movlw	255
  4712     0AF0  05A0               	andwf	__tdiv_to_l_@f1,f
  4713     0AF1  30FF               	movlw	255
  4714     0AF2  05A1               	andwf	__tdiv_to_l_@f1+1,f
  4715     0AF3  3000               	movlw	0
  4716     0AF4  05A2               	andwf	__tdiv_to_l_@f1+2,f
  4717     0AF5  17A4               	bsf	__tdiv_to_l_@f2+1,7
  4718     0AF6  30FF               	movlw	255
  4719     0AF7  05A3               	andwf	__tdiv_to_l_@f2,f
  4720     0AF8  30FF               	movlw	255
  4721     0AF9  05A4               	andwf	__tdiv_to_l_@f2+1,f
  4722     0AFA  3000               	movlw	0
  4723     0AFB  05A5               	andwf	__tdiv_to_l_@f2+2,f
  4724     0AFC  3000               	movlw	0
  4725     0AFD  00AC               	movwf	__tdiv_to_l_@quot+3
  4726     0AFE  3000               	movlw	0
  4727     0AFF  00AB               	movwf	__tdiv_to_l_@quot+2
  4728     0B00  3000               	movlw	0
  4729     0B01  00AA               	movwf	__tdiv_to_l_@quot+1
  4730     0B02  3000               	movlw	0
  4731     0B03  00A9               	movwf	__tdiv_to_l_@quot
  4732     0B04  307F               	movlw	127
  4733     0B05  02AE               	subwf	__tdiv_to_l_@exp1,f
  4734     0B06  3098               	movlw	152
  4735     0B07  072D               	addwf	__tdiv_to_l_@cntr,w
  4736     0B08  00A6               	movwf	??__tdiv_to_l_
  4737     0B09  0826               	movf	??__tdiv_to_l_,w
  4738     0B0A  02AE               	subwf	__tdiv_to_l_@exp1,f
  4739     0B0B  3018               	movlw	24
  4740     0B0C  00AD               	movwf	__tdiv_to_l_@cntr
  4741     0B0D                     l2176:
  4742     0B0D  3001               	movlw	1
  4743     0B0E  00A6               	movwf	??__tdiv_to_l_
  4744     0B0F                     u2635:
  4745     0B0F  1003               	clrc
  4746     0B10  0DA9               	rlf	__tdiv_to_l_@quot,f
  4747     0B11  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4748     0B12  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4749     0B13  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4750     0B14  0BA6               	decfsz	??__tdiv_to_l_,f
  4751     0B15  2B0F               	goto	u2635
  4752     0B16  0825               	movf	__tdiv_to_l_@f2+2,w
  4753     0B17  0222               	subwf	__tdiv_to_l_@f1+2,w
  4754     0B18  1D03               	skipz
  4755     0B19  2B20               	goto	u2645
  4756     0B1A  0824               	movf	__tdiv_to_l_@f2+1,w
  4757     0B1B  0221               	subwf	__tdiv_to_l_@f1+1,w
  4758     0B1C  1D03               	skipz
  4759     0B1D  2B20               	goto	u2645
  4760     0B1E  0823               	movf	__tdiv_to_l_@f2,w
  4761     0B1F  0220               	subwf	__tdiv_to_l_@f1,w
  4762     0B20                     u2645:
  4763     0B20  1C03               	skipc
  4764     0B21  2B2D               	goto	l2184
  4765     0B22  0823               	movf	__tdiv_to_l_@f2,w
  4766     0B23  02A0               	subwf	__tdiv_to_l_@f1,f
  4767     0B24  0824               	movf	__tdiv_to_l_@f2+1,w
  4768     0B25  1C03               	skipc
  4769     0B26  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  4770     0B27  02A1               	subwf	__tdiv_to_l_@f1+1,f
  4771     0B28  0825               	movf	__tdiv_to_l_@f2+2,w
  4772     0B29  1C03               	skipc
  4773     0B2A  0A25               	incf	__tdiv_to_l_@f2+2,w
  4774     0B2B  02A2               	subwf	__tdiv_to_l_@f1+2,f
  4775     0B2C  1429               	bsf	__tdiv_to_l_@quot,0
  4776     0B2D                     l2184:
  4777     0B2D  3001               	movlw	1
  4778     0B2E                     u2655:
  4779     0B2E  1003               	clrc
  4780     0B2F  0DA0               	rlf	__tdiv_to_l_@f1,f
  4781     0B30  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  4782     0B31  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  4783     0B32  3EFF               	addlw	-1
  4784     0B33  1D03               	skipz
  4785     0B34  2B2E               	goto	u2655
  4786     0B35  3001               	movlw	1
  4787     0B36  02AD               	subwf	__tdiv_to_l_@cntr,f
  4788     0B37  1D03               	btfss	3,2
  4789     0B38  2B0D               	goto	l2176
  4790     0B39  1FAE               	btfss	__tdiv_to_l_@exp1,7
  4791     0B3A  2B50               	goto	l2198
  4792     0B3B  082E               	movf	__tdiv_to_l_@exp1,w
  4793     0B3C  3A80               	xorlw	128
  4794     0B3D  3E97               	addlw	151
  4795     0B3E  1C03               	btfss	3,0
  4796     0B3F  2AD8               	goto	l2158
  4797     0B40                     l2194:
  4798     0B40  3001               	movlw	1
  4799     0B41                     u2695:
  4800     0B41  1003               	clrc
  4801     0B42  0CAC               	rrf	__tdiv_to_l_@quot+3,f
  4802     0B43  0CAB               	rrf	__tdiv_to_l_@quot+2,f
  4803     0B44  0CAA               	rrf	__tdiv_to_l_@quot+1,f
  4804     0B45  0CA9               	rrf	__tdiv_to_l_@quot,f
  4805     0B46  3EFF               	addlw	-1
  4806     0B47  1D03               	skipz
  4807     0B48  2B41               	goto	u2695
  4808     0B49  3001               	movlw	1
  4809     0B4A  00FF               	movwf	127
  4810     0B4B  087F               	movf	127,w
  4811     0B4C  07AE               	addwf	__tdiv_to_l_@exp1,f
  4812     0B4D  1903               	btfsc	3,2
  4813     0B4E  2B63               	goto	l2206
  4814     0B4F  2B40               	goto	l2194
  4815     0B50                     l2198:
  4816     0B50  3018               	movlw	24
  4817     0B51  022E               	subwf	__tdiv_to_l_@exp1,w
  4818     0B52  1803               	btfsc	3,0
  4819     0B53  2AD8               	goto	l2158
  4820     0B54                     l643:
  4821     0B54  082E               	movf	__tdiv_to_l_@exp1,w
  4822     0B55  1903               	btfsc	3,2
  4823     0B56  2B63               	goto	l2206
  4824     0B57  3001               	movlw	1
  4825     0B58  00A6               	movwf	??__tdiv_to_l_
  4826     0B59                     u2725:
  4827     0B59  1003               	clrc
  4828     0B5A  0DA9               	rlf	__tdiv_to_l_@quot,f
  4829     0B5B  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4830     0B5C  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4831     0B5D  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4832     0B5E  0BA6               	decfsz	??__tdiv_to_l_,f
  4833     0B5F  2B59               	goto	u2725
  4834     0B60  3001               	movlw	1
  4835     0B61  02AE               	subwf	__tdiv_to_l_@exp1,f
  4836     0B62  2B54               	goto	l643
  4837     0B63                     l2206:
  4838     0B63  082C               	movf	__tdiv_to_l_@quot+3,w
  4839     0B64  00A3               	movwf	?__tdiv_to_l_+3
  4840     0B65  082B               	movf	__tdiv_to_l_@quot+2,w
  4841     0B66  00A2               	movwf	?__tdiv_to_l_+2
  4842     0B67  082A               	movf	__tdiv_to_l_@quot+1,w
  4843     0B68  00A1               	movwf	?__tdiv_to_l_+1
  4844     0B69  0829               	movf	__tdiv_to_l_@quot,w
  4845     0B6A  00A0               	movwf	?__tdiv_to_l_
  4846     0B6B  0008               	return
  4847     0B6C                     __end_of__tdiv_to_l_:
  4848                           
  4849                           	psect	text15
  4850     0DAE                     __ptext15:	
  4851 ;; *************** function __div_to_l_ *****************
  4852 ;; Defined at:
  4853 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fldivl.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  f1              3    0[BANK0 ] unsigned long 
  4856 ;;  f2              3    3[BANK0 ] unsigned long 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  quot            4   14[BANK0 ] unsigned long 
  4859 ;;  exp1            1   19[BANK0 ] unsigned char 
  4860 ;;  cntr            1   18[BANK0 ] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  4    0[BANK0 ] unsigned long 
  4863 ;; Registers used:
  4864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 300/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4870 ;;      Params:         0       6       0       0       0
  4871 ;;      Locals:         0       6       0       0       0
  4872 ;;      Temps:          0       8       0       0       0
  4873 ;;      Totals:         0      20       0       0       0
  4874 ;;Total ram usage:       20 bytes
  4875 ;; Hardware stack levels used: 1
  4876 ;; Hardware stack levels required when called: 1
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_sprintf
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884     0DAE                     __div_to_l_:	
  4885                           ;psect for function __div_to_l_
  4886                           
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  4890     0DAE  3020               	movlw	low (__div_to_l_@f1| 0)
  4891     0DAF  0084               	movwf	4
  4892     0DB0  1383               	bcf	3,7	;select IRP bank0
  4893     0DB1  0800               	movf	0,w
  4894     0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4895     0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4896     0DB4  00A6               	movwf	??__div_to_l_
  4897     0DB5  0A84               	incf	4,f
  4898     0DB6  0800               	movf	0,w
  4899     0DB7  00A7               	movwf	??__div_to_l_+1
  4900     0DB8  0A84               	incf	4,f
  4901     0DB9  0800               	movf	0,w
  4902     0DBA  00A8               	movwf	??__div_to_l_+2
  4903     0DBB  0A84               	incf	4,f
  4904     0DBC  0800               	movf	0,w
  4905     0DBD  00A9               	movwf	??__div_to_l_+3
  4906     0DBE  1003               	clrc
  4907     0DBF  0D28               	rlf	??__div_to_l_+2,w
  4908     0DC0  0D29               	rlf	??__div_to_l_+3,w
  4909     0DC1  00B3               	movwf	__div_to_l_@exp1
  4910     0DC2  0833               	movf	__div_to_l_@exp1,w
  4911     0DC3  1D03               	btfss	3,2
  4912     0DC4  2DCE               	goto	l2216
  4913     0DC5                     l2212:
  4914     0DC5  3000               	movlw	0
  4915     0DC6  00A3               	movwf	?__div_to_l_+3
  4916     0DC7  3000               	movlw	0
  4917     0DC8  00A2               	movwf	?__div_to_l_+2
  4918     0DC9  3000               	movlw	0
  4919     0DCA  00A1               	movwf	?__div_to_l_+1
  4920     0DCB  3000               	movlw	0
  4921     0DCC  00A0               	movwf	?__div_to_l_
  4922     0DCD  0008               	return
  4923     0DCE                     l2216:
  4924     0DCE  3023               	movlw	low (__div_to_l_@f2| 0)
  4925     0DCF  0084               	movwf	4
  4926     0DD0  0800               	movf	0,w
  4927     0DD1  00A6               	movwf	??__div_to_l_
  4928     0DD2  0A84               	incf	4,f
  4929     0DD3  0800               	movf	0,w
  4930     0DD4  00A7               	movwf	??__div_to_l_+1
  4931     0DD5  0A84               	incf	4,f
  4932     0DD6  0800               	movf	0,w
  4933     0DD7  00A8               	movwf	??__div_to_l_+2
  4934     0DD8  0A84               	incf	4,f
  4935     0DD9  0800               	movf	0,w
  4936     0DDA  00A9               	movwf	??__div_to_l_+3
  4937     0DDB  1003               	clrc
  4938     0DDC  0D28               	rlf	??__div_to_l_+2,w
  4939     0DDD  0D29               	rlf	??__div_to_l_+3,w
  4940     0DDE  00B2               	movwf	__div_to_l_@cntr
  4941     0DDF  0832               	movf	__div_to_l_@cntr,w
  4942     0DE0  1903               	btfsc	3,2
  4943     0DE1  2DC5               	goto	l2212
  4944     0DE2  3020               	movlw	low (__div_to_l_@f1| 0)
  4945     0DE3  0084               	movwf	4
  4946     0DE4  3000               	movlw	0
  4947     0DE5  0480               	iorwf	0,f
  4948     0DE6  0A84               	incf	4,f
  4949     0DE7  3000               	movlw	0
  4950     0DE8  0480               	iorwf	0,f
  4951     0DE9  0A84               	incf	4,f
  4952     0DEA  3080               	movlw	128
  4953     0DEB  0480               	iorwf	0,f
  4954     0DEC  0A84               	incf	4,f
  4955     0DED  3000               	movlw	0
  4956     0DEE  0480               	iorwf	0,f
  4957     0DEF  3020               	movlw	low (__div_to_l_@f1| 0)
  4958     0DF0  0084               	movwf	4
  4959     0DF1  30FF               	movlw	255
  4960     0DF2  0580               	andwf	0,f
  4961     0DF3  0A84               	incf	4,f
  4962     0DF4  30FF               	movlw	255
  4963     0DF5  0580               	andwf	0,f
  4964     0DF6  0A84               	incf	4,f
  4965     0DF7  30FF               	movlw	255
  4966     0DF8  0580               	andwf	0,f
  4967     0DF9  0A84               	incf	4,f
  4968     0DFA  3000               	movlw	0
  4969     0DFB  0580               	andwf	0,f
  4970     0DFC  3023               	movlw	low (__div_to_l_@f2| 0)
  4971     0DFD  0084               	movwf	4
  4972     0DFE  3000               	movlw	0
  4973     0DFF  0480               	iorwf	0,f
  4974     0E00  0A84               	incf	4,f
  4975     0E01  3000               	movlw	0
  4976     0E02  0480               	iorwf	0,f
  4977     0E03  0A84               	incf	4,f
  4978     0E04  3080               	movlw	128
  4979     0E05  0480               	iorwf	0,f
  4980     0E06  0A84               	incf	4,f
  4981     0E07  3000               	movlw	0
  4982     0E08  0480               	iorwf	0,f
  4983     0E09  3023               	movlw	low (__div_to_l_@f2| 0)
  4984     0E0A  0084               	movwf	4
  4985     0E0B  30FF               	movlw	255
  4986     0E0C  0580               	andwf	0,f
  4987     0E0D  0A84               	incf	4,f
  4988     0E0E  30FF               	movlw	255
  4989     0E0F  0580               	andwf	0,f
  4990     0E10  0A84               	incf	4,f
  4991     0E11  30FF               	movlw	255
  4992     0E12  0580               	andwf	0,f
  4993     0E13  0A84               	incf	4,f
  4994     0E14  3000               	movlw	0
  4995     0E15  0580               	andwf	0,f
  4996     0E16  3000               	movlw	0
  4997     0E17  00B1               	movwf	__div_to_l_@quot+3
  4998     0E18  3000               	movlw	0
  4999     0E19  00B0               	movwf	__div_to_l_@quot+2
  5000     0E1A  3000               	movlw	0
  5001     0E1B  00AF               	movwf	__div_to_l_@quot+1
  5002     0E1C  3000               	movlw	0
  5003     0E1D  00AE               	movwf	__div_to_l_@quot
  5004     0E1E  307F               	movlw	127
  5005     0E1F  02B3               	subwf	__div_to_l_@exp1,f
  5006     0E20  30A0               	movlw	160
  5007     0E21  0732               	addwf	__div_to_l_@cntr,w
  5008     0E22  00A6               	movwf	??__div_to_l_
  5009     0E23  0826               	movf	??__div_to_l_,w
  5010     0E24  02B3               	subwf	__div_to_l_@exp1,f
  5011     0E25  3020               	movlw	32
  5012     0E26  00B2               	movwf	__div_to_l_@cntr
  5013     0E27                     l2232:
  5014     0E27  3001               	movlw	1
  5015     0E28  00A6               	movwf	??__div_to_l_
  5016     0E29                     u2765:
  5017     0E29  1003               	clrc
  5018     0E2A  0DAE               	rlf	__div_to_l_@quot,f
  5019     0E2B  0DAF               	rlf	__div_to_l_@quot+1,f
  5020     0E2C  0DB0               	rlf	__div_to_l_@quot+2,f
  5021     0E2D  0DB1               	rlf	__div_to_l_@quot+3,f
  5022     0E2E  0BA6               	decfsz	??__div_to_l_,f
  5023     0E2F  2E29               	goto	u2765
  5024     0E30  3023               	movlw	low (__div_to_l_@f2| 0)
  5025     0E31  0084               	movwf	4
  5026     0E32  0800               	movf	0,w
  5027     0E33  00A6               	movwf	??__div_to_l_
  5028     0E34  0A84               	incf	4,f
  5029     0E35  0800               	movf	0,w
  5030     0E36  00A7               	movwf	??__div_to_l_+1
  5031     0E37  0A84               	incf	4,f
  5032     0E38  0800               	movf	0,w
  5033     0E39  00A8               	movwf	??__div_to_l_+2
  5034     0E3A  0A84               	incf	4,f
  5035     0E3B  0800               	movf	0,w
  5036     0E3C  00A9               	movwf	??__div_to_l_+3
  5037     0E3D  3020               	movlw	low (__div_to_l_@f1| 0)
  5038     0E3E  0084               	movwf	4
  5039     0E3F  0800               	movf	0,w
  5040     0E40  00AA               	movwf	??__div_to_l_+4
  5041     0E41  0A84               	incf	4,f
  5042     0E42  0800               	movf	0,w
  5043     0E43  00AB               	movwf	??__div_to_l_+5
  5044     0E44  0A84               	incf	4,f
  5045     0E45  0800               	movf	0,w
  5046     0E46  00AC               	movwf	??__div_to_l_+6
  5047     0E47  0A84               	incf	4,f
  5048     0E48  0800               	movf	0,w
  5049     0E49  00AD               	movwf	??__div_to_l_+7
  5050     0E4A  0829               	movf	??__div_to_l_+3,w
  5051     0E4B  022D               	subwf	??__div_to_l_+7,w
  5052     0E4C  1D03               	skipz
  5053     0E4D  2E58               	goto	u2775
  5054     0E4E  0828               	movf	??__div_to_l_+2,w
  5055     0E4F  022C               	subwf	??__div_to_l_+6,w
  5056     0E50  1D03               	skipz
  5057     0E51  2E58               	goto	u2775
  5058     0E52  0827               	movf	??__div_to_l_+1,w
  5059     0E53  022B               	subwf	??__div_to_l_+5,w
  5060     0E54  1D03               	skipz
  5061     0E55  2E58               	goto	u2775
  5062     0E56  0826               	movf	??__div_to_l_,w
  5063     0E57  022A               	subwf	??__div_to_l_+4,w
  5064     0E58                     u2775:
  5065     0E58  1C03               	skipc
  5066     0E59  2E7D               	goto	l556
  5067     0E5A  3023               	movlw	low (__div_to_l_@f2| 0)
  5068     0E5B  0084               	movwf	4
  5069     0E5C  0800               	movf	0,w
  5070     0E5D  00A6               	movwf	??__div_to_l_
  5071     0E5E  0A84               	incf	4,f
  5072     0E5F  0800               	movf	0,w
  5073     0E60  00A7               	movwf	??__div_to_l_+1
  5074     0E61  0A84               	incf	4,f
  5075     0E62  0800               	movf	0,w
  5076     0E63  00A8               	movwf	??__div_to_l_+2
  5077     0E64  0A84               	incf	4,f
  5078     0E65  0800               	movf	0,w
  5079     0E66  00A9               	movwf	??__div_to_l_+3
  5080     0E67  3020               	movlw	low (__div_to_l_@f1| 0)
  5081     0E68  0084               	movwf	4
  5082     0E69  0826               	movf	??__div_to_l_,w
  5083     0E6A  0280               	subwf	0,f
  5084     0E6B  0A84               	incf	4,f
  5085     0E6C  0827               	movf	??__div_to_l_+1,w
  5086     0E6D  1C03               	skipc
  5087     0E6E  0F27               	incfsz	??__div_to_l_+1,w
  5088     0E6F  0280               	subwf	0,f
  5089     0E70  0A84               	incf	4,f
  5090     0E71  0828               	movf	??__div_to_l_+2,w
  5091     0E72  1C03               	skipc
  5092     0E73  0F28               	incfsz	??__div_to_l_+2,w
  5093     0E74  0280               	subwf	0,f
  5094     0E75  0A84               	incf	4,f
  5095     0E76  0829               	movf	??__div_to_l_+3,w
  5096     0E77  1C03               	skipc
  5097     0E78  0A29               	incf	??__div_to_l_+3,w
  5098     0E79  0280               	subwf	0,f
  5099     0E7A  3003               	movlw	3
  5100     0E7B  0284               	subwf	4,f
  5101     0E7C  142E               	bsf	__div_to_l_@quot,0
  5102     0E7D                     l556:
  5103     0E7D  3020               	movlw	low (__div_to_l_@f1| 0)
  5104     0E7E  0084               	movwf	4
  5105     0E7F  1003               	clrc
  5106     0E80  0D80               	rlf	0,f
  5107     0E81  0A84               	incf	4,f
  5108     0E82  0D80               	rlf	0,f
  5109     0E83  0A84               	incf	4,f
  5110     0E84  0D80               	rlf	0,f
  5111     0E85  0A84               	incf	4,f
  5112     0E86  0D80               	rlf	0,f
  5113     0E87  0384               	decf	4,f
  5114     0E88  0384               	decf	4,f
  5115     0E89  0384               	decf	4,f
  5116     0E8A  3001               	movlw	1
  5117     0E8B  02B2               	subwf	__div_to_l_@cntr,f
  5118     0E8C  1D03               	btfss	3,2
  5119     0E8D  2E27               	goto	l2232
  5120     0E8E  1FB3               	btfss	__div_to_l_@exp1,7
  5121     0E8F  2EA5               	goto	l2252
  5122     0E90  0833               	movf	__div_to_l_@exp1,w
  5123     0E91  3A80               	xorlw	128
  5124     0E92  3E9F               	addlw	159
  5125     0E93  1C03               	btfss	3,0
  5126     0E94  2DC5               	goto	l2212
  5127     0E95                     l2248:
  5128     0E95  3001               	movlw	1
  5129     0E96                     u2815:
  5130     0E96  1003               	clrc
  5131     0E97  0CB1               	rrf	__div_to_l_@quot+3,f
  5132     0E98  0CB0               	rrf	__div_to_l_@quot+2,f
  5133     0E99  0CAF               	rrf	__div_to_l_@quot+1,f
  5134     0E9A  0CAE               	rrf	__div_to_l_@quot,f
  5135     0E9B  3EFF               	addlw	-1
  5136     0E9C  1D03               	skipz
  5137     0E9D  2E96               	goto	u2815
  5138     0E9E  3001               	movlw	1
  5139     0E9F  00FF               	movwf	127
  5140     0EA0  087F               	movf	127,w
  5141     0EA1  07B3               	addwf	__div_to_l_@exp1,f
  5142     0EA2  1903               	btfsc	3,2
  5143     0EA3  2EB8               	goto	l2260
  5144     0EA4  2E95               	goto	l2248
  5145     0EA5                     l2252:
  5146     0EA5  3020               	movlw	32
  5147     0EA6  0233               	subwf	__div_to_l_@exp1,w
  5148     0EA7  1803               	btfsc	3,0
  5149     0EA8  2DC5               	goto	l2212
  5150     0EA9                     l564:
  5151     0EA9  0833               	movf	__div_to_l_@exp1,w
  5152     0EAA  1903               	btfsc	3,2
  5153     0EAB  2EB8               	goto	l2260
  5154     0EAC  3001               	movlw	1
  5155     0EAD  00A6               	movwf	??__div_to_l_
  5156     0EAE                     u2845:
  5157     0EAE  1003               	clrc
  5158     0EAF  0DAE               	rlf	__div_to_l_@quot,f
  5159     0EB0  0DAF               	rlf	__div_to_l_@quot+1,f
  5160     0EB1  0DB0               	rlf	__div_to_l_@quot+2,f
  5161     0EB2  0DB1               	rlf	__div_to_l_@quot+3,f
  5162     0EB3  0BA6               	decfsz	??__div_to_l_,f
  5163     0EB4  2EAE               	goto	u2845
  5164     0EB5  3001               	movlw	1
  5165     0EB6  02B3               	subwf	__div_to_l_@exp1,f
  5166     0EB7  2EA9               	goto	l564
  5167     0EB8                     l2260:
  5168     0EB8  0831               	movf	__div_to_l_@quot+3,w
  5169     0EB9  00A3               	movwf	?__div_to_l_+3
  5170     0EBA  0830               	movf	__div_to_l_@quot+2,w
  5171     0EBB  00A2               	movwf	?__div_to_l_+2
  5172     0EBC  082F               	movf	__div_to_l_@quot+1,w
  5173     0EBD  00A1               	movwf	?__div_to_l_+1
  5174     0EBE  082E               	movf	__div_to_l_@quot,w
  5175     0EBF  00A0               	movwf	?__div_to_l_
  5176     0EC0  0008               	return
  5177     0EC1                     __end_of__div_to_l_:
  5178                           
  5179                           	psect	text16
  5180     1778                     __ptext16:	
  5181 ;; *************** function ___wmul *****************
  5182 ;; Defined at:
  5183 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5186 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  product         2    4[BANK0 ] unsigned int 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  2    0[BANK0 ] unsigned int 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : B00/0
  5195 ;;		On exit  : B00/0
  5196 ;;		Unchanged: 800/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5198 ;;      Params:         0       4       0       0       0
  5199 ;;      Locals:         0       2       0       0       0
  5200 ;;      Temps:          0       0       0       0       0
  5201 ;;      Totals:         0       6       0       0       0
  5202 ;;Total ram usage:        6 bytes
  5203 ;; Hardware stack levels used: 1
  5204 ;; Hardware stack levels required when called: 1
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_sprintf
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212     1778                     ___wmul:	
  5213                           ;psect for function ___wmul
  5214                           
  5215                           
  5216                           ;incstack = 0
  5217                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5218     1778  01A4               	clrf	___wmul@product
  5219     1779  01A5               	clrf	___wmul@product+1
  5220     177A                     l2266:
  5221     177A  1C20               	btfss	___wmul@multiplier,0
  5222     177B  2F82               	goto	l347
  5223     177C  0822               	movf	___wmul@multiplicand,w
  5224     177D  07A4               	addwf	___wmul@product,f
  5225     177E  1803               	skipnc
  5226     177F  0AA5               	incf	___wmul@product+1,f
  5227     1780  0823               	movf	___wmul@multiplicand+1,w
  5228     1781  07A5               	addwf	___wmul@product+1,f
  5229     1782                     l347:
  5230     1782  3001               	movlw	1
  5231     1783                     u2875:
  5232     1783  1003               	clrc
  5233     1784  0DA2               	rlf	___wmul@multiplicand,f
  5234     1785  0DA3               	rlf	___wmul@multiplicand+1,f
  5235     1786  3EFF               	addlw	-1
  5236     1787  1D03               	skipz
  5237     1788  2F83               	goto	u2875
  5238     1789  3001               	movlw	1
  5239     178A                     u2885:
  5240     178A  1003               	clrc
  5241     178B  0CA1               	rrf	___wmul@multiplier+1,f
  5242     178C  0CA0               	rrf	___wmul@multiplier,f
  5243     178D  3EFF               	addlw	-1
  5244     178E  1D03               	skipz
  5245     178F  2F8A               	goto	u2885
  5246     1790  0820               	movf	___wmul@multiplier,w
  5247     1791  0421               	iorwf	___wmul@multiplier+1,w
  5248     1792  1D03               	btfss	3,2
  5249     1793  2F7A               	goto	l2266
  5250     1794  0825               	movf	___wmul@product+1,w
  5251     1795  00A1               	movwf	?___wmul+1
  5252     1796  0824               	movf	___wmul@product,w
  5253     1797  00A0               	movwf	?___wmul
  5254     1798  0008               	return
  5255     1799                     __end_of___wmul:
  5256                           
  5257                           	psect	text17
  5258     0885                     __ptext17:	
  5259 ;; *************** function ___lltoft *****************
  5260 ;; Defined at:
  5261 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lltoft.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  c               4    8[BANK0 ] unsigned long 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  exp             1   12[BANK0 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  3    8[BANK0 ] float 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 300/0
  5272 ;;		On exit  : 300/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5275 ;;      Params:         0       4       0       0       0
  5276 ;;      Locals:         0       1       0       0       0
  5277 ;;      Temps:          0       0       0       0       0
  5278 ;;      Totals:         0       5       0       0       0
  5279 ;;Total ram usage:        5 bytes
  5280 ;; Hardware stack levels used: 1
  5281 ;; Hardware stack levels required when called: 2
  5282 ;; This function calls:
  5283 ;;		___ftpack
  5284 ;; This function is called by:
  5285 ;;		_sprintf
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289     0885                     ___lltoft:	
  5290                           ;psect for function ___lltoft
  5291                           
  5292                           
  5293                           ;incstack = 0
  5294                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5295     0885  308E               	movlw	142
  5296     0886  00AC               	movwf	___lltoft@exp
  5297     0887                     l2412:
  5298     0887  30FF               	movlw	255
  5299     0888  052B               	andwf	___lltoft@c+3,w
  5300     0889  1903               	btfsc	3,2
  5301     088A  2899               	goto	l2414
  5302     088B  3001               	movlw	1
  5303     088C                     u3185:
  5304     088C  1003               	clrc
  5305     088D  0CAB               	rrf	___lltoft@c+3,f
  5306     088E  0CAA               	rrf	___lltoft@c+2,f
  5307     088F  0CA9               	rrf	___lltoft@c+1,f
  5308     0890  0CA8               	rrf	___lltoft@c,f
  5309     0891  3EFF               	addlw	-1
  5310     0892  1D03               	skipz
  5311     0893  288C               	goto	u3185
  5312     0894  3001               	movlw	1
  5313     0895  00FF               	movwf	127
  5314     0896  087F               	movf	127,w
  5315     0897  07AC               	addwf	___lltoft@exp,f
  5316     0898  2887               	goto	l2412
  5317     0899                     l2414:
  5318     0899  0828               	movf	___lltoft@c,w
  5319     089A  00A0               	movwf	___ftpack@arg
  5320     089B  0829               	movf	___lltoft@c+1,w
  5321     089C  00A1               	movwf	___ftpack@arg+1
  5322     089D  082A               	movf	___lltoft@c+2,w
  5323     089E  00A2               	movwf	___ftpack@arg+2
  5324     089F  082C               	movf	___lltoft@exp,w
  5325     08A0  00A3               	movwf	___ftpack@exp
  5326     08A1  01A4               	clrf	___ftpack@sign
  5327     08A2  120A  158A  225F   	fcall	___ftpack
  5328     08A5  0820               	movf	?___ftpack,w
  5329     08A6  00A8               	movwf	?___lltoft
  5330     08A7  0821               	movf	?___ftpack+1,w
  5331     08A8  00A9               	movwf	?___lltoft+1
  5332     08A9  0822               	movf	?___ftpack+2,w
  5333     08AA  00AA               	movwf	?___lltoft+2
  5334     08AB  0008               	return
  5335     08AC                     __end_of___lltoft:
  5336                           
  5337                           	psect	text18
  5338     095C                     __ptext18:	
  5339 ;; *************** function ___llmod *****************
  5340 ;; Defined at:
  5341 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  divisor         4    0[BANK0 ] unsigned long 
  5344 ;;  dividend        4    4[BANK0 ] unsigned long 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  counter         1    9[BANK0 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  4    0[BANK0 ] unsigned long 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, btemp+1
  5351 ;; Tracked objects:
  5352 ;;		On entry : 300/0
  5353 ;;		On exit  : 300/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5356 ;;      Params:         0       8       0       0       0
  5357 ;;      Locals:         0       1       0       0       0
  5358 ;;      Temps:          0       1       0       0       0
  5359 ;;      Totals:         0      10       0       0       0
  5360 ;;Total ram usage:       10 bytes
  5361 ;; Hardware stack levels used: 1
  5362 ;; Hardware stack levels required when called: 1
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_sprintf
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370     095C                     ___llmod:	
  5371                           ;psect for function ___llmod
  5372                           
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  5376     095C  0823               	movf	___llmod@divisor+3,w
  5377     095D  0422               	iorwf	___llmod@divisor+2,w
  5378     095E  0421               	iorwf	___llmod@divisor+1,w
  5379     095F  0420               	iorwf	___llmod@divisor,w
  5380     0960  1903               	skipnz
  5381     0961  299F               	goto	l2402
  5382     0962  01A9               	clrf	___llmod@counter
  5383     0963  0AA9               	incf	___llmod@counter,f
  5384     0964                     l2392:
  5385     0964  1BA3               	btfsc	___llmod@divisor+3,7
  5386     0965  2974               	goto	l2394
  5387     0966  3001               	movlw	1
  5388     0967  00A8               	movwf	??___llmod
  5389     0968                     u3135:
  5390     0968  1003               	clrc
  5391     0969  0DA0               	rlf	___llmod@divisor,f
  5392     096A  0DA1               	rlf	___llmod@divisor+1,f
  5393     096B  0DA2               	rlf	___llmod@divisor+2,f
  5394     096C  0DA3               	rlf	___llmod@divisor+3,f
  5395     096D  0BA8               	decfsz	??___llmod,f
  5396     096E  2968               	goto	u3135
  5397     096F  3001               	movlw	1
  5398     0970  00FF               	movwf	127
  5399     0971  087F               	movf	127,w
  5400     0972  07A9               	addwf	___llmod@counter,f
  5401     0973  2964               	goto	l2392
  5402     0974                     l2394:
  5403     0974  0823               	movf	___llmod@divisor+3,w
  5404     0975  0227               	subwf	___llmod@dividend+3,w
  5405     0976  1D03               	skipz
  5406     0977  2982               	goto	u3155
  5407     0978  0822               	movf	___llmod@divisor+2,w
  5408     0979  0226               	subwf	___llmod@dividend+2,w
  5409     097A  1D03               	skipz
  5410     097B  2982               	goto	u3155
  5411     097C  0821               	movf	___llmod@divisor+1,w
  5412     097D  0225               	subwf	___llmod@dividend+1,w
  5413     097E  1D03               	skipz
  5414     097F  2982               	goto	u3155
  5415     0980  0820               	movf	___llmod@divisor,w
  5416     0981  0224               	subwf	___llmod@dividend,w
  5417     0982                     u3155:
  5418     0982  1C03               	skipc
  5419     0983  2992               	goto	l2398
  5420     0984  0820               	movf	___llmod@divisor,w
  5421     0985  02A4               	subwf	___llmod@dividend,f
  5422     0986  0821               	movf	___llmod@divisor+1,w
  5423     0987  1C03               	skipc
  5424     0988  0F21               	incfsz	___llmod@divisor+1,w
  5425     0989  02A5               	subwf	___llmod@dividend+1,f
  5426     098A  0822               	movf	___llmod@divisor+2,w
  5427     098B  1C03               	skipc
  5428     098C  0F22               	incfsz	___llmod@divisor+2,w
  5429     098D  02A6               	subwf	___llmod@dividend+2,f
  5430     098E  0823               	movf	___llmod@divisor+3,w
  5431     098F  1C03               	skipc
  5432     0990  0F23               	incfsz	___llmod@divisor+3,w
  5433     0991  02A7               	subwf	___llmod@dividend+3,f
  5434     0992                     l2398:
  5435     0992  3001               	movlw	1
  5436     0993                     u3165:
  5437     0993  1003               	clrc
  5438     0994  0CA3               	rrf	___llmod@divisor+3,f
  5439     0995  0CA2               	rrf	___llmod@divisor+2,f
  5440     0996  0CA1               	rrf	___llmod@divisor+1,f
  5441     0997  0CA0               	rrf	___llmod@divisor,f
  5442     0998  3EFF               	addlw	-1
  5443     0999  1D03               	skipz
  5444     099A  2993               	goto	u3165
  5445     099B  3001               	movlw	1
  5446     099C  02A9               	subwf	___llmod@counter,f
  5447     099D  1D03               	btfss	3,2
  5448     099E  2974               	goto	l2394
  5449     099F                     l2402:
  5450     099F  0827               	movf	___llmod@dividend+3,w
  5451     09A0  00A3               	movwf	?___llmod+3
  5452     09A1  0826               	movf	___llmod@dividend+2,w
  5453     09A2  00A2               	movwf	?___llmod+2
  5454     09A3  0825               	movf	___llmod@dividend+1,w
  5455     09A4  00A1               	movwf	?___llmod+1
  5456     09A5  0824               	movf	___llmod@dividend,w
  5457     09A6  00A0               	movwf	?___llmod
  5458     09A7  0008               	return
  5459     09A8                     __end_of___llmod:
  5460                           
  5461                           	psect	text19
  5462     0A01                     __ptext19:	
  5463 ;; *************** function ___lldiv *****************
  5464 ;; Defined at:
  5465 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  divisor         4    0[BANK0 ] unsigned long 
  5468 ;;  dividend        4    4[BANK0 ] unsigned long 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  quotient        4    9[BANK0 ] unsigned long 
  5471 ;;  counter         1   13[BANK0 ] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  4    0[BANK0 ] unsigned long 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, btemp+1
  5476 ;; Tracked objects:
  5477 ;;		On entry : 300/0
  5478 ;;		On exit  : 300/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5481 ;;      Params:         0       8       0       0       0
  5482 ;;      Locals:         0       5       0       0       0
  5483 ;;      Temps:          0       1       0       0       0
  5484 ;;      Totals:         0      14       0       0       0
  5485 ;;Total ram usage:       14 bytes
  5486 ;; Hardware stack levels used: 1
  5487 ;; Hardware stack levels required when called: 1
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_sprintf
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495     0A01                     ___lldiv:	
  5496                           ;psect for function ___lldiv
  5497                           
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  5501     0A01  3000               	movlw	0
  5502     0A02  00AC               	movwf	___lldiv@quotient+3
  5503     0A03  3000               	movlw	0
  5504     0A04  00AB               	movwf	___lldiv@quotient+2
  5505     0A05  3000               	movlw	0
  5506     0A06  00AA               	movwf	___lldiv@quotient+1
  5507     0A07  3000               	movlw	0
  5508     0A08  00A9               	movwf	___lldiv@quotient
  5509     0A09  0823               	movf	___lldiv@divisor+3,w
  5510     0A0A  0422               	iorwf	___lldiv@divisor+2,w
  5511     0A0B  0421               	iorwf	___lldiv@divisor+1,w
  5512     0A0C  0420               	iorwf	___lldiv@divisor,w
  5513     0A0D  1903               	skipnz
  5514     0A0E  2A56               	goto	l2300
  5515     0A0F  01AD               	clrf	___lldiv@counter
  5516     0A10  0AAD               	incf	___lldiv@counter,f
  5517     0A11                     l2286:
  5518     0A11  1BA3               	btfsc	___lldiv@divisor+3,7
  5519     0A12  2A21               	goto	l2288
  5520     0A13  3001               	movlw	1
  5521     0A14  00A8               	movwf	??___lldiv
  5522     0A15                     u2915:
  5523     0A15  1003               	clrc
  5524     0A16  0DA0               	rlf	___lldiv@divisor,f
  5525     0A17  0DA1               	rlf	___lldiv@divisor+1,f
  5526     0A18  0DA2               	rlf	___lldiv@divisor+2,f
  5527     0A19  0DA3               	rlf	___lldiv@divisor+3,f
  5528     0A1A  0BA8               	decfsz	??___lldiv,f
  5529     0A1B  2A15               	goto	u2915
  5530     0A1C  3001               	movlw	1
  5531     0A1D  00FF               	movwf	127
  5532     0A1E  087F               	movf	127,w
  5533     0A1F  07AD               	addwf	___lldiv@counter,f
  5534     0A20  2A11               	goto	l2286
  5535     0A21                     l2288:
  5536     0A21  3001               	movlw	1
  5537     0A22  00A8               	movwf	??___lldiv
  5538     0A23                     u2935:
  5539     0A23  1003               	clrc
  5540     0A24  0DA9               	rlf	___lldiv@quotient,f
  5541     0A25  0DAA               	rlf	___lldiv@quotient+1,f
  5542     0A26  0DAB               	rlf	___lldiv@quotient+2,f
  5543     0A27  0DAC               	rlf	___lldiv@quotient+3,f
  5544     0A28  0BA8               	decfsz	??___lldiv,f
  5545     0A29  2A23               	goto	u2935
  5546     0A2A  0823               	movf	___lldiv@divisor+3,w
  5547     0A2B  0227               	subwf	___lldiv@dividend+3,w
  5548     0A2C  1D03               	skipz
  5549     0A2D  2A38               	goto	u2945
  5550     0A2E  0822               	movf	___lldiv@divisor+2,w
  5551     0A2F  0226               	subwf	___lldiv@dividend+2,w
  5552     0A30  1D03               	skipz
  5553     0A31  2A38               	goto	u2945
  5554     0A32  0821               	movf	___lldiv@divisor+1,w
  5555     0A33  0225               	subwf	___lldiv@dividend+1,w
  5556     0A34  1D03               	skipz
  5557     0A35  2A38               	goto	u2945
  5558     0A36  0820               	movf	___lldiv@divisor,w
  5559     0A37  0224               	subwf	___lldiv@dividend,w
  5560     0A38                     u2945:
  5561     0A38  1C03               	skipc
  5562     0A39  2A49               	goto	l2296
  5563     0A3A  0820               	movf	___lldiv@divisor,w
  5564     0A3B  02A4               	subwf	___lldiv@dividend,f
  5565     0A3C  0821               	movf	___lldiv@divisor+1,w
  5566     0A3D  1C03               	skipc
  5567     0A3E  0F21               	incfsz	___lldiv@divisor+1,w
  5568     0A3F  02A5               	subwf	___lldiv@dividend+1,f
  5569     0A40  0822               	movf	___lldiv@divisor+2,w
  5570     0A41  1C03               	skipc
  5571     0A42  0F22               	incfsz	___lldiv@divisor+2,w
  5572     0A43  02A6               	subwf	___lldiv@dividend+2,f
  5573     0A44  0823               	movf	___lldiv@divisor+3,w
  5574     0A45  1C03               	skipc
  5575     0A46  0F23               	incfsz	___lldiv@divisor+3,w
  5576     0A47  02A7               	subwf	___lldiv@dividend+3,f
  5577     0A48  1429               	bsf	___lldiv@quotient,0
  5578     0A49                     l2296:
  5579     0A49  3001               	movlw	1
  5580     0A4A                     u2955:
  5581     0A4A  1003               	clrc
  5582     0A4B  0CA3               	rrf	___lldiv@divisor+3,f
  5583     0A4C  0CA2               	rrf	___lldiv@divisor+2,f
  5584     0A4D  0CA1               	rrf	___lldiv@divisor+1,f
  5585     0A4E  0CA0               	rrf	___lldiv@divisor,f
  5586     0A4F  3EFF               	addlw	-1
  5587     0A50  1D03               	skipz
  5588     0A51  2A4A               	goto	u2955
  5589     0A52  3001               	movlw	1
  5590     0A53  02AD               	subwf	___lldiv@counter,f
  5591     0A54  1D03               	btfss	3,2
  5592     0A55  2A21               	goto	l2288
  5593     0A56                     l2300:
  5594     0A56  082C               	movf	___lldiv@quotient+3,w
  5595     0A57  00A3               	movwf	?___lldiv+3
  5596     0A58  082B               	movf	___lldiv@quotient+2,w
  5597     0A59  00A2               	movwf	?___lldiv+2
  5598     0A5A  082A               	movf	___lldiv@quotient+1,w
  5599     0A5B  00A1               	movwf	?___lldiv+1
  5600     0A5C  0829               	movf	___lldiv@quotient,w
  5601     0A5D  00A0               	movwf	?___lldiv
  5602     0A5E  0008               	return
  5603     0A5F                     __end_of___lldiv:
  5604                           
  5605                           	psect	text20
  5606     0780                     __ptext20:	
  5607 ;; *************** function ___fttol *****************
  5608 ;; Defined at:
  5609 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  f1              3   39[BANK0 ] float 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  lval            4   47[BANK0 ] unsigned long 
  5614 ;;  exp1            1   51[BANK0 ] unsigned char 
  5615 ;;  sign1           1   46[BANK0 ] unsigned char 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  4   39[BANK0 ] long 
  5618 ;; Registers used:
  5619 ;;		wreg, status,2, status,0, btemp+1
  5620 ;; Tracked objects:
  5621 ;;		On entry : 300/0
  5622 ;;		On exit  : 300/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5625 ;;      Params:         0       4       0       0       0
  5626 ;;      Locals:         0       6       0       0       0
  5627 ;;      Temps:          0       3       0       0       0
  5628 ;;      Totals:         0      13       0       0       0
  5629 ;;Total ram usage:       13 bytes
  5630 ;; Hardware stack levels used: 1
  5631 ;; Hardware stack levels required when called: 1
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_sprintf
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639     0780                     ___fttol:	
  5640                           ;psect for function ___fttol
  5641                           
  5642                           
  5643                           ;incstack = 0
  5644                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  5645     0780  0847               	movf	___fttol@f1,w
  5646     0781  00CB               	movwf	??___fttol
  5647     0782  0848               	movf	___fttol@f1+1,w
  5648     0783  00CC               	movwf	??___fttol+1
  5649     0784  0849               	movf	___fttol@f1+2,w
  5650     0785  00CD               	movwf	??___fttol+2
  5651     0786  1003               	clrc
  5652     0787  0D4C               	rlf	??___fttol+1,w
  5653     0788  0D4D               	rlf	??___fttol+2,w
  5654     0789  00D3               	movwf	___fttol@exp1
  5655     078A  0853               	movf	___fttol@exp1,w
  5656     078B  1D03               	btfss	3,2
  5657     078C  2F96               	goto	l2346
  5658     078D                     l2342:
  5659     078D  3000               	movlw	0
  5660     078E  00CA               	movwf	?___fttol+3
  5661     078F  3000               	movlw	0
  5662     0790  00C9               	movwf	?___fttol+2
  5663     0791  3000               	movlw	0
  5664     0792  00C8               	movwf	?___fttol+1
  5665     0793  3000               	movlw	0
  5666     0794  00C7               	movwf	?___fttol
  5667     0795  0008               	return
  5668     0796                     l2346:
  5669     0796  0847               	movf	___fttol@f1,w
  5670     0797  00CB               	movwf	??___fttol
  5671     0798  0848               	movf	___fttol@f1+1,w
  5672     0799  00CC               	movwf	??___fttol+1
  5673     079A  0849               	movf	___fttol@f1+2,w
  5674     079B  00CD               	movwf	??___fttol+2
  5675     079C  3017               	movlw	23
  5676     079D                     u3035:
  5677     079D  1003               	clrc
  5678     079E  0CCD               	rrf	??___fttol+2,f
  5679     079F  0CCC               	rrf	??___fttol+1,f
  5680     07A0  0CCB               	rrf	??___fttol,f
  5681     07A1  3EFF               	addlw	-1
  5682     07A2  1D03               	skipz
  5683     07A3  2F9D               	goto	u3035
  5684     07A4  084B               	movf	??___fttol,w
  5685     07A5  00CE               	movwf	___fttol@sign1
  5686     07A6  17C8               	bsf	___fttol@f1+1,7
  5687     07A7  30FF               	movlw	255
  5688     07A8  05C7               	andwf	___fttol@f1,f
  5689     07A9  30FF               	movlw	255
  5690     07AA  05C8               	andwf	___fttol@f1+1,f
  5691     07AB  3000               	movlw	0
  5692     07AC  05C9               	andwf	___fttol@f1+2,f
  5693     07AD  0847               	movf	___fttol@f1,w
  5694     07AE  00CF               	movwf	___fttol@lval
  5695     07AF  0848               	movf	___fttol@f1+1,w
  5696     07B0  00D0               	movwf	___fttol@lval+1
  5697     07B1  0849               	movf	___fttol@f1+2,w
  5698     07B2  00D1               	movwf	___fttol@lval+2
  5699     07B3  01D2               	clrf	___fttol@lval+3
  5700     07B4  308E               	movlw	142
  5701     07B5  02D3               	subwf	___fttol@exp1,f
  5702     07B6  1FD3               	btfss	___fttol@exp1,7
  5703     07B7  2FCD               	goto	l2368
  5704     07B8  0853               	movf	___fttol@exp1,w
  5705     07B9  3A80               	xorlw	128
  5706     07BA  3E8F               	addlw	143
  5707     07BB  1C03               	btfss	3,0
  5708     07BC  2F8D               	goto	l2342
  5709     07BD                     l2364:
  5710     07BD  3001               	movlw	1
  5711     07BE                     u3065:
  5712     07BE  1003               	clrc
  5713     07BF  0CD2               	rrf	___fttol@lval+3,f
  5714     07C0  0CD1               	rrf	___fttol@lval+2,f
  5715     07C1  0CD0               	rrf	___fttol@lval+1,f
  5716     07C2  0CCF               	rrf	___fttol@lval,f
  5717     07C3  3EFF               	addlw	-1
  5718     07C4  1D03               	skipz
  5719     07C5  2FBE               	goto	u3065
  5720     07C6  3001               	movlw	1
  5721     07C7  00FF               	movwf	127
  5722     07C8  087F               	movf	127,w
  5723     07C9  07D3               	addwf	___fttol@exp1,f
  5724     07CA  1903               	btfsc	3,2
  5725     07CB  2FE0               	goto	l2376
  5726     07CC  2FBD               	goto	l2364
  5727     07CD                     l2368:
  5728     07CD  3018               	movlw	24
  5729     07CE  0253               	subwf	___fttol@exp1,w
  5730     07CF  1803               	btfsc	3,0
  5731     07D0  2F8D               	goto	l2342
  5732     07D1                     l684:
  5733     07D1  0853               	movf	___fttol@exp1,w
  5734     07D2  1903               	btfsc	3,2
  5735     07D3  2FE0               	goto	l2376
  5736     07D4  3001               	movlw	1
  5737     07D5  00CB               	movwf	??___fttol
  5738     07D6                     u3095:
  5739     07D6  1003               	clrc
  5740     07D7  0DCF               	rlf	___fttol@lval,f
  5741     07D8  0DD0               	rlf	___fttol@lval+1,f
  5742     07D9  0DD1               	rlf	___fttol@lval+2,f
  5743     07DA  0DD2               	rlf	___fttol@lval+3,f
  5744     07DB  0BCB               	decfsz	??___fttol,f
  5745     07DC  2FD6               	goto	u3095
  5746     07DD  3001               	movlw	1
  5747     07DE  02D3               	subwf	___fttol@exp1,f
  5748     07DF  2FD1               	goto	l684
  5749     07E0                     l2376:
  5750     07E0  084E               	movf	___fttol@sign1,w
  5751     07E1  1903               	btfsc	3,2
  5752     07E2  2FEE               	goto	l2380
  5753     07E3  09CF               	comf	___fttol@lval,f
  5754     07E4  09D0               	comf	___fttol@lval+1,f
  5755     07E5  09D1               	comf	___fttol@lval+2,f
  5756     07E6  09D2               	comf	___fttol@lval+3,f
  5757     07E7  0ACF               	incf	___fttol@lval,f
  5758     07E8  1903               	skipnz
  5759     07E9  0AD0               	incf	___fttol@lval+1,f
  5760     07EA  1903               	skipnz
  5761     07EB  0AD1               	incf	___fttol@lval+2,f
  5762     07EC  1903               	skipnz
  5763     07ED  0AD2               	incf	___fttol@lval+3,f
  5764     07EE                     l2380:
  5765     07EE  0852               	movf	___fttol@lval+3,w
  5766     07EF  00CA               	movwf	?___fttol+3
  5767     07F0  0851               	movf	___fttol@lval+2,w
  5768     07F1  00C9               	movwf	?___fttol+2
  5769     07F2  0850               	movf	___fttol@lval+1,w
  5770     07F3  00C8               	movwf	?___fttol+1
  5771     07F4  084F               	movf	___fttol@lval,w
  5772     07F5  00C7               	movwf	?___fttol
  5773     07F6  0008               	return
  5774     07F7                     __end_of___fttol:
  5775                           
  5776                           	psect	text21
  5777     173C                     __ptext21:	
  5778 ;; *************** function ___ftsub *****************
  5779 ;; Defined at:
  5780 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftsub.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  f2              3   54[BANK0 ] float 
  5783 ;;  f1              3   57[BANK0 ] float 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  3   54[BANK0 ] float 
  5788 ;; Registers used:
  5789 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 300/0
  5792 ;;		On exit  : 300/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5795 ;;      Params:         0       6       0       0       0
  5796 ;;      Locals:         0       0       0       0       0
  5797 ;;      Temps:          0       0       0       0       0
  5798 ;;      Totals:         0       6       0       0       0
  5799 ;;Total ram usage:        6 bytes
  5800 ;; Hardware stack levels used: 1
  5801 ;; Hardware stack levels required when called: 3
  5802 ;; This function calls:
  5803 ;;		___ftadd
  5804 ;; This function is called by:
  5805 ;;		_sprintf
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809     173C                     ___ftsub:	
  5810                           ;psect for function ___ftsub
  5811                           
  5812                           
  5813                           ;incstack = 0
  5814                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5815     173C  0858               	movf	___ftsub@f2+2,w
  5816     173D  0457               	iorwf	___ftsub@f2+1,w
  5817     173E  0456               	iorwf	___ftsub@f2,w
  5818     173F  1903               	skipnz
  5819     1740  2F43               	goto	l2336
  5820     1741  3080               	movlw	128
  5821     1742  06D8               	xorwf	___ftsub@f2+2,f
  5822     1743                     l2336:
  5823     1743  0859               	movf	___ftsub@f1,w
  5824     1744  00CA               	movwf	___ftadd@f1
  5825     1745  085A               	movf	___ftsub@f1+1,w
  5826     1746  00CB               	movwf	___ftadd@f1+1
  5827     1747  085B               	movf	___ftsub@f1+2,w
  5828     1748  00CC               	movwf	___ftadd@f1+2
  5829     1749  0856               	movf	___ftsub@f2,w
  5830     174A  00CD               	movwf	___ftadd@f2
  5831     174B  0857               	movf	___ftsub@f2+1,w
  5832     174C  00CE               	movwf	___ftadd@f2+1
  5833     174D  0858               	movf	___ftsub@f2+2,w
  5834     174E  00CF               	movwf	___ftadd@f2+2
  5835     174F  120A  158A  24B3   	fcall	___ftadd
  5836     1752  084A               	movf	?___ftadd,w
  5837     1753  00D6               	movwf	?___ftsub
  5838     1754  084B               	movf	?___ftadd+1,w
  5839     1755  00D7               	movwf	?___ftsub+1
  5840     1756  084C               	movf	?___ftadd+2,w
  5841     1757  00D8               	movwf	?___ftsub+2
  5842     1758  0008               	return
  5843     1759                     __end_of___ftsub:
  5844                           
  5845                           	psect	text22
  5846     0CB3                     __ptext22:	
  5847 ;; *************** function ___ftadd *****************
  5848 ;; Defined at:
  5849 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftadd.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;  f1              3   42[BANK0 ] float 
  5852 ;;  f2              3   45[BANK0 ] float 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  exp1            1   53[BANK0 ] unsigned char 
  5855 ;;  exp2            1   52[BANK0 ] unsigned char 
  5856 ;;  sign            1   51[BANK0 ] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  3   42[BANK0 ] float 
  5859 ;; Registers used:
  5860 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 300/0
  5863 ;;		On exit  : 300/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5866 ;;      Params:         0       6       0       0       0
  5867 ;;      Locals:         0       3       0       0       0
  5868 ;;      Temps:          0       3       0       0       0
  5869 ;;      Totals:         0      12       0       0       0
  5870 ;;Total ram usage:       12 bytes
  5871 ;; Hardware stack levels used: 1
  5872 ;; Hardware stack levels required when called: 2
  5873 ;; This function calls:
  5874 ;;		___ftpack
  5875 ;; This function is called by:
  5876 ;;		_sprintf
  5877 ;;		___ftsub
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881     0CB3                     ___ftadd:	
  5882                           ;psect for function ___ftadd
  5883                           
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5887     0CB3  084A               	movf	___ftadd@f1,w
  5888     0CB4  00D0               	movwf	??___ftadd
  5889     0CB5  084B               	movf	___ftadd@f1+1,w
  5890     0CB6  00D1               	movwf	??___ftadd+1
  5891     0CB7  084C               	movf	___ftadd@f1+2,w
  5892     0CB8  00D2               	movwf	??___ftadd+2
  5893     0CB9  1003               	clrc
  5894     0CBA  0D51               	rlf	??___ftadd+1,w
  5895     0CBB  0D52               	rlf	??___ftadd+2,w
  5896     0CBC  00D5               	movwf	___ftadd@exp1
  5897     0CBD  084D               	movf	___ftadd@f2,w
  5898     0CBE  00D0               	movwf	??___ftadd
  5899     0CBF  084E               	movf	___ftadd@f2+1,w
  5900     0CC0  00D1               	movwf	??___ftadd+1
  5901     0CC1  084F               	movf	___ftadd@f2+2,w
  5902     0CC2  00D2               	movwf	??___ftadd+2
  5903     0CC3  1003               	clrc
  5904     0CC4  0D51               	rlf	??___ftadd+1,w
  5905     0CC5  0D52               	rlf	??___ftadd+2,w
  5906     0CC6  00D4               	movwf	___ftadd@exp2
  5907     0CC7  0855               	movf	___ftadd@exp1,w
  5908     0CC8  1903               	btfsc	3,2
  5909     0CC9  2CD6               	goto	l1920
  5910     0CCA  0854               	movf	___ftadd@exp2,w
  5911     0CCB  0255               	subwf	___ftadd@exp1,w
  5912     0CCC  1803               	skipnc
  5913     0CCD  2CDD               	goto	l1924
  5914     0CCE  0854               	movf	___ftadd@exp2,w
  5915     0CCF  00D0               	movwf	??___ftadd
  5916     0CD0  0855               	movf	___ftadd@exp1,w
  5917     0CD1  02D0               	subwf	??___ftadd,f
  5918     0CD2  3019               	movlw	25
  5919     0CD3  0250               	subwf	??___ftadd,w
  5920     0CD4  1C03               	skipc
  5921     0CD5  2CDD               	goto	l1924
  5922     0CD6                     l1920:
  5923     0CD6  084D               	movf	___ftadd@f2,w
  5924     0CD7  00CA               	movwf	?___ftadd
  5925     0CD8  084E               	movf	___ftadd@f2+1,w
  5926     0CD9  00CB               	movwf	?___ftadd+1
  5927     0CDA  084F               	movf	___ftadd@f2+2,w
  5928     0CDB  00CC               	movwf	?___ftadd+2
  5929     0CDC  0008               	return
  5930     0CDD                     l1924:
  5931     0CDD  0854               	movf	___ftadd@exp2,w
  5932     0CDE  1903               	btfsc	3,2
  5933     0CDF  0008               	return
  5934     0CE0  0855               	movf	___ftadd@exp1,w
  5935     0CE1  0254               	subwf	___ftadd@exp2,w
  5936     0CE2  1803               	skipnc
  5937     0CE3  2CEC               	goto	l1930
  5938     0CE4  0855               	movf	___ftadd@exp1,w
  5939     0CE5  00D0               	movwf	??___ftadd
  5940     0CE6  0854               	movf	___ftadd@exp2,w
  5941     0CE7  02D0               	subwf	??___ftadd,f
  5942     0CE8  3019               	movlw	25
  5943     0CE9  0250               	subwf	??___ftadd,w
  5944     0CEA  1803               	btfsc	3,0
  5945     0CEB  0008               	return
  5946     0CEC                     l1930:
  5947     0CEC  3006               	movlw	6
  5948     0CED  00D3               	movwf	___ftadd@sign
  5949     0CEE  1BCC               	btfsc	___ftadd@f1+2,7
  5950     0CEF  17D3               	bsf	___ftadd@sign,7
  5951     0CF0  1BCF               	btfsc	___ftadd@f2+2,7
  5952     0CF1  1753               	bsf	___ftadd@sign,6
  5953     0CF2  17CB               	bsf	___ftadd@f1+1,7
  5954     0CF3  30FF               	movlw	255
  5955     0CF4  05CA               	andwf	___ftadd@f1,f
  5956     0CF5  30FF               	movlw	255
  5957     0CF6  05CB               	andwf	___ftadd@f1+1,f
  5958     0CF7  3000               	movlw	0
  5959     0CF8  05CC               	andwf	___ftadd@f1+2,f
  5960     0CF9  17CE               	bsf	___ftadd@f2+1,7
  5961     0CFA  30FF               	movlw	255
  5962     0CFB  05CD               	andwf	___ftadd@f2,f
  5963     0CFC  30FF               	movlw	255
  5964     0CFD  05CE               	andwf	___ftadd@f2+1,f
  5965     0CFE  3000               	movlw	0
  5966     0CFF  05CF               	andwf	___ftadd@f2+2,f
  5967     0D00  0854               	movf	___ftadd@exp2,w
  5968     0D01  0255               	subwf	___ftadd@exp1,w
  5969     0D02  1803               	skipnc
  5970     0D03  2D2A               	goto	l1954
  5971     0D04                     l1942:
  5972     0D04  3001               	movlw	1
  5973     0D05                     u2195:
  5974     0D05  1003               	clrc
  5975     0D06  0DCD               	rlf	___ftadd@f2,f
  5976     0D07  0DCE               	rlf	___ftadd@f2+1,f
  5977     0D08  0DCF               	rlf	___ftadd@f2+2,f
  5978     0D09  3EFF               	addlw	-1
  5979     0D0A  1D03               	skipz
  5980     0D0B  2D05               	goto	u2195
  5981     0D0C  3001               	movlw	1
  5982     0D0D  02D4               	subwf	___ftadd@exp2,f
  5983     0D0E  0854               	movf	___ftadd@exp2,w
  5984     0D0F  0655               	xorwf	___ftadd@exp1,w
  5985     0D10  1903               	skipnz
  5986     0D11  2D25               	goto	l1952
  5987     0D12  3001               	movlw	1
  5988     0D13  02D3               	subwf	___ftadd@sign,f
  5989     0D14  0853               	movf	___ftadd@sign,w
  5990     0D15  3907               	andlw	7
  5991     0D16  1903               	btfsc	3,2
  5992     0D17  2D25               	goto	l1952
  5993     0D18  2D04               	goto	l1942
  5994     0D19                     l1948:
  5995     0D19  3001               	movlw	1
  5996     0D1A                     u2225:
  5997     0D1A  1003               	clrc
  5998     0D1B  0CCC               	rrf	___ftadd@f1+2,f
  5999     0D1C  0CCB               	rrf	___ftadd@f1+1,f
  6000     0D1D  0CCA               	rrf	___ftadd@f1,f
  6001     0D1E  3EFF               	addlw	-1
  6002     0D1F  1D03               	skipz
  6003     0D20  2D1A               	goto	u2225
  6004     0D21  3001               	movlw	1
  6005     0D22  00FF               	movwf	127
  6006     0D23  087F               	movf	127,w
  6007     0D24  07D5               	addwf	___ftadd@exp1,f
  6008     0D25                     l1952:
  6009     0D25  0855               	movf	___ftadd@exp1,w
  6010     0D26  0654               	xorwf	___ftadd@exp2,w
  6011     0D27  1903               	btfsc	3,2
  6012     0D28  2D53               	goto	l607
  6013     0D29  2D19               	goto	l1948
  6014     0D2A                     l1954:
  6015     0D2A  0855               	movf	___ftadd@exp1,w
  6016     0D2B  0254               	subwf	___ftadd@exp2,w
  6017     0D2C  1803               	skipnc
  6018     0D2D  2D53               	goto	l607
  6019     0D2E                     l1956:
  6020     0D2E  3001               	movlw	1
  6021     0D2F                     u2255:
  6022     0D2F  1003               	clrc
  6023     0D30  0DCA               	rlf	___ftadd@f1,f
  6024     0D31  0DCB               	rlf	___ftadd@f1+1,f
  6025     0D32  0DCC               	rlf	___ftadd@f1+2,f
  6026     0D33  3EFF               	addlw	-1
  6027     0D34  1D03               	skipz
  6028     0D35  2D2F               	goto	u2255
  6029     0D36  3001               	movlw	1
  6030     0D37  02D5               	subwf	___ftadd@exp1,f
  6031     0D38  0854               	movf	___ftadd@exp2,w
  6032     0D39  0655               	xorwf	___ftadd@exp1,w
  6033     0D3A  1903               	skipnz
  6034     0D3B  2D4F               	goto	l1966
  6035     0D3C  3001               	movlw	1
  6036     0D3D  02D3               	subwf	___ftadd@sign,f
  6037     0D3E  0853               	movf	___ftadd@sign,w
  6038     0D3F  3907               	andlw	7
  6039     0D40  1903               	btfsc	3,2
  6040     0D41  2D4F               	goto	l1966
  6041     0D42  2D2E               	goto	l1956
  6042     0D43                     l1962:
  6043     0D43  3001               	movlw	1
  6044     0D44                     u2285:
  6045     0D44  1003               	clrc
  6046     0D45  0CCF               	rrf	___ftadd@f2+2,f
  6047     0D46  0CCE               	rrf	___ftadd@f2+1,f
  6048     0D47  0CCD               	rrf	___ftadd@f2,f
  6049     0D48  3EFF               	addlw	-1
  6050     0D49  1D03               	skipz
  6051     0D4A  2D44               	goto	u2285
  6052     0D4B  3001               	movlw	1
  6053     0D4C  00FF               	movwf	127
  6054     0D4D  087F               	movf	127,w
  6055     0D4E  07D4               	addwf	___ftadd@exp2,f
  6056     0D4F                     l1966:
  6057     0D4F  0855               	movf	___ftadd@exp1,w
  6058     0D50  0654               	xorwf	___ftadd@exp2,w
  6059     0D51  1D03               	skipz
  6060     0D52  2D43               	goto	l1962
  6061     0D53                     l607:
  6062     0D53  1FD3               	btfss	___ftadd@sign,7
  6063     0D54  2D65               	goto	l1970
  6064     0D55  30FF               	movlw	255
  6065     0D56  06CA               	xorwf	___ftadd@f1,f
  6066     0D57  30FF               	movlw	255
  6067     0D58  06CB               	xorwf	___ftadd@f1+1,f
  6068     0D59  30FF               	movlw	255
  6069     0D5A  06CC               	xorwf	___ftadd@f1+2,f
  6070     0D5B  3001               	movlw	1
  6071     0D5C  07CA               	addwf	___ftadd@f1,f
  6072     0D5D  3000               	movlw	0
  6073     0D5E  1803               	skipnc
  6074     0D5F  3001               	movlw	1
  6075     0D60  07CB               	addwf	___ftadd@f1+1,f
  6076     0D61  3000               	movlw	0
  6077     0D62  1803               	skipnc
  6078     0D63  3001               	movlw	1
  6079     0D64  07CC               	addwf	___ftadd@f1+2,f
  6080     0D65                     l1970:
  6081     0D65  1F53               	btfss	___ftadd@sign,6
  6082     0D66  2D77               	goto	l1974
  6083     0D67  30FF               	movlw	255
  6084     0D68  06CD               	xorwf	___ftadd@f2,f
  6085     0D69  30FF               	movlw	255
  6086     0D6A  06CE               	xorwf	___ftadd@f2+1,f
  6087     0D6B  30FF               	movlw	255
  6088     0D6C  06CF               	xorwf	___ftadd@f2+2,f
  6089     0D6D  3001               	movlw	1
  6090     0D6E  07CD               	addwf	___ftadd@f2,f
  6091     0D6F  3000               	movlw	0
  6092     0D70  1803               	skipnc
  6093     0D71  3001               	movlw	1
  6094     0D72  07CE               	addwf	___ftadd@f2+1,f
  6095     0D73  3000               	movlw	0
  6096     0D74  1803               	skipnc
  6097     0D75  3001               	movlw	1
  6098     0D76  07CF               	addwf	___ftadd@f2+2,f
  6099     0D77                     l1974:
  6100     0D77  01D3               	clrf	___ftadd@sign
  6101     0D78  084A               	movf	___ftadd@f1,w
  6102     0D79  07CD               	addwf	___ftadd@f2,f
  6103     0D7A  084B               	movf	___ftadd@f1+1,w
  6104     0D7B  1103               	clrz
  6105     0D7C  1803               	skipnc
  6106     0D7D  0A4B               	incf	___ftadd@f1+1,w
  6107     0D7E  1D03               	btfss	3,2
  6108     0D7F  07CE               	addwf	___ftadd@f2+1,f
  6109     0D80  084C               	movf	___ftadd@f1+2,w
  6110     0D81  1103               	clrz
  6111     0D82  1803               	skipnc
  6112     0D83  0A4C               	incf	___ftadd@f1+2,w
  6113     0D84  1D03               	btfss	3,2
  6114     0D85  07CF               	addwf	___ftadd@f2+2,f
  6115     0D86  1FCF               	btfss	___ftadd@f2+2,7
  6116     0D87  2D9A               	goto	l1984
  6117     0D88  30FF               	movlw	255
  6118     0D89  06CD               	xorwf	___ftadd@f2,f
  6119     0D8A  30FF               	movlw	255
  6120     0D8B  06CE               	xorwf	___ftadd@f2+1,f
  6121     0D8C  30FF               	movlw	255
  6122     0D8D  06CF               	xorwf	___ftadd@f2+2,f
  6123     0D8E  3001               	movlw	1
  6124     0D8F  07CD               	addwf	___ftadd@f2,f
  6125     0D90  3000               	movlw	0
  6126     0D91  1803               	skipnc
  6127     0D92  3001               	movlw	1
  6128     0D93  07CE               	addwf	___ftadd@f2+1,f
  6129     0D94  3000               	movlw	0
  6130     0D95  1803               	skipnc
  6131     0D96  3001               	movlw	1
  6132     0D97  07CF               	addwf	___ftadd@f2+2,f
  6133     0D98  01D3               	clrf	___ftadd@sign
  6134     0D99  0AD3               	incf	___ftadd@sign,f
  6135     0D9A                     l1984:
  6136     0D9A  084D               	movf	___ftadd@f2,w
  6137     0D9B  00A0               	movwf	___ftpack@arg
  6138     0D9C  084E               	movf	___ftadd@f2+1,w
  6139     0D9D  00A1               	movwf	___ftpack@arg+1
  6140     0D9E  084F               	movf	___ftadd@f2+2,w
  6141     0D9F  00A2               	movwf	___ftpack@arg+2
  6142     0DA0  0855               	movf	___ftadd@exp1,w
  6143     0DA1  00A3               	movwf	___ftpack@exp
  6144     0DA2  0853               	movf	___ftadd@sign,w
  6145     0DA3  00A4               	movwf	___ftpack@sign
  6146     0DA4  120A  158A  225F   	fcall	___ftpack
  6147     0DA7  0820               	movf	?___ftpack,w
  6148     0DA8  00CA               	movwf	?___ftadd
  6149     0DA9  0821               	movf	?___ftpack+1,w
  6150     0DAA  00CB               	movwf	?___ftadd+1
  6151     0DAB  0822               	movf	?___ftpack+2,w
  6152     0DAC  00CC               	movwf	?___ftadd+2
  6153     0DAD  0008               	return
  6154     0DAE                     __end_of___ftadd:
  6155                           
  6156                           	psect	text23
  6157     169D                     __ptext23:	
  6158 ;; *************** function ___ftneg *****************
  6159 ;; Defined at:
  6160 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftneg.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  f1              3    0[BANK0 ] float 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;		None
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  3    0[BANK0 ] float 
  6167 ;; Registers used:
  6168 ;;		wreg
  6169 ;; Tracked objects:
  6170 ;;		On entry : 300/0
  6171 ;;		On exit  : 300/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6174 ;;      Params:         0       3       0       0       0
  6175 ;;      Locals:         0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0
  6177 ;;      Totals:         0       3       0       0       0
  6178 ;;Total ram usage:        3 bytes
  6179 ;; Hardware stack levels used: 1
  6180 ;; Hardware stack levels required when called: 1
  6181 ;; This function calls:
  6182 ;;		Nothing
  6183 ;; This function is called by:
  6184 ;;		_sprintf
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188     169D                     ___ftneg:	
  6189                           ;psect for function ___ftneg
  6190                           
  6191                           
  6192                           ;incstack = 0
  6193                           ; Regs used in ___ftneg: [wreg]
  6194     169D  0822               	movf	___ftneg@f1+2,w
  6195     169E  0421               	iorwf	___ftneg@f1+1,w
  6196     169F  0420               	iorwf	___ftneg@f1,w
  6197     16A0  1903               	skipnz
  6198     16A1  0008               	return
  6199     16A2  3080               	movlw	128
  6200     16A3  06A2               	xorwf	___ftneg@f1+2,f
  6201     16A4  0008               	return
  6202     16A5                     __end_of___ftneg:
  6203                           
  6204                           	psect	text24
  6205     08AC                     __ptext24:	
  6206 ;; *************** function ___ftge *****************
  6207 ;; Defined at:
  6208 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftge.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  ff1             3    0[BANK0 ] float 
  6211 ;;  ff2             3    3[BANK0 ] float 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;		None
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0
  6218 ;; Tracked objects:
  6219 ;;		On entry : 300/0
  6220 ;;		On exit  : 300/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6223 ;;      Params:         0       6       0       0       0
  6224 ;;      Locals:         0       0       0       0       0
  6225 ;;      Temps:          0       0       0       0       0
  6226 ;;      Totals:         0       6       0       0       0
  6227 ;;Total ram usage:        6 bytes
  6228 ;; Hardware stack levels used: 1
  6229 ;; Hardware stack levels required when called: 1
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_sprintf
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237     08AC                     ___ftge:	
  6238                           ;psect for function ___ftge
  6239                           
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6243     08AC  1FA2               	btfss	___ftge@ff1+2,7
  6244     08AD  28BB               	goto	l2308
  6245     08AE  0820               	movf	___ftge@ff1,w
  6246     08AF  3C00               	sublw	0
  6247     08B0  00A0               	movwf	___ftge@ff1
  6248     08B1  0821               	movf	___ftge@ff1+1,w
  6249     08B2  1C03               	skipc
  6250     08B3  0F21               	incfsz	___ftge@ff1+1,w
  6251     08B4  3C00               	sublw	0
  6252     08B5  00A1               	movwf	___ftge@ff1+1
  6253     08B6  0822               	movf	___ftge@ff1+2,w
  6254     08B7  1C03               	skipc
  6255     08B8  0F22               	incfsz	___ftge@ff1+2,w
  6256     08B9  3C80               	sublw	128
  6257     08BA  00A2               	movwf	___ftge@ff1+2
  6258     08BB                     l2308:
  6259     08BB  1FA5               	btfss	___ftge@ff2+2,7
  6260     08BC  28CA               	goto	l2312
  6261     08BD  0823               	movf	___ftge@ff2,w
  6262     08BE  3C00               	sublw	0
  6263     08BF  00A3               	movwf	___ftge@ff2
  6264     08C0  0824               	movf	___ftge@ff2+1,w
  6265     08C1  1C03               	skipc
  6266     08C2  0F24               	incfsz	___ftge@ff2+1,w
  6267     08C3  3C00               	sublw	0
  6268     08C4  00A4               	movwf	___ftge@ff2+1
  6269     08C5  0825               	movf	___ftge@ff2+2,w
  6270     08C6  1C03               	skipc
  6271     08C7  0F25               	incfsz	___ftge@ff2+2,w
  6272     08C8  3C80               	sublw	128
  6273     08C9  00A5               	movwf	___ftge@ff2+2
  6274     08CA                     l2312:
  6275     08CA  3080               	movlw	128
  6276     08CB  06A2               	xorwf	___ftge@ff1+2,f
  6277     08CC  3080               	movlw	128
  6278     08CD  06A5               	xorwf	___ftge@ff2+2,f
  6279     08CE  0825               	movf	___ftge@ff2+2,w
  6280     08CF  0222               	subwf	___ftge@ff1+2,w
  6281     08D0  1D03               	skipz
  6282     08D1  0008               	return
  6283     08D2  0824               	movf	___ftge@ff2+1,w
  6284     08D3  0221               	subwf	___ftge@ff1+1,w
  6285     08D4  1D03               	skipz
  6286     08D5  0008               	return
  6287     08D6  0823               	movf	___ftge@ff2,w
  6288     08D7  0220               	subwf	___ftge@ff1,w
  6289     08D8  0008               	return
  6290     08D9                     __end_of___ftge:
  6291                           
  6292                           	psect	text25
  6293     16BA                     __ptext25:	
  6294 ;; *************** function _init_inttimer *****************
  6295 ;; Defined at:
  6296 ;;		line 4 in file "inttimer.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2, status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 300/0
  6307 ;;		On exit  : 300/100
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6310 ;;      Params:         0       0       0       0       0
  6311 ;;      Locals:         0       0       0       0       0
  6312 ;;      Temps:          0       0       0       0       0
  6313 ;;      Totals:         0       0       0       0       0
  6314 ;;Total ram usage:        0 bytes
  6315 ;; Hardware stack levels used: 1
  6316 ;; Hardware stack levels required when called: 1
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324     16BA                     _init_inttimer:	
  6325                           ;psect for function _init_inttimer
  6326                           
  6327                           
  6328                           ;inttimer.c: 6: T1CONbits.TMR1CS = 0;
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _init_inttimer: [wreg+status,2+status,0]
  6332     16BA  1090               	bcf	16,1	;volatile
  6333                           
  6334                           ;inttimer.c: 7: T1CONbits.T1CKPS = 0b00;
  6335     16BB  30CF               	movlw	-49
  6336     16BC  0590               	andwf	16,f	;volatile
  6337                           
  6338                           ;inttimer.c: 8: T1CONbits.T1SYNC = 0;
  6339     16BD  1110               	bcf	16,2	;volatile
  6340                           
  6341                           ;inttimer.c: 9: TMR1H = 0xFF;
  6342     16BE  30FF               	movlw	255
  6343     16BF  008F               	movwf	15	;volatile
  6344                           
  6345                           ;inttimer.c: 10: TMR1L = 0xE7;
  6346     16C0  30E7               	movlw	231
  6347     16C1  008E               	movwf	14	;volatile
  6348                           
  6349                           ;inttimer.c: 13: PIR1bits.ADIF = 0;
  6350     16C2  130C               	bcf	12,6	;volatile
  6351                           
  6352                           ;inttimer.c: 14: PIE1bits.ADIE = 1;
  6353     16C3  1683               	bsf	3,5	;RP0=1, select bank1
  6354     16C4  170C               	bsf	12,6	;volatile
  6355                           
  6356                           ;inttimer.c: 15: INTCONbits.PEIE = 1;
  6357     16C5  170B               	bsf	11,6	;volatile
  6358                           
  6359                           ;inttimer.c: 16: INTCONbits.GIE = 1;
  6360     16C6  178B               	bsf	11,7	;volatile
  6361     16C7  0008               	return
  6362     16C8                     __end_of_init_inttimer:
  6363                           
  6364                           	psect	text26
  6365     17DC                     __ptext26:	
  6366 ;; *************** function _init_ADC *****************
  6367 ;; Defined at:
  6368 ;;		line 3 in file "adc.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0, pclath, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : B00/300
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6382 ;;      Params:         0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0
  6384 ;;      Temps:          0       3       0       0       0
  6385 ;;      Totals:         0       3       0       0       0
  6386 ;;Total ram usage:        3 bytes
  6387 ;; Hardware stack levels used: 1
  6388 ;; Hardware stack levels required when called: 2
  6389 ;; This function calls:
  6390 ;;		_set_CHANNEL
  6391 ;; This function is called by:
  6392 ;;		_main
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396     17DC                     _init_ADC:	
  6397                           ;psect for function _init_ADC
  6398                           
  6399                           
  6400                           ;adc.c: 7: TRISAbits.TRISA0 = 1;
  6401                           
  6402                           ;incstack = 0
  6403                           ; Regs used in _init_ADC: [wreg+status,2+status,0+pclath+cstack]
  6404     17DC  1303               	bcf	3,6	;RP1=0, select bank1
  6405     17DD  1405               	bsf	5,0	;volatile
  6406                           
  6407                           ;adc.c: 8: ANSELbits.ANS0 = 1;
  6408     17DE  1703               	bsf	3,6	;RP1=1, select bank3
  6409     17DF  1408               	bsf	8,0	;volatile
  6410                           
  6411                           ;adc.c: 9: set_CHANNEL(0);
  6412     17E0  3000               	movlw	0
  6413     17E1  160A  118A  26AD  160A  118A  	fcall	_set_CHANNEL
  6414                           
  6415                           ;adc.c: 10: ADCON0bits.ADCS = 0b001;
  6416     17E6  081F               	movf	31,w	;volatile
  6417     17E7  393F               	andlw	-193
  6418     17E8  3840               	iorlw	64
  6419     17E9  009F               	movwf	31	;volatile
  6420                           
  6421                           ;adc.c: 11: ADCON1bits.ADFM = 1;
  6422     17EA  1683               	bsf	3,5	;RP0=1, select bank1
  6423     17EB  179F               	bsf	31,7	;volatile
  6424                           
  6425                           ;adc.c: 12: ADCON1bits.VCFG1 = 0;
  6426     17EC  129F               	bcf	31,5	;volatile
  6427                           
  6428                           ;adc.c: 13: ADCON1bits.VCFG0 = 0;
  6429     17ED  121F               	bcf	31,4	;volatile
  6430                           
  6431                           ;adc.c: 14: ADCON0bits.ADON = 1;
  6432     17EE  1283               	bcf	3,5	;RP0=0, select bank0
  6433     17EF  141F               	bsf	31,0	;volatile
  6434                           
  6435                           ;adc.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  6436     17F0  3002               	movlw	2
  6437     17F1  1283               	bcf	3,5	;RP0=0, select bank0
  6438     17F2  1303               	bcf	3,6	;RP1=0, select bank0
  6439     17F3  00A4               	movwf	??_init_ADC+2
  6440     17F4  3004               	movlw	4
  6441     17F5  00A3               	movwf	??_init_ADC+1
  6442     17F6  30B9               	movlw	185
  6443     17F7  00A2               	movwf	??_init_ADC
  6444     17F8                     u3537:
  6445     17F8  0BA2               	decfsz	??_init_ADC,f
  6446     17F9  2FF8               	goto	u3537
  6447     17FA  0BA3               	decfsz	??_init_ADC+1,f
  6448     17FB  2FF8               	goto	u3537
  6449     17FC  0BA4               	decfsz	??_init_ADC+2,f
  6450     17FD  2FF8               	goto	u3537
  6451     17FE  2FFF               	nop2
  6452     17FF  0008               	return
  6453     1800                     __end_of_init_ADC:
  6454                           
  6455                           	psect	text27
  6456     16AD                     __ptext27:	
  6457 ;; *************** function _set_CHANNEL *****************
  6458 ;; Defined at:
  6459 ;;		line 19 in file "adc.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  channel         1    wreg     unsigned char 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  channel         1    1[BANK0 ] unsigned char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : B00/300
  6470 ;;		On exit  : B00/0
  6471 ;;		Unchanged: 800/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6473 ;;      Params:         0       0       0       0       0
  6474 ;;      Locals:         0       1       0       0       0
  6475 ;;      Temps:          0       1       0       0       0
  6476 ;;      Totals:         0       2       0       0       0
  6477 ;;Total ram usage:        2 bytes
  6478 ;; Hardware stack levels used: 1
  6479 ;; Hardware stack levels required when called: 1
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_init_ADC
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487     16AD                     _set_CHANNEL:	
  6488                           ;psect for function _set_CHANNEL
  6489                           
  6490                           
  6491                           ;incstack = 0
  6492                           ; Regs used in _set_CHANNEL: [wreg+status,2+status,0]
  6493                           ;set_CHANNEL@channel stored from wreg
  6494     16AD  1283               	bcf	3,5	;RP0=0, select bank0
  6495     16AE  1303               	bcf	3,6	;RP1=0, select bank0
  6496     16AF  00A1               	movwf	set_CHANNEL@channel
  6497                           
  6498                           ;adc.c: 22: {;adc.c: 23: ADCON0bits.CHS = channel;
  6499     16B0  0821               	movf	set_CHANNEL@channel,w
  6500     16B1  00A0               	movwf	??_set_CHANNEL
  6501     16B2  0DA0               	rlf	??_set_CHANNEL,f
  6502     16B3  0DA0               	rlf	??_set_CHANNEL,f
  6503     16B4  081F               	movf	31,w	;volatile
  6504     16B5  0620               	xorwf	??_set_CHANNEL,w
  6505     16B6  39C3               	andlw	-61
  6506     16B7  0620               	xorwf	??_set_CHANNEL,w
  6507     16B8  009F               	movwf	31	;volatile
  6508                           
  6509                           ;adc.c: 24: }else
  6510     16B9  0008               	return
  6511     16BA                     __end_of_set_CHANNEL:
  6512                           
  6513                           	psect	text28
  6514     1697                     __ptext28:	
  6515 ;; *************** function _config_HAL *****************
  6516 ;; Defined at:
  6517 ;;		line 73 in file "newmain.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		status,2
  6526 ;; Tracked objects:
  6527 ;;		On entry : B00/100
  6528 ;;		On exit  : B00/300
  6529 ;;		Unchanged: 800/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6531 ;;      Params:         0       0       0       0       0
  6532 ;;      Locals:         0       0       0       0       0
  6533 ;;      Temps:          0       0       0       0       0
  6534 ;;      Totals:         0       0       0       0       0
  6535 ;;Total ram usage:        0 bytes
  6536 ;; Hardware stack levels used: 1
  6537 ;; Hardware stack levels required when called: 1
  6538 ;; This function calls:
  6539 ;;		Nothing
  6540 ;; This function is called by:
  6541 ;;		_main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545     1697                     _config_HAL:	
  6546                           ;psect for function _config_HAL
  6547                           
  6548                           
  6549                           ;newmain.c: 75: TRISD = 0x00;
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _config_HAL: [status,2]
  6553     1697  0188               	clrf	8	;volatile
  6554                           
  6555                           ;newmain.c: 76: TRISE = 0x00;
  6556     1698  0189               	clrf	9	;volatile
  6557                           
  6558                           ;newmain.c: 77: ANSEL = 0x00;
  6559     1699  1703               	bsf	3,6	;RP1=1, select bank3
  6560     169A  0188               	clrf	8	;volatile
  6561                           
  6562                           ;newmain.c: 78: ANSELH = 0x00;
  6563     169B  0189               	clrf	9	;volatile
  6564     169C  0008               	return
  6565     169D                     __end_of_config_HAL:
  6566                           
  6567                           	psect	text29
  6568     16FA                     __ptext29:	
  6569 ;; *************** function ___lwtoft *****************
  6570 ;; Defined at:
  6571 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwtoft.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  c               2    8[BANK0 ] unsigned int 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  3    8[BANK0 ] float 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : B00/800
  6582 ;;		On exit  : 300/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6585 ;;      Params:         0       3       0       0       0
  6586 ;;      Locals:         0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0
  6588 ;;      Totals:         0       3       0       0       0
  6589 ;;Total ram usage:        3 bytes
  6590 ;; Hardware stack levels used: 1
  6591 ;; Hardware stack levels required when called: 2
  6592 ;; This function calls:
  6593 ;;		___ftpack
  6594 ;; This function is called by:
  6595 ;;		_main
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599     16FA                     ___lwtoft:	
  6600                           ;psect for function ___lwtoft
  6601                           
  6602                           
  6603                           ;incstack = 0
  6604                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6605     16FA  0828               	movf	___lwtoft@c,w
  6606     16FB  00A0               	movwf	___ftpack@arg
  6607     16FC  0829               	movf	___lwtoft@c+1,w
  6608     16FD  00A1               	movwf	___ftpack@arg+1
  6609     16FE  01A2               	clrf	___ftpack@arg+2
  6610     16FF  308E               	movlw	142
  6611     1700  00A3               	movwf	___ftpack@exp
  6612     1701  01A4               	clrf	___ftpack@sign
  6613     1702  120A  158A  225F   	fcall	___ftpack
  6614     1705  0820               	movf	?___ftpack,w
  6615     1706  00A8               	movwf	?___lwtoft
  6616     1707  0821               	movf	?___ftpack+1,w
  6617     1708  00A9               	movwf	?___lwtoft+1
  6618     1709  0822               	movf	?___ftpack+2,w
  6619     170A  00AA               	movwf	?___lwtoft+2
  6620     170B  0008               	return
  6621     170C                     __end_of___lwtoft:
  6622                           
  6623                           	psect	text30
  6624     0A5F                     __ptext30:	
  6625 ;; *************** function ___ftpack *****************
  6626 ;; Defined at:
  6627 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;  arg             3    0[BANK0 ] unsigned um
  6630 ;;  exp             1    3[BANK0 ] unsigned char 
  6631 ;;  sign            1    4[BANK0 ] unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  3    0[BANK0 ] float 
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0, btemp+1
  6638 ;; Tracked objects:
  6639 ;;		On entry : 300/800
  6640 ;;		On exit  : 300/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6643 ;;      Params:         0       5       0       0       0
  6644 ;;      Locals:         0       0       0       0       0
  6645 ;;      Temps:          0       3       0       0       0
  6646 ;;      Totals:         0       8       0       0       0
  6647 ;;Total ram usage:        8 bytes
  6648 ;; Hardware stack levels used: 1
  6649 ;; Hardware stack levels required when called: 1
  6650 ;; This function calls:
  6651 ;;		Nothing
  6652 ;; This function is called by:
  6653 ;;		___ftadd
  6654 ;;		___ftmul
  6655 ;;		___lltoft
  6656 ;;		___lwtoft
  6657 ;; This function uses a non-reentrant model
  6658 ;;
  6659                           
  6660     0A5F                     ___ftpack:	
  6661                           ;psect for function ___ftpack
  6662                           
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6666     0A5F  0823               	movf	___ftpack@exp,w
  6667     0A60  1903               	btfsc	3,2
  6668     0A61  2A67               	goto	l1784
  6669     0A62  0822               	movf	___ftpack@arg+2,w
  6670     0A63  0421               	iorwf	___ftpack@arg+1,w
  6671     0A64  0420               	iorwf	___ftpack@arg,w
  6672     0A65  1D03               	skipz
  6673     0A66  2A7A               	goto	l1792
  6674     0A67                     l1784:
  6675     0A67  3000               	movlw	0
  6676     0A68  00A0               	movwf	?___ftpack
  6677     0A69  3000               	movlw	0
  6678     0A6A  00A1               	movwf	?___ftpack+1
  6679     0A6B  3000               	movlw	0
  6680     0A6C  00A2               	movwf	?___ftpack+2
  6681     0A6D  0008               	return
  6682     0A6E                     l1788:
  6683     0A6E  3001               	movlw	1
  6684     0A6F  00FF               	movwf	127
  6685     0A70  087F               	movf	127,w
  6686     0A71  07A3               	addwf	___ftpack@exp,f
  6687     0A72  3001               	movlw	1
  6688     0A73                     u1795:
  6689     0A73  1003               	clrc
  6690     0A74  0CA2               	rrf	___ftpack@arg+2,f
  6691     0A75  0CA1               	rrf	___ftpack@arg+1,f
  6692     0A76  0CA0               	rrf	___ftpack@arg,f
  6693     0A77  3EFF               	addlw	-1
  6694     0A78  1D03               	skipz
  6695     0A79  2A73               	goto	u1795
  6696     0A7A                     l1792:
  6697     0A7A  30FE               	movlw	254
  6698     0A7B  0522               	andwf	___ftpack@arg+2,w
  6699     0A7C  1903               	btfsc	3,2
  6700     0A7D  2A95               	goto	l1800
  6701     0A7E  2A6E               	goto	l1788
  6702     0A7F                     l1794:
  6703     0A7F  3001               	movlw	1
  6704     0A80  00FF               	movwf	127
  6705     0A81  087F               	movf	127,w
  6706     0A82  07A3               	addwf	___ftpack@exp,f
  6707     0A83  3001               	movlw	1
  6708     0A84  07A0               	addwf	___ftpack@arg,f
  6709     0A85  3000               	movlw	0
  6710     0A86  1803               	skipnc
  6711     0A87  3001               	movlw	1
  6712     0A88  07A1               	addwf	___ftpack@arg+1,f
  6713     0A89  3000               	movlw	0
  6714     0A8A  1803               	skipnc
  6715     0A8B  3001               	movlw	1
  6716     0A8C  07A2               	addwf	___ftpack@arg+2,f
  6717     0A8D  3001               	movlw	1
  6718     0A8E                     u1815:
  6719     0A8E  1003               	clrc
  6720     0A8F  0CA2               	rrf	___ftpack@arg+2,f
  6721     0A90  0CA1               	rrf	___ftpack@arg+1,f
  6722     0A91  0CA0               	rrf	___ftpack@arg,f
  6723     0A92  3EFF               	addlw	-1
  6724     0A93  1D03               	skipz
  6725     0A94  2A8E               	goto	u1815
  6726     0A95                     l1800:
  6727     0A95  30FF               	movlw	255
  6728     0A96  0522               	andwf	___ftpack@arg+2,w
  6729     0A97  1903               	btfsc	3,2
  6730     0A98  2AA8               	goto	l1804
  6731     0A99  2A7F               	goto	l1794
  6732     0A9A                     l1806:
  6733     0A9A  3002               	movlw	2
  6734     0A9B  0223               	subwf	___ftpack@exp,w
  6735     0A9C  1C03               	btfss	3,0
  6736     0A9D  2AAA               	goto	l583
  6737     0A9E  3001               	movlw	1
  6738     0A9F  02A3               	subwf	___ftpack@exp,f
  6739     0AA0  3001               	movlw	1
  6740     0AA1                     u1835:
  6741     0AA1  1003               	clrc
  6742     0AA2  0DA0               	rlf	___ftpack@arg,f
  6743     0AA3  0DA1               	rlf	___ftpack@arg+1,f
  6744     0AA4  0DA2               	rlf	___ftpack@arg+2,f
  6745     0AA5  3EFF               	addlw	-1
  6746     0AA6  1D03               	skipz
  6747     0AA7  2AA1               	goto	u1835
  6748     0AA8                     l1804:
  6749     0AA8  1FA1               	btfss	___ftpack@arg+1,7
  6750     0AA9  2A9A               	goto	l1806
  6751     0AAA                     l583:
  6752     0AAA  1823               	btfsc	___ftpack@exp,0
  6753     0AAB  2AB2               	goto	l584
  6754     0AAC  30FF               	movlw	255
  6755     0AAD  05A0               	andwf	___ftpack@arg,f
  6756     0AAE  307F               	movlw	127
  6757     0AAF  05A1               	andwf	___ftpack@arg+1,f
  6758     0AB0  30FF               	movlw	255
  6759     0AB1  05A2               	andwf	___ftpack@arg+2,f
  6760     0AB2                     l584:
  6761     0AB2  1003               	clrc
  6762     0AB3  0CA3               	rrf	___ftpack@exp,f
  6763     0AB4  0823               	movf	___ftpack@exp,w
  6764     0AB5  00A5               	movwf	??___ftpack
  6765     0AB6  01A6               	clrf	??___ftpack+1
  6766     0AB7  01A7               	clrf	??___ftpack+2
  6767     0AB8  3010               	movlw	16
  6768     0AB9                     u1875:
  6769     0AB9  1003               	clrc
  6770     0ABA  0DA5               	rlf	??___ftpack,f
  6771     0ABB  0DA6               	rlf	??___ftpack+1,f
  6772     0ABC  0DA7               	rlf	??___ftpack+2,f
  6773     0ABD  3EFF               	addlw	-1
  6774     0ABE  1D03               	skipz
  6775     0ABF  2AB9               	goto	u1875
  6776     0AC0  0825               	movf	??___ftpack,w
  6777     0AC1  04A0               	iorwf	___ftpack@arg,f
  6778     0AC2  0826               	movf	??___ftpack+1,w
  6779     0AC3  04A1               	iorwf	___ftpack@arg+1,f
  6780     0AC4  0827               	movf	??___ftpack+2,w
  6781     0AC5  04A2               	iorwf	___ftpack@arg+2,f
  6782     0AC6  0824               	movf	___ftpack@sign,w
  6783     0AC7  1903               	btfsc	3,2
  6784     0AC8  0008               	return
  6785     0AC9  17A2               	bsf	___ftpack@arg+2,7
  6786     0ACA  0008               	return
  6787     0ACB                     __end_of___ftpack:
  6788                           
  6789                           	psect	text31
  6790     08D9                     __ptext31:	
  6791 ;; *************** function _TMR1_ISR *****************
  6792 ;; Defined at:
  6793 ;;		line 61 in file "newmain.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : B00/800
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6807 ;;      Params:         0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0
  6809 ;;      Temps:         13       0       0       0       0
  6810 ;;      Totals:        13       0       0       0       0
  6811 ;;Total ram usage:       13 bytes
  6812 ;; Hardware stack levels used: 1
  6813 ;; This function calls:
  6814 ;;		Nothing
  6815 ;; This function is called by:
  6816 ;;		Interrupt level 1
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820     08D9                     _TMR1_ISR:	
  6821                           ;psect for function _TMR1_ISR
  6822                           
  6823                           
  6824                           ;newmain.c: 62: PIR1bits.ADIF = 0;
  6825     08D9  1283               	bcf	3,5	;RP0=0, select bank0
  6826     08DA  1303               	bcf	3,6	;RP1=0, select bank0
  6827     08DB  130C               	bcf	12,6	;volatile
  6828                           
  6829                           ;newmain.c: 63: muestras[contador] = ((ADRESH << 8) & 0b1100000000) | ADRESL;
  6830     08DC  1683               	bsf	3,5	;RP0=1, select bank1
  6831     08DD  081E               	movf	30,w	;volatile
  6832     08DE  00F0               	movwf	??_TMR1_ISR
  6833     08DF  01F1               	clrf	??_TMR1_ISR+1
  6834     08E0  1283               	bcf	3,5	;RP0=0, select bank0
  6835     08E1  081E               	movf	30,w	;volatile
  6836     08E2  00F2               	movwf	??_TMR1_ISR+2
  6837     08E3  01F3               	clrf	??_TMR1_ISR+3
  6838     08E4  0872               	movf	??_TMR1_ISR+2,w
  6839     08E5  00F3               	movwf	??_TMR1_ISR+3
  6840     08E6  01F2               	clrf	??_TMR1_ISR+2
  6841     08E7  3000               	movlw	0
  6842     08E8  0572               	andwf	??_TMR1_ISR+2,w
  6843     08E9  00F4               	movwf	??_TMR1_ISR+4
  6844     08EA  3003               	movlw	3
  6845     08EB  0573               	andwf	??_TMR1_ISR+3,w
  6846     08EC  00F5               	movwf	??_TMR1_ISR+5
  6847     08ED  0870               	movf	??_TMR1_ISR,w
  6848     08EE  0474               	iorwf	??_TMR1_ISR+4,w
  6849     08EF  00F6               	movwf	??_TMR1_ISR+6
  6850     08F0  0871               	movf	??_TMR1_ISR+1,w
  6851     08F1  0475               	iorwf	??_TMR1_ISR+5,w
  6852     08F2  00F7               	movwf	??_TMR1_ISR+7
  6853     08F3  086C               	movf	_contador,w	;volatile
  6854     08F4  00F8               	movwf	??_TMR1_ISR+8
  6855     08F5  0778               	addwf	??_TMR1_ISR+8,w
  6856     08F6  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  6857     08F7  0084               	movwf	4
  6858     08F8  0876               	movf	??_TMR1_ISR+6,w
  6859     08F9  1783               	bsf	3,7	;select IRP bank3
  6860     08FA  0080               	movwf	0
  6861     08FB  0A84               	incf	4,f
  6862     08FC  0877               	movf	??_TMR1_ISR+7,w
  6863     08FD  0080               	movwf	0
  6864                           
  6865                           ;newmain.c: 65: contador++;
  6866     08FE  3001               	movlw	1
  6867     08FF  00FF               	movwf	127
  6868     0900  087F               	movf	127,w
  6869     0901  07EC               	addwf	_contador,f	;volatile
  6870                           
  6871                           ;newmain.c: 66: if (contador < 40) {
  6872     0902  3028               	movlw	40
  6873     0903  026C               	subwf	_contador,w	;volatile
  6874     0904  1C03               	btfss	3,0
  6875                           
  6876                           ;newmain.c: 67: ADCON0bits.GO = 1;
  6877     0905  149F               	bsf	31,1	;volatile
  6878     0906  087C               	movf	??_TMR1_ISR+12,w
  6879     0907  00FF               	movwf	127
  6880     0908  087B               	movf	??_TMR1_ISR+11,w
  6881     0909  008A               	movwf	10
  6882     090A  087A               	movf	??_TMR1_ISR+10,w
  6883     090B  0084               	movwf	4
  6884     090C  0E79               	swapf	??_TMR1_ISR+9,w
  6885     090D  0083               	movwf	3
  6886     090E  0EFE               	swapf	126,f
  6887     090F  0E7E               	swapf	126,w
  6888     0910  0009               	retfie
  6889     0911                     __end_of_TMR1_ISR:
  6890     007E                     btemp	set	126	;btemp
  6891     007E                     wtemp0	set	126
  6892                           
  6893                           	psect	intentry
  6894     0004                     __pintentry:	
  6895                           ;incstack = 0
  6896                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  6897                           
  6898     0004                     interrupt_function:
  6899     007E                     saved_w	set	btemp
  6900     0004  00FE               	movwf	btemp
  6901     0005  0E03               	swapf	3,w
  6902     0006  00F9               	movwf	??_TMR1_ISR+9
  6903     0007  0804               	movf	4,w
  6904     0008  00FA               	movwf	??_TMR1_ISR+10
  6905     0009  080A               	movf	10,w
  6906     000A  00FB               	movwf	??_TMR1_ISR+11
  6907     000B  087F               	movf	btemp+1,w
  6908     000C  00FC               	movwf	??_TMR1_ISR+12
  6909     000D  120A  158A  28D9   	ljmp	_TMR1_ISR
  6910                           
  6911                           	psect	config
  6912                           
  6913                           ;Config register CONFIG1 @ 0x2007
  6914                           ;	Oscillator Selection bits
  6915                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  6916                           ;	Watchdog Timer Enable bit
  6917                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6918                           ;	Power-up Timer Enable bit
  6919                           ;	PWRTE = OFF, PWRT disabled
  6920                           ;	RE3/MCLR pin function select bit
  6921                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  6922                           ;	Code Protection bit
  6923                           ;	CP = OFF, Program memory code protection is disabled
  6924                           ;	Data Code Protection bit
  6925                           ;	CPD = OFF, Data memory code protection is disabled
  6926                           ;	Brown Out Reset Selection bits
  6927                           ;	BOREN = OFF, BOR disabled
  6928                           ;	Internal External Switchover bit
  6929                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  6930                           ;	Fail-Safe Clock Monitor Enabled bit
  6931                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  6932                           ;	Low Voltage Programming Enable bit
  6933                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6934                           ;	In-Circuit Debugger Mode bit
  6935                           ;	DEBUG = 0x1, unprogrammed default
  6936     2007                     	org	8199
  6937     2007  20D1               	dw	8401
  6938                           
  6939                           ;Config register CONFIG2 @ 0x2008
  6940                           ;	Brown-out Reset Selection bit
  6941                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  6942                           ;	Flash Program Memory Self Write Enable bits
  6943                           ;	WRT = OFF, Write protection off
  6944     2008                     	org	8200
  6945     2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    118
    Data        23
    BSS         84
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     73      80
    BANK1            80     23      43
    BANK3            96      0      80
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_4(CODE[3]), STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_text@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _TMR1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _uart_send_text->_uart_send
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_ADC->_set_CHANNEL
    ___lwtoft->___ftpack

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   43614
                                             70 BANK0      3     3      0
                            ___ftmul
                           ___lwtoft
                         _config_HAL
                           _init_ADC
                      _init_inttimer
                            _sprintf
                             _strcpy
                          _uart_init
                     _uart_send_text
 ---------------------------------------------------------------------------------
 (1) _uart_send_text                                       2     2      0     150
                                              1 BANK0      2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     263
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   36025
                                             60 BANK0     10     6      4
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    7887
                                             32 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    6134
                                             32 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     351
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              6 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4624
                                             17 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     560
                                             14 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1588
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    2509
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     444
                                             39 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3667
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3472
                                             42 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     648
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _init_inttimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             3     3      0      22
                                              2 BANK0      3     3      0
                        _set_CHANNEL
 ---------------------------------------------------------------------------------
 (2) _set_CHANNEL                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_HAL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2462
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2376
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                            13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
     ___lbmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
   _config_HAL
   _init_ADC
     _set_CHANNEL
   _init_inttimer
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _scale
   _strcpy
   _uart_init
   _uart_send_text
     _uart_send

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      2B       7       53.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D8      12        0.0%
ABS                  0      0      D8       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon May 01 15:52:34 2023

                      pc 0002           ___bmul@product 002F             ___awdiv@sign 002B  
                     fsr 0004      ___wmul@multiplicand 0022             ___ftadd@exp1 0055  
           ___ftadd@exp2 0054             ___ftadd@sign 0053                      l301 005C  
                    l161 07FA                      l175 17BC                      l347 1782  
                    l701 1772                      l607 0D53                      l643 0B54  
                    l564 0EA9                      l556 0E7D                      l583 0AAA  
                    l584 0AB2                      l684 07D1                      fsr0 0004  
                    indf 0000             ___awmod@sign 0025                     l2000 0C36  
                   l2030 0C7B                     l2022 0C65                     l2112 0FD4  
                   l2104 0F69                     l2034 0C8B                     l2018 0C55  
                   l2300 0A56                     l2212 0DC5                     l2206 0B63  
                   l2054 17A0                     l2134 063C                     l2312 08CA  
                   l2232 0E27                     l2216 0DCE                     l2056 17A9  
                   l2152 0765                     l2128 05D9                     l2402 099F  
                   l2162 0AE1                     l2066 17B8                     l2074 175D  
                   l2146 0702                     l2138 0657                     l2308 08BB  
                   l2412 0887                     l2260 0EB8                     l2252 0EA5  
                   l2342 078D                     l2414 0899                     l2158 0AD8  
                   l1800 0A95                     l2336 1743                     l2248 0E95  
                   l2184 0B2D                     l2176 0B0D                     l2520 0194  
                   l2512 013C                     l2346 0796                     l2266 177A  
                   l2194 0B40                     l1804 0AA8                     l2380 07EE  
                   l2364 07BD                     l2620 0500                     l2604 03EC  
                   l2540 022C                     l1806 0A9A                     l2286 0A11  
                   l2198 0B50                     l1822 16E0                     l1910 0957  
                   l1902 0944                     l2550 0276                     l2526 01B4  
                   l1920 0CD6                     l2376 07E0                     l2368 07CD  
                   l2296 0A49                     l2288 0A21                     l2392 0964  
                   l1840 09B2                     l2560 02D1                     l2536 0210  
                   l2480 005E                     l1930 0CEC                     l2394 0974  
                   l1818 16DA                     l1906 094F                     l2626 050F  
                   l2554 02CF                     l2482 0072                     l2634 0041  
                   l2466 1723                     l1924 0CDD                     l2628 0514  
                   l2636 0523                     l2476 0059                     l1942 0D04  
                   l2398 0992                     l1846 09BD                     l2590 03B3  
                   l2582 0322                     l1792 0A7A                     l1784 0A67  
                   l1952 0D25                     l1872 09FC                     l1864 09E9  
                   l1856 09C5                     l2584 03A2                     l2568 0315  
                   l2496 00CB                     l1794 0A7F                     l1970 0D65  
                   l1962 0D43                     l1954 0D2A                     l1858 09D3  
                   l2674 0B91                     l2666 0B87                     l1788 0A6E  
                   l1956 0D2E                     l1948 0D19                     l1868 09F4  
                   l1884 091B                     l2596 03CF                     l1974 0D77  
                   l1966 0D4F                     l1984 0D9A                     l1896 0928  
                   l1888 0922                     l1994 0C22                     l1898 0936  
                   STR_1 087C                     STR_2 0880                     STR_3 087C  
                   STR_4 0880                     u2045 092B                     u2225 0D1A  
                   u2065 093C                     u3035 079D                     u2075 0945  
                   u2255 0D2F                     u3135 0968                     u3065 07BE  
                   u2505 1760                     u2195 0D05                     u3155 0982  
                   u2435 0C8C                     u2285 0D44                     u3165 0993  
                   u2445 0C94                     u3405 03BC                     u3325 020E  
                   u1815 0A8E                     u3095 07D6                     u3415 03C9  
                   u3255 00E3                     u3185 088C                     u2385 0C66  
                   u3345 02D5                     u1835 0AA1                     u2635 0B0F  
                   u2395 0C6E                     u3435 043C                     u3355 030B  
                   u3515 0BE7                     u2725 0B59                     u2645 0B20  
                   u3445 04BC                     u2815 0E96                     u2655 0B2E  
                   u3295 01E5                     u3537 17F8                     u1945 09C8  
                   u3385 032B                     u1875 0AB9                     u1795 0A73  
                   u2915 0A15                     u2845 0EAE                     u2765 0E29  
                   u1965 09D4                     u2935 0A23                     u2775 0E58  
                   u2695 0B41                     u1975 09E0                     u2945 0A38  
                   u1985 09EA                     u2955 0A4A                     u2875 1783  
                   u2885 178A                     _TXEN 04C5                     _TXIF 0064  
                   _main 0B6C             ___ftpack@arg 0020             ___ftpack@exp 0023  
                   btemp 007E                     _stop 006D                     start 0010  
           _sprintf$1261 00A0        ___bmul@multiplier 0030             ___ftmul@cntr 003E  
           ___ftmul@sign 003F         ??_uart_send_text 0021             ___fttol@exp1 0053  
           ___fttol@lval 004F                    ?_main 0070          __end_of___awdiv 0A01  
        __end_of___lbdiv 17BA          __end_of___ftadd 0DAE          __end_of___awmod 095C  
        __end_of___lbmod 1778          __end_of___ftneg 16A5                    _ANSEL 0188  
        __end_of___lldiv 0A5F          __end_of___ftmul 0CB3          ___awdiv@divisor 0026  
        __end_of___llmod 09A8          __end_of___ftsub 1759          __end_of___fttol 07F7  
        ___awdiv@counter 002A                    _RCSTA 0018                    _TMR1H 000F  
                  _TMR1L 000E                    _SPBRG 0099                    _TRISD 0088  
                  _TRISE 0089                    _TXREG 0019             ___lltoft@exp 002C  
       __end_of_TMR1_ISR 0911          __end_of_dpowers 087C                    _scale 0528  
          ___ftpack@sign 0024                    main@i 0067                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 0528  
           ?_set_CHANNEL 0070          ___lbdiv@divisor 0026          ___lbdiv@counter 0028  
        __initialization 0013             __end_of_main 0C0E                   ??_main 0066  
          ___fttol@sign1 004E         ___llmod@dividend 0024                   ?_scale 0040  
                 _ADRESH 001E                   _ADRESL 009E         ___awdiv@dividend 0028  
       __end_of___ftpack 0ACB                   _ANSELH 0189         __end_of___lltoft 08AC  
       __end_of___lwtoft 170C         __end_of__powers_ 082D                   ___bmul 16D8  
                 ___ftge 08AC                   ___wmul 1778                ??___awdiv 002A  
              ??___lbdiv 0027                ??___ftadd 0050                ??___awmod 0024  
              ??___lbmod 0021                ??___ftneg 0023                ??___lldiv 0028  
              ??___ftmul 0037                ??___llmod 0028                ??___ftsub 005C  
              ??___fttol 004B         __end_of_init_ADC 1800                   _buffer 00B7  
                 _fround 0EC1         ___awdiv@quotient 002C          ___awmod@divisor 0020  
        ___awmod@counter 0024                   _strcpy 1720    ___ftmul@f3_as_product 003B  
                 saved_w 007E                ??_sprintf 0060         ___lbdiv@dividend 0027  
        ___lbmod@divisor 0020  __end_of__initialization 0039          ___lbmod@counter 0024  
             ___ftadd@f1 004A               ___ftadd@f2 004D               ___ftge@ff1 0020  
             ___ftge@ff2 0023               ___ftneg@f1 0020      ___bmul@multiplicand 002E  
             ___ftmul@f1 0031               ___ftmul@f2 0034               ___ftsub@f1 0059  
             ___ftsub@f2 0056               ___fttol@f1 0047           __pcstackCOMMON 0070  
           __pidataBANK0 1694             __pidataBANK1 170C                ?_TMR1_ISR 0070  
             ___lltoft@c 0028            __end_of_scale 0780         ___lbdiv@quotient 0029  
             ___lwtoft@c 0028               __div_to_l_ 0DAE          __div_to_l_@exp1 0033  
        __div_to_l_@cntr 0032     uart_send_text@buffer 0022                  ??_scale 0043  
        __div_to_l_@quot 002E               __pbssBANK0 0069               __pbssBANK3 0190  
          _init_inttimer 16BA            __div_to_l_@f1 0020            __div_to_l_@f2 0023  
             __pmaintext 0B6C                  ?___bmul 002E                  ?___ftge 0020  
                ?___wmul 0020               ??_TMR1_ISR 0070               __pintentry 0004  
                ?_fround 0040                ?___ftpack 0020                ?___lltoft 0028  
                ?_strcpy 0020                ?___lwtoft 0028               _config_HAL 1697  
             __stringtab 0800           ?_init_inttimer 0070                ?_init_ADC 0070  
      __end_of__npowers_ 0854               _scale$1260 0043                  ___awdiv 09A8  
                ___lbdiv 1799                  ___ftadd 0CB3                  ___awmod 0911  
                ___lbmod 1759                  ___ftneg 169D                  ___lldiv 0A01  
                ___ftmul 0C0E                  ___llmod 095C                  ___ftsub 173C  
                ___fttol 0780        uart_send_text@aux 0021               ??___ftpack 0025  
              _ANSELbits 0188                  _datoenv 0069               ??___lltoft 002C  
                __ptext1 17BA                  __ptext2 07F7                  __ptext3 16C8  
                __ptext4 1720                  __ptext5 003D                  __ptext6 0528  
                __ptext7 0911                  __ptext8 09A8                  __ptext9 0EC1  
             ??___lwtoft 002B                _T1CONbits 0010              ?__div_to_l_ 0020  
                _dpowers 0854         ___awmod@dividend 0022                  _sprintf 003D  
                clrloop0 16A6     end_of_initialization 0039               ??_init_ADC 0022  
      __end_of_uart_init 16D8        __end_of_uart_send 0800          ___lldiv@divisor 0020  
        ___lldiv@counter 002D                _RCSTAbits 0018           __tdiv_to_l_@f1 0020  
         __tdiv_to_l_@f2 0023            ??__tdiv_to_l_ 0026              ?_config_HAL 0070  
       ___lbmod@dividend 0023                _TRISAbits 0085                _TRISCbits 0087  
        ??_init_inttimer 0020              ___lbmod@rem 0025                _TXSTAbits 0098  
            ___ftmul@exp 003A           __end_of___bmul 16E9           __end_of___ftge 08D9  
         __end_of___wmul 1799              _BAUDCTLbits 0187           __end_of_fround 1000  
         __end_of_strcpy 173C      start_initialization 0013      __end_of__tdiv_to_l_ 0B6C  
        ___llmod@divisor 0020          ___llmod@counter 0029                 ??___bmul 002F  
               ??___ftge 0026                 ??___wmul 0024               init_fetch0 16E9  
            __pdataBANK0 006D              __pdataBANK1 00B7                 ??_fround 0043  
          sprintf@tmpval 00AE                 ??_strcpy 0021               fround@prec 0049  
              ___latbits 0002            __pcstackBANK0 0020            __pcstackBANK1 00A0  
            sprintf@flag 00A4              sprintf@eexp 00AC              sprintf@fval 00B3  
          ??_set_CHANNEL 0020              sprintf@prec 00A6                 ?___awdiv 0026  
               ?___lbdiv 0026                 ?___ftadd 004A                 ?___awmod 0020  
               ?___lbmod 0020                 ?___ftneg 0020                 ?___lldiv 0020  
               ?___ftmul 0031                 ?___llmod 0020                 ?___ftsub 0056  
              __npowers_ 082D                 ?___fttol 0047                __pstrings 0800  
            __tdiv_to_l_ 0ACB             ??__div_to_l_ 0026           _uart_send_text 17BA  
               ?_sprintf 005C        interrupt_function 0004           ___wmul@product 0024  
              clear_ram0 16A5                 _PIE1bits 008C                 _PIR1bits 000C  
     __end_of__div_to_l_ 0EC1      __end_of_set_CHANNEL 16BA                _uart_init 16C8  
              _uart_send 07F7                 _TMR1_ISR 08D9   __end_of_uart_send_text 17DC  
             _ADCON0bits 001F              __stringbase 0805               _ADCON1bits 009F  
      ___wmul@multiplier 0020             ??_config_HAL 0020       __end_of_config_HAL 169D  
             ?_uart_init 0070               ?_uart_send 0070                 ___ftpack 0A5F  
            _fround$1258 0046              _fround$1259 0043       __end_of__stringtab 0806  
               ___lltoft 0885          ?_uart_send_text 0070                 ___lwtoft 16FA  
             sprintf@val 00A8       set_CHANNEL@channel 0021                 __ptext10 1759  
               __ptext11 1799                 __ptext20 0780                 __ptext12 0C0E  
               __ptext21 173C                 __ptext13 16D8                 __ptext30 0A5F  
               __ptext22 0CB3                 __ptext14 0ACB                 __ptext31 08D9  
               __ptext23 169D                 __ptext15 0DAE                 __ptext24 08AC  
               __ptext16 1778                 __ptext25 16BA                 __ptext17 0885  
               __ptext26 17DC                 __ptext18 095C                 __ptext27 16AD  
               __ptext19 0A01                 __ptext28 1697                 __ptext29 16FA  
               __powers_ 0806                 _contador 006C    __end_of_init_inttimer 16C8  
             strcpy@from 0020                 _init_ADC 17DC              _set_CHANNEL 16AD  
               _muestras 0190               _INTCONbits 000B                 init_ram0 16ED  
               scale@scl 0046                 intlevel1 0000                sprintf@ap 00A3  
       __tdiv_to_l_@exp1 002E         __tdiv_to_l_@cntr 002D                sprintf@sp 00B2  
       __tdiv_to_l_@quot 0029         ___lldiv@dividend 0024                stringcode 0800  
             _OSCCONbits 008F              ??_uart_init 0020              ??_uart_send 0020  
           ?__tdiv_to_l_ 0020            uart_send@data 0020                 sprintf@c 00B6  
               sprintf@f 005C         ___lldiv@quotient 0029                 strcpy@cp 0021  
               strcpy@to 0022                 stringdir 0800                 stringtab 0800  
