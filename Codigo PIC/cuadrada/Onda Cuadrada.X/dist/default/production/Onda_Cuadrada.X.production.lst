

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 30 19:17:31 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    49                           	dabs	1,0x7E,2
    50     0000                     
    51                           ; Generated 09/02/2023 GMT
    52                           ; 
    53                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution. Publication is not required when
    67                           ;        this file is used in an embedded application.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F887 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85     0000                     	;# 
    86     0001                     	;# 
    87     0002                     	;# 
    88     0003                     	;# 
    89     0004                     	;# 
    90     0005                     	;# 
    91     0006                     	;# 
    92     0007                     	;# 
    93     0008                     	;# 
    94     0009                     	;# 
    95     000A                     	;# 
    96     000B                     	;# 
    97     000C                     	;# 
    98     000D                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0013                     	;# 
   106     0014                     	;# 
   107     0015                     	;# 
   108     0015                     	;# 
   109     0016                     	;# 
   110     0017                     	;# 
   111     0018                     	;# 
   112     0019                     	;# 
   113     001A                     	;# 
   114     001B                     	;# 
   115     001B                     	;# 
   116     001C                     	;# 
   117     001D                     	;# 
   118     001E                     	;# 
   119     001F                     	;# 
   120     0081                     	;# 
   121     0085                     	;# 
   122     0086                     	;# 
   123     0087                     	;# 
   124     0088                     	;# 
   125     0089                     	;# 
   126     008C                     	;# 
   127     008D                     	;# 
   128     008E                     	;# 
   129     008F                     	;# 
   130     0090                     	;# 
   131     0091                     	;# 
   132     0092                     	;# 
   133     0093                     	;# 
   134     0093                     	;# 
   135     0093                     	;# 
   136     0094                     	;# 
   137     0095                     	;# 
   138     0096                     	;# 
   139     0097                     	;# 
   140     0098                     	;# 
   141     0099                     	;# 
   142     009A                     	;# 
   143     009B                     	;# 
   144     009C                     	;# 
   145     009D                     	;# 
   146     009E                     	;# 
   147     009F                     	;# 
   148     0105                     	;# 
   149     0107                     	;# 
   150     0108                     	;# 
   151     0109                     	;# 
   152     010C                     	;# 
   153     010C                     	;# 
   154     010D                     	;# 
   155     010E                     	;# 
   156     010F                     	;# 
   157     0185                     	;# 
   158     0187                     	;# 
   159     0188                     	;# 
   160     0189                     	;# 
   161     018C                     	;# 
   162     018D                     	;# 
   163     0000                     	;# 
   164     0001                     	;# 
   165     0002                     	;# 
   166     0003                     	;# 
   167     0004                     	;# 
   168     0005                     	;# 
   169     0006                     	;# 
   170     0007                     	;# 
   171     0008                     	;# 
   172     0009                     	;# 
   173     000A                     	;# 
   174     000B                     	;# 
   175     000C                     	;# 
   176     000D                     	;# 
   177     000E                     	;# 
   178     000E                     	;# 
   179     000F                     	;# 
   180     0010                     	;# 
   181     0011                     	;# 
   182     0012                     	;# 
   183     0013                     	;# 
   184     0014                     	;# 
   185     0015                     	;# 
   186     0015                     	;# 
   187     0016                     	;# 
   188     0017                     	;# 
   189     0018                     	;# 
   190     0019                     	;# 
   191     001A                     	;# 
   192     001B                     	;# 
   193     001B                     	;# 
   194     001C                     	;# 
   195     001D                     	;# 
   196     001E                     	;# 
   197     001F                     	;# 
   198     0081                     	;# 
   199     0085                     	;# 
   200     0086                     	;# 
   201     0087                     	;# 
   202     0088                     	;# 
   203     0089                     	;# 
   204     008C                     	;# 
   205     008D                     	;# 
   206     008E                     	;# 
   207     008F                     	;# 
   208     0090                     	;# 
   209     0091                     	;# 
   210     0092                     	;# 
   211     0093                     	;# 
   212     0093                     	;# 
   213     0093                     	;# 
   214     0094                     	;# 
   215     0095                     	;# 
   216     0096                     	;# 
   217     0097                     	;# 
   218     0098                     	;# 
   219     0099                     	;# 
   220     009A                     	;# 
   221     009B                     	;# 
   222     009C                     	;# 
   223     009D                     	;# 
   224     009E                     	;# 
   225     009F                     	;# 
   226     0105                     	;# 
   227     0107                     	;# 
   228     0108                     	;# 
   229     0109                     	;# 
   230     010C                     	;# 
   231     010C                     	;# 
   232     010D                     	;# 
   233     010E                     	;# 
   234     010F                     	;# 
   235     0185                     	;# 
   236     0187                     	;# 
   237     0188                     	;# 
   238     0189                     	;# 
   239     018C                     	;# 
   240     018D                     	;# 
   241     0000                     	;# 
   242     0001                     	;# 
   243     0002                     	;# 
   244     0003                     	;# 
   245     0004                     	;# 
   246     0005                     	;# 
   247     0006                     	;# 
   248     0007                     	;# 
   249     0008                     	;# 
   250     0009                     	;# 
   251     000A                     	;# 
   252     000B                     	;# 
   253     000C                     	;# 
   254     000D                     	;# 
   255     000E                     	;# 
   256     000E                     	;# 
   257     000F                     	;# 
   258     0010                     	;# 
   259     0011                     	;# 
   260     0012                     	;# 
   261     0013                     	;# 
   262     0014                     	;# 
   263     0015                     	;# 
   264     0015                     	;# 
   265     0016                     	;# 
   266     0017                     	;# 
   267     0018                     	;# 
   268     0019                     	;# 
   269     001A                     	;# 
   270     001B                     	;# 
   271     001B                     	;# 
   272     001C                     	;# 
   273     001D                     	;# 
   274     001E                     	;# 
   275     001F                     	;# 
   276     0081                     	;# 
   277     0085                     	;# 
   278     0086                     	;# 
   279     0087                     	;# 
   280     0088                     	;# 
   281     0089                     	;# 
   282     008C                     	;# 
   283     008D                     	;# 
   284     008E                     	;# 
   285     008F                     	;# 
   286     0090                     	;# 
   287     0091                     	;# 
   288     0092                     	;# 
   289     0093                     	;# 
   290     0093                     	;# 
   291     0093                     	;# 
   292     0094                     	;# 
   293     0095                     	;# 
   294     0096                     	;# 
   295     0097                     	;# 
   296     0098                     	;# 
   297     0099                     	;# 
   298     009A                     	;# 
   299     009B                     	;# 
   300     009C                     	;# 
   301     009D                     	;# 
   302     009E                     	;# 
   303     009F                     	;# 
   304     0105                     	;# 
   305     0107                     	;# 
   306     0108                     	;# 
   307     0109                     	;# 
   308     010C                     	;# 
   309     010C                     	;# 
   310     010D                     	;# 
   311     010E                     	;# 
   312     010F                     	;# 
   313     0185                     	;# 
   314     0187                     	;# 
   315     0188                     	;# 
   316     0189                     	;# 
   317     018C                     	;# 
   318     018D                     	;# 
   319     0000                     	;# 
   320     0001                     	;# 
   321     0002                     	;# 
   322     0003                     	;# 
   323     0004                     	;# 
   324     0005                     	;# 
   325     0006                     	;# 
   326     0007                     	;# 
   327     0008                     	;# 
   328     0009                     	;# 
   329     000A                     	;# 
   330     000B                     	;# 
   331     000C                     	;# 
   332     000D                     	;# 
   333     000E                     	;# 
   334     000E                     	;# 
   335     000F                     	;# 
   336     0010                     	;# 
   337     0011                     	;# 
   338     0012                     	;# 
   339     0013                     	;# 
   340     0014                     	;# 
   341     0015                     	;# 
   342     0015                     	;# 
   343     0016                     	;# 
   344     0017                     	;# 
   345     0018                     	;# 
   346     0019                     	;# 
   347     001A                     	;# 
   348     001B                     	;# 
   349     001B                     	;# 
   350     001C                     	;# 
   351     001D                     	;# 
   352     001E                     	;# 
   353     001F                     	;# 
   354     0081                     	;# 
   355     0085                     	;# 
   356     0086                     	;# 
   357     0087                     	;# 
   358     0088                     	;# 
   359     0089                     	;# 
   360     008C                     	;# 
   361     008D                     	;# 
   362     008E                     	;# 
   363     008F                     	;# 
   364     0090                     	;# 
   365     0091                     	;# 
   366     0092                     	;# 
   367     0093                     	;# 
   368     0093                     	;# 
   369     0093                     	;# 
   370     0094                     	;# 
   371     0095                     	;# 
   372     0096                     	;# 
   373     0097                     	;# 
   374     0098                     	;# 
   375     0099                     	;# 
   376     009A                     	;# 
   377     009B                     	;# 
   378     009C                     	;# 
   379     009D                     	;# 
   380     009E                     	;# 
   381     009F                     	;# 
   382     0105                     	;# 
   383     0107                     	;# 
   384     0108                     	;# 
   385     0109                     	;# 
   386     010C                     	;# 
   387     010C                     	;# 
   388     010D                     	;# 
   389     010E                     	;# 
   390     010F                     	;# 
   391     0185                     	;# 
   392     0187                     	;# 
   393     0188                     	;# 
   394     0189                     	;# 
   395     018C                     	;# 
   396     018D                     	;# 
   397     0000                     	;# 
   398     0001                     	;# 
   399     0002                     	;# 
   400     0003                     	;# 
   401     0004                     	;# 
   402     0005                     	;# 
   403     0006                     	;# 
   404     0007                     	;# 
   405     0008                     	;# 
   406     0009                     	;# 
   407     000A                     	;# 
   408     000B                     	;# 
   409     000C                     	;# 
   410     000D                     	;# 
   411     000E                     	;# 
   412     000E                     	;# 
   413     000F                     	;# 
   414     0010                     	;# 
   415     0011                     	;# 
   416     0012                     	;# 
   417     0013                     	;# 
   418     0014                     	;# 
   419     0015                     	;# 
   420     0015                     	;# 
   421     0016                     	;# 
   422     0017                     	;# 
   423     0018                     	;# 
   424     0019                     	;# 
   425     001A                     	;# 
   426     001B                     	;# 
   427     001B                     	;# 
   428     001C                     	;# 
   429     001D                     	;# 
   430     001E                     	;# 
   431     001F                     	;# 
   432     0081                     	;# 
   433     0085                     	;# 
   434     0086                     	;# 
   435     0087                     	;# 
   436     0088                     	;# 
   437     0089                     	;# 
   438     008C                     	;# 
   439     008D                     	;# 
   440     008E                     	;# 
   441     008F                     	;# 
   442     0090                     	;# 
   443     0091                     	;# 
   444     0092                     	;# 
   445     0093                     	;# 
   446     0093                     	;# 
   447     0093                     	;# 
   448     0094                     	;# 
   449     0095                     	;# 
   450     0096                     	;# 
   451     0097                     	;# 
   452     0098                     	;# 
   453     0099                     	;# 
   454     009A                     	;# 
   455     009B                     	;# 
   456     009C                     	;# 
   457     009D                     	;# 
   458     009E                     	;# 
   459     009F                     	;# 
   460     0105                     	;# 
   461     0107                     	;# 
   462     0108                     	;# 
   463     0109                     	;# 
   464     010C                     	;# 
   465     010C                     	;# 
   466     010D                     	;# 
   467     010E                     	;# 
   468     010F                     	;# 
   469     0185                     	;# 
   470     0187                     	;# 
   471     0188                     	;# 
   472     0189                     	;# 
   473     018C                     	;# 
   474     018D                     	;# 
   475     0000                     	;# 
   476     0001                     	;# 
   477     0002                     	;# 
   478     0003                     	;# 
   479     0004                     	;# 
   480     0005                     	;# 
   481     0006                     	;# 
   482     0007                     	;# 
   483     0008                     	;# 
   484     0009                     	;# 
   485     000A                     	;# 
   486     000B                     	;# 
   487     000C                     	;# 
   488     000D                     	;# 
   489     000E                     	;# 
   490     000E                     	;# 
   491     000F                     	;# 
   492     0010                     	;# 
   493     0011                     	;# 
   494     0012                     	;# 
   495     0013                     	;# 
   496     0014                     	;# 
   497     0015                     	;# 
   498     0015                     	;# 
   499     0016                     	;# 
   500     0017                     	;# 
   501     0018                     	;# 
   502     0019                     	;# 
   503     001A                     	;# 
   504     001B                     	;# 
   505     001B                     	;# 
   506     001C                     	;# 
   507     001D                     	;# 
   508     001E                     	;# 
   509     001F                     	;# 
   510     0081                     	;# 
   511     0085                     	;# 
   512     0086                     	;# 
   513     0087                     	;# 
   514     0088                     	;# 
   515     0089                     	;# 
   516     008C                     	;# 
   517     008D                     	;# 
   518     008E                     	;# 
   519     008F                     	;# 
   520     0090                     	;# 
   521     0091                     	;# 
   522     0092                     	;# 
   523     0093                     	;# 
   524     0093                     	;# 
   525     0093                     	;# 
   526     0094                     	;# 
   527     0095                     	;# 
   528     0096                     	;# 
   529     0097                     	;# 
   530     0098                     	;# 
   531     0099                     	;# 
   532     009A                     	;# 
   533     009B                     	;# 
   534     009C                     	;# 
   535     009D                     	;# 
   536     009E                     	;# 
   537     009F                     	;# 
   538     0105                     	;# 
   539     0107                     	;# 
   540     0108                     	;# 
   541     0109                     	;# 
   542     010C                     	;# 
   543     010C                     	;# 
   544     010D                     	;# 
   545     010E                     	;# 
   546     010F                     	;# 
   547     0185                     	;# 
   548     0187                     	;# 
   549     0188                     	;# 
   550     0189                     	;# 
   551     018C                     	;# 
   552     018D                     	;# 
   553                           
   554                           	psect	idataBANK1
   555     172D                     __pidataBANK1:
   556                           
   557                           ;initializer for _stop
   558     172D  3400               	retlw	0
   559     172E  3480               	retlw	128
   560     172F  343F               	retlw	63
   561                           
   562                           ;initializer for _buffer
   563     1730  3420               	retlw	32
   564     1731  3400               	retlw	0
   565     1732  3400               	retlw	0
   566     1733  3400               	retlw	0
   567     1734  3400               	retlw	0
   568     1735  3400               	retlw	0
   569     1736  3400               	retlw	0
   570     1737  3400               	retlw	0
   571     1738  3400               	retlw	0
   572     1739  3400               	retlw	0
   573     173A  3400               	retlw	0
   574     173B  3400               	retlw	0
   575     173C  3400               	retlw	0
   576     173D  3400               	retlw	0
   577     173E  3400               	retlw	0
   578     173F  3400               	retlw	0
   579     1740  3400               	retlw	0
   580     1741  3400               	retlw	0
   581     1742  3400               	retlw	0
   582     1743  3400               	retlw	0
   583                           
   584                           	psect	strings
   585     0800                     __pstrings:
   586     0800                     stringtab:
   587     0800                     __stringtab:
   588     0800                     stringcode:	
   589                           ;	String table - string pointers are 1 byte each
   590                           
   591     0800                     stringdir:
   592     0800  3008               	movlw	high stringdir
   593     0801  008A               	movwf	10
   594     0802  0804               	movf	4,w
   595     0803  0A84               	incf	4,f
   596     0804  0782               	addwf	2,f
   597     0805                     __stringbase:
   598     0805  3400               	retlw	0
   599     0806                     __end_of__stringtab:
   600     0806                     __powers_:
   601     0806  3400               	retlw	0
   602     0807  3480               	retlw	128
   603     0808  343F               	retlw	63
   604     0809  3400               	retlw	0
   605     080A  3420               	retlw	32
   606     080B  3441               	retlw	65
   607     080C  3400               	retlw	0
   608     080D  34C8               	retlw	200
   609     080E  3442               	retlw	66
   610     080F  3400               	retlw	0
   611     0810  347A               	retlw	122
   612     0811  3444               	retlw	68
   613     0812  3440               	retlw	64
   614     0813  341C               	retlw	28
   615     0814  3446               	retlw	70
   616     0815  3450               	retlw	80
   617     0816  34C3               	retlw	195
   618     0817  3447               	retlw	71
   619     0818  3424               	retlw	36
   620     0819  3474               	retlw	116
   621     081A  3449               	retlw	73
   622     081B  3497               	retlw	151
   623     081C  3418               	retlw	24
   624     081D  344B               	retlw	75
   625     081E  34BC               	retlw	188
   626     081F  34BE               	retlw	190
   627     0820  344C               	retlw	76
   628     0821  346B               	retlw	107
   629     0822  346E               	retlw	110
   630     0823  344E               	retlw	78
   631     0824  3403               	retlw	3
   632     0825  3415               	retlw	21
   633     0826  3450               	retlw	80
   634     0827  3479               	retlw	121
   635     0828  34AD               	retlw	173
   636     0829  3460               	retlw	96
   637     082A  34F3               	retlw	243
   638     082B  3449               	retlw	73
   639     082C  3471               	retlw	113
   640     082D                     __end_of__powers_:
   641     082D                     __npowers_:
   642     082D  3400               	retlw	0
   643     082E  3480               	retlw	128
   644     082F  343F               	retlw	63
   645     0830  34CD               	retlw	205
   646     0831  34CC               	retlw	204
   647     0832  343D               	retlw	61
   648     0833  34D7               	retlw	215
   649     0834  3423               	retlw	35
   650     0835  343C               	retlw	60
   651     0836  3412               	retlw	18
   652     0837  3483               	retlw	131
   653     0838  343A               	retlw	58
   654     0839  34B7               	retlw	183
   655     083A  34D1               	retlw	209
   656     083B  3438               	retlw	56
   657     083C  34C6               	retlw	198
   658     083D  3427               	retlw	39
   659     083E  3437               	retlw	55
   660     083F  3438               	retlw	56
   661     0840  3486               	retlw	134
   662     0841  3435               	retlw	53
   663     0842  34C0               	retlw	192
   664     0843  34D6               	retlw	214
   665     0844  3433               	retlw	51
   666     0845  34CC               	retlw	204
   667     0846  342B               	retlw	43
   668     0847  3432               	retlw	50
   669     0848  3470               	retlw	112
   670     0849  3489               	retlw	137
   671     084A  3430               	retlw	48
   672     084B  34E7               	retlw	231
   673     084C  34DB               	retlw	219
   674     084D  342E               	retlw	46
   675     084E  34E5               	retlw	229
   676     084F  343C               	retlw	60
   677     0850  341E               	retlw	30
   678     0851  3442               	retlw	66
   679     0852  34A2               	retlw	162
   680     0853  340D               	retlw	13
   681     0854                     __end_of__npowers_:
   682     0854                     _dpowers:
   683     0854  3401               	retlw	1
   684     0855  3400               	retlw	0
   685     0856  3400               	retlw	0
   686     0857  3400               	retlw	0
   687     0858  340A               	retlw	10
   688     0859  3400               	retlw	0
   689     085A  3400               	retlw	0
   690     085B  3400               	retlw	0
   691     085C  3464               	retlw	100
   692     085D  3400               	retlw	0
   693     085E  3400               	retlw	0
   694     085F  3400               	retlw	0
   695     0860  34E8               	retlw	232
   696     0861  3403               	retlw	3
   697     0862  3400               	retlw	0
   698     0863  3400               	retlw	0
   699     0864  3410               	retlw	16
   700     0865  3427               	retlw	39
   701     0866  3400               	retlw	0
   702     0867  3400               	retlw	0
   703     0868  34A0               	retlw	160
   704     0869  3486               	retlw	134
   705     086A  3401               	retlw	1
   706     086B  3400               	retlw	0
   707     086C  3440               	retlw	64
   708     086D  3442               	retlw	66
   709     086E  340F               	retlw	15
   710     086F  3400               	retlw	0
   711     0870  3480               	retlw	128
   712     0871  3496               	retlw	150
   713     0872  3498               	retlw	152
   714     0873  3400               	retlw	0
   715     0874  3400               	retlw	0
   716     0875  34E1               	retlw	225
   717     0876  34F5               	retlw	245
   718     0877  3405               	retlw	5
   719     0878  3400               	retlw	0
   720     0879  34CA               	retlw	202
   721     087A  349A               	retlw	154
   722     087B  343B               	retlw	59
   723     087C                     __end_of_dpowers:
   724     0019                     _TXREG	set	25
   725     0018                     _RCSTA	set	24
   726     0018                     _RCSTAbits	set	24
   727     001A                     _RCREG	set	26
   728     0008                     _PORTDbits	set	8
   729     000B                     _INTCONbits	set	11
   730     000C                     _PIR1bits	set	12
   731     000E                     _TMR1L	set	14
   732     000F                     _TMR1H	set	15
   733     0010                     _T1CONbits	set	16
   734     001E                     _ADRESH	set	30
   735     001F                     _ADCON0bits	set	31
   736     0064                     _TXIF	set	100
   737     0065                     _RCIF	set	101
   738     0099                     _SPBRG	set	153
   739     0098                     _TXSTAbits	set	152
   740     0087                     _TRISCbits	set	135
   741     0089                     _TRISE	set	137
   742     0088                     _TRISD	set	136
   743     008F                     _OSCCONbits	set	143
   744     008C                     _PIE1bits	set	140
   745     009E                     _ADRESL	set	158
   746     009F                     _ADCON1bits	set	159
   747     0085                     _TRISAbits	set	133
   748     04C5                     _TXEN	set	1221
   749     0187                     _BAUDCTLbits	set	391
   750     0189                     _ANSELH	set	393
   751     0188                     _ANSEL	set	392
   752     0188                     _ANSELbits	set	392
   753     087C                     STR_1:
   754     087C  3420               	retlw	32	;' '
   755     087D  3420               	retlw	32	;' '
   756     087E  3420               	retlw	32	;' '
   757     087F  3400               	retlw	0
   758     0880                     STR_2:
   759     0880  3425               	retlw	37	;'%'
   760     0881  3466               	retlw	102	;'f'
   761     0882  3400               	retlw	0
   762                           
   763                           	psect	cinit
   764     0013                     start_initialization:	
   765                           ; #config settings
   766                           
   767     0013                     __initialization:
   768                           
   769                           ; Initialize objects allocated to BANK1
   770     0013  1383               	bcf	3,7	;select IRP bank0
   771     0014  30B7               	movlw	low (__pdataBANK1+23)
   772     0015  00FD               	movwf	btemp+-1
   773     0016  3017               	movlw	high __pidataBANK1
   774     0017  00FE               	movwf	btemp
   775     0018  302D               	movlw	low __pidataBANK1
   776     0019  00FF               	movwf	btemp+1
   777     001A  30A0               	movlw	low __pdataBANK1
   778     001B  0084               	movwf	4
   779     001C  160A  118A  26FC  120A  118A  	fcall	init_ram0
   780                           
   781                           ; Clear objects allocated to BANK3
   782     0021  1783               	bsf	3,7	;select IRP bank2
   783     0022  3090               	movlw	low __pbssBANK3
   784     0023  0084               	movwf	4
   785     0024  30E0               	movlw	low (__pbssBANK3+80)
   786     0025  160A  118A  26B9   	fcall	clear_ram0
   787                           
   788                           ; Clear objects allocated to BANK0
   789     0028  01E9               	clrf	__pbssBANK0& (0+127)
   790     0029  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   791     002A  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   792     002B  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   793     002C  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   794     002D                     end_of_initialization:	
   795                           ;End of C runtime variable initialization code
   796                           
   797     002D                     __end_of__initialization:
   798     002D  0183               	clrf	3
   799     002E  120A  118A  2F74   	ljmp	_main	;jump to C main() function
   800                           
   801                           	psect	bssBANK0
   802     0069                     __pbssBANK0:
   803     0069                     _datoenv:
   804     0069                     	ds	3
   805     006C                     _contadorLed:
   806     006C                     	ds	1
   807     006D                     _contador:
   808     006D                     	ds	1
   809                           
   810                           	psect	dataBANK1
   811     00A0                     __pdataBANK1:
   812     00A0                     _stop:
   813     00A0                     	ds	3
   814     00A3                     _buffer:
   815     00A3                     	ds	20
   816                           
   817                           	psect	bssBANK3
   818     0190                     __pbssBANK3:
   819     0190                     _muestras:
   820     0190                     	ds	80
   821                           
   822                           	psect	inittext
   823     16F8                     init_fetch0:	
   824                           ;	Called with low address in FSR and high address in W
   825                           
   826     16F8  087E               	movf	126,w
   827     16F9  008A               	movwf	10
   828     16FA  087F               	movf	127,w
   829     16FB  0082               	movwf	2
   830     16FC                     init_ram0:	
   831                           ;Called with:
   832                           ;	high address of idata address in btemp 
   833                           ;	low address of idata address in btemp+1 
   834                           ;	low address of data in FSR
   835                           ;	high address + 1 of data in btemp-1
   836                           
   837     16FC  26F8  160A  118A   	fcall	init_fetch0
   838     16FF  0080               	movwf	0
   839     1700  0A84               	incf	4,f
   840     1701  0804               	movf	4,w
   841     1702  067D               	xorwf	125,w
   842     1703  1903               	btfsc	3,2
   843     1704  3400               	retlw	0
   844     1705  0AFF               	incf	127,f
   845     1706  1903               	btfsc	3,2
   846     1707  0AFE               	incf	126,f
   847     1708  2EFC               	goto	init_ram0
   848                           
   849                           	psect	clrtext
   850     16B9                     clear_ram0:	
   851                           ;	Called with FSR containing the base address, and
   852                           ;	W with the last address+1
   853                           
   854     16B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   855     16BA                     clrloop0:
   856     16BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   857     16BB  0A84               	incf	4,f	;increment pointer
   858     16BC  0604               	xorwf	4,w	;XOR with final address
   859     16BD  1903               	btfsc	3,2	;have we reached the end yet?
   860     16BE  3400               	retlw	0	;all done for this memory range, return
   861     16BF  0604               	xorwf	4,w	;XOR again to restore value
   862     16C0  2EBA               	goto	clrloop0	;do the next byte
   863                           
   864                           	psect	cstackBANK1
   865     00B7                     __pcstackBANK1:
   866     00B7                     _sprintf$1292:
   867                           
   868                           ; 3 bytes @ 0x0
   869     00B7                     	ds	3
   870     00BA                     sprintf@ap:
   871                           
   872                           ; 1 bytes @ 0x3
   873     00BA                     	ds	1
   874     00BB                     sprintf@flag:
   875                           
   876                           ; 2 bytes @ 0x4
   877     00BB                     	ds	2
   878     00BD                     sprintf@prec:
   879                           
   880                           ; 2 bytes @ 0x6
   881     00BD                     	ds	2
   882     00BF                     sprintf@val:
   883                           
   884                           ; 4 bytes @ 0x8
   885     00BF                     	ds	4
   886     00C3                     sprintf@eexp:
   887                           
   888                           ; 2 bytes @ 0xC
   889     00C3                     	ds	2
   890     00C5                     sprintf@tmpval:
   891                           
   892                           ; 4 bytes @ 0xE
   893     00C5                     	ds	4
   894     00C9                     sprintf@sp:
   895                           
   896                           ; 1 bytes @ 0x12
   897     00C9                     	ds	1
   898     00CA                     sprintf@fval:
   899                           
   900                           ; 3 bytes @ 0x13
   901     00CA                     	ds	3
   902     00CD                     sprintf@c:
   903                           
   904                           ; 1 bytes @ 0x16
   905     00CD                     	ds	1
   906                           
   907                           	psect	cstackCOMMON
   908     0070                     __pcstackCOMMON:
   909     0070                     ?_set_CHANNEL:
   910     0070                     ?_config_HAL:	
   911                           ; 1 bytes @ 0x0
   912                           
   913     0070                     ?_uart_init:	
   914                           ; 1 bytes @ 0x0
   915                           
   916     0070                     ?_uart_send_text:	
   917                           ; 1 bytes @ 0x0
   918                           
   919     0070                     ?_init_ADC:	
   920                           ; 1 bytes @ 0x0
   921                           
   922     0070                     ?_init_inttimer:	
   923                           ; 1 bytes @ 0x0
   924                           
   925     0070                     ?_TMR1_ISR:	
   926                           ; 1 bytes @ 0x0
   927                           
   928     0070                     ??_TMR1_ISR:	
   929                           ; 1 bytes @ 0x0
   930                           
   931     0070                     ?_uart_send:	
   932                           ; 1 bytes @ 0x0
   933                           
   934     0070                     ?_main:	
   935                           ; 1 bytes @ 0x0
   936                           
   937                           
   938                           ; 2 bytes @ 0x0
   939     0070                     	ds	13
   940                           
   941                           	psect	cstackBANK0
   942     0020                     __pcstackBANK0:
   943     0020                     ?___ftge:
   944     0020                     ??_set_CHANNEL:	
   945                           ; 1 bit 
   946                           
   947     0020                     ??_config_HAL:	
   948                           ; 1 bytes @ 0x0
   949                           
   950     0020                     ??_uart_init:	
   951                           ; 1 bytes @ 0x0
   952                           
   953     0020                     ?_strcpy:	
   954                           ; 1 bytes @ 0x0
   955                           
   956     0020                     ??_init_inttimer:	
   957                           ; 1 bytes @ 0x0
   958                           
   959     0020                     ??_uart_send:	
   960                           ; 1 bytes @ 0x0
   961                           
   962     0020                     ?___lbmod:	
   963                           ; 1 bytes @ 0x0
   964                           
   965     0020                     ?___wmul:	
   966                           ; 1 bytes @ 0x0
   967                           
   968     0020                     ?___awmod:	
   969                           ; 2 bytes @ 0x0
   970                           
   971     0020                     ?___ftpack:	
   972                           ; 2 bytes @ 0x0
   973                           
   974     0020                     ?___ftneg:	
   975                           ; 3 bytes @ 0x0
   976                           
   977     0020                     ?__tdiv_to_l_:	
   978                           ; 3 bytes @ 0x0
   979                           
   980     0020                     ?__div_to_l_:	
   981                           ; 4 bytes @ 0x0
   982                           
   983     0020                     ?___lldiv:	
   984                           ; 4 bytes @ 0x0
   985                           
   986     0020                     ?___llmod:	
   987                           ; 4 bytes @ 0x0
   988                           
   989     0020                     uart_send@data:	
   990                           ; 4 bytes @ 0x0
   991                           
   992     0020                     ___lbmod@divisor:	
   993                           ; 1 bytes @ 0x0
   994                           
   995     0020                     strcpy@from:	
   996                           ; 1 bytes @ 0x0
   997                           
   998     0020                     ___wmul@multiplier:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001     0020                     ___awmod@divisor:	
  1002                           ; 2 bytes @ 0x0
  1003                           
  1004     0020                     __div_to_l_@f1:	
  1005                           ; 2 bytes @ 0x0
  1006                           
  1007     0020                     ___ftpack@arg:	
  1008                           ; 3 bytes @ 0x0
  1009                           
  1010     0020                     __tdiv_to_l_@f1:	
  1011                           ; 3 bytes @ 0x0
  1012                           
  1013     0020                     ___ftge@ff1:	
  1014                           ; 3 bytes @ 0x0
  1015                           
  1016     0020                     ___ftneg@f1:	
  1017                           ; 3 bytes @ 0x0
  1018                           
  1019     0020                     ___lldiv@divisor:	
  1020                           ; 3 bytes @ 0x0
  1021                           
  1022     0020                     ___llmod@divisor:	
  1023                           ; 4 bytes @ 0x0
  1024                           
  1025                           
  1026                           ; 4 bytes @ 0x0
  1027     0020                     	ds	1
  1028     0021                     ??_strcpy:
  1029     0021                     ??_uart_send_text:	
  1030                           ; 1 bytes @ 0x1
  1031                           
  1032     0021                     ??___lbmod:	
  1033                           ; 1 bytes @ 0x1
  1034                           
  1035     0021                     set_CHANNEL@channel:	
  1036                           ; 1 bytes @ 0x1
  1037                           
  1038     0021                     uart_send_text@aux:	
  1039                           ; 1 bytes @ 0x1
  1040                           
  1041     0021                     strcpy@to:	
  1042                           ; 1 bytes @ 0x1
  1043                           
  1044                           
  1045                           ; 1 bytes @ 0x1
  1046     0021                     	ds	1
  1047     0022                     ??_init_ADC:
  1048     0022                     uart_send_text@buffer:	
  1049                           ; 1 bytes @ 0x2
  1050                           
  1051     0022                     strcpy@cp:	
  1052                           ; 1 bytes @ 0x2
  1053                           
  1054     0022                     ___wmul@multiplicand:	
  1055                           ; 1 bytes @ 0x2
  1056                           
  1057     0022                     ___awmod@dividend:	
  1058                           ; 2 bytes @ 0x2
  1059                           
  1060                           
  1061                           ; 2 bytes @ 0x2
  1062     0022                     	ds	1
  1063     0023                     ??___ftneg:
  1064     0023                     ___ftpack@exp:	
  1065                           ; 1 bytes @ 0x3
  1066                           
  1067     0023                     ___lbmod@dividend:	
  1068                           ; 1 bytes @ 0x3
  1069                           
  1070     0023                     __div_to_l_@f2:	
  1071                           ; 1 bytes @ 0x3
  1072                           
  1073     0023                     __tdiv_to_l_@f2:	
  1074                           ; 3 bytes @ 0x3
  1075                           
  1076     0023                     ___ftge@ff2:	
  1077                           ; 3 bytes @ 0x3
  1078                           
  1079                           
  1080                           ; 3 bytes @ 0x3
  1081     0023                     	ds	1
  1082     0024                     ??___wmul:
  1083     0024                     ??___awmod:	
  1084                           ; 1 bytes @ 0x4
  1085                           
  1086     0024                     ___awmod@counter:	
  1087                           ; 1 bytes @ 0x4
  1088                           
  1089     0024                     ___ftpack@sign:	
  1090                           ; 1 bytes @ 0x4
  1091                           
  1092     0024                     ___lbmod@counter:	
  1093                           ; 1 bytes @ 0x4
  1094                           
  1095     0024                     ___wmul@product:	
  1096                           ; 1 bytes @ 0x4
  1097                           
  1098     0024                     ___lldiv@dividend:	
  1099                           ; 2 bytes @ 0x4
  1100                           
  1101     0024                     ___llmod@dividend:	
  1102                           ; 4 bytes @ 0x4
  1103                           
  1104                           
  1105                           ; 4 bytes @ 0x4
  1106     0024                     	ds	1
  1107     0025                     ??___ftpack:
  1108     0025                     ___awmod@sign:	
  1109                           ; 1 bytes @ 0x5
  1110                           
  1111     0025                     ___lbmod@rem:	
  1112                           ; 1 bytes @ 0x5
  1113                           
  1114                           
  1115                           ; 1 bytes @ 0x5
  1116     0025                     	ds	1
  1117     0026                     ??__tdiv_to_l_:
  1118     0026                     ??__div_to_l_:	
  1119                           ; 1 bytes @ 0x6
  1120                           
  1121     0026                     ??___ftge:	
  1122                           ; 1 bytes @ 0x6
  1123                           
  1124     0026                     ?___lbdiv:	
  1125                           ; 1 bytes @ 0x6
  1126                           
  1127     0026                     ?___awdiv:	
  1128                           ; 1 bytes @ 0x6
  1129                           
  1130     0026                     ___lbdiv@divisor:	
  1131                           ; 2 bytes @ 0x6
  1132                           
  1133     0026                     ___awdiv@divisor:	
  1134                           ; 1 bytes @ 0x6
  1135                           
  1136                           
  1137                           ; 2 bytes @ 0x6
  1138     0026                     	ds	1
  1139     0027                     ??___lbdiv:
  1140     0027                     ___lbdiv@dividend:	
  1141                           ; 1 bytes @ 0x7
  1142                           
  1143                           
  1144                           ; 1 bytes @ 0x7
  1145     0027                     	ds	1
  1146     0028                     ??___lldiv:
  1147     0028                     ??___llmod:	
  1148                           ; 1 bytes @ 0x8
  1149                           
  1150     0028                     ?___lltoft:	
  1151                           ; 1 bytes @ 0x8
  1152                           
  1153     0028                     ?___lwtoft:	
  1154                           ; 3 bytes @ 0x8
  1155                           
  1156     0028                     ___lbdiv@counter:	
  1157                           ; 3 bytes @ 0x8
  1158                           
  1159     0028                     ___awdiv@dividend:	
  1160                           ; 1 bytes @ 0x8
  1161                           
  1162     0028                     ___lwtoft@c:	
  1163                           ; 2 bytes @ 0x8
  1164                           
  1165     0028                     ___lltoft@c:	
  1166                           ; 2 bytes @ 0x8
  1167                           
  1168                           
  1169                           ; 4 bytes @ 0x8
  1170     0028                     	ds	1
  1171     0029                     ___lbdiv@quotient:
  1172     0029                     ___llmod@counter:	
  1173                           ; 1 bytes @ 0x9
  1174                           
  1175     0029                     ___lldiv@quotient:	
  1176                           ; 1 bytes @ 0x9
  1177                           
  1178     0029                     __tdiv_to_l_@quot:	
  1179                           ; 4 bytes @ 0x9
  1180                           
  1181                           
  1182                           ; 4 bytes @ 0x9
  1183     0029                     	ds	1
  1184     002A                     ??___awdiv:
  1185     002A                     ___awdiv@counter:	
  1186                           ; 1 bytes @ 0xA
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0xA
  1190     002A                     	ds	1
  1191     002B                     ??___lwtoft:
  1192     002B                     ___awdiv@sign:	
  1193                           ; 1 bytes @ 0xB
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0xB
  1197     002B                     	ds	1
  1198     002C                     ??___lltoft:
  1199     002C                     ___lltoft@exp:	
  1200                           ; 1 bytes @ 0xC
  1201                           
  1202     002C                     ___awdiv@quotient:	
  1203                           ; 1 bytes @ 0xC
  1204                           
  1205                           
  1206                           ; 2 bytes @ 0xC
  1207     002C                     	ds	1
  1208     002D                     ___lldiv@counter:
  1209     002D                     __tdiv_to_l_@cntr:	
  1210                           ; 1 bytes @ 0xD
  1211                           
  1212                           
  1213                           ; 1 bytes @ 0xD
  1214     002D                     	ds	1
  1215     002E                     ?___bmul:
  1216     002E                     ___bmul@multiplicand:	
  1217                           ; 1 bytes @ 0xE
  1218                           
  1219     002E                     __tdiv_to_l_@exp1:	
  1220                           ; 1 bytes @ 0xE
  1221                           
  1222     002E                     __div_to_l_@quot:	
  1223                           ; 1 bytes @ 0xE
  1224                           
  1225                           
  1226                           ; 4 bytes @ 0xE
  1227     002E                     	ds	1
  1228     002F                     ??___bmul:
  1229     002F                     ___bmul@product:	
  1230                           ; 1 bytes @ 0xF
  1231                           
  1232                           
  1233                           ; 1 bytes @ 0xF
  1234     002F                     	ds	1
  1235     0030                     ___bmul@multiplier:
  1236                           
  1237                           ; 1 bytes @ 0x10
  1238     0030                     	ds	1
  1239     0031                     ?___ftmul:
  1240     0031                     ___ftmul@f1:	
  1241                           ; 3 bytes @ 0x11
  1242                           
  1243                           
  1244                           ; 3 bytes @ 0x11
  1245     0031                     	ds	1
  1246     0032                     __div_to_l_@cntr:
  1247                           
  1248                           ; 1 bytes @ 0x12
  1249     0032                     	ds	1
  1250     0033                     __div_to_l_@exp1:
  1251                           
  1252                           ; 1 bytes @ 0x13
  1253     0033                     	ds	1
  1254     0034                     ___ftmul@f2:
  1255                           
  1256                           ; 3 bytes @ 0x14
  1257     0034                     	ds	3
  1258     0037                     ??___ftmul:
  1259                           
  1260                           ; 1 bytes @ 0x17
  1261     0037                     	ds	3
  1262     003A                     ___ftmul@exp:
  1263                           
  1264                           ; 1 bytes @ 0x1A
  1265     003A                     	ds	1
  1266     003B                     ___ftmul@f3_as_product:
  1267                           
  1268                           ; 3 bytes @ 0x1B
  1269     003B                     	ds	3
  1270     003E                     ___ftmul@cntr:
  1271                           
  1272                           ; 1 bytes @ 0x1E
  1273     003E                     	ds	1
  1274     003F                     ___ftmul@sign:
  1275                           
  1276                           ; 1 bytes @ 0x1F
  1277     003F                     	ds	1
  1278     0040                     ?_fround:
  1279     0040                     ?_scale:	
  1280                           ; 3 bytes @ 0x20
  1281                           
  1282                           
  1283                           ; 3 bytes @ 0x20
  1284     0040                     	ds	3
  1285     0043                     ??_fround:
  1286     0043                     ??_scale:	
  1287                           ; 1 bytes @ 0x23
  1288                           
  1289     0043                     _fround$1290:	
  1290                           ; 1 bytes @ 0x23
  1291                           
  1292     0043                     _scale$1291:	
  1293                           ; 3 bytes @ 0x23
  1294                           
  1295                           
  1296                           ; 3 bytes @ 0x23
  1297     0043                     	ds	3
  1298     0046                     scale@scl:
  1299     0046                     _fround$1289:	
  1300                           ; 1 bytes @ 0x26
  1301                           
  1302                           
  1303                           ; 3 bytes @ 0x26
  1304     0046                     	ds	1
  1305     0047                     ?___fttol:
  1306     0047                     ___fttol@f1:	
  1307                           ; 4 bytes @ 0x27
  1308                           
  1309                           
  1310                           ; 3 bytes @ 0x27
  1311     0047                     	ds	2
  1312     0049                     fround@prec:
  1313                           
  1314                           ; 1 bytes @ 0x29
  1315     0049                     	ds	1
  1316     004A                     ?___ftadd:
  1317     004A                     ___ftadd@f1:	
  1318                           ; 3 bytes @ 0x2A
  1319                           
  1320                           
  1321                           ; 3 bytes @ 0x2A
  1322     004A                     	ds	1
  1323     004B                     ??___fttol:
  1324                           
  1325                           ; 1 bytes @ 0x2B
  1326     004B                     	ds	2
  1327     004D                     ___ftadd@f2:
  1328                           
  1329                           ; 3 bytes @ 0x2D
  1330     004D                     	ds	1
  1331     004E                     ___fttol@sign1:
  1332                           
  1333                           ; 1 bytes @ 0x2E
  1334     004E                     	ds	1
  1335     004F                     ___fttol@lval:
  1336                           
  1337                           ; 4 bytes @ 0x2F
  1338     004F                     	ds	1
  1339     0050                     ??___ftadd:
  1340                           
  1341                           ; 1 bytes @ 0x30
  1342     0050                     	ds	3
  1343     0053                     ___ftadd@sign:
  1344     0053                     ___fttol@exp1:	
  1345                           ; 1 bytes @ 0x33
  1346                           
  1347                           
  1348                           ; 1 bytes @ 0x33
  1349     0053                     	ds	1
  1350     0054                     ___ftadd@exp2:
  1351                           
  1352                           ; 1 bytes @ 0x34
  1353     0054                     	ds	1
  1354     0055                     ___ftadd@exp1:
  1355                           
  1356                           ; 1 bytes @ 0x35
  1357     0055                     	ds	1
  1358     0056                     ?___ftsub:
  1359     0056                     ___ftsub@f2:	
  1360                           ; 3 bytes @ 0x36
  1361                           
  1362                           
  1363                           ; 3 bytes @ 0x36
  1364     0056                     	ds	3
  1365     0059                     ___ftsub@f1:
  1366                           
  1367                           ; 3 bytes @ 0x39
  1368     0059                     	ds	3
  1369     005C                     ??___ftsub:
  1370     005C                     ?_sprintf:	
  1371                           ; 1 bytes @ 0x3C
  1372                           
  1373     005C                     sprintf@f:	
  1374                           ; 2 bytes @ 0x3C
  1375                           
  1376                           
  1377                           ; 1 bytes @ 0x3C
  1378     005C                     	ds	4
  1379     0060                     ??_sprintf:
  1380                           
  1381                           ; 1 bytes @ 0x40
  1382     0060                     	ds	6
  1383     0066                     ??_main:
  1384                           
  1385                           ; 1 bytes @ 0x46
  1386     0066                     	ds	1
  1387     0067                     main@i:
  1388                           
  1389                           ; 2 bytes @ 0x47
  1390     0067                     	ds	2
  1391                           
  1392                           	psect	maintext
  1393     0774                     __pmaintext:	
  1394 ;;
  1395 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1396 ;;
  1397 ;; *************** function _main *****************
  1398 ;; Defined at:
  1399 ;;		line 17 in file "newmain.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  i               2   71[BANK0 ] int 
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  2  104[None  ] int 
  1406 ;; Registers used:
  1407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : B00/0
  1410 ;;		On exit  : 300/100
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1413 ;;      Params:         0       0       0       0       0
  1414 ;;      Locals:         0       2       0       0       0
  1415 ;;      Temps:          0       1       0       0       0
  1416 ;;      Totals:         0       3       0       0       0
  1417 ;;Total ram usage:        3 bytes
  1418 ;; Hardware stack levels required when called: 5
  1419 ;; This function calls:
  1420 ;;		___ftmul
  1421 ;;		___lwtoft
  1422 ;;		_config_HAL
  1423 ;;		_init_ADC
  1424 ;;		_init_inttimer
  1425 ;;		_sprintf
  1426 ;;		_strcpy
  1427 ;;		_uart_init
  1428 ;;		_uart_send_text
  1429 ;; This function is called by:
  1430 ;;		Startup code after reset
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434     0774                     _main:	
  1435                           ;psect for function _main
  1436                           
  1437                           
  1438                           ;newmain.c: 21: OSCCONbits.OSTS = 1;
  1439                           
  1440                           ;incstack = 0
  1441                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1442     0774  1683               	bsf	3,5	;RP0=1, select bank1
  1443     0775  158F               	bsf	15,3	;volatile
  1444                           
  1445                           ;newmain.c: 22: OSCCONbits.HTS = 0;
  1446     0776  110F               	bcf	15,2	;volatile
  1447                           
  1448                           ;newmain.c: 23: OSCCONbits.HTS = 0;
  1449     0777  110F               	bcf	15,2	;volatile
  1450                           
  1451                           ;newmain.c: 24: OSCCONbits.SCS = 0;
  1452     0778  100F               	bcf	15,0	;volatile
  1453                           
  1454                           ;newmain.c: 25: config_HAL();
  1455     0779  160A  118A  26AB  120A  118A  	fcall	_config_HAL
  1456                           
  1457                           ;newmain.c: 26: init_ADC();
  1458     077E  120A  158A  2084  120A  118A  	fcall	_init_ADC
  1459                           
  1460                           ;newmain.c: 27: uart_init();
  1461     0783  160A  118A  26D7  120A  118A  	fcall	_uart_init
  1462                           
  1463                           ;newmain.c: 28: init_inttimer();
  1464     0788  160A  118A  271B  120A  118A  	fcall	_init_inttimer
  1465                           
  1466                           ;newmain.c: 29: ADCON0bits.GO = 1;
  1467     078D  1283               	bcf	3,5	;RP0=0, select bank0
  1468     078E  149F               	bsf	31,1	;volatile
  1469     078F                     l2693:
  1470     078F  3029               	movlw	41
  1471     0790  1283               	bcf	3,5	;RP0=0, select bank0
  1472     0791  026D               	subwf	_contador,w	;volatile
  1473     0792  1C03               	skipc
  1474     0793  2F8F               	goto	l2693
  1475                           
  1476                           ;newmain.c: 37: PIE1bits.ADIE = 0;
  1477     0794  1683               	bsf	3,5	;RP0=1, select bank1
  1478     0795  130C               	bcf	12,6	;volatile
  1479                           
  1480                           ;newmain.c: 39: contadorLed ++;
  1481     0796  3001               	movlw	1
  1482     0797  00FF               	movwf	127
  1483     0798  087F               	movf	127,w
  1484     0799  1283               	bcf	3,5	;RP0=0, select bank0
  1485     079A  07EC               	addwf	_contadorLed,f	;volatile
  1486                           
  1487                           ;newmain.c: 40: if(contadorLed == 3){
  1488     079B  3003               	movlw	3
  1489     079C  066C               	xorwf	_contadorLed,w	;volatile
  1490     079D  1903               	btfsc	3,2
  1491                           
  1492                           ;newmain.c: 41: PORTDbits.RD0 = 1;
  1493     079E  1408               	bsf	8,0	;volatile
  1494                           
  1495                           ;newmain.c: 42: };newmain.c: 43: for(int i=0; i<=40; i++){
  1496     079F  01E7               	clrf	main@i
  1497     07A0  01E8               	clrf	main@i+1
  1498     07A1                     l2707:
  1499                           
  1500                           ;newmain.c: 44: strcpy(buffer,"   ");
  1501     07A1  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1502     07A2  1283               	bcf	3,5	;RP0=0, select bank0
  1503     07A3  1303               	bcf	3,6	;RP1=0, select bank0
  1504     07A4  00A0               	movwf	strcpy@from
  1505     07A5  30A3               	movlw	(low (_buffer| 0))& (0+255)
  1506     07A6  160A  118A  2744  120A  118A  	fcall	_strcpy
  1507                           
  1508                           ;newmain.c: 45: datoenv = muestras[i]*(1.0/1023.0);
  1509     07AB  3020               	movlw	32
  1510     07AC  00B1               	movwf	___ftmul@f1
  1511     07AD  3080               	movlw	128
  1512     07AE  00B2               	movwf	___ftmul@f1+1
  1513     07AF  303A               	movlw	58
  1514     07B0  00B3               	movwf	___ftmul@f1+2
  1515     07B1  0867               	movf	main@i,w
  1516     07B2  00E6               	movwf	??_main
  1517     07B3  0766               	addwf	??_main,w
  1518     07B4  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  1519     07B5  0084               	movwf	4
  1520     07B6  1783               	bsf	3,7	;select IRP bank3
  1521     07B7  0800               	movf	0,w
  1522     07B8  00A8               	movwf	___lwtoft@c
  1523     07B9  0A84               	incf	4,f
  1524     07BA  0800               	movf	0,w
  1525     07BB  00A9               	movwf	___lwtoft@c+1
  1526     07BC  160A  118A  2709  120A  118A  	fcall	___lwtoft
  1527     07C1  0828               	movf	?___lwtoft,w
  1528     07C2  00B4               	movwf	___ftmul@f2
  1529     07C3  0829               	movf	?___lwtoft+1,w
  1530     07C4  00B5               	movwf	___ftmul@f2+1
  1531     07C5  082A               	movf	?___lwtoft+2,w
  1532     07C6  00B6               	movwf	___ftmul@f2+2
  1533     07C7  120A  158A  240E  120A  118A  	fcall	___ftmul
  1534     07CC  0831               	movf	?___ftmul,w
  1535     07CD  00E9               	movwf	_datoenv	;volatile
  1536     07CE  0832               	movf	?___ftmul+1,w
  1537     07CF  00EA               	movwf	_datoenv+1	;volatile
  1538     07D0  0833               	movf	?___ftmul+2,w
  1539     07D1  00EB               	movwf	_datoenv+2	;volatile
  1540                           
  1541                           ;newmain.c: 46: sprintf(buffer, "%f", datoenv);
  1542     07D2  307B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1543     07D3  00DC               	movwf	sprintf@f
  1544     07D4  0869               	movf	_datoenv,w	;volatile
  1545     07D5  00DD               	movwf	?_sprintf+1
  1546     07D6  086A               	movf	_datoenv+1,w	;volatile
  1547     07D7  00DE               	movwf	?_sprintf+2
  1548     07D8  086B               	movf	_datoenv+2,w	;volatile
  1549     07D9  00DF               	movwf	?_sprintf+3
  1550     07DA  30A3               	movlw	(low (_buffer| 0))& (0+255)
  1551     07DB  120A  118A  2031  120A  118A  	fcall	_sprintf
  1552                           
  1553                           ;newmain.c: 47: buffer[19] = ';';
  1554     07E0  303B               	movlw	59
  1555     07E1  00B6               	movwf	(_buffer^(0+128)+19)
  1556                           
  1557                           ;newmain.c: 48: uart_send_text(buffer);
  1558     07E2  30A3               	movlw	(low (_buffer| 0))& (0+255)
  1559     07E3  160A  118A  27DE  120A  118A  	fcall	_uart_send_text
  1560     07E8  3001               	movlw	1
  1561     07E9  07E7               	addwf	main@i,f
  1562     07EA  1803               	skipnc
  1563     07EB  0AE8               	incf	main@i+1,f
  1564     07EC  3000               	movlw	0
  1565     07ED  07E8               	addwf	main@i+1,f
  1566     07EE  0868               	movf	main@i+1,w
  1567     07EF  3A80               	xorlw	128
  1568     07F0  00FF               	movwf	127
  1569     07F1  3080               	movlw	128
  1570     07F2  027F               	subwf	127,w
  1571     07F3  1D03               	skipz
  1572     07F4  2FF7               	goto	u3545
  1573     07F5  3029               	movlw	41
  1574     07F6  0267               	subwf	main@i,w
  1575     07F7                     u3545:
  1576     07F7  1C03               	skipc
  1577     07F8  2FA1               	goto	l2707
  1578                           
  1579                           ;newmain.c: 49: };newmain.c: 58: contador = 0;
  1580     07F9  1283               	bcf	3,5	;RP0=0, select bank0
  1581     07FA  1303               	bcf	3,6	;RP1=0, select bank0
  1582     07FB  01ED               	clrf	_contador	;volatile
  1583                           
  1584                           ;newmain.c: 59: ADCON0bits.GO = 1;
  1585     07FC  149F               	bsf	31,1	;volatile
  1586                           
  1587                           ;newmain.c: 61: PIE1bits.ADIE = 1;
  1588     07FD  1683               	bsf	3,5	;RP0=1, select bank1
  1589     07FE  170C               	bsf	12,6	;volatile
  1590     07FF  2F8F               	goto	l2693
  1591     0800                     __end_of_main:
  1592                           
  1593                           	psect	text1
  1594     17DE                     __ptext1:	
  1595 ;; *************** function _uart_send_text *****************
  1596 ;; Defined at:
  1597 ;;		line 91 in file "uart.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  buffer          1    wreg     PTR unsigned char 
  1600 ;;		 -> buffer(20), 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  buffer          1    2[BANK0 ] PTR unsigned char 
  1603 ;;		 -> buffer(20), 
  1604 ;;  aux             1    1[BANK0 ] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : B00/100
  1611 ;;		On exit  : 300/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1614 ;;      Params:         0       0       0       0       0
  1615 ;;      Locals:         0       2       0       0       0
  1616 ;;      Temps:          0       0       0       0       0
  1617 ;;      Totals:         0       2       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used: 1
  1620 ;; Hardware stack levels required when called: 2
  1621 ;; This function calls:
  1622 ;;		_uart_send
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628     17DE                     _uart_send_text:	
  1629                           ;psect for function _uart_send_text
  1630                           
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _uart_send_text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1634                           ;uart_send_text@buffer stored from wreg
  1635     17DE  1283               	bcf	3,5	;RP0=0, select bank0
  1636     17DF  00A2               	movwf	uart_send_text@buffer
  1637     17E0                     l186:	
  1638                           ;uart.c: 93: char aux;;uart.c: 94: do{
  1639                           
  1640                           
  1641                           ;uart.c: 95: aux = *buffer;
  1642     17E0  0822               	movf	uart_send_text@buffer,w
  1643     17E1  0084               	movwf	4
  1644     17E2  0800               	movf	0,w
  1645     17E3  00A1               	movwf	uart_send_text@aux
  1646                           
  1647                           ;uart.c: 96: uart_send(aux);
  1648     17E4  0821               	movf	uart_send_text@aux,w
  1649     17E5  160A  118A  26C1  160A  118A  	fcall	_uart_send
  1650                           
  1651                           ;uart.c: 97: buffer++;
  1652     17EA  3001               	movlw	1
  1653     17EB  00FF               	movwf	127
  1654     17EC  087F               	movf	127,w
  1655     17ED  07A2               	addwf	uart_send_text@buffer,f
  1656                           
  1657                           ;uart.c: 98: }while(*buffer != ';');
  1658     17EE  0822               	movf	uart_send_text@buffer,w
  1659     17EF  0084               	movwf	4
  1660     17F0  303B               	movlw	59
  1661     17F1  1383               	bcf	3,7	;select IRP bank0
  1662     17F2  0600               	xorwf	0,w
  1663     17F3  1D03               	btfss	3,2
  1664     17F4  2FE0               	goto	l186
  1665                           
  1666                           ;uart.c: 99: uart_send('\r');
  1667     17F5  300D               	movlw	13
  1668     17F6  160A  118A  26C1  160A  118A  	fcall	_uart_send
  1669                           
  1670                           ;uart.c: 100: uart_send('\n');
  1671     17FB  300A               	movlw	10
  1672     17FC  160A  118A  26C1   	fcall	_uart_send
  1673     17FF  0008               	return
  1674     1800                     __end_of_uart_send_text:
  1675                           
  1676                           	psect	text2
  1677     16C1                     __ptext2:	
  1678 ;; *************** function _uart_send *****************
  1679 ;; Defined at:
  1680 ;;		line 66 in file "uart.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  data            1    wreg     unsigned char 
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;  data            1    0[BANK0 ] unsigned char 
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg
  1689 ;; Tracked objects:
  1690 ;;		On entry : 300/0
  1691 ;;		On exit  : 300/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1694 ;;      Params:         0       0       0       0       0
  1695 ;;      Locals:         0       1       0       0       0
  1696 ;;      Temps:          0       0       0       0       0
  1697 ;;      Totals:         0       1       0       0       0
  1698 ;;Total ram usage:        1 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_uart_send_text
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708     16C1                     _uart_send:	
  1709                           ;psect for function _uart_send
  1710                           
  1711                           
  1712                           ;incstack = 0
  1713                           ; Regs used in _uart_send: [wreg]
  1714                           ;uart_send@data stored from wreg
  1715     16C1  00A0               	movwf	uart_send@data
  1716                           
  1717                           ;uart.c: 68: TXEN = 1;
  1718     16C2  1683               	bsf	3,5	;RP0=1, select bank1
  1719     16C3  1698               	bsf	24,5	;volatile
  1720     16C4                     l172:	
  1721                           ;uart.c: 69: while (TXIF == 0);
  1722                           
  1723     16C4  1283               	bcf	3,5	;RP0=0, select bank0
  1724     16C5  1E0C               	btfss	12,4	;volatile
  1725     16C6  2EC4               	goto	l172
  1726                           
  1727                           ;uart.c: 70: TXREG = data;
  1728     16C7  0820               	movf	uart_send@data,w
  1729     16C8  0099               	movwf	25	;volatile
  1730     16C9  0008               	return
  1731     16CA                     __end_of_uart_send:
  1732                           
  1733                           	psect	text3
  1734     16D7                     __ptext3:	
  1735 ;; *************** function _uart_init *****************
  1736 ;; Defined at:
  1737 ;;		line 3 in file "uart.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/300
  1748 ;;		On exit  : 300/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1751 ;;      Params:         0       0       0       0       0
  1752 ;;      Locals:         0       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0
  1754 ;;      Totals:         0       0       0       0       0
  1755 ;;Total ram usage:        0 bytes
  1756 ;; Hardware stack levels used: 1
  1757 ;; Hardware stack levels required when called: 1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765     16D7                     _uart_init:	
  1766                           ;psect for function _uart_init
  1767                           
  1768                           
  1769                           ;uart.c: 6: TRISCbits.TRISC6 = 0;
  1770                           
  1771                           ;incstack = 0
  1772                           ; Regs used in _uart_init: [wreg]
  1773     16D7  1683               	bsf	3,5	;RP0=1, select bank1
  1774     16D8  1303               	bcf	3,6	;RP1=0, select bank1
  1775     16D9  1307               	bcf	7,6	;volatile
  1776                           
  1777                           ;uart.c: 7: TRISCbits.TRISC7 = 1;
  1778     16DA  1787               	bsf	7,7	;volatile
  1779                           
  1780                           ;uart.c: 8: TXSTAbits.BRGH = 0;
  1781     16DB  1118               	bcf	24,2	;volatile
  1782                           
  1783                           ;uart.c: 9: BAUDCTLbits.BRG16 = 1;
  1784     16DC  1703               	bsf	3,6	;RP1=1, select bank3
  1785     16DD  1587               	bsf	7,3	;volatile
  1786                           
  1787                           ;uart.c: 20: SPBRG = 51;
  1788     16DE  3033               	movlw	51
  1789     16DF  1303               	bcf	3,6	;RP1=0, select bank1
  1790     16E0  0099               	movwf	25	;volatile
  1791                           
  1792                           ;uart.c: 21: TXSTAbits.SYNC = 0;
  1793     16E1  1218               	bcf	24,4	;volatile
  1794                           
  1795                           ;uart.c: 22: RCSTAbits.SPEN = 1;
  1796     16E2  1283               	bcf	3,5	;RP0=0, select bank0
  1797     16E3  1798               	bsf	24,7	;volatile
  1798                           
  1799                           ;uart.c: 23: RCSTA = 0b10010000;
  1800     16E4  3090               	movlw	144
  1801     16E5  0098               	movwf	24	;volatile
  1802     16E6  0008               	return
  1803     16E7                     __end_of_uart_init:
  1804                           
  1805                           	psect	text4
  1806     1744                     __ptext4:	
  1807 ;; *************** function _strcpy *****************
  1808 ;; Defined at:
  1809 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\strcpy.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  to              1    wreg     PTR unsigned char 
  1812 ;;		 -> buffer(20), 
  1813 ;;  from            1    0[BANK0 ] PTR const unsigned char 
  1814 ;;		 -> STR_1(4), 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  to              1    1[BANK0 ] PTR unsigned char 
  1817 ;;		 -> buffer(20), 
  1818 ;;  cp              1    2[BANK0 ] PTR unsigned char 
  1819 ;;		 -> buffer(20), 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      PTR unsigned char 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1824 ;; Tracked objects:
  1825 ;;		On entry : 300/0
  1826 ;;		On exit  : B00/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         0       1       0       0       0
  1830 ;;      Locals:         0       2       0       0       0
  1831 ;;      Temps:          0       0       0       0       0
  1832 ;;      Totals:         0       3       0       0       0
  1833 ;;Total ram usage:        3 bytes
  1834 ;; Hardware stack levels used: 2
  1835 ;; Hardware stack levels required when called: 1
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843     1744                     _strcpy:	
  1844                           ;psect for function _strcpy
  1845                           
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _strcpy: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1849                           ;strcpy@to stored from wreg
  1850     1744  00A1               	movwf	strcpy@to
  1851     1745  0821               	movf	strcpy@to,w
  1852     1746  00A2               	movwf	strcpy@cp
  1853     1747                     l2493:
  1854     1747  0820               	movf	strcpy@from,w
  1855     1748  0084               	movwf	4
  1856     1749  120A  158A  2000  160A  118A  	fcall	stringdir
  1857     174E  00FF               	movwf	127
  1858     174F  0822               	movf	strcpy@cp,w
  1859     1750  0084               	movwf	4
  1860     1751  087F               	movf	127,w
  1861     1752  1383               	bcf	3,7	;select IRP bank0
  1862     1753  0080               	movwf	0
  1863     1754  0800               	movf	0,w
  1864     1755  1903               	btfsc	3,2
  1865     1756  0008               	return
  1866     1757  3001               	movlw	1
  1867     1758  00FF               	movwf	127
  1868     1759  087F               	movf	127,w
  1869     175A  07A2               	addwf	strcpy@cp,f
  1870     175B  3001               	movlw	1
  1871     175C  00FF               	movwf	127
  1872     175D  087F               	movf	127,w
  1873     175E  07A0               	addwf	strcpy@from,f
  1874     175F  2F47               	goto	l2493
  1875     1760                     __end_of_strcpy:
  1876                           
  1877                           	psect	text5
  1878     0031                     __ptext5:	
  1879 ;; *************** function _sprintf *****************
  1880 ;; Defined at:
  1881 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  sp              1    wreg     PTR unsigned char 
  1884 ;;		 -> buffer(20), 
  1885 ;;  f               1   60[BANK0 ] PTR const unsigned char 
  1886 ;;		 -> STR_2(3), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1889 ;;		 -> buffer(20), 
  1890 ;;  tmpval          4   14[BANK1 ] struct .
  1891 ;;  val             4    8[BANK1 ] unsigned long 
  1892 ;;  fval            3   19[BANK1 ] unsigned long 
  1893 ;;  eexp            2   12[BANK1 ] int 
  1894 ;;  prec            2    6[BANK1 ] int 
  1895 ;;  flag            2    4[BANK1 ] unsigned short 
  1896 ;;  cp              2    0        PTR const unsigned char 
  1897 ;;  len             2    0        unsigned int 
  1898 ;;  width           2    0        int 
  1899 ;;  c               1   22[BANK1 ] unsigned char 
  1900 ;;  ap              1    3[BANK1 ] PTR void [1]
  1901 ;;		 -> ?_sprintf(2), 
  1902 ;;  d               1    0        unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  2   60[BANK0 ] int 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 300/800
  1909 ;;		On exit  : B00/100
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       4       0       0       0
  1913 ;;      Locals:         0       0      23       0       0
  1914 ;;      Temps:          0       6       0       0       0
  1915 ;;      Totals:         0      10      23       0       0
  1916 ;;Total ram usage:       33 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; Hardware stack levels required when called: 4
  1919 ;; This function calls:
  1920 ;;		___awdiv
  1921 ;;		___ftadd
  1922 ;;		___ftge
  1923 ;;		___ftmul
  1924 ;;		___ftneg
  1925 ;;		___ftsub
  1926 ;;		___fttol
  1927 ;;		___lldiv
  1928 ;;		___llmod
  1929 ;;		___lltoft
  1930 ;;		___wmul
  1931 ;;		__div_to_l_
  1932 ;;		__tdiv_to_l_
  1933 ;;		_fround
  1934 ;;		_scale
  1935 ;; This function is called by:
  1936 ;;		_main
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940     0031                     _sprintf:	
  1941                           ;psect for function _sprintf
  1942                           
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1946                           ;sprintf@sp stored from wreg
  1947     0031  1683               	bsf	3,5	;RP0=1, select bank1
  1948     0032  00C9               	movwf	sprintf@sp^(0+128)
  1949                           
  1950                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1951     0033  305D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1952     0034  00BA               	movwf	sprintf@ap^(0+128)
  1953     0035                     l2661:	
  1954                           ;doprnt.c: 553: while((c = *f++)) {
  1955                           
  1956     0035  3001               	movlw	1
  1957     0036  1283               	bcf	3,5	;RP0=0, select bank0
  1958     0037  07DC               	addwf	sprintf@f,f
  1959     0038  30FF               	movlw	-1
  1960     0039  075C               	addwf	sprintf@f,w
  1961     003A  0084               	movwf	4
  1962     003B  120A  158A  2000  120A  118A  	fcall	stringdir
  1963     0040  1683               	bsf	3,5	;RP0=1, select bank1
  1964     0041  00CD               	movwf	sprintf@c^(0+128)
  1965     0042  084D               	movf	sprintf@c^(0+128),w
  1966     0043  1903               	btfsc	3,2
  1967     0044  2D17               	goto	l2663
  1968                           
  1969                           ;doprnt.c: 555: if(c != '%')
  1970     0045  3025               	movlw	37
  1971     0046  064D               	xorwf	sprintf@c^(0+128),w
  1972     0047  1903               	btfsc	3,2
  1973     0048  284D               	goto	l2503
  1974                           
  1975                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1976     0049  0849               	movf	sprintf@sp^(0+128),w
  1977     004A  0084               	movwf	4
  1978     004B  084D               	movf	sprintf@c^(0+128),w
  1979     004C  2D10               	goto	L4
  1980     004D                     l2503:	
  1981                           ;doprnt.c: 559: continue;
  1982                           
  1983                           
  1984                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1985     004D  01BB               	clrf	sprintf@flag^(0+128)
  1986     004E  01BC               	clrf	(sprintf@flag+1)^(0+128)
  1987                           
  1988                           ;doprnt.c: 661: switch(c = *f++) {
  1989     004F  2852               	goto	l2507
  1990     0050                     l312:	
  1991                           ;doprnt.c: 688: case 'f':
  1992                           
  1993                           
  1994                           ;doprnt.c: 689: flag |= 0x400;
  1995     0050  153C               	bsf	(sprintf@flag^(0+128)+1),2
  1996                           
  1997                           ;doprnt.c: 690: break;
  1998     0051  2866               	goto	l2509
  1999     0052                     l2507:
  2000     0052  3001               	movlw	1
  2001     0053  1283               	bcf	3,5	;RP0=0, select bank0
  2002     0054  07DC               	addwf	sprintf@f,f
  2003     0055  30FF               	movlw	-1
  2004     0056  075C               	addwf	sprintf@f,w
  2005     0057  0084               	movwf	4
  2006     0058  120A  158A  2000  120A  118A  	fcall	stringdir
  2007     005D  1683               	bsf	3,5	;RP0=1, select bank1
  2008     005E  00CD               	movwf	sprintf@c^(0+128)
  2009                           
  2010                           ; Switch size 1, requested type "simple"
  2011                           ; Number of cases is 2, Range of values is 0 to 102
  2012                           ; switch strategies available:
  2013                           ; Name         Instructions Cycles
  2014                           ; simple_byte            7     4 (average)
  2015                           ; jumptable            260     6 (fixed)
  2016                           ;	Chosen strategy is simple_byte
  2017     005F  3A00               	xorlw	0	; case 0
  2018     0060  1903               	skipnz
  2019     0061  2D17               	goto	l2663
  2020     0062  3A66               	xorlw	102	; case 102
  2021     0063  1903               	skipnz
  2022     0064  2850               	goto	l312
  2023     0065  2835               	goto	l2661
  2024     0066                     l2509:
  2025                           
  2026                           ;doprnt.c: 851: if(flag & (0x700)) {
  2027     0066  3000               	movlw	0
  2028     0067  053B               	andwf	sprintf@flag^(0+128),w
  2029     0068  1283               	bcf	3,5	;RP0=0, select bank0
  2030     0069  00E0               	movwf	??_sprintf
  2031     006A  3007               	movlw	7
  2032     006B  1683               	bsf	3,5	;RP0=1, select bank1
  2033     006C  053C               	andwf	(sprintf@flag+1)^(0+128),w
  2034     006D  1283               	bcf	3,5	;RP0=0, select bank0
  2035     006E  00E1               	movwf	??_sprintf+1
  2036     006F  0860               	movf	??_sprintf,w
  2037     0070  0461               	iorwf	??_sprintf+1,w
  2038     0071  1903               	btfsc	3,2
  2039     0072  2D08               	goto	l2655
  2040                           
  2041                           ;doprnt.c: 855: prec = 6;
  2042     0073  3006               	movlw	6
  2043     0074  1683               	bsf	3,5	;RP0=1, select bank1
  2044     0075  00BD               	movwf	sprintf@prec^(0+128)
  2045     0076  3000               	movlw	0
  2046     0077  00BE               	movwf	(sprintf@prec^(0+128)+1)
  2047                           
  2048                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2049     0078  083A               	movf	sprintf@ap^(0+128),w
  2050     0079  0084               	movwf	4
  2051     007A  1383               	bcf	3,7	;select IRP bank0
  2052     007B  0800               	movf	0,w
  2053     007C  00CA               	movwf	sprintf@fval^(0+128)
  2054     007D  0A84               	incf	4,f
  2055     007E  0800               	movf	0,w
  2056     007F  00CB               	movwf	(sprintf@fval+1)^(0+128)
  2057     0080  0A84               	incf	4,f
  2058     0081  0800               	movf	0,w
  2059     0082  00CC               	movwf	(sprintf@fval+2)^(0+128)
  2060     0083  3003               	movlw	3
  2061     0084  00FF               	movwf	127
  2062     0085  087F               	movf	127,w
  2063     0086  07BA               	addwf	sprintf@ap^(0+128),f
  2064                           
  2065                           ;doprnt.c: 857: if(fval < 0.0) {
  2066     0087  084A               	movf	sprintf@fval^(0+128),w
  2067     0088  1283               	bcf	3,5	;RP0=0, select bank0
  2068     0089  00A0               	movwf	___ftge@ff1
  2069     008A  1683               	bsf	3,5	;RP0=1, select bank1
  2070     008B  084B               	movf	(sprintf@fval+1)^(0+128),w
  2071     008C  1283               	bcf	3,5	;RP0=0, select bank0
  2072     008D  00A1               	movwf	___ftge@ff1+1
  2073     008E  1683               	bsf	3,5	;RP0=1, select bank1
  2074     008F  084C               	movf	(sprintf@fval+2)^(0+128),w
  2075     0090  1283               	bcf	3,5	;RP0=0, select bank0
  2076     0091  00A2               	movwf	___ftge@ff1+2
  2077     0092  3000               	movlw	0
  2078     0093  00A3               	movwf	___ftge@ff2
  2079     0094  3000               	movlw	0
  2080     0095  00A4               	movwf	___ftge@ff2+1
  2081     0096  3000               	movlw	0
  2082     0097  00A5               	movwf	___ftge@ff2+2
  2083     0098  120A  158A  20CF  120A  118A  	fcall	___ftge
  2084     009D  1803               	btfsc	3,0
  2085     009E  28BF               	goto	l2523
  2086                           
  2087                           ;doprnt.c: 858: fval = -fval;
  2088     009F  1683               	bsf	3,5	;RP0=1, select bank1
  2089     00A0  084A               	movf	sprintf@fval^(0+128),w
  2090     00A1  1283               	bcf	3,5	;RP0=0, select bank0
  2091     00A2  00A0               	movwf	___ftneg@f1
  2092     00A3  1683               	bsf	3,5	;RP0=1, select bank1
  2093     00A4  084B               	movf	(sprintf@fval+1)^(0+128),w
  2094     00A5  1283               	bcf	3,5	;RP0=0, select bank0
  2095     00A6  00A1               	movwf	___ftneg@f1+1
  2096     00A7  1683               	bsf	3,5	;RP0=1, select bank1
  2097     00A8  084C               	movf	(sprintf@fval+2)^(0+128),w
  2098     00A9  1283               	bcf	3,5	;RP0=0, select bank0
  2099     00AA  00A2               	movwf	___ftneg@f1+2
  2100     00AB  160A  118A  26B1  120A  118A  	fcall	___ftneg
  2101     00B0  0820               	movf	?___ftneg,w
  2102     00B1  1683               	bsf	3,5	;RP0=1, select bank1
  2103     00B2  00CA               	movwf	sprintf@fval^(0+128)
  2104     00B3  1283               	bcf	3,5	;RP0=0, select bank0
  2105     00B4  0821               	movf	?___ftneg+1,w
  2106     00B5  1683               	bsf	3,5	;RP0=1, select bank1
  2107     00B6  00CB               	movwf	(sprintf@fval+1)^(0+128)
  2108     00B7  1283               	bcf	3,5	;RP0=0, select bank0
  2109     00B8  0822               	movf	?___ftneg+2,w
  2110     00B9  1683               	bsf	3,5	;RP0=1, select bank1
  2111     00BA  00CC               	movwf	(sprintf@fval+2)^(0+128)
  2112                           
  2113                           ;doprnt.c: 859: flag |= 0x03;
  2114     00BB  3003               	movlw	3
  2115     00BC  04BB               	iorwf	sprintf@flag^(0+128),f
  2116     00BD  3000               	movlw	0
  2117     00BE  04BC               	iorwf	(sprintf@flag+1)^(0+128),f
  2118     00BF                     l2523:
  2119                           
  2120                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  2121     00BF  1683               	bsf	3,5	;RP0=1, select bank1
  2122     00C0  01C3               	clrf	sprintf@eexp^(0+128)
  2123     00C1  01C4               	clrf	(sprintf@eexp+1)^(0+128)
  2124                           
  2125                           ;doprnt.c: 862: if( fval!=0) {
  2126     00C2  084C               	movf	(sprintf@fval+2)^(0+128),w
  2127     00C3  044B               	iorwf	(sprintf@fval+1)^(0+128),w
  2128     00C4  044A               	iorwf	sprintf@fval^(0+128),w
  2129     00C5  1903               	skipnz
  2130     00C6  29A8               	goto	l2553
  2131                           
  2132                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2133     00C7  30CA               	movlw	low (sprintf@fval| 0)
  2134     00C8  0084               	movwf	4
  2135     00C9  1383               	bcf	3,7	;select IRP bank1
  2136     00CA  0800               	movf	0,w
  2137     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2138     00CC  00E0               	movwf	??_sprintf
  2139     00CD  0A84               	incf	4,f
  2140     00CE  0800               	movf	0,w
  2141     00CF  00E1               	movwf	??_sprintf+1
  2142     00D0  0A84               	incf	4,f
  2143     00D1  0800               	movf	0,w
  2144     00D2  00E2               	movwf	??_sprintf+2
  2145     00D3  0A84               	incf	4,f
  2146     00D4  0800               	movf	0,w
  2147     00D5  00E3               	movwf	??_sprintf+3
  2148     00D6  300F               	movlw	15
  2149     00D7                     u3275:
  2150     00D7  1003               	clrc
  2151     00D8  0CE3               	rrf	??_sprintf+3,f
  2152     00D9  0CE2               	rrf	??_sprintf+2,f
  2153     00DA  0CE1               	rrf	??_sprintf+1,f
  2154     00DB  0CE0               	rrf	??_sprintf,f
  2155     00DC  3EFF               	addlw	-1
  2156     00DD  1D03               	skipz
  2157     00DE  28D7               	goto	u3275
  2158     00DF  30FF               	movlw	255
  2159     00E0  0560               	andwf	??_sprintf,w
  2160     00E1  00E4               	movwf	??_sprintf+4
  2161     00E2  3000               	movlw	0
  2162     00E3  0561               	andwf	??_sprintf+1,w
  2163     00E4  00E5               	movwf	??_sprintf+5
  2164     00E5  0864               	movf	??_sprintf+4,w
  2165     00E6  3E82               	addlw	130
  2166     00E7  1683               	bsf	3,5	;RP0=1, select bank1
  2167     00E8  00C3               	movwf	sprintf@eexp^(0+128)
  2168     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2169     00EA  0865               	movf	??_sprintf+5,w
  2170     00EB  1803               	skipnc
  2171     00EC  3E01               	addlw	1
  2172     00ED  3EFF               	addlw	255
  2173     00EE  1683               	bsf	3,5	;RP0=1, select bank1
  2174     00EF  00C4               	movwf	(sprintf@eexp+1)^(0+128)
  2175                           
  2176                           ;doprnt.c: 864: eexp--;
  2177     00F0  30FF               	movlw	255
  2178     00F1  07C3               	addwf	sprintf@eexp^(0+128),f
  2179     00F2  1803               	skipnc
  2180     00F3  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2181     00F4  30FF               	movlw	255
  2182     00F5  07C4               	addwf	(sprintf@eexp+1)^(0+128),f
  2183                           
  2184                           ;doprnt.c: 865: eexp *= 3;
  2185     00F6  3003               	movlw	3
  2186     00F7  1283               	bcf	3,5	;RP0=0, select bank0
  2187     00F8  00A0               	movwf	___wmul@multiplier
  2188     00F9  3000               	movlw	0
  2189     00FA  00A1               	movwf	___wmul@multiplier+1
  2190     00FB  1683               	bsf	3,5	;RP0=1, select bank1
  2191     00FC  0844               	movf	(sprintf@eexp+1)^(0+128),w
  2192     00FD  1283               	bcf	3,5	;RP0=0, select bank0
  2193     00FE  00A3               	movwf	___wmul@multiplicand+1
  2194     00FF  1683               	bsf	3,5	;RP0=1, select bank1
  2195     0100  0843               	movf	sprintf@eexp^(0+128),w
  2196     0101  1283               	bcf	3,5	;RP0=0, select bank0
  2197     0102  00A2               	movwf	___wmul@multiplicand
  2198     0103  160A  118A  279C  120A  118A  	fcall	___wmul
  2199     0108  0821               	movf	?___wmul+1,w
  2200     0109  1683               	bsf	3,5	;RP0=1, select bank1
  2201     010A  00C4               	movwf	(sprintf@eexp+1)^(0+128)
  2202     010B  1283               	bcf	3,5	;RP0=0, select bank0
  2203     010C  0820               	movf	?___wmul,w
  2204     010D  1683               	bsf	3,5	;RP0=1, select bank1
  2205     010E  00C3               	movwf	sprintf@eexp^(0+128)
  2206                           
  2207                           ;doprnt.c: 866: eexp /= 10;
  2208     010F  300A               	movlw	10
  2209     0110  1283               	bcf	3,5	;RP0=0, select bank0
  2210     0111  00A6               	movwf	___awdiv@divisor
  2211     0112  3000               	movlw	0
  2212     0113  00A7               	movwf	___awdiv@divisor+1
  2213     0114  1683               	bsf	3,5	;RP0=1, select bank1
  2214     0115  0844               	movf	(sprintf@eexp+1)^(0+128),w
  2215     0116  1283               	bcf	3,5	;RP0=0, select bank0
  2216     0117  00A9               	movwf	___awdiv@dividend+1
  2217     0118  1683               	bsf	3,5	;RP0=1, select bank1
  2218     0119  0843               	movf	sprintf@eexp^(0+128),w
  2219     011A  1283               	bcf	3,5	;RP0=0, select bank0
  2220     011B  00A8               	movwf	___awdiv@dividend
  2221     011C  120A  158A  21D3  120A  118A  	fcall	___awdiv
  2222     0121  0827               	movf	?___awdiv+1,w
  2223     0122  1683               	bsf	3,5	;RP0=1, select bank1
  2224     0123  00C4               	movwf	(sprintf@eexp+1)^(0+128)
  2225     0124  1283               	bcf	3,5	;RP0=0, select bank0
  2226     0125  0826               	movf	?___awdiv,w
  2227     0126  1683               	bsf	3,5	;RP0=1, select bank1
  2228     0127  00C3               	movwf	sprintf@eexp^(0+128)
  2229                           
  2230                           ;doprnt.c: 867: if(eexp < 0)
  2231     0128  1FC4               	btfss	(sprintf@eexp+1)^(0+128),7
  2232     0129  2930               	goto	l2539
  2233                           
  2234                           ;doprnt.c: 868: eexp--;
  2235     012A  30FF               	movlw	255
  2236     012B  07C3               	addwf	sprintf@eexp^(0+128),f
  2237     012C  1803               	skipnc
  2238     012D  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2239     012E  30FF               	movlw	255
  2240     012F  07C4               	addwf	(sprintf@eexp+1)^(0+128),f
  2241     0130                     l2539:
  2242                           
  2243                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  2244     0130  0343               	decf	sprintf@eexp^(0+128),w
  2245     0131  3AFF               	xorlw	255
  2246     0132  120A  118A  251C  120A  118A  	fcall	_scale
  2247     0137  0840               	movf	?_scale,w
  2248     0138  1683               	bsf	3,5	;RP0=1, select bank1
  2249     0139  00C5               	movwf	sprintf@tmpval^(0+128)
  2250     013A  1283               	bcf	3,5	;RP0=0, select bank0
  2251     013B  0841               	movf	?_scale+1,w
  2252     013C  1683               	bsf	3,5	;RP0=1, select bank1
  2253     013D  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2254     013E  1283               	bcf	3,5	;RP0=0, select bank0
  2255     013F  0842               	movf	?_scale+2,w
  2256     0140  1683               	bsf	3,5	;RP0=1, select bank1
  2257     0141  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2258                           
  2259                           ;doprnt.c: 873: tmpval.integ *= fval;
  2260     0142  084A               	movf	sprintf@fval^(0+128),w
  2261     0143  1283               	bcf	3,5	;RP0=0, select bank0
  2262     0144  00B1               	movwf	___ftmul@f1
  2263     0145  1683               	bsf	3,5	;RP0=1, select bank1
  2264     0146  084B               	movf	(sprintf@fval+1)^(0+128),w
  2265     0147  1283               	bcf	3,5	;RP0=0, select bank0
  2266     0148  00B2               	movwf	___ftmul@f1+1
  2267     0149  1683               	bsf	3,5	;RP0=1, select bank1
  2268     014A  084C               	movf	(sprintf@fval+2)^(0+128),w
  2269     014B  1283               	bcf	3,5	;RP0=0, select bank0
  2270     014C  00B3               	movwf	___ftmul@f1+2
  2271     014D  1683               	bsf	3,5	;RP0=1, select bank1
  2272     014E  0845               	movf	sprintf@tmpval^(0+128),w
  2273     014F  1283               	bcf	3,5	;RP0=0, select bank0
  2274     0150  00B4               	movwf	___ftmul@f2
  2275     0151  1683               	bsf	3,5	;RP0=1, select bank1
  2276     0152  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2277     0153  1283               	bcf	3,5	;RP0=0, select bank0
  2278     0154  00B5               	movwf	___ftmul@f2+1
  2279     0155  1683               	bsf	3,5	;RP0=1, select bank1
  2280     0156  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2281     0157  1283               	bcf	3,5	;RP0=0, select bank0
  2282     0158  00B6               	movwf	___ftmul@f2+2
  2283     0159  120A  158A  240E  120A  118A  	fcall	___ftmul
  2284     015E  0831               	movf	?___ftmul,w
  2285     015F  1683               	bsf	3,5	;RP0=1, select bank1
  2286     0160  00C5               	movwf	sprintf@tmpval^(0+128)
  2287     0161  1283               	bcf	3,5	;RP0=0, select bank0
  2288     0162  0832               	movf	?___ftmul+1,w
  2289     0163  1683               	bsf	3,5	;RP0=1, select bank1
  2290     0164  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2291     0165  1283               	bcf	3,5	;RP0=0, select bank0
  2292     0166  0833               	movf	?___ftmul+2,w
  2293     0167  1683               	bsf	3,5	;RP0=1, select bank1
  2294     0168  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2295                           
  2296                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  2297     0169  0845               	movf	sprintf@tmpval^(0+128),w
  2298     016A  1283               	bcf	3,5	;RP0=0, select bank0
  2299     016B  00A0               	movwf	___ftge@ff1
  2300     016C  1683               	bsf	3,5	;RP0=1, select bank1
  2301     016D  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2302     016E  1283               	bcf	3,5	;RP0=0, select bank0
  2303     016F  00A1               	movwf	___ftge@ff1+1
  2304     0170  1683               	bsf	3,5	;RP0=1, select bank1
  2305     0171  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2306     0172  1283               	bcf	3,5	;RP0=0, select bank0
  2307     0173  00A2               	movwf	___ftge@ff1+2
  2308     0174  3000               	movlw	0
  2309     0175  00A3               	movwf	___ftge@ff2
  2310     0176  3080               	movlw	128
  2311     0177  00A4               	movwf	___ftge@ff2+1
  2312     0178  303F               	movlw	63
  2313     0179  00A5               	movwf	___ftge@ff2+2
  2314     017A  120A  158A  20CF  120A  118A  	fcall	___ftge
  2315     017F  1803               	btfsc	3,0
  2316     0180  2988               	goto	l2547
  2317                           
  2318                           ;doprnt.c: 875: eexp--;
  2319     0181  30FF               	movlw	255
  2320     0182  1683               	bsf	3,5	;RP0=1, select bank1
  2321     0183  07C3               	addwf	sprintf@eexp^(0+128),f
  2322     0184  1803               	skipnc
  2323     0185  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2324     0186  30FF               	movlw	255
  2325     0187  29A7               	goto	L5
  2326     0188                     l2547:
  2327                           
  2328                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  2329     0188  1683               	bsf	3,5	;RP0=1, select bank1
  2330     0189  0845               	movf	sprintf@tmpval^(0+128),w
  2331     018A  1283               	bcf	3,5	;RP0=0, select bank0
  2332     018B  00A0               	movwf	___ftge@ff1
  2333     018C  1683               	bsf	3,5	;RP0=1, select bank1
  2334     018D  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2335     018E  1283               	bcf	3,5	;RP0=0, select bank0
  2336     018F  00A1               	movwf	___ftge@ff1+1
  2337     0190  1683               	bsf	3,5	;RP0=1, select bank1
  2338     0191  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2339     0192  1283               	bcf	3,5	;RP0=0, select bank0
  2340     0193  00A2               	movwf	___ftge@ff1+2
  2341     0194  3000               	movlw	0
  2342     0195  00A3               	movwf	___ftge@ff2
  2343     0196  3020               	movlw	32
  2344     0197  00A4               	movwf	___ftge@ff2+1
  2345     0198  3041               	movlw	65
  2346     0199  00A5               	movwf	___ftge@ff2+2
  2347     019A  120A  158A  20CF  120A  118A  	fcall	___ftge
  2348     019F  1C03               	btfss	3,0
  2349     01A0  29A8               	goto	l2553
  2350                           
  2351                           ;doprnt.c: 877: eexp++;
  2352     01A1  3001               	movlw	1
  2353     01A2  1683               	bsf	3,5	;RP0=1, select bank1
  2354     01A3  07C3               	addwf	sprintf@eexp^(0+128),f
  2355     01A4  1803               	skipnc
  2356     01A5  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2357     01A6  3000               	movlw	0
  2358     01A7                     L5:
  2359     01A7  07C4               	addwf	(sprintf@eexp+1)^(0+128),f
  2360     01A8                     l2553:	
  2361                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  2362                           
  2363                           
  2364                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  2365     01A8  3006               	movlw	6
  2366     01A9  120A  158A  26C1  120A  118A  	fcall	_fround
  2367     01AE  0840               	movf	?_fround,w
  2368     01AF  00CA               	movwf	___ftadd@f1
  2369     01B0  0841               	movf	?_fround+1,w
  2370     01B1  00CB               	movwf	___ftadd@f1+1
  2371     01B2  0842               	movf	?_fround+2,w
  2372     01B3  00CC               	movwf	___ftadd@f1+2
  2373     01B4  1683               	bsf	3,5	;RP0=1, select bank1
  2374     01B5  084A               	movf	sprintf@fval^(0+128),w
  2375     01B6  1283               	bcf	3,5	;RP0=0, select bank0
  2376     01B7  00CD               	movwf	___ftadd@f2
  2377     01B8  1683               	bsf	3,5	;RP0=1, select bank1
  2378     01B9  084B               	movf	(sprintf@fval+1)^(0+128),w
  2379     01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2380     01BB  00CE               	movwf	___ftadd@f2+1
  2381     01BC  1683               	bsf	3,5	;RP0=1, select bank1
  2382     01BD  084C               	movf	(sprintf@fval+2)^(0+128),w
  2383     01BE  1283               	bcf	3,5	;RP0=0, select bank0
  2384     01BF  00CF               	movwf	___ftadd@f2+2
  2385     01C0  120A  158A  24B3  120A  118A  	fcall	___ftadd
  2386     01C5  084A               	movf	?___ftadd,w
  2387     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  2388     01C7  00CA               	movwf	sprintf@fval^(0+128)
  2389     01C8  1283               	bcf	3,5	;RP0=0, select bank0
  2390     01C9  084B               	movf	?___ftadd+1,w
  2391     01CA  1683               	bsf	3,5	;RP0=1, select bank1
  2392     01CB  00CB               	movwf	(sprintf@fval+1)^(0+128)
  2393     01CC  1283               	bcf	3,5	;RP0=0, select bank0
  2394     01CD  084C               	movf	?___ftadd+2,w
  2395     01CE  1683               	bsf	3,5	;RP0=1, select bank1
  2396     01CF  00CC               	movwf	(sprintf@fval+2)^(0+128)
  2397                           
  2398                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2399     01D0  0844               	movf	(sprintf@eexp+1)^(0+128),w
  2400     01D1  3A80               	xorlw	128
  2401     01D2  00FF               	movwf	127
  2402     01D3  3080               	movlw	128
  2403     01D4  027F               	subwf	127,w
  2404     01D5  1D03               	skipz
  2405     01D6  29D9               	goto	u3315
  2406     01D7  300A               	movlw	10
  2407     01D8  0243               	subwf	sprintf@eexp^(0+128),w
  2408     01D9                     u3315:
  2409     01D9  1803               	skipnc
  2410     01DA  2A04               	goto	l2563
  2411     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  2412     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  2413     01DD  084C               	movf	(sprintf@fval+2)^(0+128),w
  2414     01DE  044B               	iorwf	(sprintf@fval+1)^(0+128),w
  2415     01DF  044A               	iorwf	sprintf@fval^(0+128),w
  2416     01E0  1903               	skipnz
  2417     01E1  2A6A               	goto	l2577
  2418     01E2  084A               	movf	sprintf@fval^(0+128),w
  2419     01E3  1283               	bcf	3,5	;RP0=0, select bank0
  2420     01E4  00C7               	movwf	___fttol@f1
  2421     01E5  1683               	bsf	3,5	;RP0=1, select bank1
  2422     01E6  084B               	movf	(sprintf@fval+1)^(0+128),w
  2423     01E7  1283               	bcf	3,5	;RP0=0, select bank0
  2424     01E8  00C8               	movwf	___fttol@f1+1
  2425     01E9  1683               	bsf	3,5	;RP0=1, select bank1
  2426     01EA  084C               	movf	(sprintf@fval+2)^(0+128),w
  2427     01EB  1283               	bcf	3,5	;RP0=0, select bank0
  2428     01EC  00C9               	movwf	___fttol@f1+2
  2429     01ED  120A  158A  22F6  120A  118A  	fcall	___fttol
  2430     01F2  084A               	movf	?___fttol+3,w
  2431     01F3  0449               	iorwf	?___fttol+2,w
  2432     01F4  0448               	iorwf	?___fttol+1,w
  2433     01F5  0447               	iorwf	?___fttol,w
  2434     01F6  1D03               	skipz
  2435     01F7  2A6A               	goto	l2577
  2436     01F8  1683               	bsf	3,5	;RP0=1, select bank1
  2437     01F9  0844               	movf	(sprintf@eexp+1)^(0+128),w
  2438     01FA  3A80               	xorlw	128
  2439     01FB  00FF               	movwf	127
  2440     01FC  3080               	movlw	128
  2441     01FD  027F               	subwf	127,w
  2442     01FE  1D03               	skipz
  2443     01FF  2A02               	goto	u3345
  2444     0200  3002               	movlw	2
  2445     0201  0243               	subwf	sprintf@eexp^(0+128),w
  2446     0202                     u3345:
  2447     0202  1C03               	skipc
  2448     0203  2A6A               	goto	l2577
  2449     0204                     l2563:
  2450                           
  2451                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2452     0204  1683               	bsf	3,5	;RP0=1, select bank1
  2453     0205  1303               	bcf	3,6	;RP1=0, select bank1
  2454     0206  0845               	movf	sprintf@tmpval^(0+128),w
  2455     0207  1283               	bcf	3,5	;RP0=0, select bank0
  2456     0208  00A0               	movwf	___ftge@ff1
  2457     0209  1683               	bsf	3,5	;RP0=1, select bank1
  2458     020A  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2459     020B  1283               	bcf	3,5	;RP0=0, select bank0
  2460     020C  00A1               	movwf	___ftge@ff1+1
  2461     020D  1683               	bsf	3,5	;RP0=1, select bank1
  2462     020E  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2463     020F  1283               	bcf	3,5	;RP0=0, select bank0
  2464     0210  00A2               	movwf	___ftge@ff1+2
  2465     0211  3070               	movlw	112
  2466     0212  00A3               	movwf	___ftge@ff2
  2467     0213  3089               	movlw	137
  2468     0214  00A4               	movwf	___ftge@ff2+1
  2469     0215  3040               	movlw	64
  2470     0216  00A5               	movwf	___ftge@ff2+2
  2471     0217  120A  158A  20CF  120A  118A  	fcall	___ftge
  2472     021C  1803               	btfsc	3,0
  2473     021D  2A20               	goto	l2567
  2474                           
  2475                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2476     021E  30F7               	movlw	247
  2477     021F  2A21               	goto	L1
  2478     0220                     l2567:	
  2479                           ;doprnt.c: 1148: }else{
  2480                           
  2481                           
  2482                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2483     0220  30F8               	movlw	248
  2484     0221                     L1:
  2485     0221  1683               	bsf	3,5	;RP0=1, select bank1
  2486     0222  07C3               	addwf	sprintf@eexp^(0+128),f
  2487     0223  1803               	skipnc
  2488     0224  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2489     0225  30FF               	movlw	255
  2490     0226  07C4               	addwf	(sprintf@eexp+1)^(0+128),f
  2491                           
  2492                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2493     0227  0843               	movf	sprintf@eexp^(0+128),w
  2494     0228  120A  118A  251C  120A  118A  	fcall	_scale
  2495     022D  0840               	movf	?_scale,w
  2496     022E  1683               	bsf	3,5	;RP0=1, select bank1
  2497     022F  00C5               	movwf	sprintf@tmpval^(0+128)
  2498     0230  1283               	bcf	3,5	;RP0=0, select bank0
  2499     0231  0841               	movf	?_scale+1,w
  2500     0232  1683               	bsf	3,5	;RP0=1, select bank1
  2501     0233  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2502     0234  1283               	bcf	3,5	;RP0=0, select bank0
  2503     0235  0842               	movf	?_scale+2,w
  2504     0236  1683               	bsf	3,5	;RP0=1, select bank1
  2505     0237  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2506                           
  2507                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2508     0238  084A               	movf	sprintf@fval^(0+128),w
  2509     0239  1283               	bcf	3,5	;RP0=0, select bank0
  2510     023A  00A0               	movwf	__tdiv_to_l_@f1
  2511     023B  1683               	bsf	3,5	;RP0=1, select bank1
  2512     023C  084B               	movf	(sprintf@fval+1)^(0+128),w
  2513     023D  1283               	bcf	3,5	;RP0=0, select bank0
  2514     023E  00A1               	movwf	__tdiv_to_l_@f1+1
  2515     023F  1683               	bsf	3,5	;RP0=1, select bank1
  2516     0240  084C               	movf	(sprintf@fval+2)^(0+128),w
  2517     0241  1283               	bcf	3,5	;RP0=0, select bank0
  2518     0242  00A2               	movwf	__tdiv_to_l_@f1+2
  2519     0243  1683               	bsf	3,5	;RP0=1, select bank1
  2520     0244  0845               	movf	sprintf@tmpval^(0+128),w
  2521     0245  1283               	bcf	3,5	;RP0=0, select bank0
  2522     0246  00A3               	movwf	__tdiv_to_l_@f2
  2523     0247  1683               	bsf	3,5	;RP0=1, select bank1
  2524     0248  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2525     0249  1283               	bcf	3,5	;RP0=0, select bank0
  2526     024A  00A4               	movwf	__tdiv_to_l_@f2+1
  2527     024B  1683               	bsf	3,5	;RP0=1, select bank1
  2528     024C  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2529     024D  1283               	bcf	3,5	;RP0=0, select bank0
  2530     024E  00A5               	movwf	__tdiv_to_l_@f2+2
  2531     024F  120A  158A  236D  120A  118A  	fcall	__tdiv_to_l_
  2532     0254  0823               	movf	?__tdiv_to_l_+3,w
  2533     0255  1683               	bsf	3,5	;RP0=1, select bank1
  2534     0256  00C2               	movwf	(sprintf@val+3)^(0+128)
  2535     0257  1283               	bcf	3,5	;RP0=0, select bank0
  2536     0258  0822               	movf	?__tdiv_to_l_+2,w
  2537     0259  1683               	bsf	3,5	;RP0=1, select bank1
  2538     025A  00C1               	movwf	(sprintf@val+2)^(0+128)
  2539     025B  1283               	bcf	3,5	;RP0=0, select bank0
  2540     025C  0821               	movf	?__tdiv_to_l_+1,w
  2541     025D  1683               	bsf	3,5	;RP0=1, select bank1
  2542     025E  00C0               	movwf	(sprintf@val+1)^(0+128)
  2543     025F  1283               	bcf	3,5	;RP0=0, select bank0
  2544     0260  0820               	movf	?__tdiv_to_l_,w
  2545     0261  1683               	bsf	3,5	;RP0=1, select bank1
  2546     0262  00BF               	movwf	sprintf@val^(0+128)
  2547                           
  2548                           ;doprnt.c: 1155: fval = 0.0;
  2549     0263  3000               	movlw	0
  2550     0264  00CA               	movwf	sprintf@fval^(0+128)
  2551     0265  3000               	movlw	0
  2552     0266  00CB               	movwf	(sprintf@fval+1)^(0+128)
  2553     0267  3000               	movlw	0
  2554     0268  00CC               	movwf	(sprintf@fval+2)^(0+128)
  2555                           
  2556                           ;doprnt.c: 1156: } else {
  2557     0269  2AC3               	goto	l2581
  2558     026A                     l2577:
  2559                           
  2560                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2561     026A  1683               	bsf	3,5	;RP0=1, select bank1
  2562     026B  1303               	bcf	3,6	;RP1=0, select bank1
  2563     026C  084A               	movf	sprintf@fval^(0+128),w
  2564     026D  1283               	bcf	3,5	;RP0=0, select bank0
  2565     026E  00C7               	movwf	___fttol@f1
  2566     026F  1683               	bsf	3,5	;RP0=1, select bank1
  2567     0270  084B               	movf	(sprintf@fval+1)^(0+128),w
  2568     0271  1283               	bcf	3,5	;RP0=0, select bank0
  2569     0272  00C8               	movwf	___fttol@f1+1
  2570     0273  1683               	bsf	3,5	;RP0=1, select bank1
  2571     0274  084C               	movf	(sprintf@fval+2)^(0+128),w
  2572     0275  1283               	bcf	3,5	;RP0=0, select bank0
  2573     0276  00C9               	movwf	___fttol@f1+2
  2574     0277  120A  158A  22F6  120A  118A  	fcall	___fttol
  2575     027C  084A               	movf	?___fttol+3,w
  2576     027D  1683               	bsf	3,5	;RP0=1, select bank1
  2577     027E  00C2               	movwf	(sprintf@val+3)^(0+128)
  2578     027F  1283               	bcf	3,5	;RP0=0, select bank0
  2579     0280  0849               	movf	?___fttol+2,w
  2580     0281  1683               	bsf	3,5	;RP0=1, select bank1
  2581     0282  00C1               	movwf	(sprintf@val+2)^(0+128)
  2582     0283  1283               	bcf	3,5	;RP0=0, select bank0
  2583     0284  0848               	movf	?___fttol+1,w
  2584     0285  1683               	bsf	3,5	;RP0=1, select bank1
  2585     0286  00C0               	movwf	(sprintf@val+1)^(0+128)
  2586     0287  1283               	bcf	3,5	;RP0=0, select bank0
  2587     0288  0847               	movf	?___fttol,w
  2588     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2589     028A  00BF               	movwf	sprintf@val^(0+128)
  2590                           
  2591                           ;doprnt.c: 1158: fval -= (double)val;
  2592     028B  0842               	movf	(sprintf@val+3)^(0+128),w
  2593     028C  1283               	bcf	3,5	;RP0=0, select bank0
  2594     028D  00AB               	movwf	___lltoft@c+3
  2595     028E  1683               	bsf	3,5	;RP0=1, select bank1
  2596     028F  0841               	movf	(sprintf@val+2)^(0+128),w
  2597     0290  1283               	bcf	3,5	;RP0=0, select bank0
  2598     0291  00AA               	movwf	___lltoft@c+2
  2599     0292  1683               	bsf	3,5	;RP0=1, select bank1
  2600     0293  0840               	movf	(sprintf@val+1)^(0+128),w
  2601     0294  1283               	bcf	3,5	;RP0=0, select bank0
  2602     0295  00A9               	movwf	___lltoft@c+1
  2603     0296  1683               	bsf	3,5	;RP0=1, select bank1
  2604     0297  083F               	movf	sprintf@val^(0+128),w
  2605     0298  1283               	bcf	3,5	;RP0=0, select bank0
  2606     0299  00A8               	movwf	___lltoft@c
  2607     029A  120A  158A  20A8  120A  118A  	fcall	___lltoft
  2608     029F  0828               	movf	?___lltoft,w
  2609     02A0  00D6               	movwf	___ftsub@f2
  2610     02A1  0829               	movf	?___lltoft+1,w
  2611     02A2  00D7               	movwf	___ftsub@f2+1
  2612     02A3  082A               	movf	?___lltoft+2,w
  2613     02A4  00D8               	movwf	___ftsub@f2+2
  2614     02A5  1683               	bsf	3,5	;RP0=1, select bank1
  2615     02A6  084A               	movf	sprintf@fval^(0+128),w
  2616     02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2617     02A8  00D9               	movwf	___ftsub@f1
  2618     02A9  1683               	bsf	3,5	;RP0=1, select bank1
  2619     02AA  084B               	movf	(sprintf@fval+1)^(0+128),w
  2620     02AB  1283               	bcf	3,5	;RP0=0, select bank0
  2621     02AC  00DA               	movwf	___ftsub@f1+1
  2622     02AD  1683               	bsf	3,5	;RP0=1, select bank1
  2623     02AE  084C               	movf	(sprintf@fval+2)^(0+128),w
  2624     02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2625     02B0  00DB               	movwf	___ftsub@f1+2
  2626     02B1  160A  118A  2760  120A  118A  	fcall	___ftsub
  2627     02B6  0856               	movf	?___ftsub,w
  2628     02B7  1683               	bsf	3,5	;RP0=1, select bank1
  2629     02B8  00CA               	movwf	sprintf@fval^(0+128)
  2630     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2631     02BA  0857               	movf	?___ftsub+1,w
  2632     02BB  1683               	bsf	3,5	;RP0=1, select bank1
  2633     02BC  00CB               	movwf	(sprintf@fval+1)^(0+128)
  2634     02BD  1283               	bcf	3,5	;RP0=0, select bank0
  2635     02BE  0858               	movf	?___ftsub+2,w
  2636     02BF  1683               	bsf	3,5	;RP0=1, select bank1
  2637     02C0  00CC               	movwf	(sprintf@fval+2)^(0+128)
  2638                           
  2639                           ;doprnt.c: 1159: eexp = 0;
  2640     02C1  01C3               	clrf	sprintf@eexp^(0+128)
  2641     02C2  01C4               	clrf	(sprintf@eexp+1)^(0+128)
  2642     02C3                     l2581:
  2643                           
  2644                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2645     02C3  01CD               	clrf	sprintf@c^(0+128)
  2646     02C4  0ACD               	incf	sprintf@c^(0+128),f
  2647     02C5                     l2587:
  2648                           
  2649                           ;doprnt.c: 1163: if(val < dpowers[c])
  2650     02C5  084D               	movf	sprintf@c^(0+128),w
  2651     02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2652     02C7  00E0               	movwf	??_sprintf
  2653     02C8  3001               	movlw	1
  2654     02C9                     u3365:
  2655     02C9  1003               	clrc
  2656     02CA  0DE0               	rlf	??_sprintf,f
  2657     02CB  3EFF               	addlw	-1
  2658     02CC  1D03               	skipz
  2659     02CD  2AC9               	goto	u3365
  2660     02CE  1003               	clrc
  2661     02CF  0D60               	rlf	??_sprintf,w
  2662     02D0  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2663     02D1  0084               	movwf	4
  2664     02D2  120A  158A  2000  120A  118A  	fcall	stringdir
  2665     02D7  00E1               	movwf	??_sprintf+1
  2666     02D8  120A  158A  2000  120A  118A  	fcall	stringdir
  2667     02DD  00E2               	movwf	??_sprintf+2
  2668     02DE  120A  158A  2000  120A  118A  	fcall	stringdir
  2669     02E3  00E3               	movwf	??_sprintf+3
  2670     02E4  120A  158A  2000  120A  118A  	fcall	stringdir
  2671     02E9  00E4               	movwf	??_sprintf+4
  2672     02EA  0864               	movf	??_sprintf+4,w
  2673     02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2674     02EC  0242               	subwf	(sprintf@val+3)^(0+128),w
  2675     02ED  1D03               	skipz
  2676     02EE  2AFF               	goto	u3375
  2677     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2678     02F0  0863               	movf	??_sprintf+3,w
  2679     02F1  1683               	bsf	3,5	;RP0=1, select bank1
  2680     02F2  0241               	subwf	(sprintf@val+2)^(0+128),w
  2681     02F3  1D03               	skipz
  2682     02F4  2AFF               	goto	u3375
  2683     02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2684     02F6  0862               	movf	??_sprintf+2,w
  2685     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2686     02F8  0240               	subwf	(sprintf@val+1)^(0+128),w
  2687     02F9  1D03               	skipz
  2688     02FA  2AFF               	goto	u3375
  2689     02FB  1283               	bcf	3,5	;RP0=0, select bank0
  2690     02FC  0861               	movf	??_sprintf+1,w
  2691     02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2692     02FE  023F               	subwf	sprintf@val^(0+128),w
  2693     02FF                     u3375:
  2694     02FF  1C03               	btfss	3,0
  2695     0300  2B09               	goto	l2595
  2696     0301  3001               	movlw	1
  2697     0302  00FF               	movwf	127
  2698     0303  087F               	movf	127,w
  2699     0304  07CD               	addwf	sprintf@c^(0+128),f
  2700     0305  300A               	movlw	10
  2701     0306  064D               	xorwf	sprintf@c^(0+128),w
  2702     0307  1D03               	btfss	3,2
  2703     0308  2AC5               	goto	l2587
  2704     0309                     l2595:
  2705                           
  2706                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2707     0309  083B               	movf	sprintf@flag^(0+128),w
  2708     030A  3903               	andlw	3
  2709     030B  1903               	btfsc	3,2
  2710     030C  2B16               	goto	l2609
  2711                           
  2712                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2713     030D  0849               	movf	sprintf@sp^(0+128),w
  2714     030E  0084               	movwf	4
  2715     030F  302D               	movlw	45
  2716     0310                     L6:
  2717     0310  1383               	bcf	3,7	;select IRP bank0
  2718     0311  0080               	movwf	0
  2719     0312  3001               	movlw	1
  2720     0313  00FF               	movwf	127
  2721     0314  087F               	movf	127,w
  2722     0315  07C9               	addwf	sprintf@sp^(0+128),f
  2723     0316                     l2609:
  2724     0316  3001               	movlw	1
  2725     0317  02CD               	subwf	sprintf@c^(0+128),f
  2726     0318  0A4D               	incf	sprintf@c^(0+128),w
  2727     0319  1903               	btfsc	3,2
  2728     031A  2BA7               	goto	l2617
  2729                           
  2730                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2731     031B  084D               	movf	sprintf@c^(0+128),w
  2732     031C  1283               	bcf	3,5	;RP0=0, select bank0
  2733     031D  00E0               	movwf	??_sprintf
  2734     031E  3001               	movlw	1
  2735     031F                     u3405:
  2736     031F  1003               	clrc
  2737     0320  0DE0               	rlf	??_sprintf,f
  2738     0321  3EFF               	addlw	-1
  2739     0322  1D03               	skipz
  2740     0323  2B1F               	goto	u3405
  2741     0324  1003               	clrc
  2742     0325  0D60               	rlf	??_sprintf,w
  2743     0326  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2744     0327  0084               	movwf	4
  2745     0328  120A  158A  2000  120A  118A  	fcall	stringdir
  2746     032D  00A0               	movwf	___lldiv@divisor
  2747     032E  120A  158A  2000  120A  118A  	fcall	stringdir
  2748     0333  00A1               	movwf	___lldiv@divisor+1
  2749     0334  120A  158A  2000  120A  118A  	fcall	stringdir
  2750     0339  00A2               	movwf	___lldiv@divisor+2
  2751     033A  120A  158A  2000  120A  118A  	fcall	stringdir
  2752     033F  00A3               	movwf	___lldiv@divisor+3
  2753     0340  1683               	bsf	3,5	;RP0=1, select bank1
  2754     0341  0842               	movf	(sprintf@val+3)^(0+128),w
  2755     0342  1283               	bcf	3,5	;RP0=0, select bank0
  2756     0343  00A7               	movwf	___lldiv@dividend+3
  2757     0344  1683               	bsf	3,5	;RP0=1, select bank1
  2758     0345  0841               	movf	(sprintf@val+2)^(0+128),w
  2759     0346  1283               	bcf	3,5	;RP0=0, select bank0
  2760     0347  00A6               	movwf	___lldiv@dividend+2
  2761     0348  1683               	bsf	3,5	;RP0=1, select bank1
  2762     0349  0840               	movf	(sprintf@val+1)^(0+128),w
  2763     034A  1283               	bcf	3,5	;RP0=0, select bank0
  2764     034B  00A5               	movwf	___lldiv@dividend+1
  2765     034C  1683               	bsf	3,5	;RP0=1, select bank1
  2766     034D  083F               	movf	sprintf@val^(0+128),w
  2767     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2768     034F  00A4               	movwf	___lldiv@dividend
  2769     0350  120A  158A  222C  120A  118A  	fcall	___lldiv
  2770     0355  0823               	movf	?___lldiv+3,w
  2771     0356  1683               	bsf	3,5	;RP0=1, select bank1
  2772     0357  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  2773     0358  1283               	bcf	3,5	;RP0=0, select bank0
  2774     0359  0822               	movf	?___lldiv+2,w
  2775     035A  1683               	bsf	3,5	;RP0=1, select bank1
  2776     035B  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2777     035C  1283               	bcf	3,5	;RP0=0, select bank0
  2778     035D  0821               	movf	?___lldiv+1,w
  2779     035E  1683               	bsf	3,5	;RP0=1, select bank1
  2780     035F  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2781     0360  1283               	bcf	3,5	;RP0=0, select bank0
  2782     0361  0820               	movf	?___lldiv,w
  2783     0362  1683               	bsf	3,5	;RP0=1, select bank1
  2784     0363  00C5               	movwf	sprintf@tmpval^(0+128)
  2785                           
  2786                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2787     0364  3000               	movlw	0
  2788     0365  1283               	bcf	3,5	;RP0=0, select bank0
  2789     0366  00A3               	movwf	___llmod@divisor+3
  2790     0367  3000               	movlw	0
  2791     0368  00A2               	movwf	___llmod@divisor+2
  2792     0369  3000               	movlw	0
  2793     036A  00A1               	movwf	___llmod@divisor+1
  2794     036B  300A               	movlw	10
  2795     036C  00A0               	movwf	___llmod@divisor
  2796     036D  1683               	bsf	3,5	;RP0=1, select bank1
  2797     036E  0848               	movf	(sprintf@tmpval+3)^(0+128),w
  2798     036F  1283               	bcf	3,5	;RP0=0, select bank0
  2799     0370  00A7               	movwf	___llmod@dividend+3
  2800     0371  1683               	bsf	3,5	;RP0=1, select bank1
  2801     0372  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  2802     0373  1283               	bcf	3,5	;RP0=0, select bank0
  2803     0374  00A6               	movwf	___llmod@dividend+2
  2804     0375  1683               	bsf	3,5	;RP0=1, select bank1
  2805     0376  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  2806     0377  1283               	bcf	3,5	;RP0=0, select bank0
  2807     0378  00A5               	movwf	___llmod@dividend+1
  2808     0379  1683               	bsf	3,5	;RP0=1, select bank1
  2809     037A  0845               	movf	sprintf@tmpval^(0+128),w
  2810     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2811     037C  00A4               	movwf	___llmod@dividend
  2812     037D  120A  158A  2187  120A  118A  	fcall	___llmod
  2813     0382  0823               	movf	?___llmod+3,w
  2814     0383  1683               	bsf	3,5	;RP0=1, select bank1
  2815     0384  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  2816     0385  1283               	bcf	3,5	;RP0=0, select bank0
  2817     0386  0822               	movf	?___llmod+2,w
  2818     0387  1683               	bsf	3,5	;RP0=1, select bank1
  2819     0388  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  2820     0389  1283               	bcf	3,5	;RP0=0, select bank0
  2821     038A  0821               	movf	?___llmod+1,w
  2822     038B  1683               	bsf	3,5	;RP0=1, select bank1
  2823     038C  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  2824     038D  1283               	bcf	3,5	;RP0=0, select bank0
  2825     038E  0820               	movf	?___llmod,w
  2826     038F  1683               	bsf	3,5	;RP0=1, select bank1
  2827     0390  00C5               	movwf	sprintf@tmpval^(0+128)
  2828                           
  2829                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2830     0391  0849               	movf	sprintf@sp^(0+128),w
  2831     0392  0084               	movwf	4
  2832     0393  0845               	movf	sprintf@tmpval^(0+128),w
  2833     0394  3E30               	addlw	48
  2834     0395  2B10               	goto	L6
  2835     0396                     l2611:
  2836                           
  2837                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2838     0396  1683               	bsf	3,5	;RP0=1, select bank1
  2839     0397  1303               	bcf	3,6	;RP1=0, select bank1
  2840     0398  0849               	movf	sprintf@sp^(0+128),w
  2841     0399  0084               	movwf	4
  2842     039A  3030               	movlw	48
  2843     039B  1383               	bcf	3,7	;select IRP bank0
  2844     039C  0080               	movwf	0
  2845     039D  3001               	movlw	1
  2846     039E  00FF               	movwf	127
  2847     039F  087F               	movf	127,w
  2848     03A0  07C9               	addwf	sprintf@sp^(0+128),f
  2849                           
  2850                           ;doprnt.c: 1235: eexp--;
  2851     03A1  30FF               	movlw	255
  2852     03A2  07C3               	addwf	sprintf@eexp^(0+128),f
  2853     03A3  1803               	skipnc
  2854     03A4  0AC4               	incf	(sprintf@eexp+1)^(0+128),f
  2855     03A5  30FF               	movlw	255
  2856     03A6  07C4               	addwf	(sprintf@eexp+1)^(0+128),f
  2857     03A7                     l2617:
  2858     03A7  0844               	movf	(sprintf@eexp+1)^(0+128),w
  2859     03A8  3A80               	xorlw	128
  2860     03A9  00FF               	movwf	127
  2861     03AA  3080               	movlw	128
  2862     03AB  027F               	subwf	127,w
  2863     03AC  1D03               	skipz
  2864     03AD  2BB0               	goto	u3425
  2865     03AE  3001               	movlw	1
  2866     03AF  0243               	subwf	sprintf@eexp^(0+128),w
  2867     03B0                     u3425:
  2868     03B0  1803               	skipnc
  2869     03B1  2B96               	goto	l2611
  2870                           
  2871                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2872     03B2  1683               	bsf	3,5	;RP0=1, select bank1
  2873     03B3  1303               	bcf	3,6	;RP1=0, select bank1
  2874     03B4  083E               	movf	(sprintf@prec+1)^(0+128),w
  2875     03B5  3A80               	xorlw	128
  2876     03B6  00FF               	movwf	127
  2877     03B7  3080               	movlw	128
  2878     03B8  027F               	subwf	127,w
  2879     03B9  1D03               	skipz
  2880     03BA  2BBD               	goto	u3435
  2881     03BB  3009               	movlw	9
  2882     03BC  023D               	subwf	sprintf@prec^(0+128),w
  2883     03BD                     u3435:
  2884     03BD  1C03               	skipc
  2885     03BE  2BC3               	goto	l2623
  2886                           
  2887                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2888     03BF  3008               	movlw	8
  2889     03C0  1683               	bsf	3,5	;RP0=1, select bank1
  2890     03C1  1303               	bcf	3,6	;RP1=0, select bank1
  2891     03C2  2BC6               	goto	L2
  2892     03C3                     l2623:
  2893                           
  2894                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2895     03C3  1683               	bsf	3,5	;RP0=1, select bank1
  2896     03C4  1303               	bcf	3,6	;RP1=0, select bank1
  2897     03C5  083D               	movf	sprintf@prec^(0+128),w
  2898     03C6                     L2:
  2899     03C6  00CD               	movwf	sprintf@c^(0+128)
  2900                           
  2901                           ;doprnt.c: 1241: prec -= (int)c;
  2902     03C7  084D               	movf	sprintf@c^(0+128),w
  2903     03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2904     03C9  00E0               	movwf	??_sprintf
  2905     03CA  01E1               	clrf	??_sprintf+1
  2906     03CB  0860               	movf	??_sprintf,w
  2907     03CC  1683               	bsf	3,5	;RP0=1, select bank1
  2908     03CD  02BD               	subwf	sprintf@prec^(0+128),f
  2909     03CE  1283               	bcf	3,5	;RP0=0, select bank0
  2910     03CF  0861               	movf	??_sprintf+1,w
  2911     03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2912     03D1  1C03               	skipc
  2913     03D2  03BE               	decf	(sprintf@prec+1)^(0+128),f
  2914     03D3  02BE               	subwf	(sprintf@prec+1)^(0+128),f
  2915                           
  2916                           ;doprnt.c: 1245: if(c)
  2917     03D4  084D               	movf	sprintf@c^(0+128),w
  2918     03D5  1903               	btfsc	3,2
  2919     03D6  2BE0               	goto	l2631
  2920                           
  2921                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2922     03D7  0849               	movf	sprintf@sp^(0+128),w
  2923     03D8  0084               	movwf	4
  2924     03D9  302E               	movlw	46
  2925     03DA  1383               	bcf	3,7	;select IRP bank0
  2926     03DB  0080               	movwf	0
  2927     03DC  3001               	movlw	1
  2928     03DD  00FF               	movwf	127
  2929     03DE  087F               	movf	127,w
  2930     03DF  07C9               	addwf	sprintf@sp^(0+128),f
  2931     03E0                     l2631:
  2932                           
  2933                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2934     03E0  084D               	movf	sprintf@c^(0+128),w
  2935     03E1  120A  118A  251C  120A  118A  	fcall	_scale
  2936     03E6  0840               	movf	?_scale,w
  2937     03E7  1683               	bsf	3,5	;RP0=1, select bank1
  2938     03E8  00B7               	movwf	_sprintf$1292^(0+128)
  2939     03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2940     03EA  0841               	movf	?_scale+1,w
  2941     03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2942     03EC  00B8               	movwf	(_sprintf$1292+1)^(0+128)
  2943     03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2944     03EE  0842               	movf	?_scale+2,w
  2945     03EF  1683               	bsf	3,5	;RP0=1, select bank1
  2946     03F0  00B9               	movwf	(_sprintf$1292+2)^(0+128)
  2947                           
  2948                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2949     03F1  0837               	movf	_sprintf$1292^(0+128),w
  2950     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2951     03F3  00B4               	movwf	___ftmul@f2
  2952     03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2953     03F5  0838               	movf	(_sprintf$1292+1)^(0+128),w
  2954     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2955     03F7  00B5               	movwf	___ftmul@f2+1
  2956     03F8  1683               	bsf	3,5	;RP0=1, select bank1
  2957     03F9  0839               	movf	(_sprintf$1292+2)^(0+128),w
  2958     03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2959     03FB  00B6               	movwf	___ftmul@f2+2
  2960     03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2961     03FD  084A               	movf	sprintf@fval^(0+128),w
  2962     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2963     03FF  00B1               	movwf	___ftmul@f1
  2964     0400  1683               	bsf	3,5	;RP0=1, select bank1
  2965     0401  084B               	movf	(sprintf@fval+1)^(0+128),w
  2966     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2967     0403  00B2               	movwf	___ftmul@f1+1
  2968     0404  1683               	bsf	3,5	;RP0=1, select bank1
  2969     0405  084C               	movf	(sprintf@fval+2)^(0+128),w
  2970     0406  1283               	bcf	3,5	;RP0=0, select bank0
  2971     0407  00B3               	movwf	___ftmul@f1+2
  2972     0408  120A  158A  240E  120A  118A  	fcall	___ftmul
  2973     040D  0831               	movf	?___ftmul,w
  2974     040E  00C7               	movwf	___fttol@f1
  2975     040F  0832               	movf	?___ftmul+1,w
  2976     0410  00C8               	movwf	___fttol@f1+1
  2977     0411  0833               	movf	?___ftmul+2,w
  2978     0412  00C9               	movwf	___fttol@f1+2
  2979     0413  120A  158A  22F6  120A  118A  	fcall	___fttol
  2980     0418  084A               	movf	?___fttol+3,w
  2981     0419  1683               	bsf	3,5	;RP0=1, select bank1
  2982     041A  00C2               	movwf	(sprintf@val+3)^(0+128)
  2983     041B  1283               	bcf	3,5	;RP0=0, select bank0
  2984     041C  0849               	movf	?___fttol+2,w
  2985     041D  1683               	bsf	3,5	;RP0=1, select bank1
  2986     041E  00C1               	movwf	(sprintf@val+2)^(0+128)
  2987     041F  1283               	bcf	3,5	;RP0=0, select bank0
  2988     0420  0848               	movf	?___fttol+1,w
  2989     0421  1683               	bsf	3,5	;RP0=1, select bank1
  2990     0422  00C0               	movwf	(sprintf@val+1)^(0+128)
  2991     0423  1283               	bcf	3,5	;RP0=0, select bank0
  2992     0424  0847               	movf	?___fttol,w
  2993     0425                     L3:
  2994     0425  1683               	bsf	3,5	;RP0=1, select bank1
  2995     0426  00BF               	movwf	sprintf@val^(0+128)
  2996     0427  3001               	movlw	1
  2997     0428  02CD               	subwf	sprintf@c^(0+128),f
  2998     0429  0A4D               	incf	sprintf@c^(0+128),w
  2999     042A  1903               	btfsc	3,2
  3000     042B  2D03               	goto	l2653
  3001                           
  3002                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  3003                           
  3004                           ;doprnt.c: 1254: while(c--) {
  3005     042C  084D               	movf	sprintf@c^(0+128),w
  3006     042D  1283               	bcf	3,5	;RP0=0, select bank0
  3007     042E  00E0               	movwf	??_sprintf
  3008     042F  3001               	movlw	1
  3009     0430                     u3455:
  3010     0430  1003               	clrc
  3011     0431  0DE0               	rlf	??_sprintf,f
  3012     0432  3EFF               	addlw	-1
  3013     0433  1D03               	skipz
  3014     0434  2C30               	goto	u3455
  3015     0435  1003               	clrc
  3016     0436  0D60               	rlf	??_sprintf,w
  3017     0437  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3018     0438  0084               	movwf	4
  3019     0439  120A  158A  2000  120A  118A  	fcall	stringdir
  3020     043E  00A0               	movwf	___lldiv@divisor
  3021     043F  120A  158A  2000  120A  118A  	fcall	stringdir
  3022     0444  00A1               	movwf	___lldiv@divisor+1
  3023     0445  120A  158A  2000  120A  118A  	fcall	stringdir
  3024     044A  00A2               	movwf	___lldiv@divisor+2
  3025     044B  120A  158A  2000  120A  118A  	fcall	stringdir
  3026     0450  00A3               	movwf	___lldiv@divisor+3
  3027     0451  1683               	bsf	3,5	;RP0=1, select bank1
  3028     0452  0842               	movf	(sprintf@val+3)^(0+128),w
  3029     0453  1283               	bcf	3,5	;RP0=0, select bank0
  3030     0454  00A7               	movwf	___lldiv@dividend+3
  3031     0455  1683               	bsf	3,5	;RP0=1, select bank1
  3032     0456  0841               	movf	(sprintf@val+2)^(0+128),w
  3033     0457  1283               	bcf	3,5	;RP0=0, select bank0
  3034     0458  00A6               	movwf	___lldiv@dividend+2
  3035     0459  1683               	bsf	3,5	;RP0=1, select bank1
  3036     045A  0840               	movf	(sprintf@val+1)^(0+128),w
  3037     045B  1283               	bcf	3,5	;RP0=0, select bank0
  3038     045C  00A5               	movwf	___lldiv@dividend+1
  3039     045D  1683               	bsf	3,5	;RP0=1, select bank1
  3040     045E  083F               	movf	sprintf@val^(0+128),w
  3041     045F  1283               	bcf	3,5	;RP0=0, select bank0
  3042     0460  00A4               	movwf	___lldiv@dividend
  3043     0461  120A  158A  222C  120A  118A  	fcall	___lldiv
  3044     0466  0823               	movf	?___lldiv+3,w
  3045     0467  1683               	bsf	3,5	;RP0=1, select bank1
  3046     0468  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3047     0469  1283               	bcf	3,5	;RP0=0, select bank0
  3048     046A  0822               	movf	?___lldiv+2,w
  3049     046B  1683               	bsf	3,5	;RP0=1, select bank1
  3050     046C  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3051     046D  1283               	bcf	3,5	;RP0=0, select bank0
  3052     046E  0821               	movf	?___lldiv+1,w
  3053     046F  1683               	bsf	3,5	;RP0=1, select bank1
  3054     0470  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3055     0471  1283               	bcf	3,5	;RP0=0, select bank0
  3056     0472  0820               	movf	?___lldiv,w
  3057     0473  1683               	bsf	3,5	;RP0=1, select bank1
  3058     0474  00C5               	movwf	sprintf@tmpval^(0+128)
  3059                           
  3060                           ;doprnt.c: 1256: tmpval.vd %= 10;
  3061     0475  3000               	movlw	0
  3062     0476  1283               	bcf	3,5	;RP0=0, select bank0
  3063     0477  00A3               	movwf	___llmod@divisor+3
  3064     0478  3000               	movlw	0
  3065     0479  00A2               	movwf	___llmod@divisor+2
  3066     047A  3000               	movlw	0
  3067     047B  00A1               	movwf	___llmod@divisor+1
  3068     047C  300A               	movlw	10
  3069     047D  00A0               	movwf	___llmod@divisor
  3070     047E  1683               	bsf	3,5	;RP0=1, select bank1
  3071     047F  0848               	movf	(sprintf@tmpval+3)^(0+128),w
  3072     0480  1283               	bcf	3,5	;RP0=0, select bank0
  3073     0481  00A7               	movwf	___llmod@dividend+3
  3074     0482  1683               	bsf	3,5	;RP0=1, select bank1
  3075     0483  0847               	movf	(sprintf@tmpval+2)^(0+128),w
  3076     0484  1283               	bcf	3,5	;RP0=0, select bank0
  3077     0485  00A6               	movwf	___llmod@dividend+2
  3078     0486  1683               	bsf	3,5	;RP0=1, select bank1
  3079     0487  0846               	movf	(sprintf@tmpval+1)^(0+128),w
  3080     0488  1283               	bcf	3,5	;RP0=0, select bank0
  3081     0489  00A5               	movwf	___llmod@dividend+1
  3082     048A  1683               	bsf	3,5	;RP0=1, select bank1
  3083     048B  0845               	movf	sprintf@tmpval^(0+128),w
  3084     048C  1283               	bcf	3,5	;RP0=0, select bank0
  3085     048D  00A4               	movwf	___llmod@dividend
  3086     048E  120A  158A  2187  120A  118A  	fcall	___llmod
  3087     0493  0823               	movf	?___llmod+3,w
  3088     0494  1683               	bsf	3,5	;RP0=1, select bank1
  3089     0495  00C8               	movwf	(sprintf@tmpval+3)^(0+128)
  3090     0496  1283               	bcf	3,5	;RP0=0, select bank0
  3091     0497  0822               	movf	?___llmod+2,w
  3092     0498  1683               	bsf	3,5	;RP0=1, select bank1
  3093     0499  00C7               	movwf	(sprintf@tmpval+2)^(0+128)
  3094     049A  1283               	bcf	3,5	;RP0=0, select bank0
  3095     049B  0821               	movf	?___llmod+1,w
  3096     049C  1683               	bsf	3,5	;RP0=1, select bank1
  3097     049D  00C6               	movwf	(sprintf@tmpval+1)^(0+128)
  3098     049E  1283               	bcf	3,5	;RP0=0, select bank0
  3099     049F  0820               	movf	?___llmod,w
  3100     04A0  1683               	bsf	3,5	;RP0=1, select bank1
  3101     04A1  00C5               	movwf	sprintf@tmpval^(0+128)
  3102                           
  3103                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  3104     04A2  0849               	movf	sprintf@sp^(0+128),w
  3105     04A3  0084               	movwf	4
  3106     04A4  0845               	movf	sprintf@tmpval^(0+128),w
  3107     04A5  3E30               	addlw	48
  3108     04A6  1383               	bcf	3,7	;select IRP bank0
  3109     04A7  0080               	movwf	0
  3110     04A8  3001               	movlw	1
  3111     04A9  00FF               	movwf	127
  3112     04AA  087F               	movf	127,w
  3113     04AB  07C9               	addwf	sprintf@sp^(0+128),f
  3114                           
  3115                           ;doprnt.c: 1258: val %= dpowers[c];
  3116     04AC  084D               	movf	sprintf@c^(0+128),w
  3117     04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3118     04AE  00E0               	movwf	??_sprintf
  3119     04AF  3001               	movlw	1
  3120     04B0                     u3465:
  3121     04B0  1003               	clrc
  3122     04B1  0DE0               	rlf	??_sprintf,f
  3123     04B2  3EFF               	addlw	-1
  3124     04B3  1D03               	skipz
  3125     04B4  2CB0               	goto	u3465
  3126     04B5  1003               	clrc
  3127     04B6  0D60               	rlf	??_sprintf,w
  3128     04B7  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3129     04B8  0084               	movwf	4
  3130     04B9  120A  158A  2000  120A  118A  	fcall	stringdir
  3131     04BE  00A0               	movwf	___llmod@divisor
  3132     04BF  120A  158A  2000  120A  118A  	fcall	stringdir
  3133     04C4  00A1               	movwf	___llmod@divisor+1
  3134     04C5  120A  158A  2000  120A  118A  	fcall	stringdir
  3135     04CA  00A2               	movwf	___llmod@divisor+2
  3136     04CB  120A  158A  2000  120A  118A  	fcall	stringdir
  3137     04D0  00A3               	movwf	___llmod@divisor+3
  3138     04D1  1683               	bsf	3,5	;RP0=1, select bank1
  3139     04D2  0842               	movf	(sprintf@val+3)^(0+128),w
  3140     04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3141     04D4  00A7               	movwf	___llmod@dividend+3
  3142     04D5  1683               	bsf	3,5	;RP0=1, select bank1
  3143     04D6  0841               	movf	(sprintf@val+2)^(0+128),w
  3144     04D7  1283               	bcf	3,5	;RP0=0, select bank0
  3145     04D8  00A6               	movwf	___llmod@dividend+2
  3146     04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3147     04DA  0840               	movf	(sprintf@val+1)^(0+128),w
  3148     04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3149     04DC  00A5               	movwf	___llmod@dividend+1
  3150     04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3151     04DE  083F               	movf	sprintf@val^(0+128),w
  3152     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3153     04E0  00A4               	movwf	___llmod@dividend
  3154     04E1  120A  158A  2187  120A  118A  	fcall	___llmod
  3155     04E6  0823               	movf	?___llmod+3,w
  3156     04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3157     04E8  00C2               	movwf	(sprintf@val+3)^(0+128)
  3158     04E9  1283               	bcf	3,5	;RP0=0, select bank0
  3159     04EA  0822               	movf	?___llmod+2,w
  3160     04EB  1683               	bsf	3,5	;RP0=1, select bank1
  3161     04EC  00C1               	movwf	(sprintf@val+2)^(0+128)
  3162     04ED  1283               	bcf	3,5	;RP0=0, select bank0
  3163     04EE  0821               	movf	?___llmod+1,w
  3164     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  3165     04F0  00C0               	movwf	(sprintf@val+1)^(0+128)
  3166     04F1  1283               	bcf	3,5	;RP0=0, select bank0
  3167     04F2  0820               	movf	?___llmod,w
  3168     04F3  2C25               	goto	L3
  3169     04F4                     l2647:
  3170                           
  3171                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  3172     04F4  0849               	movf	sprintf@sp^(0+128),w
  3173     04F5  0084               	movwf	4
  3174     04F6  3030               	movlw	48
  3175     04F7  1383               	bcf	3,7	;select IRP bank0
  3176     04F8  0080               	movwf	0
  3177     04F9  3001               	movlw	1
  3178     04FA  00FF               	movwf	127
  3179     04FB  087F               	movf	127,w
  3180     04FC  07C9               	addwf	sprintf@sp^(0+128),f
  3181                           
  3182                           ;doprnt.c: 1263: prec--;
  3183     04FD  30FF               	movlw	255
  3184     04FE  07BD               	addwf	sprintf@prec^(0+128),f
  3185     04FF  1803               	skipnc
  3186     0500  0ABE               	incf	(sprintf@prec+1)^(0+128),f
  3187     0501  30FF               	movlw	255
  3188     0502  07BE               	addwf	(sprintf@prec+1)^(0+128),f
  3189     0503                     l2653:
  3190     0503  083D               	movf	sprintf@prec^(0+128),w
  3191     0504  043E               	iorwf	(sprintf@prec+1)^(0+128),w
  3192     0505  1903               	btfsc	3,2
  3193     0506  2835               	goto	l2661
  3194     0507  2CF4               	goto	l2647
  3195     0508                     l2655:
  3196                           
  3197                           ;doprnt.c: 1272: };doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  3198     0508  1683               	bsf	3,5	;RP0=1, select bank1
  3199     0509  083B               	movf	sprintf@flag^(0+128),w
  3200     050A  3903               	andlw	3
  3201     050B  1903               	btfsc	3,2
  3202     050C  2835               	goto	l2661
  3203                           
  3204                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  3205     050D  0849               	movf	sprintf@sp^(0+128),w
  3206     050E  0084               	movwf	4
  3207     050F  302D               	movlw	45
  3208     0510                     L4:
  3209     0510  1383               	bcf	3,7	;select IRP bank0
  3210     0511  0080               	movwf	0
  3211     0512  3001               	movlw	1
  3212     0513  00FF               	movwf	127
  3213     0514  087F               	movf	127,w
  3214     0515  07C9               	addwf	sprintf@sp^(0+128),f
  3215     0516  2835               	goto	l2661
  3216     0517                     l2663:
  3217                           
  3218                           ;doprnt.c: 1564: *sp = 0;
  3219     0517  0849               	movf	sprintf@sp^(0+128),w
  3220     0518  0084               	movwf	4
  3221     0519  1383               	bcf	3,7	;select IRP bank0
  3222     051A  0180               	clrf	0
  3223     051B  0008               	return
  3224     051C                     __end_of_sprintf:
  3225                           
  3226                           	psect	text6
  3227     051C                     __ptext6:	
  3228 ;; *************** function _scale *****************
  3229 ;; Defined at:
  3230 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  scl             1    wreg     char 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  scl             1   38[BANK0 ] char 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  3   32[BANK0 ] char 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 300/100
  3241 ;;		On exit  : 300/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3244 ;;      Params:         0       3       0       0       0
  3245 ;;      Locals:         0       4       0       0       0
  3246 ;;      Temps:          0       0       0       0       0
  3247 ;;      Totals:         0       7       0       0       0
  3248 ;;Total ram usage:        7 bytes
  3249 ;; Hardware stack levels used: 1
  3250 ;; Hardware stack levels required when called: 3
  3251 ;; This function calls:
  3252 ;;		___awdiv
  3253 ;;		___awmod
  3254 ;;		___bmul
  3255 ;;		___ftmul
  3256 ;; This function is called by:
  3257 ;;		_sprintf
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261     051C                     _scale:	
  3262                           ;psect for function _scale
  3263                           
  3264                           
  3265                           ;incstack = 0
  3266                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3267                           ;scale@scl stored from wreg
  3268     051C  1283               	bcf	3,5	;RP0=0, select bank0
  3269     051D  00C6               	movwf	scale@scl
  3270                           
  3271                           ;doprnt.c: 436: if(scl < 0) {
  3272     051E  1FC6               	btfss	scale@scl,7
  3273     051F  2E4B               	goto	l2161
  3274                           
  3275                           ;doprnt.c: 437: scl = -scl;
  3276     0520  09C6               	comf	scale@scl,f
  3277     0521  0AC6               	incf	scale@scl,f
  3278                           
  3279                           ;doprnt.c: 438: if(scl>=110)
  3280     0522  0846               	movf	scale@scl,w
  3281     0523  3A80               	xorlw	128
  3282     0524  3E12               	addlw	-238
  3283     0525  1C03               	skipc
  3284     0526  2DCD               	goto	l2151
  3285                           
  3286                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3287     0527  3003               	movlw	3
  3288     0528  00AE               	movwf	___bmul@multiplicand
  3289     0529  0846               	movf	scale@scl,w
  3290     052A  00A2               	movwf	___awmod@dividend
  3291     052B  01A3               	clrf	___awmod@dividend+1
  3292     052C  1BA2               	btfsc	___awmod@dividend,7
  3293     052D  03A3               	decf	___awmod@dividend+1,f
  3294     052E  3064               	movlw	100
  3295     052F  00A0               	movwf	___awmod@divisor
  3296     0530  3000               	movlw	0
  3297     0531  00A1               	movwf	___awmod@divisor+1
  3298     0532  120A  158A  213C  120A  118A  	fcall	___awmod
  3299     0537  0821               	movf	?___awmod+1,w
  3300     0538  00A9               	movwf	___awdiv@dividend+1
  3301     0539  0820               	movf	?___awmod,w
  3302     053A  00A8               	movwf	___awdiv@dividend
  3303     053B  300A               	movlw	10
  3304     053C  00A6               	movwf	___awdiv@divisor
  3305     053D  3000               	movlw	0
  3306     053E  00A7               	movwf	___awdiv@divisor+1
  3307     053F  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3308     0544  0826               	movf	?___awdiv,w
  3309     0545  160A  118A  26E7  120A  118A  	fcall	___bmul
  3310     054A  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3311     054B  0084               	movwf	4
  3312     054C  120A  158A  2000  120A  118A  	fcall	stringdir
  3313     0551  00B1               	movwf	___ftmul@f1
  3314     0552  120A  158A  2000  120A  118A  	fcall	stringdir
  3315     0557  00B2               	movwf	___ftmul@f1+1
  3316     0558  120A  158A  2000  120A  118A  	fcall	stringdir
  3317     055D  00B3               	movwf	___ftmul@f1+2
  3318     055E  3003               	movlw	3
  3319     055F  00AE               	movwf	___bmul@multiplicand
  3320     0560  0846               	movf	scale@scl,w
  3321     0561  00A8               	movwf	___awdiv@dividend
  3322     0562  01A9               	clrf	___awdiv@dividend+1
  3323     0563  1BA8               	btfsc	___awdiv@dividend,7
  3324     0564  03A9               	decf	___awdiv@dividend+1,f
  3325     0565  3064               	movlw	100
  3326     0566  00A6               	movwf	___awdiv@divisor
  3327     0567  3000               	movlw	0
  3328     0568  00A7               	movwf	___awdiv@divisor+1
  3329     0569  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3330     056E  0826               	movf	?___awdiv,w
  3331     056F  160A  118A  26E7  120A  118A  	fcall	___bmul
  3332     0574  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3333     0575  0084               	movwf	4
  3334     0576  120A  158A  2000  120A  118A  	fcall	stringdir
  3335     057B  00B4               	movwf	___ftmul@f2
  3336     057C  120A  158A  2000  120A  118A  	fcall	stringdir
  3337     0581  00B5               	movwf	___ftmul@f2+1
  3338     0582  120A  158A  2000  120A  118A  	fcall	stringdir
  3339     0587  00B6               	movwf	___ftmul@f2+2
  3340     0588  120A  158A  240E  120A  118A  	fcall	___ftmul
  3341     058D  0831               	movf	?___ftmul,w
  3342     058E  00C3               	movwf	_scale$1291
  3343     058F  0832               	movf	?___ftmul+1,w
  3344     0590  00C4               	movwf	_scale$1291+1
  3345     0591  0833               	movf	?___ftmul+2,w
  3346     0592  00C5               	movwf	_scale$1291+2
  3347                           
  3348                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  3349     0593  3003               	movlw	3
  3350     0594  00AE               	movwf	___bmul@multiplicand
  3351     0595  0846               	movf	scale@scl,w
  3352     0596  00A2               	movwf	___awmod@dividend
  3353     0597  01A3               	clrf	___awmod@dividend+1
  3354     0598  1BA2               	btfsc	___awmod@dividend,7
  3355     0599  03A3               	decf	___awmod@dividend+1,f
  3356     059A  300A               	movlw	10
  3357     059B  00A0               	movwf	___awmod@divisor
  3358     059C  3000               	movlw	0
  3359     059D  00A1               	movwf	___awmod@divisor+1
  3360     059E  120A  158A  213C  120A  118A  	fcall	___awmod
  3361     05A3  0820               	movf	?___awmod,w
  3362     05A4  160A  118A  26E7  120A  118A  	fcall	___bmul
  3363     05A9  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3364     05AA  0084               	movwf	4
  3365     05AB  120A  158A  2000  120A  118A  	fcall	stringdir
  3366     05B0  00B1               	movwf	___ftmul@f1
  3367     05B1  120A  158A  2000  120A  118A  	fcall	stringdir
  3368     05B6  00B2               	movwf	___ftmul@f1+1
  3369     05B7  120A  158A  2000  120A  118A  	fcall	stringdir
  3370     05BC  00B3               	movwf	___ftmul@f1+2
  3371     05BD  0843               	movf	_scale$1291,w
  3372     05BE  00B4               	movwf	___ftmul@f2
  3373     05BF  0844               	movf	_scale$1291+1,w
  3374     05C0  00B5               	movwf	___ftmul@f2+1
  3375     05C1  0845               	movf	_scale$1291+2,w
  3376     05C2  00B6               	movwf	___ftmul@f2+2
  3377     05C3  120A  158A  240E   	fcall	___ftmul
  3378     05C6  0831               	movf	?___ftmul,w
  3379     05C7  00C0               	movwf	?_scale
  3380     05C8  0832               	movf	?___ftmul+1,w
  3381     05C9  00C1               	movwf	?_scale+1
  3382     05CA  0833               	movf	?___ftmul+2,w
  3383     05CB  00C2               	movwf	?_scale+2
  3384     05CC  0008               	return
  3385     05CD                     l2151:
  3386                           
  3387                           ;doprnt.c: 440: else if(scl > 10)
  3388     05CD  0846               	movf	scale@scl,w
  3389     05CE  3A80               	xorlw	128
  3390     05CF  3E75               	addlw	-139
  3391     05D0  1C03               	skipc
  3392     05D1  2E30               	goto	l2157
  3393                           
  3394                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  3395     05D2  3003               	movlw	3
  3396     05D3  00AE               	movwf	___bmul@multiplicand
  3397     05D4  0846               	movf	scale@scl,w
  3398     05D5  00A2               	movwf	___awmod@dividend
  3399     05D6  01A3               	clrf	___awmod@dividend+1
  3400     05D7  1BA2               	btfsc	___awmod@dividend,7
  3401     05D8  03A3               	decf	___awmod@dividend+1,f
  3402     05D9  300A               	movlw	10
  3403     05DA  00A0               	movwf	___awmod@divisor
  3404     05DB  3000               	movlw	0
  3405     05DC  00A1               	movwf	___awmod@divisor+1
  3406     05DD  120A  158A  213C  120A  118A  	fcall	___awmod
  3407     05E2  0820               	movf	?___awmod,w
  3408     05E3  160A  118A  26E7  120A  118A  	fcall	___bmul
  3409     05E8  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3410     05E9  0084               	movwf	4
  3411     05EA  120A  158A  2000  120A  118A  	fcall	stringdir
  3412     05EF  00B1               	movwf	___ftmul@f1
  3413     05F0  120A  158A  2000  120A  118A  	fcall	stringdir
  3414     05F5  00B2               	movwf	___ftmul@f1+1
  3415     05F6  120A  158A  2000  120A  118A  	fcall	stringdir
  3416     05FB  00B3               	movwf	___ftmul@f1+2
  3417     05FC  3003               	movlw	3
  3418     05FD  00AE               	movwf	___bmul@multiplicand
  3419     05FE  0846               	movf	scale@scl,w
  3420     05FF  00A8               	movwf	___awdiv@dividend
  3421     0600  01A9               	clrf	___awdiv@dividend+1
  3422     0601  1BA8               	btfsc	___awdiv@dividend,7
  3423     0602  03A9               	decf	___awdiv@dividend+1,f
  3424     0603  300A               	movlw	10
  3425     0604  00A6               	movwf	___awdiv@divisor
  3426     0605  3000               	movlw	0
  3427     0606  00A7               	movwf	___awdiv@divisor+1
  3428     0607  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3429     060C  0826               	movf	?___awdiv,w
  3430     060D  160A  118A  26E7  120A  118A  	fcall	___bmul
  3431     0612  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3432     0613  0084               	movwf	4
  3433     0614  120A  158A  2000  120A  118A  	fcall	stringdir
  3434     0619  00B4               	movwf	___ftmul@f2
  3435     061A  120A  158A  2000  120A  118A  	fcall	stringdir
  3436     061F  00B5               	movwf	___ftmul@f2+1
  3437     0620  120A  158A  2000  120A  118A  	fcall	stringdir
  3438     0625  00B6               	movwf	___ftmul@f2+2
  3439     0626  120A  158A  240E   	fcall	___ftmul
  3440     0629  0831               	movf	?___ftmul,w
  3441     062A  00C0               	movwf	?_scale
  3442     062B  0832               	movf	?___ftmul+1,w
  3443     062C  00C1               	movwf	?_scale+1
  3444     062D  0833               	movf	?___ftmul+2,w
  3445     062E  00C2               	movwf	?_scale+2
  3446     062F  0008               	return
  3447     0630                     l2157:
  3448                           
  3449                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  3450     0630  3003               	movlw	3
  3451     0631  00AE               	movwf	___bmul@multiplicand
  3452     0632  0846               	movf	scale@scl,w
  3453     0633  160A  118A  26E7  120A  118A  	fcall	___bmul
  3454     0638  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3455     0639  0084               	movwf	4
  3456     063A  120A  158A  2000  120A  118A  	fcall	stringdir
  3457     063F  00C0               	movwf	?_scale
  3458     0640  120A  158A  2000  120A  118A  	fcall	stringdir
  3459     0645  00C1               	movwf	?_scale+1
  3460     0646  120A  158A  2000   	fcall	stringdir
  3461     0649  00C2               	movwf	?_scale+2
  3462     064A  0008               	return
  3463     064B                     l2161:
  3464                           
  3465                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  3466     064B  0846               	movf	scale@scl,w
  3467     064C  3A80               	xorlw	128
  3468     064D  3E12               	addlw	-238
  3469     064E  1C03               	skipc
  3470     064F  2EF6               	goto	l2169
  3471                           
  3472                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3473     0650  3003               	movlw	3
  3474     0651  00AE               	movwf	___bmul@multiplicand
  3475     0652  0846               	movf	scale@scl,w
  3476     0653  00A2               	movwf	___awmod@dividend
  3477     0654  01A3               	clrf	___awmod@dividend+1
  3478     0655  1BA2               	btfsc	___awmod@dividend,7
  3479     0656  03A3               	decf	___awmod@dividend+1,f
  3480     0657  3064               	movlw	100
  3481     0658  00A0               	movwf	___awmod@divisor
  3482     0659  3000               	movlw	0
  3483     065A  00A1               	movwf	___awmod@divisor+1
  3484     065B  120A  158A  213C  120A  118A  	fcall	___awmod
  3485     0660  0821               	movf	?___awmod+1,w
  3486     0661  00A9               	movwf	___awdiv@dividend+1
  3487     0662  0820               	movf	?___awmod,w
  3488     0663  00A8               	movwf	___awdiv@dividend
  3489     0664  300A               	movlw	10
  3490     0665  00A6               	movwf	___awdiv@divisor
  3491     0666  3000               	movlw	0
  3492     0667  00A7               	movwf	___awdiv@divisor+1
  3493     0668  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3494     066D  0826               	movf	?___awdiv,w
  3495     066E  160A  118A  26E7  120A  118A  	fcall	___bmul
  3496     0673  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3497     0674  0084               	movwf	4
  3498     0675  120A  158A  2000  120A  118A  	fcall	stringdir
  3499     067A  00B1               	movwf	___ftmul@f1
  3500     067B  120A  158A  2000  120A  118A  	fcall	stringdir
  3501     0680  00B2               	movwf	___ftmul@f1+1
  3502     0681  120A  158A  2000  120A  118A  	fcall	stringdir
  3503     0686  00B3               	movwf	___ftmul@f1+2
  3504     0687  3003               	movlw	3
  3505     0688  00AE               	movwf	___bmul@multiplicand
  3506     0689  0846               	movf	scale@scl,w
  3507     068A  00A8               	movwf	___awdiv@dividend
  3508     068B  01A9               	clrf	___awdiv@dividend+1
  3509     068C  1BA8               	btfsc	___awdiv@dividend,7
  3510     068D  03A9               	decf	___awdiv@dividend+1,f
  3511     068E  3064               	movlw	100
  3512     068F  00A6               	movwf	___awdiv@divisor
  3513     0690  3000               	movlw	0
  3514     0691  00A7               	movwf	___awdiv@divisor+1
  3515     0692  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3516     0697  0826               	movf	?___awdiv,w
  3517     0698  160A  118A  26E7  120A  118A  	fcall	___bmul
  3518     069D  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  3519     069E  0084               	movwf	4
  3520     069F  120A  158A  2000  120A  118A  	fcall	stringdir
  3521     06A4  00B4               	movwf	___ftmul@f2
  3522     06A5  120A  158A  2000  120A  118A  	fcall	stringdir
  3523     06AA  00B5               	movwf	___ftmul@f2+1
  3524     06AB  120A  158A  2000  120A  118A  	fcall	stringdir
  3525     06B0  00B6               	movwf	___ftmul@f2+2
  3526     06B1  120A  158A  240E  120A  118A  	fcall	___ftmul
  3527     06B6  0831               	movf	?___ftmul,w
  3528     06B7  00C3               	movwf	_scale$1291
  3529     06B8  0832               	movf	?___ftmul+1,w
  3530     06B9  00C4               	movwf	_scale$1291+1
  3531     06BA  0833               	movf	?___ftmul+2,w
  3532     06BB  00C5               	movwf	_scale$1291+2
  3533                           
  3534                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3535     06BC  3003               	movlw	3
  3536     06BD  00AE               	movwf	___bmul@multiplicand
  3537     06BE  0846               	movf	scale@scl,w
  3538     06BF  00A2               	movwf	___awmod@dividend
  3539     06C0  01A3               	clrf	___awmod@dividend+1
  3540     06C1  1BA2               	btfsc	___awmod@dividend,7
  3541     06C2  03A3               	decf	___awmod@dividend+1,f
  3542     06C3  300A               	movlw	10
  3543     06C4  00A0               	movwf	___awmod@divisor
  3544     06C5  3000               	movlw	0
  3545     06C6  00A1               	movwf	___awmod@divisor+1
  3546     06C7  120A  158A  213C  120A  118A  	fcall	___awmod
  3547     06CC  0820               	movf	?___awmod,w
  3548     06CD  160A  118A  26E7  120A  118A  	fcall	___bmul
  3549     06D2  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3550     06D3  0084               	movwf	4
  3551     06D4  120A  158A  2000  120A  118A  	fcall	stringdir
  3552     06D9  00B1               	movwf	___ftmul@f1
  3553     06DA  120A  158A  2000  120A  118A  	fcall	stringdir
  3554     06DF  00B2               	movwf	___ftmul@f1+1
  3555     06E0  120A  158A  2000  120A  118A  	fcall	stringdir
  3556     06E5  00B3               	movwf	___ftmul@f1+2
  3557     06E6  0843               	movf	_scale$1291,w
  3558     06E7  00B4               	movwf	___ftmul@f2
  3559     06E8  0844               	movf	_scale$1291+1,w
  3560     06E9  00B5               	movwf	___ftmul@f2+1
  3561     06EA  0845               	movf	_scale$1291+2,w
  3562     06EB  00B6               	movwf	___ftmul@f2+2
  3563     06EC  120A  158A  240E   	fcall	___ftmul
  3564     06EF  0831               	movf	?___ftmul,w
  3565     06F0  00C0               	movwf	?_scale
  3566     06F1  0832               	movf	?___ftmul+1,w
  3567     06F2  00C1               	movwf	?_scale+1
  3568     06F3  0833               	movf	?___ftmul+2,w
  3569     06F4  00C2               	movwf	?_scale+2
  3570     06F5  0008               	return
  3571     06F6                     l2169:
  3572                           
  3573                           ;doprnt.c: 446: else if(scl > 10)
  3574     06F6  0846               	movf	scale@scl,w
  3575     06F7  3A80               	xorlw	128
  3576     06F8  3E75               	addlw	-139
  3577     06F9  1C03               	skipc
  3578     06FA  2F59               	goto	l2175
  3579                           
  3580                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3581     06FB  3003               	movlw	3
  3582     06FC  00AE               	movwf	___bmul@multiplicand
  3583     06FD  0846               	movf	scale@scl,w
  3584     06FE  00A2               	movwf	___awmod@dividend
  3585     06FF  01A3               	clrf	___awmod@dividend+1
  3586     0700  1BA2               	btfsc	___awmod@dividend,7
  3587     0701  03A3               	decf	___awmod@dividend+1,f
  3588     0702  300A               	movlw	10
  3589     0703  00A0               	movwf	___awmod@divisor
  3590     0704  3000               	movlw	0
  3591     0705  00A1               	movwf	___awmod@divisor+1
  3592     0706  120A  158A  213C  120A  118A  	fcall	___awmod
  3593     070B  0820               	movf	?___awmod,w
  3594     070C  160A  118A  26E7  120A  118A  	fcall	___bmul
  3595     0711  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3596     0712  0084               	movwf	4
  3597     0713  120A  158A  2000  120A  118A  	fcall	stringdir
  3598     0718  00B1               	movwf	___ftmul@f1
  3599     0719  120A  158A  2000  120A  118A  	fcall	stringdir
  3600     071E  00B2               	movwf	___ftmul@f1+1
  3601     071F  120A  158A  2000  120A  118A  	fcall	stringdir
  3602     0724  00B3               	movwf	___ftmul@f1+2
  3603     0725  3003               	movlw	3
  3604     0726  00AE               	movwf	___bmul@multiplicand
  3605     0727  0846               	movf	scale@scl,w
  3606     0728  00A8               	movwf	___awdiv@dividend
  3607     0729  01A9               	clrf	___awdiv@dividend+1
  3608     072A  1BA8               	btfsc	___awdiv@dividend,7
  3609     072B  03A9               	decf	___awdiv@dividend+1,f
  3610     072C  300A               	movlw	10
  3611     072D  00A6               	movwf	___awdiv@divisor
  3612     072E  3000               	movlw	0
  3613     072F  00A7               	movwf	___awdiv@divisor+1
  3614     0730  120A  158A  21D3  120A  118A  	fcall	___awdiv
  3615     0735  0826               	movf	?___awdiv,w
  3616     0736  160A  118A  26E7  120A  118A  	fcall	___bmul
  3617     073B  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3618     073C  0084               	movwf	4
  3619     073D  120A  158A  2000  120A  118A  	fcall	stringdir
  3620     0742  00B4               	movwf	___ftmul@f2
  3621     0743  120A  158A  2000  120A  118A  	fcall	stringdir
  3622     0748  00B5               	movwf	___ftmul@f2+1
  3623     0749  120A  158A  2000  120A  118A  	fcall	stringdir
  3624     074E  00B6               	movwf	___ftmul@f2+2
  3625     074F  120A  158A  240E   	fcall	___ftmul
  3626     0752  0831               	movf	?___ftmul,w
  3627     0753  00C0               	movwf	?_scale
  3628     0754  0832               	movf	?___ftmul+1,w
  3629     0755  00C1               	movwf	?_scale+1
  3630     0756  0833               	movf	?___ftmul+2,w
  3631     0757  00C2               	movwf	?_scale+2
  3632     0758  0008               	return
  3633     0759                     l2175:
  3634                           
  3635                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3636     0759  3003               	movlw	3
  3637     075A  00AE               	movwf	___bmul@multiplicand
  3638     075B  0846               	movf	scale@scl,w
  3639     075C  160A  118A  26E7  120A  118A  	fcall	___bmul
  3640     0761  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3641     0762  0084               	movwf	4
  3642     0763  120A  158A  2000  120A  118A  	fcall	stringdir
  3643     0768  00C0               	movwf	?_scale
  3644     0769  120A  158A  2000  120A  118A  	fcall	stringdir
  3645     076E  00C1               	movwf	?_scale+1
  3646     076F  120A  158A  2000   	fcall	stringdir
  3647     0772  00C2               	movwf	?_scale+2
  3648     0773  0008               	return
  3649     0774                     __end_of_scale:
  3650                           
  3651                           	psect	text7
  3652     093C                     __ptext7:	
  3653 ;; *************** function ___awmod *****************
  3654 ;; Defined at:
  3655 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  divisor         2    0[BANK0 ] int 
  3658 ;;  dividend        2    2[BANK0 ] int 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  sign            1    5[BANK0 ] unsigned char 
  3661 ;;  counter         1    4[BANK0 ] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  2    0[BANK0 ] int 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, btemp+1
  3666 ;; Tracked objects:
  3667 ;;		On entry : 300/0
  3668 ;;		On exit  : 300/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3671 ;;      Params:         0       4       0       0       0
  3672 ;;      Locals:         0       2       0       0       0
  3673 ;;      Temps:          0       0       0       0       0
  3674 ;;      Totals:         0       6       0       0       0
  3675 ;;Total ram usage:        6 bytes
  3676 ;; Hardware stack levels used: 1
  3677 ;; Hardware stack levels required when called: 1
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_scale
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685     093C                     ___awmod:	
  3686                           ;psect for function ___awmod
  3687                           
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  3691     093C  01A5               	clrf	___awmod@sign
  3692     093D  1FA3               	btfss	___awmod@dividend+1,7
  3693     093E  2946               	goto	l1907
  3694     093F  09A2               	comf	___awmod@dividend,f
  3695     0940  09A3               	comf	___awmod@dividend+1,f
  3696     0941  0AA2               	incf	___awmod@dividend,f
  3697     0942  1903               	skipnz
  3698     0943  0AA3               	incf	___awmod@dividend+1,f
  3699     0944  01A5               	clrf	___awmod@sign
  3700     0945  0AA5               	incf	___awmod@sign,f
  3701     0946                     l1907:
  3702     0946  1FA1               	btfss	___awmod@divisor+1,7
  3703     0947  294D               	goto	l1911
  3704     0948  09A0               	comf	___awmod@divisor,f
  3705     0949  09A1               	comf	___awmod@divisor+1,f
  3706     094A  0AA0               	incf	___awmod@divisor,f
  3707     094B  1903               	skipnz
  3708     094C  0AA1               	incf	___awmod@divisor+1,f
  3709     094D                     l1911:
  3710     094D  0820               	movf	___awmod@divisor,w
  3711     094E  0421               	iorwf	___awmod@divisor+1,w
  3712     094F  1903               	btfsc	3,2
  3713     0950  297A               	goto	l1929
  3714     0951  01A4               	clrf	___awmod@counter
  3715     0952  0AA4               	incf	___awmod@counter,f
  3716     0953                     l1919:
  3717     0953  1BA1               	btfsc	___awmod@divisor+1,7
  3718     0954  2961               	goto	l1921
  3719     0955  3001               	movlw	1
  3720     0956                     u2065:
  3721     0956  1003               	clrc
  3722     0957  0DA0               	rlf	___awmod@divisor,f
  3723     0958  0DA1               	rlf	___awmod@divisor+1,f
  3724     0959  3EFF               	addlw	-1
  3725     095A  1D03               	skipz
  3726     095B  2956               	goto	u2065
  3727     095C  3001               	movlw	1
  3728     095D  00FF               	movwf	127
  3729     095E  087F               	movf	127,w
  3730     095F  07A4               	addwf	___awmod@counter,f
  3731     0960  2953               	goto	l1919
  3732     0961                     l1921:
  3733     0961  0821               	movf	___awmod@divisor+1,w
  3734     0962  0223               	subwf	___awmod@dividend+1,w
  3735     0963  1D03               	skipz
  3736     0964  2967               	goto	u2085
  3737     0965  0820               	movf	___awmod@divisor,w
  3738     0966  0222               	subwf	___awmod@dividend,w
  3739     0967                     u2085:
  3740     0967  1C03               	skipc
  3741     0968  296F               	goto	l1925
  3742     0969  0820               	movf	___awmod@divisor,w
  3743     096A  02A2               	subwf	___awmod@dividend,f
  3744     096B  0821               	movf	___awmod@divisor+1,w
  3745     096C  1C03               	skipc
  3746     096D  03A3               	decf	___awmod@dividend+1,f
  3747     096E  02A3               	subwf	___awmod@dividend+1,f
  3748     096F                     l1925:
  3749     096F  3001               	movlw	1
  3750     0970                     u2095:
  3751     0970  1003               	clrc
  3752     0971  0CA1               	rrf	___awmod@divisor+1,f
  3753     0972  0CA0               	rrf	___awmod@divisor,f
  3754     0973  3EFF               	addlw	-1
  3755     0974  1D03               	skipz
  3756     0975  2970               	goto	u2095
  3757     0976  3001               	movlw	1
  3758     0977  02A4               	subwf	___awmod@counter,f
  3759     0978  1D03               	btfss	3,2
  3760     0979  2961               	goto	l1921
  3761     097A                     l1929:
  3762     097A  0825               	movf	___awmod@sign,w
  3763     097B  1903               	btfsc	3,2
  3764     097C  2982               	goto	l1933
  3765     097D  09A2               	comf	___awmod@dividend,f
  3766     097E  09A3               	comf	___awmod@dividend+1,f
  3767     097F  0AA2               	incf	___awmod@dividend,f
  3768     0980  1903               	skipnz
  3769     0981  0AA3               	incf	___awmod@dividend+1,f
  3770     0982                     l1933:
  3771     0982  0823               	movf	___awmod@dividend+1,w
  3772     0983  00A1               	movwf	?___awmod+1
  3773     0984  0822               	movf	___awmod@dividend,w
  3774     0985  00A0               	movwf	?___awmod
  3775     0986  0008               	return
  3776     0987                     __end_of___awmod:
  3777                           
  3778                           	psect	text8
  3779     09D3                     __ptext8:	
  3780 ;; *************** function ___awdiv *****************
  3781 ;; Defined at:
  3782 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  divisor         2    6[BANK0 ] int 
  3785 ;;  dividend        2    8[BANK0 ] int 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  quotient        2   12[BANK0 ] int 
  3788 ;;  sign            1   11[BANK0 ] unsigned char 
  3789 ;;  counter         1   10[BANK0 ] unsigned char 
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  2    6[BANK0 ] int 
  3792 ;; Registers used:
  3793 ;;		wreg, status,2, status,0, btemp+1
  3794 ;; Tracked objects:
  3795 ;;		On entry : 300/0
  3796 ;;		On exit  : 300/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3799 ;;      Params:         0       4       0       0       0
  3800 ;;      Locals:         0       4       0       0       0
  3801 ;;      Temps:          0       0       0       0       0
  3802 ;;      Totals:         0       8       0       0       0
  3803 ;;Total ram usage:        8 bytes
  3804 ;; Hardware stack levels used: 1
  3805 ;; Hardware stack levels required when called: 1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_scale
  3810 ;;		_sprintf
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814     09D3                     ___awdiv:	
  3815                           ;psect for function ___awdiv
  3816                           
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3820     09D3  01AB               	clrf	___awdiv@sign
  3821     09D4  1FA7               	btfss	___awdiv@divisor+1,7
  3822     09D5  29DD               	goto	l1863
  3823     09D6  09A6               	comf	___awdiv@divisor,f
  3824     09D7  09A7               	comf	___awdiv@divisor+1,f
  3825     09D8  0AA6               	incf	___awdiv@divisor,f
  3826     09D9  1903               	skipnz
  3827     09DA  0AA7               	incf	___awdiv@divisor+1,f
  3828     09DB  01AB               	clrf	___awdiv@sign
  3829     09DC  0AAB               	incf	___awdiv@sign,f
  3830     09DD                     l1863:
  3831     09DD  1FA9               	btfss	___awdiv@dividend+1,7
  3832     09DE  29E8               	goto	l1869
  3833     09DF  09A8               	comf	___awdiv@dividend,f
  3834     09E0  09A9               	comf	___awdiv@dividend+1,f
  3835     09E1  0AA8               	incf	___awdiv@dividend,f
  3836     09E2  1903               	skipnz
  3837     09E3  0AA9               	incf	___awdiv@dividend+1,f
  3838     09E4  3001               	movlw	1
  3839     09E5  00FF               	movwf	127
  3840     09E6  087F               	movf	127,w
  3841     09E7  06AB               	xorwf	___awdiv@sign,f
  3842     09E8                     l1869:
  3843     09E8  01AC               	clrf	___awdiv@quotient
  3844     09E9  01AD               	clrf	___awdiv@quotient+1
  3845     09EA  0826               	movf	___awdiv@divisor,w
  3846     09EB  0427               	iorwf	___awdiv@divisor+1,w
  3847     09EC  1903               	btfsc	3,2
  3848     09ED  2A1F               	goto	l1891
  3849     09EE  01AA               	clrf	___awdiv@counter
  3850     09EF  0AAA               	incf	___awdiv@counter,f
  3851     09F0                     l1879:
  3852     09F0  1BA7               	btfsc	___awdiv@divisor+1,7
  3853     09F1  29FE               	goto	l1881
  3854     09F2  3001               	movlw	1
  3855     09F3                     u1965:
  3856     09F3  1003               	clrc
  3857     09F4  0DA6               	rlf	___awdiv@divisor,f
  3858     09F5  0DA7               	rlf	___awdiv@divisor+1,f
  3859     09F6  3EFF               	addlw	-1
  3860     09F7  1D03               	skipz
  3861     09F8  29F3               	goto	u1965
  3862     09F9  3001               	movlw	1
  3863     09FA  00FF               	movwf	127
  3864     09FB  087F               	movf	127,w
  3865     09FC  07AA               	addwf	___awdiv@counter,f
  3866     09FD  29F0               	goto	l1879
  3867     09FE                     l1881:
  3868     09FE  3001               	movlw	1
  3869     09FF                     u1985:
  3870     09FF  1003               	clrc
  3871     0A00  0DAC               	rlf	___awdiv@quotient,f
  3872     0A01  0DAD               	rlf	___awdiv@quotient+1,f
  3873     0A02  3EFF               	addlw	-1
  3874     0A03  1D03               	skipz
  3875     0A04  29FF               	goto	u1985
  3876     0A05  0827               	movf	___awdiv@divisor+1,w
  3877     0A06  0229               	subwf	___awdiv@dividend+1,w
  3878     0A07  1D03               	skipz
  3879     0A08  2A0B               	goto	u1995
  3880     0A09  0826               	movf	___awdiv@divisor,w
  3881     0A0A  0228               	subwf	___awdiv@dividend,w
  3882     0A0B                     u1995:
  3883     0A0B  1C03               	skipc
  3884     0A0C  2A14               	goto	l1887
  3885     0A0D  0826               	movf	___awdiv@divisor,w
  3886     0A0E  02A8               	subwf	___awdiv@dividend,f
  3887     0A0F  0827               	movf	___awdiv@divisor+1,w
  3888     0A10  1C03               	skipc
  3889     0A11  03A9               	decf	___awdiv@dividend+1,f
  3890     0A12  02A9               	subwf	___awdiv@dividend+1,f
  3891     0A13  142C               	bsf	___awdiv@quotient,0
  3892     0A14                     l1887:
  3893     0A14  3001               	movlw	1
  3894     0A15                     u2005:
  3895     0A15  1003               	clrc
  3896     0A16  0CA7               	rrf	___awdiv@divisor+1,f
  3897     0A17  0CA6               	rrf	___awdiv@divisor,f
  3898     0A18  3EFF               	addlw	-1
  3899     0A19  1D03               	skipz
  3900     0A1A  2A15               	goto	u2005
  3901     0A1B  3001               	movlw	1
  3902     0A1C  02AA               	subwf	___awdiv@counter,f
  3903     0A1D  1D03               	btfss	3,2
  3904     0A1E  29FE               	goto	l1881
  3905     0A1F                     l1891:
  3906     0A1F  082B               	movf	___awdiv@sign,w
  3907     0A20  1903               	btfsc	3,2
  3908     0A21  2A27               	goto	l1895
  3909     0A22  09AC               	comf	___awdiv@quotient,f
  3910     0A23  09AD               	comf	___awdiv@quotient+1,f
  3911     0A24  0AAC               	incf	___awdiv@quotient,f
  3912     0A25  1903               	skipnz
  3913     0A26  0AAD               	incf	___awdiv@quotient+1,f
  3914     0A27                     l1895:
  3915     0A27  082D               	movf	___awdiv@quotient+1,w
  3916     0A28  00A7               	movwf	?___awdiv+1
  3917     0A29  082C               	movf	___awdiv@quotient,w
  3918     0A2A  00A6               	movwf	?___awdiv
  3919     0A2B  0008               	return
  3920     0A2C                     __end_of___awdiv:
  3921                           
  3922                           	psect	text9
  3923     0EC1                     __ptext9:	
  3924 ;; *************** function _fround *****************
  3925 ;; Defined at:
  3926 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  prec            1    wreg     unsigned char 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;  prec            1   41[BANK0 ] unsigned char 
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  3   32[BANK0 ] unsigned char 
  3933 ;; Registers used:
  3934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 200/100
  3937 ;;		On exit  : 300/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3940 ;;      Params:         0       3       0       0       0
  3941 ;;      Locals:         0       7       0       0       0
  3942 ;;      Temps:          0       0       0       0       0
  3943 ;;      Totals:         0      10       0       0       0
  3944 ;;Total ram usage:       10 bytes
  3945 ;; Hardware stack levels used: 1
  3946 ;; Hardware stack levels required when called: 3
  3947 ;; This function calls:
  3948 ;;		___bmul
  3949 ;;		___ftmul
  3950 ;;		___lbdiv
  3951 ;;		___lbmod
  3952 ;; This function is called by:
  3953 ;;		_sprintf
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957     0EC1                     _fround:	
  3958                           ;psect for function _fround
  3959                           
  3960                           
  3961                           ;incstack = 0
  3962                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3963                           ;fround@prec stored from wreg
  3964     0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  3965     0EC2  00C9               	movwf	fround@prec
  3966                           
  3967                           ;doprnt.c: 421: if(prec>=110)
  3968     0EC3  306E               	movlw	110
  3969     0EC4  0249               	subwf	fround@prec,w
  3970     0EC5  1C03               	skipc
  3971     0EC6  2F69               	goto	l2127
  3972                           
  3973                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3974     0EC7  3003               	movlw	3
  3975     0EC8  00AE               	movwf	___bmul@multiplicand
  3976     0EC9  300A               	movlw	10
  3977     0ECA  00A6               	movwf	___lbdiv@divisor
  3978     0ECB  3064               	movlw	100
  3979     0ECC  00A0               	movwf	___lbmod@divisor
  3980     0ECD  0849               	movf	fround@prec,w
  3981     0ECE  160A  118A  277D  120A  158A  	fcall	___lbmod
  3982     0ED3  160A  118A  27BD  120A  158A  	fcall	___lbdiv
  3983     0ED8  160A  118A  26E7  120A  158A  	fcall	___bmul
  3984     0EDD  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3985     0EDE  0084               	movwf	4
  3986     0EDF  120A  158A  2000  120A  158A  	fcall	stringdir
  3987     0EE4  00B1               	movwf	___ftmul@f1
  3988     0EE5  120A  158A  2000  120A  158A  	fcall	stringdir
  3989     0EEA  00B2               	movwf	___ftmul@f1+1
  3990     0EEB  120A  158A  2000  120A  158A  	fcall	stringdir
  3991     0EF0  00B3               	movwf	___ftmul@f1+2
  3992     0EF1  3003               	movlw	3
  3993     0EF2  00AE               	movwf	___bmul@multiplicand
  3994     0EF3  3064               	movlw	100
  3995     0EF4  00A6               	movwf	___lbdiv@divisor
  3996     0EF5  0849               	movf	fround@prec,w
  3997     0EF6  160A  118A  27BD  120A  158A  	fcall	___lbdiv
  3998     0EFB  160A  118A  26E7  120A  158A  	fcall	___bmul
  3999     0F00  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  4000     0F01  0084               	movwf	4
  4001     0F02  120A  158A  2000  120A  158A  	fcall	stringdir
  4002     0F07  00B4               	movwf	___ftmul@f2
  4003     0F08  120A  158A  2000  120A  158A  	fcall	stringdir
  4004     0F0D  00B5               	movwf	___ftmul@f2+1
  4005     0F0E  120A  158A  2000  120A  158A  	fcall	stringdir
  4006     0F13  00B6               	movwf	___ftmul@f2+2
  4007     0F14  120A  158A  240E  120A  158A  	fcall	___ftmul
  4008     0F19  0831               	movf	?___ftmul,w
  4009     0F1A  00C6               	movwf	_fround$1289
  4010     0F1B  0832               	movf	?___ftmul+1,w
  4011     0F1C  00C7               	movwf	_fround$1289+1
  4012     0F1D  0833               	movf	?___ftmul+2,w
  4013     0F1E  00C8               	movwf	_fround$1289+2
  4014                           
  4015                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4016     0F1F  3003               	movlw	3
  4017     0F20  00AE               	movwf	___bmul@multiplicand
  4018     0F21  300A               	movlw	10
  4019     0F22  00A0               	movwf	___lbmod@divisor
  4020     0F23  0849               	movf	fround@prec,w
  4021     0F24  160A  118A  277D  120A  158A  	fcall	___lbmod
  4022     0F29  160A  118A  26E7  120A  158A  	fcall	___bmul
  4023     0F2E  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4024     0F2F  0084               	movwf	4
  4025     0F30  120A  158A  2000  120A  158A  	fcall	stringdir
  4026     0F35  00B1               	movwf	___ftmul@f1
  4027     0F36  120A  158A  2000  120A  158A  	fcall	stringdir
  4028     0F3B  00B2               	movwf	___ftmul@f1+1
  4029     0F3C  120A  158A  2000  120A  158A  	fcall	stringdir
  4030     0F41  00B3               	movwf	___ftmul@f1+2
  4031     0F42  0846               	movf	_fround$1289,w
  4032     0F43  00B4               	movwf	___ftmul@f2
  4033     0F44  0847               	movf	_fround$1289+1,w
  4034     0F45  00B5               	movwf	___ftmul@f2+1
  4035     0F46  0848               	movf	_fround$1289+2,w
  4036     0F47  00B6               	movwf	___ftmul@f2+2
  4037     0F48  120A  158A  240E  120A  158A  	fcall	___ftmul
  4038     0F4D  0831               	movf	?___ftmul,w
  4039     0F4E  00C3               	movwf	_fround$1290
  4040     0F4F  0832               	movf	?___ftmul+1,w
  4041     0F50  00C4               	movwf	_fround$1290+1
  4042     0F51  0833               	movf	?___ftmul+2,w
  4043     0F52  00C5               	movwf	_fround$1290+2
  4044                           
  4045                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  4046     0F53  3000               	movlw	0
  4047     0F54  00B1               	movwf	___ftmul@f1
  4048     0F55  3000               	movlw	0
  4049     0F56  00B2               	movwf	___ftmul@f1+1
  4050     0F57  303F               	movlw	63
  4051     0F58  00B3               	movwf	___ftmul@f1+2
  4052     0F59  0843               	movf	_fround$1290,w
  4053     0F5A  00B4               	movwf	___ftmul@f2
  4054     0F5B  0844               	movf	_fround$1290+1,w
  4055     0F5C  00B5               	movwf	___ftmul@f2+1
  4056     0F5D  0845               	movf	_fround$1290+2,w
  4057     0F5E  00B6               	movwf	___ftmul@f2+2
  4058     0F5F  120A  158A  240E   	fcall	___ftmul
  4059     0F62  0831               	movf	?___ftmul,w
  4060     0F63  00C0               	movwf	?_fround
  4061     0F64  0832               	movf	?___ftmul+1,w
  4062     0F65  00C1               	movwf	?_fround+1
  4063     0F66  0833               	movf	?___ftmul+2,w
  4064     0F67  00C2               	movwf	?_fround+2
  4065     0F68  0008               	return
  4066     0F69                     l2127:
  4067                           
  4068                           ;doprnt.c: 423: else if(prec > 10)
  4069     0F69  300B               	movlw	11
  4070     0F6A  0249               	subwf	fround@prec,w
  4071     0F6B  1C03               	skipc
  4072     0F6C  2FD4               	goto	l2135
  4073                           
  4074                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4075     0F6D  3003               	movlw	3
  4076     0F6E  00AE               	movwf	___bmul@multiplicand
  4077     0F6F  300A               	movlw	10
  4078     0F70  00A0               	movwf	___lbmod@divisor
  4079     0F71  0849               	movf	fround@prec,w
  4080     0F72  160A  118A  277D  120A  158A  	fcall	___lbmod
  4081     0F77  160A  118A  26E7  120A  158A  	fcall	___bmul
  4082     0F7C  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4083     0F7D  0084               	movwf	4
  4084     0F7E  120A  158A  2000  120A  158A  	fcall	stringdir
  4085     0F83  00B1               	movwf	___ftmul@f1
  4086     0F84  120A  158A  2000  120A  158A  	fcall	stringdir
  4087     0F89  00B2               	movwf	___ftmul@f1+1
  4088     0F8A  120A  158A  2000  120A  158A  	fcall	stringdir
  4089     0F8F  00B3               	movwf	___ftmul@f1+2
  4090     0F90  3003               	movlw	3
  4091     0F91  00AE               	movwf	___bmul@multiplicand
  4092     0F92  300A               	movlw	10
  4093     0F93  00A6               	movwf	___lbdiv@divisor
  4094     0F94  0849               	movf	fround@prec,w
  4095     0F95  160A  118A  27BD  120A  158A  	fcall	___lbdiv
  4096     0F9A  160A  118A  26E7  120A  158A  	fcall	___bmul
  4097     0F9F  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  4098     0FA0  0084               	movwf	4
  4099     0FA1  120A  158A  2000  120A  158A  	fcall	stringdir
  4100     0FA6  00B4               	movwf	___ftmul@f2
  4101     0FA7  120A  158A  2000  120A  158A  	fcall	stringdir
  4102     0FAC  00B5               	movwf	___ftmul@f2+1
  4103     0FAD  120A  158A  2000  120A  158A  	fcall	stringdir
  4104     0FB2  00B6               	movwf	___ftmul@f2+2
  4105     0FB3  120A  158A  240E  120A  158A  	fcall	___ftmul
  4106     0FB8  0831               	movf	?___ftmul,w
  4107     0FB9  00C6               	movwf	_fround$1289
  4108     0FBA  0832               	movf	?___ftmul+1,w
  4109     0FBB  00C7               	movwf	_fround$1289+1
  4110     0FBC  0833               	movf	?___ftmul+2,w
  4111     0FBD  00C8               	movwf	_fround$1289+2
  4112                           
  4113                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  4114     0FBE  3000               	movlw	0
  4115     0FBF  00B1               	movwf	___ftmul@f1
  4116     0FC0  3000               	movlw	0
  4117     0FC1  00B2               	movwf	___ftmul@f1+1
  4118     0FC2  303F               	movlw	63
  4119     0FC3  00B3               	movwf	___ftmul@f1+2
  4120     0FC4  0846               	movf	_fround$1289,w
  4121     0FC5  00B4               	movwf	___ftmul@f2
  4122     0FC6  0847               	movf	_fround$1289+1,w
  4123     0FC7  00B5               	movwf	___ftmul@f2+1
  4124     0FC8  0848               	movf	_fround$1289+2,w
  4125     0FC9  00B6               	movwf	___ftmul@f2+2
  4126     0FCA  120A  158A  240E   	fcall	___ftmul
  4127     0FCD  0831               	movf	?___ftmul,w
  4128     0FCE  00C0               	movwf	?_fround
  4129     0FCF  0832               	movf	?___ftmul+1,w
  4130     0FD0  00C1               	movwf	?_fround+1
  4131     0FD1  0833               	movf	?___ftmul+2,w
  4132     0FD2  00C2               	movwf	?_fround+2
  4133     0FD3  0008               	return
  4134     0FD4                     l2135:
  4135                           
  4136                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  4137     0FD4  3000               	movlw	0
  4138     0FD5  00B1               	movwf	___ftmul@f1
  4139     0FD6  3000               	movlw	0
  4140     0FD7  00B2               	movwf	___ftmul@f1+1
  4141     0FD8  303F               	movlw	63
  4142     0FD9  00B3               	movwf	___ftmul@f1+2
  4143     0FDA  3003               	movlw	3
  4144     0FDB  00AE               	movwf	___bmul@multiplicand
  4145     0FDC  0849               	movf	fround@prec,w
  4146     0FDD  160A  118A  26E7  120A  158A  	fcall	___bmul
  4147     0FE2  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  4148     0FE3  0084               	movwf	4
  4149     0FE4  120A  158A  2000  120A  158A  	fcall	stringdir
  4150     0FE9  00B4               	movwf	___ftmul@f2
  4151     0FEA  120A  158A  2000  120A  158A  	fcall	stringdir
  4152     0FEF  00B5               	movwf	___ftmul@f2+1
  4153     0FF0  120A  158A  2000  120A  158A  	fcall	stringdir
  4154     0FF5  00B6               	movwf	___ftmul@f2+2
  4155     0FF6  120A  158A  240E   	fcall	___ftmul
  4156     0FF9  0831               	movf	?___ftmul,w
  4157     0FFA  00C0               	movwf	?_fround
  4158     0FFB  0832               	movf	?___ftmul+1,w
  4159     0FFC  00C1               	movwf	?_fround+1
  4160     0FFD  0833               	movf	?___ftmul+2,w
  4161     0FFE  00C2               	movwf	?_fround+2
  4162     0FFF  0008               	return
  4163     1000                     __end_of_fround:
  4164                           
  4165                           	psect	text10
  4166     177D                     __ptext10:	
  4167 ;; *************** function ___lbmod *****************
  4168 ;; Defined at:
  4169 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbmod.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  dividend        1    wreg     unsigned char 
  4172 ;;  divisor         1    0[BANK0 ] unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  dividend        1    3[BANK0 ] unsigned char 
  4175 ;;  rem             1    5[BANK0 ] unsigned char 
  4176 ;;  counter         1    4[BANK0 ] unsigned char 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      unsigned char 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2, status,0
  4181 ;; Tracked objects:
  4182 ;;		On entry : 300/0
  4183 ;;		On exit  : 300/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4186 ;;      Params:         0       1       0       0       0
  4187 ;;      Locals:         0       3       0       0       0
  4188 ;;      Temps:          0       2       0       0       0
  4189 ;;      Totals:         0       6       0       0       0
  4190 ;;Total ram usage:        6 bytes
  4191 ;; Hardware stack levels used: 1
  4192 ;; Hardware stack levels required when called: 1
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_fround
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200     177D                     ___lbmod:	
  4201                           ;psect for function ___lbmod
  4202                           
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4206                           ;___lbmod@dividend stored from wreg
  4207     177D  00A3               	movwf	___lbmod@dividend
  4208     177E  3008               	movlw	8
  4209     177F  00A4               	movwf	___lbmod@counter
  4210     1780  01A5               	clrf	___lbmod@rem
  4211     1781                     l2097:
  4212     1781  0823               	movf	___lbmod@dividend,w
  4213     1782  00A1               	movwf	??___lbmod
  4214     1783  3007               	movlw	7
  4215     1784                     u2525:
  4216     1784  1003               	clrc
  4217     1785  0CA1               	rrf	??___lbmod,f
  4218     1786  3EFF               	addlw	-1
  4219     1787  1D03               	skipz
  4220     1788  2F84               	goto	u2525
  4221     1789  0825               	movf	___lbmod@rem,w
  4222     178A  00A2               	movwf	??___lbmod+1
  4223     178B  0722               	addwf	??___lbmod+1,w
  4224     178C  0421               	iorwf	??___lbmod,w
  4225     178D  00A5               	movwf	___lbmod@rem
  4226     178E  1003               	clrc
  4227     178F  0DA3               	rlf	___lbmod@dividend,f
  4228     1790  0820               	movf	___lbmod@divisor,w
  4229     1791  0225               	subwf	___lbmod@rem,w
  4230     1792  1C03               	skipc
  4231     1793  2F96               	goto	l712
  4232     1794  0820               	movf	___lbmod@divisor,w
  4233     1795  02A5               	subwf	___lbmod@rem,f
  4234     1796                     l712:
  4235     1796  3001               	movlw	1
  4236     1797  02A4               	subwf	___lbmod@counter,f
  4237     1798  1D03               	btfss	3,2
  4238     1799  2F81               	goto	l2097
  4239     179A  0825               	movf	___lbmod@rem,w
  4240     179B  0008               	return
  4241     179C                     __end_of___lbmod:
  4242                           
  4243                           	psect	text11
  4244     17BD                     __ptext11:	
  4245 ;; *************** function ___lbdiv *****************
  4246 ;; Defined at:
  4247 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lbdiv.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  dividend        1    wreg     unsigned char 
  4250 ;;  divisor         1    6[BANK0 ] unsigned char 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  dividend        1    7[BANK0 ] unsigned char 
  4253 ;;  quotient        1    9[BANK0 ] unsigned char 
  4254 ;;  counter         1    8[BANK0 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      unsigned char 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0, btemp+1
  4259 ;; Tracked objects:
  4260 ;;		On entry : 300/0
  4261 ;;		On exit  : 300/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4264 ;;      Params:         0       1       0       0       0
  4265 ;;      Locals:         0       3       0       0       0
  4266 ;;      Temps:          0       0       0       0       0
  4267 ;;      Totals:         0       4       0       0       0
  4268 ;;Total ram usage:        4 bytes
  4269 ;; Hardware stack levels used: 1
  4270 ;; Hardware stack levels required when called: 1
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_fround
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278     17BD                     ___lbdiv:	
  4279                           ;psect for function ___lbdiv
  4280                           
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  4284                           ;___lbdiv@dividend stored from wreg
  4285     17BD  00A7               	movwf	___lbdiv@dividend
  4286     17BE  01A9               	clrf	___lbdiv@quotient
  4287     17BF  0826               	movf	___lbdiv@divisor,w
  4288     17C0  1903               	btfsc	3,2
  4289     17C1  2FDC               	goto	l2089
  4290     17C2  01A8               	clrf	___lbdiv@counter
  4291     17C3  0AA8               	incf	___lbdiv@counter,f
  4292     17C4                     l2077:
  4293     17C4  1BA6               	btfsc	___lbdiv@divisor,7
  4294     17C5  2FCD               	goto	l2079
  4295     17C6  1003               	clrc
  4296     17C7  0DA6               	rlf	___lbdiv@divisor,f
  4297     17C8  3001               	movlw	1
  4298     17C9  00FF               	movwf	127
  4299     17CA  087F               	movf	127,w
  4300     17CB  07A8               	addwf	___lbdiv@counter,f
  4301     17CC  2FC4               	goto	l2077
  4302     17CD                     l2079:
  4303     17CD  1003               	clrc
  4304     17CE  0DA9               	rlf	___lbdiv@quotient,f
  4305     17CF  0826               	movf	___lbdiv@divisor,w
  4306     17D0  0227               	subwf	___lbdiv@dividend,w
  4307     17D1  1C03               	skipc
  4308     17D2  2FD7               	goto	L7
  4309     17D3  0826               	movf	___lbdiv@divisor,w
  4310     17D4  02A7               	subwf	___lbdiv@dividend,f
  4311     17D5  1429               	bsf	___lbdiv@quotient,0
  4312     17D6  1003               	clrc
  4313     17D7                     L7:
  4314     17D7  0CA6               	rrf	___lbdiv@divisor,f
  4315     17D8  3001               	movlw	1
  4316     17D9  02A8               	subwf	___lbdiv@counter,f
  4317     17DA  1D03               	btfss	3,2
  4318     17DB  2FCD               	goto	l2079
  4319     17DC                     l2089:
  4320     17DC  0829               	movf	___lbdiv@quotient,w
  4321     17DD  0008               	return
  4322     17DE                     __end_of___lbdiv:
  4323                           
  4324                           	psect	text12
  4325     0C0E                     __ptext12:	
  4326 ;; *************** function ___ftmul *****************
  4327 ;; Defined at:
  4328 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftmul.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  f1              3   17[BANK0 ] float 
  4331 ;;  f2              3   20[BANK0 ] float 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  f3_as_produc    3   27[BANK0 ] unsigned um
  4334 ;;  sign            1   31[BANK0 ] unsigned char 
  4335 ;;  cntr            1   30[BANK0 ] unsigned char 
  4336 ;;  exp             1   26[BANK0 ] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  3   17[BANK0 ] float 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 300/800
  4343 ;;		On exit  : 300/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4346 ;;      Params:         0       6       0       0       0
  4347 ;;      Locals:         0       6       0       0       0
  4348 ;;      Temps:          0       3       0       0       0
  4349 ;;      Totals:         0      15       0       0       0
  4350 ;;Total ram usage:       15 bytes
  4351 ;; Hardware stack levels used: 1
  4352 ;; Hardware stack levels required when called: 2
  4353 ;; This function calls:
  4354 ;;		___ftpack
  4355 ;; This function is called by:
  4356 ;;		_main
  4357 ;;		_fround
  4358 ;;		_scale
  4359 ;;		_sprintf
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363     0C0E                     ___ftmul:	
  4364                           ;psect for function ___ftmul
  4365                           
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4369     0C0E  0831               	movf	___ftmul@f1,w
  4370     0C0F  00B7               	movwf	??___ftmul
  4371     0C10  0832               	movf	___ftmul@f1+1,w
  4372     0C11  00B8               	movwf	??___ftmul+1
  4373     0C12  0833               	movf	___ftmul@f1+2,w
  4374     0C13  00B9               	movwf	??___ftmul+2
  4375     0C14  1003               	clrc
  4376     0C15  0D38               	rlf	??___ftmul+1,w
  4377     0C16  0D39               	rlf	??___ftmul+2,w
  4378     0C17  00BA               	movwf	___ftmul@exp
  4379     0C18  083A               	movf	___ftmul@exp,w
  4380     0C19  1D03               	btfss	3,2
  4381     0C1A  2C22               	goto	l2017
  4382     0C1B  3000               	movlw	0
  4383     0C1C  00B1               	movwf	?___ftmul
  4384     0C1D  3000               	movlw	0
  4385     0C1E  00B2               	movwf	?___ftmul+1
  4386     0C1F  3000               	movlw	0
  4387     0C20  00B3               	movwf	?___ftmul+2
  4388     0C21  0008               	return
  4389     0C22                     l2017:
  4390     0C22  0834               	movf	___ftmul@f2,w
  4391     0C23  00B7               	movwf	??___ftmul
  4392     0C24  0835               	movf	___ftmul@f2+1,w
  4393     0C25  00B8               	movwf	??___ftmul+1
  4394     0C26  0836               	movf	___ftmul@f2+2,w
  4395     0C27  00B9               	movwf	??___ftmul+2
  4396     0C28  1003               	clrc
  4397     0C29  0D38               	rlf	??___ftmul+1,w
  4398     0C2A  0D39               	rlf	??___ftmul+2,w
  4399     0C2B  00BF               	movwf	___ftmul@sign
  4400     0C2C  083F               	movf	___ftmul@sign,w
  4401     0C2D  1D03               	btfss	3,2
  4402     0C2E  2C36               	goto	l2023
  4403     0C2F  3000               	movlw	0
  4404     0C30  00B1               	movwf	?___ftmul
  4405     0C31  3000               	movlw	0
  4406     0C32  00B2               	movwf	?___ftmul+1
  4407     0C33  3000               	movlw	0
  4408     0C34  00B3               	movwf	?___ftmul+2
  4409     0C35  0008               	return
  4410     0C36                     l2023:
  4411     0C36  083F               	movf	___ftmul@sign,w
  4412     0C37  3E7B               	addlw	123
  4413     0C38  00FF               	movwf	127
  4414     0C39  087F               	movf	127,w
  4415     0C3A  07BA               	addwf	___ftmul@exp,f
  4416     0C3B  0833               	movf	___ftmul@f1+2,w
  4417     0C3C  00BF               	movwf	___ftmul@sign
  4418     0C3D  0836               	movf	___ftmul@f2+2,w
  4419     0C3E  00FF               	movwf	127
  4420     0C3F  087F               	movf	127,w
  4421     0C40  06BF               	xorwf	___ftmul@sign,f
  4422     0C41  3080               	movlw	128
  4423     0C42  00FF               	movwf	127
  4424     0C43  087F               	movf	127,w
  4425     0C44  05BF               	andwf	___ftmul@sign,f
  4426     0C45  17B2               	bsf	___ftmul@f1+1,7
  4427     0C46  17B5               	bsf	___ftmul@f2+1,7
  4428     0C47  30FF               	movlw	255
  4429     0C48  05B4               	andwf	___ftmul@f2,f
  4430     0C49  30FF               	movlw	255
  4431     0C4A  05B5               	andwf	___ftmul@f2+1,f
  4432     0C4B  3000               	movlw	0
  4433     0C4C  05B6               	andwf	___ftmul@f2+2,f
  4434     0C4D  3000               	movlw	0
  4435     0C4E  00BB               	movwf	___ftmul@f3_as_product
  4436     0C4F  3000               	movlw	0
  4437     0C50  00BC               	movwf	___ftmul@f3_as_product+1
  4438     0C51  3000               	movlw	0
  4439     0C52  00BD               	movwf	___ftmul@f3_as_product+2
  4440     0C53  3007               	movlw	7
  4441     0C54  00BE               	movwf	___ftmul@cntr
  4442     0C55                     l2041:
  4443     0C55  1C31               	btfss	___ftmul@f1,0
  4444     0C56  2C65               	goto	l2045
  4445     0C57  0834               	movf	___ftmul@f2,w
  4446     0C58  07BB               	addwf	___ftmul@f3_as_product,f
  4447     0C59  0835               	movf	___ftmul@f2+1,w
  4448     0C5A  1103               	clrz
  4449     0C5B  1803               	skipnc
  4450     0C5C  0A35               	incf	___ftmul@f2+1,w
  4451     0C5D  1D03               	btfss	3,2
  4452     0C5E  07BC               	addwf	___ftmul@f3_as_product+1,f
  4453     0C5F  0836               	movf	___ftmul@f2+2,w
  4454     0C60  1103               	clrz
  4455     0C61  1803               	skipnc
  4456     0C62  0A36               	incf	___ftmul@f2+2,w
  4457     0C63  1D03               	btfss	3,2
  4458     0C64  07BD               	addwf	___ftmul@f3_as_product+2,f
  4459     0C65                     l2045:
  4460     0C65  3001               	movlw	1
  4461     0C66                     u2405:
  4462     0C66  1003               	clrc
  4463     0C67  0CB3               	rrf	___ftmul@f1+2,f
  4464     0C68  0CB2               	rrf	___ftmul@f1+1,f
  4465     0C69  0CB1               	rrf	___ftmul@f1,f
  4466     0C6A  3EFF               	addlw	-1
  4467     0C6B  1D03               	skipz
  4468     0C6C  2C66               	goto	u2405
  4469     0C6D  3001               	movlw	1
  4470     0C6E                     u2415:
  4471     0C6E  1003               	clrc
  4472     0C6F  0DB4               	rlf	___ftmul@f2,f
  4473     0C70  0DB5               	rlf	___ftmul@f2+1,f
  4474     0C71  0DB6               	rlf	___ftmul@f2+2,f
  4475     0C72  3EFF               	addlw	-1
  4476     0C73  1D03               	skipz
  4477     0C74  2C6E               	goto	u2415
  4478     0C75  3001               	movlw	1
  4479     0C76  02BE               	subwf	___ftmul@cntr,f
  4480     0C77  1D03               	btfss	3,2
  4481     0C78  2C55               	goto	l2041
  4482     0C79  3009               	movlw	9
  4483     0C7A  00BE               	movwf	___ftmul@cntr
  4484     0C7B                     l2053:
  4485     0C7B  1C31               	btfss	___ftmul@f1,0
  4486     0C7C  2C8B               	goto	l2057
  4487     0C7D  0834               	movf	___ftmul@f2,w
  4488     0C7E  07BB               	addwf	___ftmul@f3_as_product,f
  4489     0C7F  0835               	movf	___ftmul@f2+1,w
  4490     0C80  1103               	clrz
  4491     0C81  1803               	skipnc
  4492     0C82  0A35               	incf	___ftmul@f2+1,w
  4493     0C83  1D03               	btfss	3,2
  4494     0C84  07BC               	addwf	___ftmul@f3_as_product+1,f
  4495     0C85  0836               	movf	___ftmul@f2+2,w
  4496     0C86  1103               	clrz
  4497     0C87  1803               	skipnc
  4498     0C88  0A36               	incf	___ftmul@f2+2,w
  4499     0C89  1D03               	btfss	3,2
  4500     0C8A  07BD               	addwf	___ftmul@f3_as_product+2,f
  4501     0C8B                     l2057:
  4502     0C8B  3001               	movlw	1
  4503     0C8C                     u2455:
  4504     0C8C  1003               	clrc
  4505     0C8D  0CB3               	rrf	___ftmul@f1+2,f
  4506     0C8E  0CB2               	rrf	___ftmul@f1+1,f
  4507     0C8F  0CB1               	rrf	___ftmul@f1,f
  4508     0C90  3EFF               	addlw	-1
  4509     0C91  1D03               	skipz
  4510     0C92  2C8C               	goto	u2455
  4511     0C93  3001               	movlw	1
  4512     0C94                     u2465:
  4513     0C94  1003               	clrc
  4514     0C95  0CBD               	rrf	___ftmul@f3_as_product+2,f
  4515     0C96  0CBC               	rrf	___ftmul@f3_as_product+1,f
  4516     0C97  0CBB               	rrf	___ftmul@f3_as_product,f
  4517     0C98  3EFF               	addlw	-1
  4518     0C99  1D03               	skipz
  4519     0C9A  2C94               	goto	u2465
  4520     0C9B  3001               	movlw	1
  4521     0C9C  02BE               	subwf	___ftmul@cntr,f
  4522     0C9D  1D03               	btfss	3,2
  4523     0C9E  2C7B               	goto	l2053
  4524     0C9F  083B               	movf	___ftmul@f3_as_product,w
  4525     0CA0  00A0               	movwf	___ftpack@arg
  4526     0CA1  083C               	movf	___ftmul@f3_as_product+1,w
  4527     0CA2  00A1               	movwf	___ftpack@arg+1
  4528     0CA3  083D               	movf	___ftmul@f3_as_product+2,w
  4529     0CA4  00A2               	movwf	___ftpack@arg+2
  4530     0CA5  083A               	movf	___ftmul@exp,w
  4531     0CA6  00A3               	movwf	___ftpack@exp
  4532     0CA7  083F               	movf	___ftmul@sign,w
  4533     0CA8  00A4               	movwf	___ftpack@sign
  4534     0CA9  120A  158A  228A   	fcall	___ftpack
  4535     0CAC  0820               	movf	?___ftpack,w
  4536     0CAD  00B1               	movwf	?___ftmul
  4537     0CAE  0821               	movf	?___ftpack+1,w
  4538     0CAF  00B2               	movwf	?___ftmul+1
  4539     0CB0  0822               	movf	?___ftpack+2,w
  4540     0CB1  00B3               	movwf	?___ftmul+2
  4541     0CB2  0008               	return
  4542     0CB3                     __end_of___ftmul:
  4543                           
  4544                           	psect	text13
  4545     16E7                     __ptext13:	
  4546 ;; *************** function ___bmul *****************
  4547 ;; Defined at:
  4548 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul8.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  multiplier      1    wreg     unsigned char 
  4551 ;;  multiplicand    1   14[BANK0 ] unsigned char 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  multiplier      1   16[BANK0 ] unsigned char 
  4554 ;;  product         1   15[BANK0 ] unsigned char 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      unsigned char 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0, btemp+1
  4559 ;; Tracked objects:
  4560 ;;		On entry : 300/0
  4561 ;;		On exit  : 300/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4564 ;;      Params:         0       1       0       0       0
  4565 ;;      Locals:         0       2       0       0       0
  4566 ;;      Temps:          0       0       0       0       0
  4567 ;;      Totals:         0       3       0       0       0
  4568 ;;Total ram usage:        3 bytes
  4569 ;; Hardware stack levels used: 1
  4570 ;; Hardware stack levels required when called: 1
  4571 ;; This function calls:
  4572 ;;		Nothing
  4573 ;; This function is called by:
  4574 ;;		_fround
  4575 ;;		_scale
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579     16E7                     ___bmul:	
  4580                           ;psect for function ___bmul
  4581                           
  4582                           
  4583                           ;incstack = 0
  4584                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4585                           ;___bmul@multiplier stored from wreg
  4586     16E7  00B0               	movwf	___bmul@multiplier
  4587     16E8  01AF               	clrf	___bmul@product
  4588     16E9                     l1841:
  4589     16E9  1C30               	btfss	___bmul@multiplier,0
  4590     16EA  2EEF               	goto	l1845
  4591     16EB  082E               	movf	___bmul@multiplicand,w
  4592     16EC  00FF               	movwf	127
  4593     16ED  087F               	movf	127,w
  4594     16EE  07AF               	addwf	___bmul@product,f
  4595     16EF                     l1845:
  4596     16EF  1003               	clrc
  4597     16F0  0DAE               	rlf	___bmul@multiplicand,f
  4598     16F1  1003               	clrc
  4599     16F2  0CB0               	rrf	___bmul@multiplier,f
  4600     16F3  0830               	movf	___bmul@multiplier,w
  4601     16F4  1D03               	btfss	3,2
  4602     16F5  2EE9               	goto	l1841
  4603     16F6  082F               	movf	___bmul@product,w
  4604     16F7  0008               	return
  4605     16F8                     __end_of___bmul:
  4606                           
  4607                           	psect	text14
  4608     0B6D                     __ptext14:	
  4609 ;; *************** function __tdiv_to_l_ *****************
  4610 ;; Defined at:
  4611 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftdivl.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  f1              3    0[BANK0 ] float 
  4614 ;;  f2              3    3[BANK0 ] float 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  quot            4    9[BANK0 ] unsigned long 
  4617 ;;  exp1            1   14[BANK0 ] unsigned char 
  4618 ;;  cntr            1   13[BANK0 ] unsigned char 
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  4    0[BANK0 ] unsigned long 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2, status,0, btemp+1
  4623 ;; Tracked objects:
  4624 ;;		On entry : 300/0
  4625 ;;		On exit  : 300/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4628 ;;      Params:         0       6       0       0       0
  4629 ;;      Locals:         0       6       0       0       0
  4630 ;;      Temps:          0       3       0       0       0
  4631 ;;      Totals:         0      15       0       0       0
  4632 ;;Total ram usage:       15 bytes
  4633 ;; Hardware stack levels used: 1
  4634 ;; Hardware stack levels required when called: 1
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_sprintf
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642     0B6D                     __tdiv_to_l_:	
  4643                           ;psect for function __tdiv_to_l_
  4644                           
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  4648     0B6D  0820               	movf	__tdiv_to_l_@f1,w
  4649     0B6E  00A6               	movwf	??__tdiv_to_l_
  4650     0B6F  0821               	movf	__tdiv_to_l_@f1+1,w
  4651     0B70  00A7               	movwf	??__tdiv_to_l_+1
  4652     0B71  0822               	movf	__tdiv_to_l_@f1+2,w
  4653     0B72  00A8               	movwf	??__tdiv_to_l_+2
  4654     0B73  1003               	clrc
  4655     0B74  0D27               	rlf	??__tdiv_to_l_+1,w
  4656     0B75  0D28               	rlf	??__tdiv_to_l_+2,w
  4657     0B76  00AE               	movwf	__tdiv_to_l_@exp1
  4658     0B77  082E               	movf	__tdiv_to_l_@exp1,w
  4659     0B78  1D03               	btfss	3,2
  4660     0B79  2B83               	goto	l2185
  4661     0B7A                     l2181:
  4662     0B7A  3000               	movlw	0
  4663     0B7B  00A3               	movwf	?__tdiv_to_l_+3
  4664     0B7C  3000               	movlw	0
  4665     0B7D  00A2               	movwf	?__tdiv_to_l_+2
  4666     0B7E  3000               	movlw	0
  4667     0B7F  00A1               	movwf	?__tdiv_to_l_+1
  4668     0B80  3000               	movlw	0
  4669     0B81  00A0               	movwf	?__tdiv_to_l_
  4670     0B82  0008               	return
  4671     0B83                     l2185:
  4672     0B83  0823               	movf	__tdiv_to_l_@f2,w
  4673     0B84  00A6               	movwf	??__tdiv_to_l_
  4674     0B85  0824               	movf	__tdiv_to_l_@f2+1,w
  4675     0B86  00A7               	movwf	??__tdiv_to_l_+1
  4676     0B87  0825               	movf	__tdiv_to_l_@f2+2,w
  4677     0B88  00A8               	movwf	??__tdiv_to_l_+2
  4678     0B89  1003               	clrc
  4679     0B8A  0D27               	rlf	??__tdiv_to_l_+1,w
  4680     0B8B  0D28               	rlf	??__tdiv_to_l_+2,w
  4681     0B8C  00AD               	movwf	__tdiv_to_l_@cntr
  4682     0B8D  082D               	movf	__tdiv_to_l_@cntr,w
  4683     0B8E  1903               	btfsc	3,2
  4684     0B8F  2B7A               	goto	l2181
  4685     0B90  17A1               	bsf	__tdiv_to_l_@f1+1,7
  4686     0B91  30FF               	movlw	255
  4687     0B92  05A0               	andwf	__tdiv_to_l_@f1,f
  4688     0B93  30FF               	movlw	255
  4689     0B94  05A1               	andwf	__tdiv_to_l_@f1+1,f
  4690     0B95  3000               	movlw	0
  4691     0B96  05A2               	andwf	__tdiv_to_l_@f1+2,f
  4692     0B97  17A4               	bsf	__tdiv_to_l_@f2+1,7
  4693     0B98  30FF               	movlw	255
  4694     0B99  05A3               	andwf	__tdiv_to_l_@f2,f
  4695     0B9A  30FF               	movlw	255
  4696     0B9B  05A4               	andwf	__tdiv_to_l_@f2+1,f
  4697     0B9C  3000               	movlw	0
  4698     0B9D  05A5               	andwf	__tdiv_to_l_@f2+2,f
  4699     0B9E  3000               	movlw	0
  4700     0B9F  00AC               	movwf	__tdiv_to_l_@quot+3
  4701     0BA0  3000               	movlw	0
  4702     0BA1  00AB               	movwf	__tdiv_to_l_@quot+2
  4703     0BA2  3000               	movlw	0
  4704     0BA3  00AA               	movwf	__tdiv_to_l_@quot+1
  4705     0BA4  3000               	movlw	0
  4706     0BA5  00A9               	movwf	__tdiv_to_l_@quot
  4707     0BA6  307F               	movlw	127
  4708     0BA7  02AE               	subwf	__tdiv_to_l_@exp1,f
  4709     0BA8  3098               	movlw	152
  4710     0BA9  072D               	addwf	__tdiv_to_l_@cntr,w
  4711     0BAA  00A6               	movwf	??__tdiv_to_l_
  4712     0BAB  0826               	movf	??__tdiv_to_l_,w
  4713     0BAC  02AE               	subwf	__tdiv_to_l_@exp1,f
  4714     0BAD  3018               	movlw	24
  4715     0BAE  00AD               	movwf	__tdiv_to_l_@cntr
  4716     0BAF                     l2199:
  4717     0BAF  3001               	movlw	1
  4718     0BB0  00A6               	movwf	??__tdiv_to_l_
  4719     0BB1                     u2655:
  4720     0BB1  1003               	clrc
  4721     0BB2  0DA9               	rlf	__tdiv_to_l_@quot,f
  4722     0BB3  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4723     0BB4  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4724     0BB5  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4725     0BB6  0BA6               	decfsz	??__tdiv_to_l_,f
  4726     0BB7  2BB1               	goto	u2655
  4727     0BB8  0825               	movf	__tdiv_to_l_@f2+2,w
  4728     0BB9  0222               	subwf	__tdiv_to_l_@f1+2,w
  4729     0BBA  1D03               	skipz
  4730     0BBB  2BC2               	goto	u2665
  4731     0BBC  0824               	movf	__tdiv_to_l_@f2+1,w
  4732     0BBD  0221               	subwf	__tdiv_to_l_@f1+1,w
  4733     0BBE  1D03               	skipz
  4734     0BBF  2BC2               	goto	u2665
  4735     0BC0  0823               	movf	__tdiv_to_l_@f2,w
  4736     0BC1  0220               	subwf	__tdiv_to_l_@f1,w
  4737     0BC2                     u2665:
  4738     0BC2  1C03               	skipc
  4739     0BC3  2BCF               	goto	l2207
  4740     0BC4  0823               	movf	__tdiv_to_l_@f2,w
  4741     0BC5  02A0               	subwf	__tdiv_to_l_@f1,f
  4742     0BC6  0824               	movf	__tdiv_to_l_@f2+1,w
  4743     0BC7  1C03               	skipc
  4744     0BC8  0F24               	incfsz	__tdiv_to_l_@f2+1,w
  4745     0BC9  02A1               	subwf	__tdiv_to_l_@f1+1,f
  4746     0BCA  0825               	movf	__tdiv_to_l_@f2+2,w
  4747     0BCB  1C03               	skipc
  4748     0BCC  0A25               	incf	__tdiv_to_l_@f2+2,w
  4749     0BCD  02A2               	subwf	__tdiv_to_l_@f1+2,f
  4750     0BCE  1429               	bsf	__tdiv_to_l_@quot,0
  4751     0BCF                     l2207:
  4752     0BCF  3001               	movlw	1
  4753     0BD0                     u2675:
  4754     0BD0  1003               	clrc
  4755     0BD1  0DA0               	rlf	__tdiv_to_l_@f1,f
  4756     0BD2  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  4757     0BD3  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  4758     0BD4  3EFF               	addlw	-1
  4759     0BD5  1D03               	skipz
  4760     0BD6  2BD0               	goto	u2675
  4761     0BD7  3001               	movlw	1
  4762     0BD8  02AD               	subwf	__tdiv_to_l_@cntr,f
  4763     0BD9  1D03               	btfss	3,2
  4764     0BDA  2BAF               	goto	l2199
  4765     0BDB  1FAE               	btfss	__tdiv_to_l_@exp1,7
  4766     0BDC  2BF2               	goto	l2221
  4767     0BDD  082E               	movf	__tdiv_to_l_@exp1,w
  4768     0BDE  3A80               	xorlw	128
  4769     0BDF  3E97               	addlw	151
  4770     0BE0  1C03               	btfss	3,0
  4771     0BE1  2B7A               	goto	l2181
  4772     0BE2                     l2217:
  4773     0BE2  3001               	movlw	1
  4774     0BE3                     u2715:
  4775     0BE3  1003               	clrc
  4776     0BE4  0CAC               	rrf	__tdiv_to_l_@quot+3,f
  4777     0BE5  0CAB               	rrf	__tdiv_to_l_@quot+2,f
  4778     0BE6  0CAA               	rrf	__tdiv_to_l_@quot+1,f
  4779     0BE7  0CA9               	rrf	__tdiv_to_l_@quot,f
  4780     0BE8  3EFF               	addlw	-1
  4781     0BE9  1D03               	skipz
  4782     0BEA  2BE3               	goto	u2715
  4783     0BEB  3001               	movlw	1
  4784     0BEC  00FF               	movwf	127
  4785     0BED  087F               	movf	127,w
  4786     0BEE  07AE               	addwf	__tdiv_to_l_@exp1,f
  4787     0BEF  1903               	btfsc	3,2
  4788     0BF0  2C05               	goto	l2229
  4789     0BF1  2BE2               	goto	l2217
  4790     0BF2                     l2221:
  4791     0BF2  3018               	movlw	24
  4792     0BF3  022E               	subwf	__tdiv_to_l_@exp1,w
  4793     0BF4  1803               	btfsc	3,0
  4794     0BF5  2B7A               	goto	l2181
  4795     0BF6                     l654:
  4796     0BF6  082E               	movf	__tdiv_to_l_@exp1,w
  4797     0BF7  1903               	btfsc	3,2
  4798     0BF8  2C05               	goto	l2229
  4799     0BF9  3001               	movlw	1
  4800     0BFA  00A6               	movwf	??__tdiv_to_l_
  4801     0BFB                     u2745:
  4802     0BFB  1003               	clrc
  4803     0BFC  0DA9               	rlf	__tdiv_to_l_@quot,f
  4804     0BFD  0DAA               	rlf	__tdiv_to_l_@quot+1,f
  4805     0BFE  0DAB               	rlf	__tdiv_to_l_@quot+2,f
  4806     0BFF  0DAC               	rlf	__tdiv_to_l_@quot+3,f
  4807     0C00  0BA6               	decfsz	??__tdiv_to_l_,f
  4808     0C01  2BFB               	goto	u2745
  4809     0C02  3001               	movlw	1
  4810     0C03  02AE               	subwf	__tdiv_to_l_@exp1,f
  4811     0C04  2BF6               	goto	l654
  4812     0C05                     l2229:
  4813     0C05  082C               	movf	__tdiv_to_l_@quot+3,w
  4814     0C06  00A3               	movwf	?__tdiv_to_l_+3
  4815     0C07  082B               	movf	__tdiv_to_l_@quot+2,w
  4816     0C08  00A2               	movwf	?__tdiv_to_l_+2
  4817     0C09  082A               	movf	__tdiv_to_l_@quot+1,w
  4818     0C0A  00A1               	movwf	?__tdiv_to_l_+1
  4819     0C0B  0829               	movf	__tdiv_to_l_@quot,w
  4820     0C0C  00A0               	movwf	?__tdiv_to_l_
  4821     0C0D  0008               	return
  4822     0C0E                     __end_of__tdiv_to_l_:
  4823                           
  4824                           	psect	text15
  4825     0DAE                     __ptext15:	
  4826 ;; *************** function __div_to_l_ *****************
  4827 ;; Defined at:
  4828 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fldivl.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  f1              3    0[BANK0 ] unsigned long 
  4831 ;;  f2              3    3[BANK0 ] unsigned long 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  quot            4   14[BANK0 ] unsigned long 
  4834 ;;  exp1            1   19[BANK0 ] unsigned char 
  4835 ;;  cntr            1   18[BANK0 ] unsigned char 
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  4    0[BANK0 ] unsigned long 
  4838 ;; Registers used:
  4839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 300/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4845 ;;      Params:         0       6       0       0       0
  4846 ;;      Locals:         0       6       0       0       0
  4847 ;;      Temps:          0       8       0       0       0
  4848 ;;      Totals:         0      20       0       0       0
  4849 ;;Total ram usage:       20 bytes
  4850 ;; Hardware stack levels used: 1
  4851 ;; Hardware stack levels required when called: 1
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_sprintf
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859     0DAE                     __div_to_l_:	
  4860                           ;psect for function __div_to_l_
  4861                           
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  4865     0DAE  3020               	movlw	low (__div_to_l_@f1| 0)
  4866     0DAF  0084               	movwf	4
  4867     0DB0  1383               	bcf	3,7	;select IRP bank0
  4868     0DB1  0800               	movf	0,w
  4869     0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4870     0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4871     0DB4  00A6               	movwf	??__div_to_l_
  4872     0DB5  0A84               	incf	4,f
  4873     0DB6  0800               	movf	0,w
  4874     0DB7  00A7               	movwf	??__div_to_l_+1
  4875     0DB8  0A84               	incf	4,f
  4876     0DB9  0800               	movf	0,w
  4877     0DBA  00A8               	movwf	??__div_to_l_+2
  4878     0DBB  0A84               	incf	4,f
  4879     0DBC  0800               	movf	0,w
  4880     0DBD  00A9               	movwf	??__div_to_l_+3
  4881     0DBE  1003               	clrc
  4882     0DBF  0D28               	rlf	??__div_to_l_+2,w
  4883     0DC0  0D29               	rlf	??__div_to_l_+3,w
  4884     0DC1  00B3               	movwf	__div_to_l_@exp1
  4885     0DC2  0833               	movf	__div_to_l_@exp1,w
  4886     0DC3  1D03               	btfss	3,2
  4887     0DC4  2DCE               	goto	l2239
  4888     0DC5                     l2235:
  4889     0DC5  3000               	movlw	0
  4890     0DC6  00A3               	movwf	?__div_to_l_+3
  4891     0DC7  3000               	movlw	0
  4892     0DC8  00A2               	movwf	?__div_to_l_+2
  4893     0DC9  3000               	movlw	0
  4894     0DCA  00A1               	movwf	?__div_to_l_+1
  4895     0DCB  3000               	movlw	0
  4896     0DCC  00A0               	movwf	?__div_to_l_
  4897     0DCD  0008               	return
  4898     0DCE                     l2239:
  4899     0DCE  3023               	movlw	low (__div_to_l_@f2| 0)
  4900     0DCF  0084               	movwf	4
  4901     0DD0  0800               	movf	0,w
  4902     0DD1  00A6               	movwf	??__div_to_l_
  4903     0DD2  0A84               	incf	4,f
  4904     0DD3  0800               	movf	0,w
  4905     0DD4  00A7               	movwf	??__div_to_l_+1
  4906     0DD5  0A84               	incf	4,f
  4907     0DD6  0800               	movf	0,w
  4908     0DD7  00A8               	movwf	??__div_to_l_+2
  4909     0DD8  0A84               	incf	4,f
  4910     0DD9  0800               	movf	0,w
  4911     0DDA  00A9               	movwf	??__div_to_l_+3
  4912     0DDB  1003               	clrc
  4913     0DDC  0D28               	rlf	??__div_to_l_+2,w
  4914     0DDD  0D29               	rlf	??__div_to_l_+3,w
  4915     0DDE  00B2               	movwf	__div_to_l_@cntr
  4916     0DDF  0832               	movf	__div_to_l_@cntr,w
  4917     0DE0  1903               	btfsc	3,2
  4918     0DE1  2DC5               	goto	l2235
  4919     0DE2  3020               	movlw	low (__div_to_l_@f1| 0)
  4920     0DE3  0084               	movwf	4
  4921     0DE4  3000               	movlw	0
  4922     0DE5  0480               	iorwf	0,f
  4923     0DE6  0A84               	incf	4,f
  4924     0DE7  3000               	movlw	0
  4925     0DE8  0480               	iorwf	0,f
  4926     0DE9  0A84               	incf	4,f
  4927     0DEA  3080               	movlw	128
  4928     0DEB  0480               	iorwf	0,f
  4929     0DEC  0A84               	incf	4,f
  4930     0DED  3000               	movlw	0
  4931     0DEE  0480               	iorwf	0,f
  4932     0DEF  3020               	movlw	low (__div_to_l_@f1| 0)
  4933     0DF0  0084               	movwf	4
  4934     0DF1  30FF               	movlw	255
  4935     0DF2  0580               	andwf	0,f
  4936     0DF3  0A84               	incf	4,f
  4937     0DF4  30FF               	movlw	255
  4938     0DF5  0580               	andwf	0,f
  4939     0DF6  0A84               	incf	4,f
  4940     0DF7  30FF               	movlw	255
  4941     0DF8  0580               	andwf	0,f
  4942     0DF9  0A84               	incf	4,f
  4943     0DFA  3000               	movlw	0
  4944     0DFB  0580               	andwf	0,f
  4945     0DFC  3023               	movlw	low (__div_to_l_@f2| 0)
  4946     0DFD  0084               	movwf	4
  4947     0DFE  3000               	movlw	0
  4948     0DFF  0480               	iorwf	0,f
  4949     0E00  0A84               	incf	4,f
  4950     0E01  3000               	movlw	0
  4951     0E02  0480               	iorwf	0,f
  4952     0E03  0A84               	incf	4,f
  4953     0E04  3080               	movlw	128
  4954     0E05  0480               	iorwf	0,f
  4955     0E06  0A84               	incf	4,f
  4956     0E07  3000               	movlw	0
  4957     0E08  0480               	iorwf	0,f
  4958     0E09  3023               	movlw	low (__div_to_l_@f2| 0)
  4959     0E0A  0084               	movwf	4
  4960     0E0B  30FF               	movlw	255
  4961     0E0C  0580               	andwf	0,f
  4962     0E0D  0A84               	incf	4,f
  4963     0E0E  30FF               	movlw	255
  4964     0E0F  0580               	andwf	0,f
  4965     0E10  0A84               	incf	4,f
  4966     0E11  30FF               	movlw	255
  4967     0E12  0580               	andwf	0,f
  4968     0E13  0A84               	incf	4,f
  4969     0E14  3000               	movlw	0
  4970     0E15  0580               	andwf	0,f
  4971     0E16  3000               	movlw	0
  4972     0E17  00B1               	movwf	__div_to_l_@quot+3
  4973     0E18  3000               	movlw	0
  4974     0E19  00B0               	movwf	__div_to_l_@quot+2
  4975     0E1A  3000               	movlw	0
  4976     0E1B  00AF               	movwf	__div_to_l_@quot+1
  4977     0E1C  3000               	movlw	0
  4978     0E1D  00AE               	movwf	__div_to_l_@quot
  4979     0E1E  307F               	movlw	127
  4980     0E1F  02B3               	subwf	__div_to_l_@exp1,f
  4981     0E20  30A0               	movlw	160
  4982     0E21  0732               	addwf	__div_to_l_@cntr,w
  4983     0E22  00A6               	movwf	??__div_to_l_
  4984     0E23  0826               	movf	??__div_to_l_,w
  4985     0E24  02B3               	subwf	__div_to_l_@exp1,f
  4986     0E25  3020               	movlw	32
  4987     0E26  00B2               	movwf	__div_to_l_@cntr
  4988     0E27                     l2255:
  4989     0E27  3001               	movlw	1
  4990     0E28  00A6               	movwf	??__div_to_l_
  4991     0E29                     u2785:
  4992     0E29  1003               	clrc
  4993     0E2A  0DAE               	rlf	__div_to_l_@quot,f
  4994     0E2B  0DAF               	rlf	__div_to_l_@quot+1,f
  4995     0E2C  0DB0               	rlf	__div_to_l_@quot+2,f
  4996     0E2D  0DB1               	rlf	__div_to_l_@quot+3,f
  4997     0E2E  0BA6               	decfsz	??__div_to_l_,f
  4998     0E2F  2E29               	goto	u2785
  4999     0E30  3023               	movlw	low (__div_to_l_@f2| 0)
  5000     0E31  0084               	movwf	4
  5001     0E32  0800               	movf	0,w
  5002     0E33  00A6               	movwf	??__div_to_l_
  5003     0E34  0A84               	incf	4,f
  5004     0E35  0800               	movf	0,w
  5005     0E36  00A7               	movwf	??__div_to_l_+1
  5006     0E37  0A84               	incf	4,f
  5007     0E38  0800               	movf	0,w
  5008     0E39  00A8               	movwf	??__div_to_l_+2
  5009     0E3A  0A84               	incf	4,f
  5010     0E3B  0800               	movf	0,w
  5011     0E3C  00A9               	movwf	??__div_to_l_+3
  5012     0E3D  3020               	movlw	low (__div_to_l_@f1| 0)
  5013     0E3E  0084               	movwf	4
  5014     0E3F  0800               	movf	0,w
  5015     0E40  00AA               	movwf	??__div_to_l_+4
  5016     0E41  0A84               	incf	4,f
  5017     0E42  0800               	movf	0,w
  5018     0E43  00AB               	movwf	??__div_to_l_+5
  5019     0E44  0A84               	incf	4,f
  5020     0E45  0800               	movf	0,w
  5021     0E46  00AC               	movwf	??__div_to_l_+6
  5022     0E47  0A84               	incf	4,f
  5023     0E48  0800               	movf	0,w
  5024     0E49  00AD               	movwf	??__div_to_l_+7
  5025     0E4A  0829               	movf	??__div_to_l_+3,w
  5026     0E4B  022D               	subwf	??__div_to_l_+7,w
  5027     0E4C  1D03               	skipz
  5028     0E4D  2E58               	goto	u2795
  5029     0E4E  0828               	movf	??__div_to_l_+2,w
  5030     0E4F  022C               	subwf	??__div_to_l_+6,w
  5031     0E50  1D03               	skipz
  5032     0E51  2E58               	goto	u2795
  5033     0E52  0827               	movf	??__div_to_l_+1,w
  5034     0E53  022B               	subwf	??__div_to_l_+5,w
  5035     0E54  1D03               	skipz
  5036     0E55  2E58               	goto	u2795
  5037     0E56  0826               	movf	??__div_to_l_,w
  5038     0E57  022A               	subwf	??__div_to_l_+4,w
  5039     0E58                     u2795:
  5040     0E58  1C03               	skipc
  5041     0E59  2E7D               	goto	l567
  5042     0E5A  3023               	movlw	low (__div_to_l_@f2| 0)
  5043     0E5B  0084               	movwf	4
  5044     0E5C  0800               	movf	0,w
  5045     0E5D  00A6               	movwf	??__div_to_l_
  5046     0E5E  0A84               	incf	4,f
  5047     0E5F  0800               	movf	0,w
  5048     0E60  00A7               	movwf	??__div_to_l_+1
  5049     0E61  0A84               	incf	4,f
  5050     0E62  0800               	movf	0,w
  5051     0E63  00A8               	movwf	??__div_to_l_+2
  5052     0E64  0A84               	incf	4,f
  5053     0E65  0800               	movf	0,w
  5054     0E66  00A9               	movwf	??__div_to_l_+3
  5055     0E67  3020               	movlw	low (__div_to_l_@f1| 0)
  5056     0E68  0084               	movwf	4
  5057     0E69  0826               	movf	??__div_to_l_,w
  5058     0E6A  0280               	subwf	0,f
  5059     0E6B  0A84               	incf	4,f
  5060     0E6C  0827               	movf	??__div_to_l_+1,w
  5061     0E6D  1C03               	skipc
  5062     0E6E  0F27               	incfsz	??__div_to_l_+1,w
  5063     0E6F  0280               	subwf	0,f
  5064     0E70  0A84               	incf	4,f
  5065     0E71  0828               	movf	??__div_to_l_+2,w
  5066     0E72  1C03               	skipc
  5067     0E73  0F28               	incfsz	??__div_to_l_+2,w
  5068     0E74  0280               	subwf	0,f
  5069     0E75  0A84               	incf	4,f
  5070     0E76  0829               	movf	??__div_to_l_+3,w
  5071     0E77  1C03               	skipc
  5072     0E78  0A29               	incf	??__div_to_l_+3,w
  5073     0E79  0280               	subwf	0,f
  5074     0E7A  3003               	movlw	3
  5075     0E7B  0284               	subwf	4,f
  5076     0E7C  142E               	bsf	__div_to_l_@quot,0
  5077     0E7D                     l567:
  5078     0E7D  3020               	movlw	low (__div_to_l_@f1| 0)
  5079     0E7E  0084               	movwf	4
  5080     0E7F  1003               	clrc
  5081     0E80  0D80               	rlf	0,f
  5082     0E81  0A84               	incf	4,f
  5083     0E82  0D80               	rlf	0,f
  5084     0E83  0A84               	incf	4,f
  5085     0E84  0D80               	rlf	0,f
  5086     0E85  0A84               	incf	4,f
  5087     0E86  0D80               	rlf	0,f
  5088     0E87  0384               	decf	4,f
  5089     0E88  0384               	decf	4,f
  5090     0E89  0384               	decf	4,f
  5091     0E8A  3001               	movlw	1
  5092     0E8B  02B2               	subwf	__div_to_l_@cntr,f
  5093     0E8C  1D03               	btfss	3,2
  5094     0E8D  2E27               	goto	l2255
  5095     0E8E  1FB3               	btfss	__div_to_l_@exp1,7
  5096     0E8F  2EA5               	goto	l2275
  5097     0E90  0833               	movf	__div_to_l_@exp1,w
  5098     0E91  3A80               	xorlw	128
  5099     0E92  3E9F               	addlw	159
  5100     0E93  1C03               	btfss	3,0
  5101     0E94  2DC5               	goto	l2235
  5102     0E95                     l2271:
  5103     0E95  3001               	movlw	1
  5104     0E96                     u2835:
  5105     0E96  1003               	clrc
  5106     0E97  0CB1               	rrf	__div_to_l_@quot+3,f
  5107     0E98  0CB0               	rrf	__div_to_l_@quot+2,f
  5108     0E99  0CAF               	rrf	__div_to_l_@quot+1,f
  5109     0E9A  0CAE               	rrf	__div_to_l_@quot,f
  5110     0E9B  3EFF               	addlw	-1
  5111     0E9C  1D03               	skipz
  5112     0E9D  2E96               	goto	u2835
  5113     0E9E  3001               	movlw	1
  5114     0E9F  00FF               	movwf	127
  5115     0EA0  087F               	movf	127,w
  5116     0EA1  07B3               	addwf	__div_to_l_@exp1,f
  5117     0EA2  1903               	btfsc	3,2
  5118     0EA3  2EB8               	goto	l2283
  5119     0EA4  2E95               	goto	l2271
  5120     0EA5                     l2275:
  5121     0EA5  3020               	movlw	32
  5122     0EA6  0233               	subwf	__div_to_l_@exp1,w
  5123     0EA7  1803               	btfsc	3,0
  5124     0EA8  2DC5               	goto	l2235
  5125     0EA9                     l575:
  5126     0EA9  0833               	movf	__div_to_l_@exp1,w
  5127     0EAA  1903               	btfsc	3,2
  5128     0EAB  2EB8               	goto	l2283
  5129     0EAC  3001               	movlw	1
  5130     0EAD  00A6               	movwf	??__div_to_l_
  5131     0EAE                     u2865:
  5132     0EAE  1003               	clrc
  5133     0EAF  0DAE               	rlf	__div_to_l_@quot,f
  5134     0EB0  0DAF               	rlf	__div_to_l_@quot+1,f
  5135     0EB1  0DB0               	rlf	__div_to_l_@quot+2,f
  5136     0EB2  0DB1               	rlf	__div_to_l_@quot+3,f
  5137     0EB3  0BA6               	decfsz	??__div_to_l_,f
  5138     0EB4  2EAE               	goto	u2865
  5139     0EB5  3001               	movlw	1
  5140     0EB6  02B3               	subwf	__div_to_l_@exp1,f
  5141     0EB7  2EA9               	goto	l575
  5142     0EB8                     l2283:
  5143     0EB8  0831               	movf	__div_to_l_@quot+3,w
  5144     0EB9  00A3               	movwf	?__div_to_l_+3
  5145     0EBA  0830               	movf	__div_to_l_@quot+2,w
  5146     0EBB  00A2               	movwf	?__div_to_l_+2
  5147     0EBC  082F               	movf	__div_to_l_@quot+1,w
  5148     0EBD  00A1               	movwf	?__div_to_l_+1
  5149     0EBE  082E               	movf	__div_to_l_@quot,w
  5150     0EBF  00A0               	movwf	?__div_to_l_
  5151     0EC0  0008               	return
  5152     0EC1                     __end_of__div_to_l_:
  5153                           
  5154                           	psect	text16
  5155     179C                     __ptext16:	
  5156 ;; *************** function ___wmul *****************
  5157 ;; Defined at:
  5158 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5161 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  product         2    4[BANK0 ] unsigned int 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  2    0[BANK0 ] unsigned int 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0
  5168 ;; Tracked objects:
  5169 ;;		On entry : B00/0
  5170 ;;		On exit  : B00/0
  5171 ;;		Unchanged: 800/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5173 ;;      Params:         0       4       0       0       0
  5174 ;;      Locals:         0       2       0       0       0
  5175 ;;      Temps:          0       0       0       0       0
  5176 ;;      Totals:         0       6       0       0       0
  5177 ;;Total ram usage:        6 bytes
  5178 ;; Hardware stack levels used: 1
  5179 ;; Hardware stack levels required when called: 1
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_sprintf
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187     179C                     ___wmul:	
  5188                           ;psect for function ___wmul
  5189                           
  5190                           
  5191                           ;incstack = 0
  5192                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5193     179C  01A4               	clrf	___wmul@product
  5194     179D  01A5               	clrf	___wmul@product+1
  5195     179E                     l2289:
  5196     179E  1C20               	btfss	___wmul@multiplier,0
  5197     179F  2FA6               	goto	l358
  5198     17A0  0822               	movf	___wmul@multiplicand,w
  5199     17A1  07A4               	addwf	___wmul@product,f
  5200     17A2  1803               	skipnc
  5201     17A3  0AA5               	incf	___wmul@product+1,f
  5202     17A4  0823               	movf	___wmul@multiplicand+1,w
  5203     17A5  07A5               	addwf	___wmul@product+1,f
  5204     17A6                     l358:
  5205     17A6  3001               	movlw	1
  5206     17A7                     u2895:
  5207     17A7  1003               	clrc
  5208     17A8  0DA2               	rlf	___wmul@multiplicand,f
  5209     17A9  0DA3               	rlf	___wmul@multiplicand+1,f
  5210     17AA  3EFF               	addlw	-1
  5211     17AB  1D03               	skipz
  5212     17AC  2FA7               	goto	u2895
  5213     17AD  3001               	movlw	1
  5214     17AE                     u2905:
  5215     17AE  1003               	clrc
  5216     17AF  0CA1               	rrf	___wmul@multiplier+1,f
  5217     17B0  0CA0               	rrf	___wmul@multiplier,f
  5218     17B1  3EFF               	addlw	-1
  5219     17B2  1D03               	skipz
  5220     17B3  2FAE               	goto	u2905
  5221     17B4  0820               	movf	___wmul@multiplier,w
  5222     17B5  0421               	iorwf	___wmul@multiplier+1,w
  5223     17B6  1D03               	btfss	3,2
  5224     17B7  2F9E               	goto	l2289
  5225     17B8  0825               	movf	___wmul@product+1,w
  5226     17B9  00A1               	movwf	?___wmul+1
  5227     17BA  0824               	movf	___wmul@product,w
  5228     17BB  00A0               	movwf	?___wmul
  5229     17BC  0008               	return
  5230     17BD                     __end_of___wmul:
  5231                           
  5232                           	psect	text17
  5233     08A8                     __ptext17:	
  5234 ;; *************** function ___lltoft *****************
  5235 ;; Defined at:
  5236 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lltoft.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  c               4    8[BANK0 ] unsigned long 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  exp             1   12[BANK0 ] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;                  3    8[BANK0 ] float 
  5243 ;; Registers used:
  5244 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 300/0
  5247 ;;		On exit  : 300/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5250 ;;      Params:         0       4       0       0       0
  5251 ;;      Locals:         0       1       0       0       0
  5252 ;;      Temps:          0       0       0       0       0
  5253 ;;      Totals:         0       5       0       0       0
  5254 ;;Total ram usage:        5 bytes
  5255 ;; Hardware stack levels used: 1
  5256 ;; Hardware stack levels required when called: 2
  5257 ;; This function calls:
  5258 ;;		___ftpack
  5259 ;; This function is called by:
  5260 ;;		_sprintf
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264     08A8                     ___lltoft:	
  5265                           ;psect for function ___lltoft
  5266                           
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5270     08A8  308E               	movlw	142
  5271     08A9  00AC               	movwf	___lltoft@exp
  5272     08AA                     l2435:
  5273     08AA  30FF               	movlw	255
  5274     08AB  052B               	andwf	___lltoft@c+3,w
  5275     08AC  1903               	btfsc	3,2
  5276     08AD  28BC               	goto	l2437
  5277     08AE  3001               	movlw	1
  5278     08AF                     u3205:
  5279     08AF  1003               	clrc
  5280     08B0  0CAB               	rrf	___lltoft@c+3,f
  5281     08B1  0CAA               	rrf	___lltoft@c+2,f
  5282     08B2  0CA9               	rrf	___lltoft@c+1,f
  5283     08B3  0CA8               	rrf	___lltoft@c,f
  5284     08B4  3EFF               	addlw	-1
  5285     08B5  1D03               	skipz
  5286     08B6  28AF               	goto	u3205
  5287     08B7  3001               	movlw	1
  5288     08B8  00FF               	movwf	127
  5289     08B9  087F               	movf	127,w
  5290     08BA  07AC               	addwf	___lltoft@exp,f
  5291     08BB  28AA               	goto	l2435
  5292     08BC                     l2437:
  5293     08BC  0828               	movf	___lltoft@c,w
  5294     08BD  00A0               	movwf	___ftpack@arg
  5295     08BE  0829               	movf	___lltoft@c+1,w
  5296     08BF  00A1               	movwf	___ftpack@arg+1
  5297     08C0  082A               	movf	___lltoft@c+2,w
  5298     08C1  00A2               	movwf	___ftpack@arg+2
  5299     08C2  082C               	movf	___lltoft@exp,w
  5300     08C3  00A3               	movwf	___ftpack@exp
  5301     08C4  01A4               	clrf	___ftpack@sign
  5302     08C5  120A  158A  228A   	fcall	___ftpack
  5303     08C8  0820               	movf	?___ftpack,w
  5304     08C9  00A8               	movwf	?___lltoft
  5305     08CA  0821               	movf	?___ftpack+1,w
  5306     08CB  00A9               	movwf	?___lltoft+1
  5307     08CC  0822               	movf	?___ftpack+2,w
  5308     08CD  00AA               	movwf	?___lltoft+2
  5309     08CE  0008               	return
  5310     08CF                     __end_of___lltoft:
  5311                           
  5312                           	psect	text18
  5313     0987                     __ptext18:	
  5314 ;; *************** function ___llmod *****************
  5315 ;; Defined at:
  5316 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  divisor         4    0[BANK0 ] unsigned long 
  5319 ;;  dividend        4    4[BANK0 ] unsigned long 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  counter         1    9[BANK0 ] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  4    0[BANK0 ] unsigned long 
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0, btemp+1
  5326 ;; Tracked objects:
  5327 ;;		On entry : 300/0
  5328 ;;		On exit  : 300/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5331 ;;      Params:         0       8       0       0       0
  5332 ;;      Locals:         0       1       0       0       0
  5333 ;;      Temps:          0       1       0       0       0
  5334 ;;      Totals:         0      10       0       0       0
  5335 ;;Total ram usage:       10 bytes
  5336 ;; Hardware stack levels used: 1
  5337 ;; Hardware stack levels required when called: 1
  5338 ;; This function calls:
  5339 ;;		Nothing
  5340 ;; This function is called by:
  5341 ;;		_sprintf
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345     0987                     ___llmod:	
  5346                           ;psect for function ___llmod
  5347                           
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  5351     0987  0823               	movf	___llmod@divisor+3,w
  5352     0988  0422               	iorwf	___llmod@divisor+2,w
  5353     0989  0421               	iorwf	___llmod@divisor+1,w
  5354     098A  0420               	iorwf	___llmod@divisor,w
  5355     098B  1903               	skipnz
  5356     098C  29CA               	goto	l2425
  5357     098D  01A9               	clrf	___llmod@counter
  5358     098E  0AA9               	incf	___llmod@counter,f
  5359     098F                     l2415:
  5360     098F  1BA3               	btfsc	___llmod@divisor+3,7
  5361     0990  299F               	goto	l2417
  5362     0991  3001               	movlw	1
  5363     0992  00A8               	movwf	??___llmod
  5364     0993                     u3155:
  5365     0993  1003               	clrc
  5366     0994  0DA0               	rlf	___llmod@divisor,f
  5367     0995  0DA1               	rlf	___llmod@divisor+1,f
  5368     0996  0DA2               	rlf	___llmod@divisor+2,f
  5369     0997  0DA3               	rlf	___llmod@divisor+3,f
  5370     0998  0BA8               	decfsz	??___llmod,f
  5371     0999  2993               	goto	u3155
  5372     099A  3001               	movlw	1
  5373     099B  00FF               	movwf	127
  5374     099C  087F               	movf	127,w
  5375     099D  07A9               	addwf	___llmod@counter,f
  5376     099E  298F               	goto	l2415
  5377     099F                     l2417:
  5378     099F  0823               	movf	___llmod@divisor+3,w
  5379     09A0  0227               	subwf	___llmod@dividend+3,w
  5380     09A1  1D03               	skipz
  5381     09A2  29AD               	goto	u3175
  5382     09A3  0822               	movf	___llmod@divisor+2,w
  5383     09A4  0226               	subwf	___llmod@dividend+2,w
  5384     09A5  1D03               	skipz
  5385     09A6  29AD               	goto	u3175
  5386     09A7  0821               	movf	___llmod@divisor+1,w
  5387     09A8  0225               	subwf	___llmod@dividend+1,w
  5388     09A9  1D03               	skipz
  5389     09AA  29AD               	goto	u3175
  5390     09AB  0820               	movf	___llmod@divisor,w
  5391     09AC  0224               	subwf	___llmod@dividend,w
  5392     09AD                     u3175:
  5393     09AD  1C03               	skipc
  5394     09AE  29BD               	goto	l2421
  5395     09AF  0820               	movf	___llmod@divisor,w
  5396     09B0  02A4               	subwf	___llmod@dividend,f
  5397     09B1  0821               	movf	___llmod@divisor+1,w
  5398     09B2  1C03               	skipc
  5399     09B3  0F21               	incfsz	___llmod@divisor+1,w
  5400     09B4  02A5               	subwf	___llmod@dividend+1,f
  5401     09B5  0822               	movf	___llmod@divisor+2,w
  5402     09B6  1C03               	skipc
  5403     09B7  0F22               	incfsz	___llmod@divisor+2,w
  5404     09B8  02A6               	subwf	___llmod@dividend+2,f
  5405     09B9  0823               	movf	___llmod@divisor+3,w
  5406     09BA  1C03               	skipc
  5407     09BB  0F23               	incfsz	___llmod@divisor+3,w
  5408     09BC  02A7               	subwf	___llmod@dividend+3,f
  5409     09BD                     l2421:
  5410     09BD  3001               	movlw	1
  5411     09BE                     u3185:
  5412     09BE  1003               	clrc
  5413     09BF  0CA3               	rrf	___llmod@divisor+3,f
  5414     09C0  0CA2               	rrf	___llmod@divisor+2,f
  5415     09C1  0CA1               	rrf	___llmod@divisor+1,f
  5416     09C2  0CA0               	rrf	___llmod@divisor,f
  5417     09C3  3EFF               	addlw	-1
  5418     09C4  1D03               	skipz
  5419     09C5  29BE               	goto	u3185
  5420     09C6  3001               	movlw	1
  5421     09C7  02A9               	subwf	___llmod@counter,f
  5422     09C8  1D03               	btfss	3,2
  5423     09C9  299F               	goto	l2417
  5424     09CA                     l2425:
  5425     09CA  0827               	movf	___llmod@dividend+3,w
  5426     09CB  00A3               	movwf	?___llmod+3
  5427     09CC  0826               	movf	___llmod@dividend+2,w
  5428     09CD  00A2               	movwf	?___llmod+2
  5429     09CE  0825               	movf	___llmod@dividend+1,w
  5430     09CF  00A1               	movwf	?___llmod+1
  5431     09D0  0824               	movf	___llmod@dividend,w
  5432     09D1  00A0               	movwf	?___llmod
  5433     09D2  0008               	return
  5434     09D3                     __end_of___llmod:
  5435                           
  5436                           	psect	text19
  5437     0A2C                     __ptext19:	
  5438 ;; *************** function ___lldiv *****************
  5439 ;; Defined at:
  5440 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  divisor         4    0[BANK0 ] unsigned long 
  5443 ;;  dividend        4    4[BANK0 ] unsigned long 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  quotient        4    9[BANK0 ] unsigned long 
  5446 ;;  counter         1   13[BANK0 ] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  4    0[BANK0 ] unsigned long 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, btemp+1
  5451 ;; Tracked objects:
  5452 ;;		On entry : 300/0
  5453 ;;		On exit  : 300/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5456 ;;      Params:         0       8       0       0       0
  5457 ;;      Locals:         0       5       0       0       0
  5458 ;;      Temps:          0       1       0       0       0
  5459 ;;      Totals:         0      14       0       0       0
  5460 ;;Total ram usage:       14 bytes
  5461 ;; Hardware stack levels used: 1
  5462 ;; Hardware stack levels required when called: 1
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_sprintf
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470     0A2C                     ___lldiv:	
  5471                           ;psect for function ___lldiv
  5472                           
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  5476     0A2C  3000               	movlw	0
  5477     0A2D  00AC               	movwf	___lldiv@quotient+3
  5478     0A2E  3000               	movlw	0
  5479     0A2F  00AB               	movwf	___lldiv@quotient+2
  5480     0A30  3000               	movlw	0
  5481     0A31  00AA               	movwf	___lldiv@quotient+1
  5482     0A32  3000               	movlw	0
  5483     0A33  00A9               	movwf	___lldiv@quotient
  5484     0A34  0823               	movf	___lldiv@divisor+3,w
  5485     0A35  0422               	iorwf	___lldiv@divisor+2,w
  5486     0A36  0421               	iorwf	___lldiv@divisor+1,w
  5487     0A37  0420               	iorwf	___lldiv@divisor,w
  5488     0A38  1903               	skipnz
  5489     0A39  2A81               	goto	l2323
  5490     0A3A  01AD               	clrf	___lldiv@counter
  5491     0A3B  0AAD               	incf	___lldiv@counter,f
  5492     0A3C                     l2309:
  5493     0A3C  1BA3               	btfsc	___lldiv@divisor+3,7
  5494     0A3D  2A4C               	goto	l2311
  5495     0A3E  3001               	movlw	1
  5496     0A3F  00A8               	movwf	??___lldiv
  5497     0A40                     u2935:
  5498     0A40  1003               	clrc
  5499     0A41  0DA0               	rlf	___lldiv@divisor,f
  5500     0A42  0DA1               	rlf	___lldiv@divisor+1,f
  5501     0A43  0DA2               	rlf	___lldiv@divisor+2,f
  5502     0A44  0DA3               	rlf	___lldiv@divisor+3,f
  5503     0A45  0BA8               	decfsz	??___lldiv,f
  5504     0A46  2A40               	goto	u2935
  5505     0A47  3001               	movlw	1
  5506     0A48  00FF               	movwf	127
  5507     0A49  087F               	movf	127,w
  5508     0A4A  07AD               	addwf	___lldiv@counter,f
  5509     0A4B  2A3C               	goto	l2309
  5510     0A4C                     l2311:
  5511     0A4C  3001               	movlw	1
  5512     0A4D  00A8               	movwf	??___lldiv
  5513     0A4E                     u2955:
  5514     0A4E  1003               	clrc
  5515     0A4F  0DA9               	rlf	___lldiv@quotient,f
  5516     0A50  0DAA               	rlf	___lldiv@quotient+1,f
  5517     0A51  0DAB               	rlf	___lldiv@quotient+2,f
  5518     0A52  0DAC               	rlf	___lldiv@quotient+3,f
  5519     0A53  0BA8               	decfsz	??___lldiv,f
  5520     0A54  2A4E               	goto	u2955
  5521     0A55  0823               	movf	___lldiv@divisor+3,w
  5522     0A56  0227               	subwf	___lldiv@dividend+3,w
  5523     0A57  1D03               	skipz
  5524     0A58  2A63               	goto	u2965
  5525     0A59  0822               	movf	___lldiv@divisor+2,w
  5526     0A5A  0226               	subwf	___lldiv@dividend+2,w
  5527     0A5B  1D03               	skipz
  5528     0A5C  2A63               	goto	u2965
  5529     0A5D  0821               	movf	___lldiv@divisor+1,w
  5530     0A5E  0225               	subwf	___lldiv@dividend+1,w
  5531     0A5F  1D03               	skipz
  5532     0A60  2A63               	goto	u2965
  5533     0A61  0820               	movf	___lldiv@divisor,w
  5534     0A62  0224               	subwf	___lldiv@dividend,w
  5535     0A63                     u2965:
  5536     0A63  1C03               	skipc
  5537     0A64  2A74               	goto	l2319
  5538     0A65  0820               	movf	___lldiv@divisor,w
  5539     0A66  02A4               	subwf	___lldiv@dividend,f
  5540     0A67  0821               	movf	___lldiv@divisor+1,w
  5541     0A68  1C03               	skipc
  5542     0A69  0F21               	incfsz	___lldiv@divisor+1,w
  5543     0A6A  02A5               	subwf	___lldiv@dividend+1,f
  5544     0A6B  0822               	movf	___lldiv@divisor+2,w
  5545     0A6C  1C03               	skipc
  5546     0A6D  0F22               	incfsz	___lldiv@divisor+2,w
  5547     0A6E  02A6               	subwf	___lldiv@dividend+2,f
  5548     0A6F  0823               	movf	___lldiv@divisor+3,w
  5549     0A70  1C03               	skipc
  5550     0A71  0F23               	incfsz	___lldiv@divisor+3,w
  5551     0A72  02A7               	subwf	___lldiv@dividend+3,f
  5552     0A73  1429               	bsf	___lldiv@quotient,0
  5553     0A74                     l2319:
  5554     0A74  3001               	movlw	1
  5555     0A75                     u2975:
  5556     0A75  1003               	clrc
  5557     0A76  0CA3               	rrf	___lldiv@divisor+3,f
  5558     0A77  0CA2               	rrf	___lldiv@divisor+2,f
  5559     0A78  0CA1               	rrf	___lldiv@divisor+1,f
  5560     0A79  0CA0               	rrf	___lldiv@divisor,f
  5561     0A7A  3EFF               	addlw	-1
  5562     0A7B  1D03               	skipz
  5563     0A7C  2A75               	goto	u2975
  5564     0A7D  3001               	movlw	1
  5565     0A7E  02AD               	subwf	___lldiv@counter,f
  5566     0A7F  1D03               	btfss	3,2
  5567     0A80  2A4C               	goto	l2311
  5568     0A81                     l2323:
  5569     0A81  082C               	movf	___lldiv@quotient+3,w
  5570     0A82  00A3               	movwf	?___lldiv+3
  5571     0A83  082B               	movf	___lldiv@quotient+2,w
  5572     0A84  00A2               	movwf	?___lldiv+2
  5573     0A85  082A               	movf	___lldiv@quotient+1,w
  5574     0A86  00A1               	movwf	?___lldiv+1
  5575     0A87  0829               	movf	___lldiv@quotient,w
  5576     0A88  00A0               	movwf	?___lldiv
  5577     0A89  0008               	return
  5578     0A8A                     __end_of___lldiv:
  5579                           
  5580                           	psect	text20
  5581     0AF6                     __ptext20:	
  5582 ;; *************** function ___fttol *****************
  5583 ;; Defined at:
  5584 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\fttol.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  f1              3   39[BANK0 ] float 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  lval            4   47[BANK0 ] unsigned long 
  5589 ;;  exp1            1   51[BANK0 ] unsigned char 
  5590 ;;  sign1           1   46[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  4   39[BANK0 ] long 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, btemp+1
  5595 ;; Tracked objects:
  5596 ;;		On entry : 300/0
  5597 ;;		On exit  : 300/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5600 ;;      Params:         0       4       0       0       0
  5601 ;;      Locals:         0       6       0       0       0
  5602 ;;      Temps:          0       3       0       0       0
  5603 ;;      Totals:         0      13       0       0       0
  5604 ;;Total ram usage:       13 bytes
  5605 ;; Hardware stack levels used: 1
  5606 ;; Hardware stack levels required when called: 1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_sprintf
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614     0AF6                     ___fttol:	
  5615                           ;psect for function ___fttol
  5616                           
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  5620     0AF6  0847               	movf	___fttol@f1,w
  5621     0AF7  00CB               	movwf	??___fttol
  5622     0AF8  0848               	movf	___fttol@f1+1,w
  5623     0AF9  00CC               	movwf	??___fttol+1
  5624     0AFA  0849               	movf	___fttol@f1+2,w
  5625     0AFB  00CD               	movwf	??___fttol+2
  5626     0AFC  1003               	clrc
  5627     0AFD  0D4C               	rlf	??___fttol+1,w
  5628     0AFE  0D4D               	rlf	??___fttol+2,w
  5629     0AFF  00D3               	movwf	___fttol@exp1
  5630     0B00  0853               	movf	___fttol@exp1,w
  5631     0B01  1D03               	btfss	3,2
  5632     0B02  2B0C               	goto	l2369
  5633     0B03                     l2365:
  5634     0B03  3000               	movlw	0
  5635     0B04  00CA               	movwf	?___fttol+3
  5636     0B05  3000               	movlw	0
  5637     0B06  00C9               	movwf	?___fttol+2
  5638     0B07  3000               	movlw	0
  5639     0B08  00C8               	movwf	?___fttol+1
  5640     0B09  3000               	movlw	0
  5641     0B0A  00C7               	movwf	?___fttol
  5642     0B0B  0008               	return
  5643     0B0C                     l2369:
  5644     0B0C  0847               	movf	___fttol@f1,w
  5645     0B0D  00CB               	movwf	??___fttol
  5646     0B0E  0848               	movf	___fttol@f1+1,w
  5647     0B0F  00CC               	movwf	??___fttol+1
  5648     0B10  0849               	movf	___fttol@f1+2,w
  5649     0B11  00CD               	movwf	??___fttol+2
  5650     0B12  3017               	movlw	23
  5651     0B13                     u3055:
  5652     0B13  1003               	clrc
  5653     0B14  0CCD               	rrf	??___fttol+2,f
  5654     0B15  0CCC               	rrf	??___fttol+1,f
  5655     0B16  0CCB               	rrf	??___fttol,f
  5656     0B17  3EFF               	addlw	-1
  5657     0B18  1D03               	skipz
  5658     0B19  2B13               	goto	u3055
  5659     0B1A  084B               	movf	??___fttol,w
  5660     0B1B  00CE               	movwf	___fttol@sign1
  5661     0B1C  17C8               	bsf	___fttol@f1+1,7
  5662     0B1D  30FF               	movlw	255
  5663     0B1E  05C7               	andwf	___fttol@f1,f
  5664     0B1F  30FF               	movlw	255
  5665     0B20  05C8               	andwf	___fttol@f1+1,f
  5666     0B21  3000               	movlw	0
  5667     0B22  05C9               	andwf	___fttol@f1+2,f
  5668     0B23  0847               	movf	___fttol@f1,w
  5669     0B24  00CF               	movwf	___fttol@lval
  5670     0B25  0848               	movf	___fttol@f1+1,w
  5671     0B26  00D0               	movwf	___fttol@lval+1
  5672     0B27  0849               	movf	___fttol@f1+2,w
  5673     0B28  00D1               	movwf	___fttol@lval+2
  5674     0B29  01D2               	clrf	___fttol@lval+3
  5675     0B2A  308E               	movlw	142
  5676     0B2B  02D3               	subwf	___fttol@exp1,f
  5677     0B2C  1FD3               	btfss	___fttol@exp1,7
  5678     0B2D  2B43               	goto	l2391
  5679     0B2E  0853               	movf	___fttol@exp1,w
  5680     0B2F  3A80               	xorlw	128
  5681     0B30  3E8F               	addlw	143
  5682     0B31  1C03               	btfss	3,0
  5683     0B32  2B03               	goto	l2365
  5684     0B33                     l2387:
  5685     0B33  3001               	movlw	1
  5686     0B34                     u3085:
  5687     0B34  1003               	clrc
  5688     0B35  0CD2               	rrf	___fttol@lval+3,f
  5689     0B36  0CD1               	rrf	___fttol@lval+2,f
  5690     0B37  0CD0               	rrf	___fttol@lval+1,f
  5691     0B38  0CCF               	rrf	___fttol@lval,f
  5692     0B39  3EFF               	addlw	-1
  5693     0B3A  1D03               	skipz
  5694     0B3B  2B34               	goto	u3085
  5695     0B3C  3001               	movlw	1
  5696     0B3D  00FF               	movwf	127
  5697     0B3E  087F               	movf	127,w
  5698     0B3F  07D3               	addwf	___fttol@exp1,f
  5699     0B40  1903               	btfsc	3,2
  5700     0B41  2B56               	goto	l2399
  5701     0B42  2B33               	goto	l2387
  5702     0B43                     l2391:
  5703     0B43  3018               	movlw	24
  5704     0B44  0253               	subwf	___fttol@exp1,w
  5705     0B45  1803               	btfsc	3,0
  5706     0B46  2B03               	goto	l2365
  5707     0B47                     l695:
  5708     0B47  0853               	movf	___fttol@exp1,w
  5709     0B48  1903               	btfsc	3,2
  5710     0B49  2B56               	goto	l2399
  5711     0B4A  3001               	movlw	1
  5712     0B4B  00CB               	movwf	??___fttol
  5713     0B4C                     u3115:
  5714     0B4C  1003               	clrc
  5715     0B4D  0DCF               	rlf	___fttol@lval,f
  5716     0B4E  0DD0               	rlf	___fttol@lval+1,f
  5717     0B4F  0DD1               	rlf	___fttol@lval+2,f
  5718     0B50  0DD2               	rlf	___fttol@lval+3,f
  5719     0B51  0BCB               	decfsz	??___fttol,f
  5720     0B52  2B4C               	goto	u3115
  5721     0B53  3001               	movlw	1
  5722     0B54  02D3               	subwf	___fttol@exp1,f
  5723     0B55  2B47               	goto	l695
  5724     0B56                     l2399:
  5725     0B56  084E               	movf	___fttol@sign1,w
  5726     0B57  1903               	btfsc	3,2
  5727     0B58  2B64               	goto	l2403
  5728     0B59  09CF               	comf	___fttol@lval,f
  5729     0B5A  09D0               	comf	___fttol@lval+1,f
  5730     0B5B  09D1               	comf	___fttol@lval+2,f
  5731     0B5C  09D2               	comf	___fttol@lval+3,f
  5732     0B5D  0ACF               	incf	___fttol@lval,f
  5733     0B5E  1903               	skipnz
  5734     0B5F  0AD0               	incf	___fttol@lval+1,f
  5735     0B60  1903               	skipnz
  5736     0B61  0AD1               	incf	___fttol@lval+2,f
  5737     0B62  1903               	skipnz
  5738     0B63  0AD2               	incf	___fttol@lval+3,f
  5739     0B64                     l2403:
  5740     0B64  0852               	movf	___fttol@lval+3,w
  5741     0B65  00CA               	movwf	?___fttol+3
  5742     0B66  0851               	movf	___fttol@lval+2,w
  5743     0B67  00C9               	movwf	?___fttol+2
  5744     0B68  0850               	movf	___fttol@lval+1,w
  5745     0B69  00C8               	movwf	?___fttol+1
  5746     0B6A  084F               	movf	___fttol@lval,w
  5747     0B6B  00C7               	movwf	?___fttol
  5748     0B6C  0008               	return
  5749     0B6D                     __end_of___fttol:
  5750                           
  5751                           	psect	text21
  5752     1760                     __ptext21:	
  5753 ;; *************** function ___ftsub *****************
  5754 ;; Defined at:
  5755 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftsub.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  f2              3   54[BANK0 ] float 
  5758 ;;  f1              3   57[BANK0 ] float 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  3   54[BANK0 ] float 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 300/0
  5767 ;;		On exit  : 300/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5770 ;;      Params:         0       6       0       0       0
  5771 ;;      Locals:         0       0       0       0       0
  5772 ;;      Temps:          0       0       0       0       0
  5773 ;;      Totals:         0       6       0       0       0
  5774 ;;Total ram usage:        6 bytes
  5775 ;; Hardware stack levels used: 1
  5776 ;; Hardware stack levels required when called: 3
  5777 ;; This function calls:
  5778 ;;		___ftadd
  5779 ;; This function is called by:
  5780 ;;		_sprintf
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784     1760                     ___ftsub:	
  5785                           ;psect for function ___ftsub
  5786                           
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5790     1760  0858               	movf	___ftsub@f2+2,w
  5791     1761  0457               	iorwf	___ftsub@f2+1,w
  5792     1762  0456               	iorwf	___ftsub@f2,w
  5793     1763  1903               	skipnz
  5794     1764  2F67               	goto	l2359
  5795     1765  3080               	movlw	128
  5796     1766  06D8               	xorwf	___ftsub@f2+2,f
  5797     1767                     l2359:
  5798     1767  0859               	movf	___ftsub@f1,w
  5799     1768  00CA               	movwf	___ftadd@f1
  5800     1769  085A               	movf	___ftsub@f1+1,w
  5801     176A  00CB               	movwf	___ftadd@f1+1
  5802     176B  085B               	movf	___ftsub@f1+2,w
  5803     176C  00CC               	movwf	___ftadd@f1+2
  5804     176D  0856               	movf	___ftsub@f2,w
  5805     176E  00CD               	movwf	___ftadd@f2
  5806     176F  0857               	movf	___ftsub@f2+1,w
  5807     1770  00CE               	movwf	___ftadd@f2+1
  5808     1771  0858               	movf	___ftsub@f2+2,w
  5809     1772  00CF               	movwf	___ftadd@f2+2
  5810     1773  120A  158A  24B3   	fcall	___ftadd
  5811     1776  084A               	movf	?___ftadd,w
  5812     1777  00D6               	movwf	?___ftsub
  5813     1778  084B               	movf	?___ftadd+1,w
  5814     1779  00D7               	movwf	?___ftsub+1
  5815     177A  084C               	movf	?___ftadd+2,w
  5816     177B  00D8               	movwf	?___ftsub+2
  5817     177C  0008               	return
  5818     177D                     __end_of___ftsub:
  5819                           
  5820                           	psect	text22
  5821     0CB3                     __ptext22:	
  5822 ;; *************** function ___ftadd *****************
  5823 ;; Defined at:
  5824 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftadd.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  f1              3   42[BANK0 ] float 
  5827 ;;  f2              3   45[BANK0 ] float 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  exp1            1   53[BANK0 ] unsigned char 
  5830 ;;  exp2            1   52[BANK0 ] unsigned char 
  5831 ;;  sign            1   51[BANK0 ] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  3   42[BANK0 ] float 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 300/0
  5838 ;;		On exit  : 300/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5841 ;;      Params:         0       6       0       0       0
  5842 ;;      Locals:         0       3       0       0       0
  5843 ;;      Temps:          0       3       0       0       0
  5844 ;;      Totals:         0      12       0       0       0
  5845 ;;Total ram usage:       12 bytes
  5846 ;; Hardware stack levels used: 1
  5847 ;; Hardware stack levels required when called: 2
  5848 ;; This function calls:
  5849 ;;		___ftpack
  5850 ;; This function is called by:
  5851 ;;		_sprintf
  5852 ;;		___ftsub
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856     0CB3                     ___ftadd:	
  5857                           ;psect for function ___ftadd
  5858                           
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5862     0CB3  084A               	movf	___ftadd@f1,w
  5863     0CB4  00D0               	movwf	??___ftadd
  5864     0CB5  084B               	movf	___ftadd@f1+1,w
  5865     0CB6  00D1               	movwf	??___ftadd+1
  5866     0CB7  084C               	movf	___ftadd@f1+2,w
  5867     0CB8  00D2               	movwf	??___ftadd+2
  5868     0CB9  1003               	clrc
  5869     0CBA  0D51               	rlf	??___ftadd+1,w
  5870     0CBB  0D52               	rlf	??___ftadd+2,w
  5871     0CBC  00D5               	movwf	___ftadd@exp1
  5872     0CBD  084D               	movf	___ftadd@f2,w
  5873     0CBE  00D0               	movwf	??___ftadd
  5874     0CBF  084E               	movf	___ftadd@f2+1,w
  5875     0CC0  00D1               	movwf	??___ftadd+1
  5876     0CC1  084F               	movf	___ftadd@f2+2,w
  5877     0CC2  00D2               	movwf	??___ftadd+2
  5878     0CC3  1003               	clrc
  5879     0CC4  0D51               	rlf	??___ftadd+1,w
  5880     0CC5  0D52               	rlf	??___ftadd+2,w
  5881     0CC6  00D4               	movwf	___ftadd@exp2
  5882     0CC7  0855               	movf	___ftadd@exp1,w
  5883     0CC8  1903               	btfsc	3,2
  5884     0CC9  2CD6               	goto	l1943
  5885     0CCA  0854               	movf	___ftadd@exp2,w
  5886     0CCB  0255               	subwf	___ftadd@exp1,w
  5887     0CCC  1803               	skipnc
  5888     0CCD  2CDD               	goto	l1947
  5889     0CCE  0854               	movf	___ftadd@exp2,w
  5890     0CCF  00D0               	movwf	??___ftadd
  5891     0CD0  0855               	movf	___ftadd@exp1,w
  5892     0CD1  02D0               	subwf	??___ftadd,f
  5893     0CD2  3019               	movlw	25
  5894     0CD3  0250               	subwf	??___ftadd,w
  5895     0CD4  1C03               	skipc
  5896     0CD5  2CDD               	goto	l1947
  5897     0CD6                     l1943:
  5898     0CD6  084D               	movf	___ftadd@f2,w
  5899     0CD7  00CA               	movwf	?___ftadd
  5900     0CD8  084E               	movf	___ftadd@f2+1,w
  5901     0CD9  00CB               	movwf	?___ftadd+1
  5902     0CDA  084F               	movf	___ftadd@f2+2,w
  5903     0CDB  00CC               	movwf	?___ftadd+2
  5904     0CDC  0008               	return
  5905     0CDD                     l1947:
  5906     0CDD  0854               	movf	___ftadd@exp2,w
  5907     0CDE  1903               	btfsc	3,2
  5908     0CDF  0008               	return
  5909     0CE0  0855               	movf	___ftadd@exp1,w
  5910     0CE1  0254               	subwf	___ftadd@exp2,w
  5911     0CE2  1803               	skipnc
  5912     0CE3  2CEC               	goto	l1953
  5913     0CE4  0855               	movf	___ftadd@exp1,w
  5914     0CE5  00D0               	movwf	??___ftadd
  5915     0CE6  0854               	movf	___ftadd@exp2,w
  5916     0CE7  02D0               	subwf	??___ftadd,f
  5917     0CE8  3019               	movlw	25
  5918     0CE9  0250               	subwf	??___ftadd,w
  5919     0CEA  1803               	btfsc	3,0
  5920     0CEB  0008               	return
  5921     0CEC                     l1953:
  5922     0CEC  3006               	movlw	6
  5923     0CED  00D3               	movwf	___ftadd@sign
  5924     0CEE  1BCC               	btfsc	___ftadd@f1+2,7
  5925     0CEF  17D3               	bsf	___ftadd@sign,7
  5926     0CF0  1BCF               	btfsc	___ftadd@f2+2,7
  5927     0CF1  1753               	bsf	___ftadd@sign,6
  5928     0CF2  17CB               	bsf	___ftadd@f1+1,7
  5929     0CF3  30FF               	movlw	255
  5930     0CF4  05CA               	andwf	___ftadd@f1,f
  5931     0CF5  30FF               	movlw	255
  5932     0CF6  05CB               	andwf	___ftadd@f1+1,f
  5933     0CF7  3000               	movlw	0
  5934     0CF8  05CC               	andwf	___ftadd@f1+2,f
  5935     0CF9  17CE               	bsf	___ftadd@f2+1,7
  5936     0CFA  30FF               	movlw	255
  5937     0CFB  05CD               	andwf	___ftadd@f2,f
  5938     0CFC  30FF               	movlw	255
  5939     0CFD  05CE               	andwf	___ftadd@f2+1,f
  5940     0CFE  3000               	movlw	0
  5941     0CFF  05CF               	andwf	___ftadd@f2+2,f
  5942     0D00  0854               	movf	___ftadd@exp2,w
  5943     0D01  0255               	subwf	___ftadd@exp1,w
  5944     0D02  1803               	skipnc
  5945     0D03  2D2A               	goto	l1977
  5946     0D04                     l1965:
  5947     0D04  3001               	movlw	1
  5948     0D05                     u2215:
  5949     0D05  1003               	clrc
  5950     0D06  0DCD               	rlf	___ftadd@f2,f
  5951     0D07  0DCE               	rlf	___ftadd@f2+1,f
  5952     0D08  0DCF               	rlf	___ftadd@f2+2,f
  5953     0D09  3EFF               	addlw	-1
  5954     0D0A  1D03               	skipz
  5955     0D0B  2D05               	goto	u2215
  5956     0D0C  3001               	movlw	1
  5957     0D0D  02D4               	subwf	___ftadd@exp2,f
  5958     0D0E  0854               	movf	___ftadd@exp2,w
  5959     0D0F  0655               	xorwf	___ftadd@exp1,w
  5960     0D10  1903               	skipnz
  5961     0D11  2D25               	goto	l1975
  5962     0D12  3001               	movlw	1
  5963     0D13  02D3               	subwf	___ftadd@sign,f
  5964     0D14  0853               	movf	___ftadd@sign,w
  5965     0D15  3907               	andlw	7
  5966     0D16  1903               	btfsc	3,2
  5967     0D17  2D25               	goto	l1975
  5968     0D18  2D04               	goto	l1965
  5969     0D19                     l1971:
  5970     0D19  3001               	movlw	1
  5971     0D1A                     u2245:
  5972     0D1A  1003               	clrc
  5973     0D1B  0CCC               	rrf	___ftadd@f1+2,f
  5974     0D1C  0CCB               	rrf	___ftadd@f1+1,f
  5975     0D1D  0CCA               	rrf	___ftadd@f1,f
  5976     0D1E  3EFF               	addlw	-1
  5977     0D1F  1D03               	skipz
  5978     0D20  2D1A               	goto	u2245
  5979     0D21  3001               	movlw	1
  5980     0D22  00FF               	movwf	127
  5981     0D23  087F               	movf	127,w
  5982     0D24  07D5               	addwf	___ftadd@exp1,f
  5983     0D25                     l1975:
  5984     0D25  0855               	movf	___ftadd@exp1,w
  5985     0D26  0654               	xorwf	___ftadd@exp2,w
  5986     0D27  1903               	btfsc	3,2
  5987     0D28  2D53               	goto	l618
  5988     0D29  2D19               	goto	l1971
  5989     0D2A                     l1977:
  5990     0D2A  0855               	movf	___ftadd@exp1,w
  5991     0D2B  0254               	subwf	___ftadd@exp2,w
  5992     0D2C  1803               	skipnc
  5993     0D2D  2D53               	goto	l618
  5994     0D2E                     l1979:
  5995     0D2E  3001               	movlw	1
  5996     0D2F                     u2275:
  5997     0D2F  1003               	clrc
  5998     0D30  0DCA               	rlf	___ftadd@f1,f
  5999     0D31  0DCB               	rlf	___ftadd@f1+1,f
  6000     0D32  0DCC               	rlf	___ftadd@f1+2,f
  6001     0D33  3EFF               	addlw	-1
  6002     0D34  1D03               	skipz
  6003     0D35  2D2F               	goto	u2275
  6004     0D36  3001               	movlw	1
  6005     0D37  02D5               	subwf	___ftadd@exp1,f
  6006     0D38  0854               	movf	___ftadd@exp2,w
  6007     0D39  0655               	xorwf	___ftadd@exp1,w
  6008     0D3A  1903               	skipnz
  6009     0D3B  2D4F               	goto	l1989
  6010     0D3C  3001               	movlw	1
  6011     0D3D  02D3               	subwf	___ftadd@sign,f
  6012     0D3E  0853               	movf	___ftadd@sign,w
  6013     0D3F  3907               	andlw	7
  6014     0D40  1903               	btfsc	3,2
  6015     0D41  2D4F               	goto	l1989
  6016     0D42  2D2E               	goto	l1979
  6017     0D43                     l1985:
  6018     0D43  3001               	movlw	1
  6019     0D44                     u2305:
  6020     0D44  1003               	clrc
  6021     0D45  0CCF               	rrf	___ftadd@f2+2,f
  6022     0D46  0CCE               	rrf	___ftadd@f2+1,f
  6023     0D47  0CCD               	rrf	___ftadd@f2,f
  6024     0D48  3EFF               	addlw	-1
  6025     0D49  1D03               	skipz
  6026     0D4A  2D44               	goto	u2305
  6027     0D4B  3001               	movlw	1
  6028     0D4C  00FF               	movwf	127
  6029     0D4D  087F               	movf	127,w
  6030     0D4E  07D4               	addwf	___ftadd@exp2,f
  6031     0D4F                     l1989:
  6032     0D4F  0855               	movf	___ftadd@exp1,w
  6033     0D50  0654               	xorwf	___ftadd@exp2,w
  6034     0D51  1D03               	skipz
  6035     0D52  2D43               	goto	l1985
  6036     0D53                     l618:
  6037     0D53  1FD3               	btfss	___ftadd@sign,7
  6038     0D54  2D65               	goto	l1993
  6039     0D55  30FF               	movlw	255
  6040     0D56  06CA               	xorwf	___ftadd@f1,f
  6041     0D57  30FF               	movlw	255
  6042     0D58  06CB               	xorwf	___ftadd@f1+1,f
  6043     0D59  30FF               	movlw	255
  6044     0D5A  06CC               	xorwf	___ftadd@f1+2,f
  6045     0D5B  3001               	movlw	1
  6046     0D5C  07CA               	addwf	___ftadd@f1,f
  6047     0D5D  3000               	movlw	0
  6048     0D5E  1803               	skipnc
  6049     0D5F  3001               	movlw	1
  6050     0D60  07CB               	addwf	___ftadd@f1+1,f
  6051     0D61  3000               	movlw	0
  6052     0D62  1803               	skipnc
  6053     0D63  3001               	movlw	1
  6054     0D64  07CC               	addwf	___ftadd@f1+2,f
  6055     0D65                     l1993:
  6056     0D65  1F53               	btfss	___ftadd@sign,6
  6057     0D66  2D77               	goto	l1997
  6058     0D67  30FF               	movlw	255
  6059     0D68  06CD               	xorwf	___ftadd@f2,f
  6060     0D69  30FF               	movlw	255
  6061     0D6A  06CE               	xorwf	___ftadd@f2+1,f
  6062     0D6B  30FF               	movlw	255
  6063     0D6C  06CF               	xorwf	___ftadd@f2+2,f
  6064     0D6D  3001               	movlw	1
  6065     0D6E  07CD               	addwf	___ftadd@f2,f
  6066     0D6F  3000               	movlw	0
  6067     0D70  1803               	skipnc
  6068     0D71  3001               	movlw	1
  6069     0D72  07CE               	addwf	___ftadd@f2+1,f
  6070     0D73  3000               	movlw	0
  6071     0D74  1803               	skipnc
  6072     0D75  3001               	movlw	1
  6073     0D76  07CF               	addwf	___ftadd@f2+2,f
  6074     0D77                     l1997:
  6075     0D77  01D3               	clrf	___ftadd@sign
  6076     0D78  084A               	movf	___ftadd@f1,w
  6077     0D79  07CD               	addwf	___ftadd@f2,f
  6078     0D7A  084B               	movf	___ftadd@f1+1,w
  6079     0D7B  1103               	clrz
  6080     0D7C  1803               	skipnc
  6081     0D7D  0A4B               	incf	___ftadd@f1+1,w
  6082     0D7E  1D03               	btfss	3,2
  6083     0D7F  07CE               	addwf	___ftadd@f2+1,f
  6084     0D80  084C               	movf	___ftadd@f1+2,w
  6085     0D81  1103               	clrz
  6086     0D82  1803               	skipnc
  6087     0D83  0A4C               	incf	___ftadd@f1+2,w
  6088     0D84  1D03               	btfss	3,2
  6089     0D85  07CF               	addwf	___ftadd@f2+2,f
  6090     0D86  1FCF               	btfss	___ftadd@f2+2,7
  6091     0D87  2D9A               	goto	l2007
  6092     0D88  30FF               	movlw	255
  6093     0D89  06CD               	xorwf	___ftadd@f2,f
  6094     0D8A  30FF               	movlw	255
  6095     0D8B  06CE               	xorwf	___ftadd@f2+1,f
  6096     0D8C  30FF               	movlw	255
  6097     0D8D  06CF               	xorwf	___ftadd@f2+2,f
  6098     0D8E  3001               	movlw	1
  6099     0D8F  07CD               	addwf	___ftadd@f2,f
  6100     0D90  3000               	movlw	0
  6101     0D91  1803               	skipnc
  6102     0D92  3001               	movlw	1
  6103     0D93  07CE               	addwf	___ftadd@f2+1,f
  6104     0D94  3000               	movlw	0
  6105     0D95  1803               	skipnc
  6106     0D96  3001               	movlw	1
  6107     0D97  07CF               	addwf	___ftadd@f2+2,f
  6108     0D98  01D3               	clrf	___ftadd@sign
  6109     0D99  0AD3               	incf	___ftadd@sign,f
  6110     0D9A                     l2007:
  6111     0D9A  084D               	movf	___ftadd@f2,w
  6112     0D9B  00A0               	movwf	___ftpack@arg
  6113     0D9C  084E               	movf	___ftadd@f2+1,w
  6114     0D9D  00A1               	movwf	___ftpack@arg+1
  6115     0D9E  084F               	movf	___ftadd@f2+2,w
  6116     0D9F  00A2               	movwf	___ftpack@arg+2
  6117     0DA0  0855               	movf	___ftadd@exp1,w
  6118     0DA1  00A3               	movwf	___ftpack@exp
  6119     0DA2  0853               	movf	___ftadd@sign,w
  6120     0DA3  00A4               	movwf	___ftpack@sign
  6121     0DA4  120A  158A  228A   	fcall	___ftpack
  6122     0DA7  0820               	movf	?___ftpack,w
  6123     0DA8  00CA               	movwf	?___ftadd
  6124     0DA9  0821               	movf	?___ftpack+1,w
  6125     0DAA  00CB               	movwf	?___ftadd+1
  6126     0DAB  0822               	movf	?___ftpack+2,w
  6127     0DAC  00CC               	movwf	?___ftadd+2
  6128     0DAD  0008               	return
  6129     0DAE                     __end_of___ftadd:
  6130                           
  6131                           	psect	text23
  6132     16B1                     __ptext23:	
  6133 ;; *************** function ___ftneg *****************
  6134 ;; Defined at:
  6135 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftneg.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;  f1              3    0[BANK0 ] float 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  3    0[BANK0 ] float 
  6142 ;; Registers used:
  6143 ;;		wreg
  6144 ;; Tracked objects:
  6145 ;;		On entry : 300/0
  6146 ;;		On exit  : 300/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6149 ;;      Params:         0       3       0       0       0
  6150 ;;      Locals:         0       0       0       0       0
  6151 ;;      Temps:          0       0       0       0       0
  6152 ;;      Totals:         0       3       0       0       0
  6153 ;;Total ram usage:        3 bytes
  6154 ;; Hardware stack levels used: 1
  6155 ;; Hardware stack levels required when called: 1
  6156 ;; This function calls:
  6157 ;;		Nothing
  6158 ;; This function is called by:
  6159 ;;		_sprintf
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163     16B1                     ___ftneg:	
  6164                           ;psect for function ___ftneg
  6165                           
  6166                           
  6167                           ;incstack = 0
  6168                           ; Regs used in ___ftneg: [wreg]
  6169     16B1  0822               	movf	___ftneg@f1+2,w
  6170     16B2  0421               	iorwf	___ftneg@f1+1,w
  6171     16B3  0420               	iorwf	___ftneg@f1,w
  6172     16B4  1903               	skipnz
  6173     16B5  0008               	return
  6174     16B6  3080               	movlw	128
  6175     16B7  06A2               	xorwf	___ftneg@f1+2,f
  6176     16B8  0008               	return
  6177     16B9                     __end_of___ftneg:
  6178                           
  6179                           	psect	text24
  6180     08CF                     __ptext24:	
  6181 ;; *************** function ___ftge *****************
  6182 ;; Defined at:
  6183 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\ftge.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  ff1             3    0[BANK0 ] float 
  6186 ;;  ff2             3    3[BANK0 ] float 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;		None
  6189 ;; Return value:  Size  Location     Type
  6190 ;;		None               void
  6191 ;; Registers used:
  6192 ;;		wreg, status,2, status,0
  6193 ;; Tracked objects:
  6194 ;;		On entry : 300/0
  6195 ;;		On exit  : 300/0
  6196 ;;		Unchanged: 0/0
  6197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6198 ;;      Params:         0       6       0       0       0
  6199 ;;      Locals:         0       0       0       0       0
  6200 ;;      Temps:          0       0       0       0       0
  6201 ;;      Totals:         0       6       0       0       0
  6202 ;;Total ram usage:        6 bytes
  6203 ;; Hardware stack levels used: 1
  6204 ;; Hardware stack levels required when called: 1
  6205 ;; This function calls:
  6206 ;;		Nothing
  6207 ;; This function is called by:
  6208 ;;		_sprintf
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212     08CF                     ___ftge:	
  6213                           ;psect for function ___ftge
  6214                           
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6218     08CF  1FA2               	btfss	___ftge@ff1+2,7
  6219     08D0  28DE               	goto	l2331
  6220     08D1  0820               	movf	___ftge@ff1,w
  6221     08D2  3C00               	sublw	0
  6222     08D3  00A0               	movwf	___ftge@ff1
  6223     08D4  0821               	movf	___ftge@ff1+1,w
  6224     08D5  1C03               	skipc
  6225     08D6  0F21               	incfsz	___ftge@ff1+1,w
  6226     08D7  3C00               	sublw	0
  6227     08D8  00A1               	movwf	___ftge@ff1+1
  6228     08D9  0822               	movf	___ftge@ff1+2,w
  6229     08DA  1C03               	skipc
  6230     08DB  0F22               	incfsz	___ftge@ff1+2,w
  6231     08DC  3C80               	sublw	128
  6232     08DD  00A2               	movwf	___ftge@ff1+2
  6233     08DE                     l2331:
  6234     08DE  1FA5               	btfss	___ftge@ff2+2,7
  6235     08DF  28ED               	goto	l2335
  6236     08E0  0823               	movf	___ftge@ff2,w
  6237     08E1  3C00               	sublw	0
  6238     08E2  00A3               	movwf	___ftge@ff2
  6239     08E3  0824               	movf	___ftge@ff2+1,w
  6240     08E4  1C03               	skipc
  6241     08E5  0F24               	incfsz	___ftge@ff2+1,w
  6242     08E6  3C00               	sublw	0
  6243     08E7  00A4               	movwf	___ftge@ff2+1
  6244     08E8  0825               	movf	___ftge@ff2+2,w
  6245     08E9  1C03               	skipc
  6246     08EA  0F25               	incfsz	___ftge@ff2+2,w
  6247     08EB  3C80               	sublw	128
  6248     08EC  00A5               	movwf	___ftge@ff2+2
  6249     08ED                     l2335:
  6250     08ED  3080               	movlw	128
  6251     08EE  06A2               	xorwf	___ftge@ff1+2,f
  6252     08EF  3080               	movlw	128
  6253     08F0  06A5               	xorwf	___ftge@ff2+2,f
  6254     08F1  0825               	movf	___ftge@ff2+2,w
  6255     08F2  0222               	subwf	___ftge@ff1+2,w
  6256     08F3  1D03               	skipz
  6257     08F4  0008               	return
  6258     08F5  0824               	movf	___ftge@ff2+1,w
  6259     08F6  0221               	subwf	___ftge@ff1+1,w
  6260     08F7  1D03               	skipz
  6261     08F8  0008               	return
  6262     08F9  0823               	movf	___ftge@ff2,w
  6263     08FA  0220               	subwf	___ftge@ff1,w
  6264     08FB  0008               	return
  6265     08FC                     __end_of___ftge:
  6266                           
  6267                           	psect	text25
  6268     171B                     __ptext25:	
  6269 ;; *************** function _init_inttimer *****************
  6270 ;; Defined at:
  6271 ;;		line 4 in file "inttimer.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;		None
  6274 ;; Auto vars:     Size  Location     Type
  6275 ;;		None
  6276 ;; Return value:  Size  Location     Type
  6277 ;;                  1    wreg      void 
  6278 ;; Registers used:
  6279 ;;		wreg, status,2, status,0
  6280 ;; Tracked objects:
  6281 ;;		On entry : 300/0
  6282 ;;		On exit  : 300/100
  6283 ;;		Unchanged: 0/0
  6284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6285 ;;      Params:         0       0       0       0       0
  6286 ;;      Locals:         0       0       0       0       0
  6287 ;;      Temps:          0       0       0       0       0
  6288 ;;      Totals:         0       0       0       0       0
  6289 ;;Total ram usage:        0 bytes
  6290 ;; Hardware stack levels used: 1
  6291 ;; Hardware stack levels required when called: 1
  6292 ;; This function calls:
  6293 ;;		Nothing
  6294 ;; This function is called by:
  6295 ;;		_main
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299     171B                     _init_inttimer:	
  6300                           ;psect for function _init_inttimer
  6301                           
  6302                           
  6303                           ;inttimer.c: 6: T1CONbits.TMR1CS = 0;
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _init_inttimer: [wreg+status,2+status,0]
  6307     171B  1090               	bcf	16,1	;volatile
  6308                           
  6309                           ;inttimer.c: 7: T1CONbits.T1CKPS = 0b00;
  6310     171C  30CF               	movlw	-49
  6311     171D  0590               	andwf	16,f	;volatile
  6312                           
  6313                           ;inttimer.c: 8: T1CONbits.T1SYNC = 0;
  6314     171E  1110               	bcf	16,2	;volatile
  6315                           
  6316                           ;inttimer.c: 9: TMR1H = 0xFF;
  6317     171F  30FF               	movlw	255
  6318     1720  008F               	movwf	15	;volatile
  6319                           
  6320                           ;inttimer.c: 10: TMR1L = 0xE7;
  6321     1721  30E7               	movlw	231
  6322     1722  008E               	movwf	14	;volatile
  6323                           
  6324                           ;inttimer.c: 11: PIR1bits.RCIF = 0;
  6325     1723  128C               	bcf	12,5	;volatile
  6326                           
  6327                           ;inttimer.c: 12: PIE1bits.RCIE = 1;
  6328     1724  1683               	bsf	3,5	;RP0=1, select bank1
  6329     1725  168C               	bsf	12,5	;volatile
  6330                           
  6331                           ;inttimer.c: 13: PIR1bits.ADIF = 0;
  6332     1726  1283               	bcf	3,5	;RP0=0, select bank0
  6333     1727  130C               	bcf	12,6	;volatile
  6334                           
  6335                           ;inttimer.c: 14: PIE1bits.ADIE = 1;
  6336     1728  1683               	bsf	3,5	;RP0=1, select bank1
  6337     1729  170C               	bsf	12,6	;volatile
  6338                           
  6339                           ;inttimer.c: 15: INTCONbits.PEIE = 1;
  6340     172A  170B               	bsf	11,6	;volatile
  6341                           
  6342                           ;inttimer.c: 16: INTCONbits.GIE = 1;
  6343     172B  178B               	bsf	11,7	;volatile
  6344     172C  0008               	return
  6345     172D                     __end_of_init_inttimer:
  6346                           
  6347                           	psect	text26
  6348     0884                     __ptext26:	
  6349 ;; *************** function _init_ADC *****************
  6350 ;; Defined at:
  6351 ;;		line 3 in file "adc.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0, pclath, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : B00/300
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6365 ;;      Params:         0       0       0       0       0
  6366 ;;      Locals:         0       0       0       0       0
  6367 ;;      Temps:          0       3       0       0       0
  6368 ;;      Totals:         0       3       0       0       0
  6369 ;;Total ram usage:        3 bytes
  6370 ;; Hardware stack levels used: 1
  6371 ;; Hardware stack levels required when called: 2
  6372 ;; This function calls:
  6373 ;;		_set_CHANNEL
  6374 ;; This function is called by:
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379     0884                     _init_ADC:	
  6380                           ;psect for function _init_ADC
  6381                           
  6382                           
  6383                           ;adc.c: 7: TRISAbits.TRISA0 = 1;
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _init_ADC: [wreg+status,2+status,0+pclath+cstack]
  6387     0884  1303               	bcf	3,6	;RP1=0, select bank1
  6388     0885  1405               	bsf	5,0	;volatile
  6389                           
  6390                           ;adc.c: 8: ANSELbits.ANS0 = 1;
  6391     0886  1703               	bsf	3,6	;RP1=1, select bank3
  6392     0887  1408               	bsf	8,0	;volatile
  6393                           
  6394                           ;adc.c: 9: set_CHANNEL(0);
  6395     0888  3000               	movlw	0
  6396     0889  160A  118A  26CA  120A  158A  	fcall	_set_CHANNEL
  6397                           
  6398                           ;adc.c: 10: ADCON0bits.ADCS = 0b001;
  6399     088E  081F               	movf	31,w	;volatile
  6400     088F  393F               	andlw	-193
  6401     0890  3840               	iorlw	64
  6402     0891  009F               	movwf	31	;volatile
  6403                           
  6404                           ;adc.c: 11: ADCON1bits.ADFM = 1;
  6405     0892  1683               	bsf	3,5	;RP0=1, select bank1
  6406     0893  179F               	bsf	31,7	;volatile
  6407                           
  6408                           ;adc.c: 12: ADCON1bits.VCFG1 = 1;
  6409     0894  169F               	bsf	31,5	;volatile
  6410                           
  6411                           ;adc.c: 13: ADCON1bits.VCFG0 = 1;
  6412     0895  161F               	bsf	31,4	;volatile
  6413                           
  6414                           ;adc.c: 14: ADCON0bits.ADON = 1;
  6415     0896  1283               	bcf	3,5	;RP0=0, select bank0
  6416     0897  141F               	bsf	31,0	;volatile
  6417                           
  6418                           ;adc.c: 16: _delay((unsigned long)((100)*(8000000/4000.0)));
  6419     0898  3002               	movlw	2
  6420     0899  1283               	bcf	3,5	;RP0=0, select bank0
  6421     089A  1303               	bcf	3,6	;RP1=0, select bank0
  6422     089B  00A4               	movwf	??_init_ADC+2
  6423     089C  3004               	movlw	4
  6424     089D  00A3               	movwf	??_init_ADC+1
  6425     089E  30B9               	movlw	185
  6426     089F  00A2               	movwf	??_init_ADC
  6427     08A0                     u3577:
  6428     08A0  0BA2               	decfsz	??_init_ADC,f
  6429     08A1  28A0               	goto	u3577
  6430     08A2  0BA3               	decfsz	??_init_ADC+1,f
  6431     08A3  28A0               	goto	u3577
  6432     08A4  0BA4               	decfsz	??_init_ADC+2,f
  6433     08A5  28A0               	goto	u3577
  6434     08A6  28A7               	nop2
  6435     08A7  0008               	return
  6436     08A8                     __end_of_init_ADC:
  6437                           
  6438                           	psect	text27
  6439     16CA                     __ptext27:	
  6440 ;; *************** function _set_CHANNEL *****************
  6441 ;; Defined at:
  6442 ;;		line 19 in file "adc.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;  channel         1    wreg     unsigned char 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  channel         1    1[BANK0 ] unsigned char 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      void 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : B00/300
  6453 ;;		On exit  : B00/0
  6454 ;;		Unchanged: 800/0
  6455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6456 ;;      Params:         0       0       0       0       0
  6457 ;;      Locals:         0       1       0       0       0
  6458 ;;      Temps:          0       1       0       0       0
  6459 ;;      Totals:         0       2       0       0       0
  6460 ;;Total ram usage:        2 bytes
  6461 ;; Hardware stack levels used: 1
  6462 ;; Hardware stack levels required when called: 1
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_init_ADC
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470     16CA                     _set_CHANNEL:	
  6471                           ;psect for function _set_CHANNEL
  6472                           
  6473                           
  6474                           ;incstack = 0
  6475                           ; Regs used in _set_CHANNEL: [wreg+status,2+status,0]
  6476                           ;set_CHANNEL@channel stored from wreg
  6477     16CA  1283               	bcf	3,5	;RP0=0, select bank0
  6478     16CB  1303               	bcf	3,6	;RP1=0, select bank0
  6479     16CC  00A1               	movwf	set_CHANNEL@channel
  6480                           
  6481                           ;adc.c: 22: {;adc.c: 23: ADCON0bits.CHS = channel;
  6482     16CD  0821               	movf	set_CHANNEL@channel,w
  6483     16CE  00A0               	movwf	??_set_CHANNEL
  6484     16CF  0DA0               	rlf	??_set_CHANNEL,f
  6485     16D0  0DA0               	rlf	??_set_CHANNEL,f
  6486     16D1  081F               	movf	31,w	;volatile
  6487     16D2  0620               	xorwf	??_set_CHANNEL,w
  6488     16D3  39C3               	andlw	-61
  6489     16D4  0620               	xorwf	??_set_CHANNEL,w
  6490     16D5  009F               	movwf	31	;volatile
  6491                           
  6492                           ;adc.c: 24: }else
  6493     16D6  0008               	return
  6494     16D7                     __end_of_set_CHANNEL:
  6495                           
  6496                           	psect	text28
  6497     16AB                     __ptext28:	
  6498 ;; *************** function _config_HAL *****************
  6499 ;; Defined at:
  6500 ;;		line 95 in file "newmain.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;		None
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		status,2
  6509 ;; Tracked objects:
  6510 ;;		On entry : B00/100
  6511 ;;		On exit  : B00/300
  6512 ;;		Unchanged: 800/0
  6513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6514 ;;      Params:         0       0       0       0       0
  6515 ;;      Locals:         0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0
  6517 ;;      Totals:         0       0       0       0       0
  6518 ;;Total ram usage:        0 bytes
  6519 ;; Hardware stack levels used: 1
  6520 ;; Hardware stack levels required when called: 1
  6521 ;; This function calls:
  6522 ;;		Nothing
  6523 ;; This function is called by:
  6524 ;;		_main
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528     16AB                     _config_HAL:	
  6529                           ;psect for function _config_HAL
  6530                           
  6531                           
  6532                           ;newmain.c: 97: TRISD = 0x00;
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _config_HAL: [status,2]
  6536     16AB  0188               	clrf	8	;volatile
  6537                           
  6538                           ;newmain.c: 98: TRISE = 0x00;
  6539     16AC  0189               	clrf	9	;volatile
  6540                           
  6541                           ;newmain.c: 99: ANSEL = 0x00;
  6542     16AD  1703               	bsf	3,6	;RP1=1, select bank3
  6543     16AE  0188               	clrf	8	;volatile
  6544                           
  6545                           ;newmain.c: 100: ANSELH = 0x00;
  6546     16AF  0189               	clrf	9	;volatile
  6547     16B0  0008               	return
  6548     16B1                     __end_of_config_HAL:
  6549                           
  6550                           	psect	text29
  6551     1709                     __ptext29:	
  6552 ;; *************** function ___lwtoft *****************
  6553 ;; Defined at:
  6554 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwtoft.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  c               2    8[BANK0 ] unsigned int 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  3    8[BANK0 ] float 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : B00/800
  6565 ;;		On exit  : 300/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6568 ;;      Params:         0       3       0       0       0
  6569 ;;      Locals:         0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0
  6571 ;;      Totals:         0       3       0       0       0
  6572 ;;Total ram usage:        3 bytes
  6573 ;; Hardware stack levels used: 1
  6574 ;; Hardware stack levels required when called: 2
  6575 ;; This function calls:
  6576 ;;		___ftpack
  6577 ;; This function is called by:
  6578 ;;		_main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582     1709                     ___lwtoft:	
  6583                           ;psect for function ___lwtoft
  6584                           
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6588     1709  0828               	movf	___lwtoft@c,w
  6589     170A  00A0               	movwf	___ftpack@arg
  6590     170B  0829               	movf	___lwtoft@c+1,w
  6591     170C  00A1               	movwf	___ftpack@arg+1
  6592     170D  01A2               	clrf	___ftpack@arg+2
  6593     170E  308E               	movlw	142
  6594     170F  00A3               	movwf	___ftpack@exp
  6595     1710  01A4               	clrf	___ftpack@sign
  6596     1711  120A  158A  228A   	fcall	___ftpack
  6597     1714  0820               	movf	?___ftpack,w
  6598     1715  00A8               	movwf	?___lwtoft
  6599     1716  0821               	movf	?___ftpack+1,w
  6600     1717  00A9               	movwf	?___lwtoft+1
  6601     1718  0822               	movf	?___ftpack+2,w
  6602     1719  00AA               	movwf	?___lwtoft+2
  6603     171A  0008               	return
  6604     171B                     __end_of___lwtoft:
  6605                           
  6606                           	psect	text30
  6607     0A8A                     __ptext30:	
  6608 ;; *************** function ___ftpack *****************
  6609 ;; Defined at:
  6610 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\float.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  arg             3    0[BANK0 ] unsigned um
  6613 ;;  exp             1    3[BANK0 ] unsigned char 
  6614 ;;  sign            1    4[BANK0 ] unsigned char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  3    0[BANK0 ] float 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, btemp+1
  6621 ;; Tracked objects:
  6622 ;;		On entry : 300/800
  6623 ;;		On exit  : 300/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6626 ;;      Params:         0       5       0       0       0
  6627 ;;      Locals:         0       0       0       0       0
  6628 ;;      Temps:          0       3       0       0       0
  6629 ;;      Totals:         0       8       0       0       0
  6630 ;;Total ram usage:        8 bytes
  6631 ;; Hardware stack levels used: 1
  6632 ;; Hardware stack levels required when called: 1
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		___ftadd
  6637 ;;		___ftmul
  6638 ;;		___lltoft
  6639 ;;		___lwtoft
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643     0A8A                     ___ftpack:	
  6644                           ;psect for function ___ftpack
  6645                           
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  6649     0A8A  0823               	movf	___ftpack@exp,w
  6650     0A8B  1903               	btfsc	3,2
  6651     0A8C  2A92               	goto	l1807
  6652     0A8D  0822               	movf	___ftpack@arg+2,w
  6653     0A8E  0421               	iorwf	___ftpack@arg+1,w
  6654     0A8F  0420               	iorwf	___ftpack@arg,w
  6655     0A90  1D03               	skipz
  6656     0A91  2AA5               	goto	l1815
  6657     0A92                     l1807:
  6658     0A92  3000               	movlw	0
  6659     0A93  00A0               	movwf	?___ftpack
  6660     0A94  3000               	movlw	0
  6661     0A95  00A1               	movwf	?___ftpack+1
  6662     0A96  3000               	movlw	0
  6663     0A97  00A2               	movwf	?___ftpack+2
  6664     0A98  0008               	return
  6665     0A99                     l1811:
  6666     0A99  3001               	movlw	1
  6667     0A9A  00FF               	movwf	127
  6668     0A9B  087F               	movf	127,w
  6669     0A9C  07A3               	addwf	___ftpack@exp,f
  6670     0A9D  3001               	movlw	1
  6671     0A9E                     u1815:
  6672     0A9E  1003               	clrc
  6673     0A9F  0CA2               	rrf	___ftpack@arg+2,f
  6674     0AA0  0CA1               	rrf	___ftpack@arg+1,f
  6675     0AA1  0CA0               	rrf	___ftpack@arg,f
  6676     0AA2  3EFF               	addlw	-1
  6677     0AA3  1D03               	skipz
  6678     0AA4  2A9E               	goto	u1815
  6679     0AA5                     l1815:
  6680     0AA5  30FE               	movlw	254
  6681     0AA6  0522               	andwf	___ftpack@arg+2,w
  6682     0AA7  1903               	btfsc	3,2
  6683     0AA8  2AC0               	goto	l1823
  6684     0AA9  2A99               	goto	l1811
  6685     0AAA                     l1817:
  6686     0AAA  3001               	movlw	1
  6687     0AAB  00FF               	movwf	127
  6688     0AAC  087F               	movf	127,w
  6689     0AAD  07A3               	addwf	___ftpack@exp,f
  6690     0AAE  3001               	movlw	1
  6691     0AAF  07A0               	addwf	___ftpack@arg,f
  6692     0AB0  3000               	movlw	0
  6693     0AB1  1803               	skipnc
  6694     0AB2  3001               	movlw	1
  6695     0AB3  07A1               	addwf	___ftpack@arg+1,f
  6696     0AB4  3000               	movlw	0
  6697     0AB5  1803               	skipnc
  6698     0AB6  3001               	movlw	1
  6699     0AB7  07A2               	addwf	___ftpack@arg+2,f
  6700     0AB8  3001               	movlw	1
  6701     0AB9                     u1835:
  6702     0AB9  1003               	clrc
  6703     0ABA  0CA2               	rrf	___ftpack@arg+2,f
  6704     0ABB  0CA1               	rrf	___ftpack@arg+1,f
  6705     0ABC  0CA0               	rrf	___ftpack@arg,f
  6706     0ABD  3EFF               	addlw	-1
  6707     0ABE  1D03               	skipz
  6708     0ABF  2AB9               	goto	u1835
  6709     0AC0                     l1823:
  6710     0AC0  30FF               	movlw	255
  6711     0AC1  0522               	andwf	___ftpack@arg+2,w
  6712     0AC2  1903               	btfsc	3,2
  6713     0AC3  2AD3               	goto	l1827
  6714     0AC4  2AAA               	goto	l1817
  6715     0AC5                     l1829:
  6716     0AC5  3002               	movlw	2
  6717     0AC6  0223               	subwf	___ftpack@exp,w
  6718     0AC7  1C03               	btfss	3,0
  6719     0AC8  2AD5               	goto	l594
  6720     0AC9  3001               	movlw	1
  6721     0ACA  02A3               	subwf	___ftpack@exp,f
  6722     0ACB  3001               	movlw	1
  6723     0ACC                     u1855:
  6724     0ACC  1003               	clrc
  6725     0ACD  0DA0               	rlf	___ftpack@arg,f
  6726     0ACE  0DA1               	rlf	___ftpack@arg+1,f
  6727     0ACF  0DA2               	rlf	___ftpack@arg+2,f
  6728     0AD0  3EFF               	addlw	-1
  6729     0AD1  1D03               	skipz
  6730     0AD2  2ACC               	goto	u1855
  6731     0AD3                     l1827:
  6732     0AD3  1FA1               	btfss	___ftpack@arg+1,7
  6733     0AD4  2AC5               	goto	l1829
  6734     0AD5                     l594:
  6735     0AD5  1823               	btfsc	___ftpack@exp,0
  6736     0AD6  2ADD               	goto	l595
  6737     0AD7  30FF               	movlw	255
  6738     0AD8  05A0               	andwf	___ftpack@arg,f
  6739     0AD9  307F               	movlw	127
  6740     0ADA  05A1               	andwf	___ftpack@arg+1,f
  6741     0ADB  30FF               	movlw	255
  6742     0ADC  05A2               	andwf	___ftpack@arg+2,f
  6743     0ADD                     l595:
  6744     0ADD  1003               	clrc
  6745     0ADE  0CA3               	rrf	___ftpack@exp,f
  6746     0ADF  0823               	movf	___ftpack@exp,w
  6747     0AE0  00A5               	movwf	??___ftpack
  6748     0AE1  01A6               	clrf	??___ftpack+1
  6749     0AE2  01A7               	clrf	??___ftpack+2
  6750     0AE3  3010               	movlw	16
  6751     0AE4                     u1895:
  6752     0AE4  1003               	clrc
  6753     0AE5  0DA5               	rlf	??___ftpack,f
  6754     0AE6  0DA6               	rlf	??___ftpack+1,f
  6755     0AE7  0DA7               	rlf	??___ftpack+2,f
  6756     0AE8  3EFF               	addlw	-1
  6757     0AE9  1D03               	skipz
  6758     0AEA  2AE4               	goto	u1895
  6759     0AEB  0825               	movf	??___ftpack,w
  6760     0AEC  04A0               	iorwf	___ftpack@arg,f
  6761     0AED  0826               	movf	??___ftpack+1,w
  6762     0AEE  04A1               	iorwf	___ftpack@arg+1,f
  6763     0AEF  0827               	movf	??___ftpack+2,w
  6764     0AF0  04A2               	iorwf	___ftpack@arg+2,f
  6765     0AF1  0824               	movf	___ftpack@sign,w
  6766     0AF2  1903               	btfsc	3,2
  6767     0AF3  0008               	return
  6768     0AF4  17A2               	bsf	___ftpack@arg+2,7
  6769     0AF5  0008               	return
  6770     0AF6                     __end_of___ftpack:
  6771                           
  6772                           	psect	text31
  6773     08FC                     __ptext31:	
  6774 ;; *************** function _TMR1_ISR *****************
  6775 ;; Defined at:
  6776 ;;		line 68 in file "newmain.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  salida          1    0        unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 300/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6790 ;;      Params:         0       0       0       0       0
  6791 ;;      Locals:         0       0       0       0       0
  6792 ;;      Temps:         13       0       0       0       0
  6793 ;;      Totals:        13       0       0       0       0
  6794 ;;Total ram usage:       13 bytes
  6795 ;; Hardware stack levels used: 1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		Interrupt level 1
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803     08FC                     _TMR1_ISR:	
  6804                           ;psect for function _TMR1_ISR
  6805                           
  6806                           
  6807                           ;newmain.c: 69: PORTDbits.RD1 = 0;
  6808     08FC  1283               	bcf	3,5	;RP0=0, select bank0
  6809     08FD  1303               	bcf	3,6	;RP1=0, select bank0
  6810     08FE  1088               	bcf	8,1	;volatile
  6811                           
  6812                           ;newmain.c: 70: char salida;;newmain.c: 72: if(RCIF){
  6813     08FF  1E8C               	btfss	12,5	;volatile
  6814     0900  2906               	goto	i1l119
  6815                           
  6816                           ;newmain.c: 73: RCIF = 0;
  6817     0901  128C               	bcf	12,5	;volatile
  6818     0902  081A               	movf	26,w	;volatile
  6819                           
  6820                           ;newmain.c: 78: PORTDbits.RD0 = 0;
  6821     0903  1008               	bcf	8,0	;volatile
  6822                           
  6823                           ;newmain.c: 79: contadorLed = 0;
  6824     0904  01EC               	clrf	_contadorLed	;volatile
  6825                           
  6826                           ;newmain.c: 80: }
  6827     0905  2931               	goto	i1l122
  6828     0906                     i1l119:
  6829                           
  6830                           ;newmain.c: 83: else{;newmain.c: 84: PIR1bits.ADIF = 0;
  6831     0906  130C               	bcf	12,6	;volatile
  6832                           
  6833                           ;newmain.c: 85: muestras[contador] = ((ADRESH << 8) & 0b1100000000) | ADRESL;
  6834     0907  1683               	bsf	3,5	;RP0=1, select bank1
  6835     0908  081E               	movf	30,w	;volatile
  6836     0909  00F0               	movwf	??_TMR1_ISR
  6837     090A  01F1               	clrf	??_TMR1_ISR+1
  6838     090B  1283               	bcf	3,5	;RP0=0, select bank0
  6839     090C  081E               	movf	30,w	;volatile
  6840     090D  00F2               	movwf	??_TMR1_ISR+2
  6841     090E  01F3               	clrf	??_TMR1_ISR+3
  6842     090F  0872               	movf	??_TMR1_ISR+2,w
  6843     0910  00F3               	movwf	??_TMR1_ISR+3
  6844     0911  01F2               	clrf	??_TMR1_ISR+2
  6845     0912  3000               	movlw	0
  6846     0913  0572               	andwf	??_TMR1_ISR+2,w
  6847     0914  00F4               	movwf	??_TMR1_ISR+4
  6848     0915  3003               	movlw	3
  6849     0916  0573               	andwf	??_TMR1_ISR+3,w
  6850     0917  00F5               	movwf	??_TMR1_ISR+5
  6851     0918  0870               	movf	??_TMR1_ISR,w
  6852     0919  0474               	iorwf	??_TMR1_ISR+4,w
  6853     091A  00F6               	movwf	??_TMR1_ISR+6
  6854     091B  0871               	movf	??_TMR1_ISR+1,w
  6855     091C  0475               	iorwf	??_TMR1_ISR+5,w
  6856     091D  00F7               	movwf	??_TMR1_ISR+7
  6857     091E  086D               	movf	_contador,w	;volatile
  6858     091F  00F8               	movwf	??_TMR1_ISR+8
  6859     0920  0778               	addwf	??_TMR1_ISR+8,w
  6860     0921  3E90               	addlw	(low (_muestras| (0+256)))& (0+255)
  6861     0922  0084               	movwf	4
  6862     0923  0876               	movf	??_TMR1_ISR+6,w
  6863     0924  1783               	bsf	3,7	;select IRP bank3
  6864     0925  0080               	movwf	0
  6865     0926  0A84               	incf	4,f
  6866     0927  0877               	movf	??_TMR1_ISR+7,w
  6867     0928  0080               	movwf	0
  6868                           
  6869                           ;newmain.c: 87: contador++;
  6870     0929  3001               	movlw	1
  6871     092A  00FF               	movwf	127
  6872     092B  087F               	movf	127,w
  6873     092C  07ED               	addwf	_contador,f	;volatile
  6874                           
  6875                           ;newmain.c: 88: if (contador < 41) {
  6876     092D  3029               	movlw	41
  6877     092E  026D               	subwf	_contador,w	;volatile
  6878     092F  1C03               	btfss	3,0
  6879                           
  6880                           ;newmain.c: 89: ADCON0bits.GO = 1;
  6881     0930  149F               	bsf	31,1	;volatile
  6882     0931                     i1l122:
  6883     0931  087C               	movf	??_TMR1_ISR+12,w
  6884     0932  00FF               	movwf	127
  6885     0933  087B               	movf	??_TMR1_ISR+11,w
  6886     0934  008A               	movwf	10
  6887     0935  087A               	movf	??_TMR1_ISR+10,w
  6888     0936  0084               	movwf	4
  6889     0937  0E79               	swapf	??_TMR1_ISR+9,w
  6890     0938  0083               	movwf	3
  6891     0939  0EFE               	swapf	126,f
  6892     093A  0E7E               	swapf	126,w
  6893     093B  0009               	retfie
  6894     093C                     __end_of_TMR1_ISR:
  6895     007E                     btemp	set	126	;btemp
  6896     007E                     wtemp0	set	126
  6897                           
  6898                           	psect	intentry
  6899     0004                     __pintentry:	
  6900                           ;incstack = 0
  6901                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  6902                           
  6903     0004                     interrupt_function:
  6904     007E                     saved_w	set	btemp
  6905     0004  00FE               	movwf	btemp
  6906     0005  0E03               	swapf	3,w
  6907     0006  00F9               	movwf	??_TMR1_ISR+9
  6908     0007  0804               	movf	4,w
  6909     0008  00FA               	movwf	??_TMR1_ISR+10
  6910     0009  080A               	movf	10,w
  6911     000A  00FB               	movwf	??_TMR1_ISR+11
  6912     000B  087F               	movf	btemp+1,w
  6913     000C  00FC               	movwf	??_TMR1_ISR+12
  6914     000D  120A  158A  28FC   	ljmp	_TMR1_ISR
  6915                           
  6916                           	psect	config
  6917                           
  6918                           ;Config register CONFIG1 @ 0x2007
  6919                           ;	Oscillator Selection bits
  6920                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  6921                           ;	Watchdog Timer Enable bit
  6922                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6923                           ;	Power-up Timer Enable bit
  6924                           ;	PWRTE = OFF, PWRT disabled
  6925                           ;	RE3/MCLR pin function select bit
  6926                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  6927                           ;	Code Protection bit
  6928                           ;	CP = OFF, Program memory code protection is disabled
  6929                           ;	Data Code Protection bit
  6930                           ;	CPD = OFF, Data memory code protection is disabled
  6931                           ;	Brown Out Reset Selection bits
  6932                           ;	BOREN = OFF, BOR disabled
  6933                           ;	Internal External Switchover bit
  6934                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  6935                           ;	Fail-Safe Clock Monitor Enabled bit
  6936                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  6937                           ;	Low Voltage Programming Enable bit
  6938                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6939                           ;	In-Circuit Debugger Mode bit
  6940                           ;	DEBUG = 0x1, unprogrammed default
  6941     2007                     	org	8199
  6942     2007  20D1               	dw	8401
  6943                           
  6944                           ;Config register CONFIG2 @ 0x2008
  6945                           ;	Brown-out Reset Selection bit
  6946                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  6947                           ;	Flash Program Memory Self Write Enable bits
  6948                           ;	WRT = OFF, Write protection off
  6949     2008                     	org	8200
  6950     2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    118
    Data        23
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     73      78
    BANK1            80     23      46
    BANK3            96      0      80
    BANK2            96      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 

    strcpy@to	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    strcpy@cp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    uart_send_text@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _TMR1_ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _uart_send_text->_uart_send
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _init_ADC->_set_CHANNEL
    ___lwtoft->___ftpack

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   43396
                                             70 BANK0      3     3      0
                            ___ftmul
                           ___lwtoft
                         _config_HAL
                           _init_ADC
                      _init_inttimer
                            _sprintf
                             _strcpy
                          _uart_init
                     _uart_send_text
 ---------------------------------------------------------------------------------
 (1) _uart_send_text                                       2     2      0     120
                                              1 BANK0      2     2      0
                          _uart_send
 ---------------------------------------------------------------------------------
 (2) _uart_send                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               3     2      1     169
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   35931
                                             60 BANK0     10     6      4
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    7887
                                             32 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    6134
                                             32 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     351
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              6 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4624
                                             17 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     560
                                             14 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     574
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1588
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    2509
                                              8 BANK0      5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     543
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     444
                                             39 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3667
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3472
                                             42 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     648
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _init_inttimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             3     3      0      22
                                              2 BANK0      3     3      0
                        _set_CHANNEL
 ---------------------------------------------------------------------------------
 (2) _set_CHANNEL                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _config_HAL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2462
                                              8 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2376
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                            14    14      0       1
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
     ___lbmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___lwtoft
   _config_HAL
   _init_ADC
     _set_CHANNEL
   _init_inttimer
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _scale
   _strcpy
   _uart_init
   _uart_send_text
     _uart_send

 _TMR1_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     17      2E       7       57.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     49      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D9      12        0.0%
ABS                  0      0      D9       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 30 19:17:31 2023

                      pc 0002           ___bmul@product 002F             ___awdiv@sign 002B  
                     fsr 0004      ___wmul@multiplicand 0022             ___ftadd@exp1 0055  
           ___ftadd@exp2 0054             ___ftadd@sign 0053                      l312 0050  
                    l172 16C4                      l186 17E0                      l358 17A6  
                    l712 1796                      l618 0D53                      l654 0BF6  
                    l575 0EA9                      l567 0E7D                      l594 0AD5  
                    l595 0ADD                      l695 0B47                      fsr0 0004  
                    indf 0000             ___awmod@sign 0025                     l2007 0D9A  
                   l2023 0C36                     l2041 0C55                     l2017 0C22  
                   l2221 0BF2                     l2053 0C7B                     l2045 0C65  
                   l2311 0A4C                     l2207 0BCF                     l2135 0FD4  
                   l2127 0F69                     l2151 05CD                     l2217 0BE2  
                   l2057 0C8B                     l2161 064B                     l2331 08DE  
                   l2403 0B64                     l2323 0A81                     l2235 0DC5  
                   l2309 0A3C                     l2421 09BD                     l2229 0C05  
                   l2181 0B7A                     l2077 17C4                     l2157 0630  
                   l2335 08ED                     l2319 0A74                     l2415 098F  
                   l2271 0E95                     l2255 0E27                     l2239 0DCE  
                   l2079 17CD                     l2175 0759                     l2503 004D  
                   l2417 099F                     l2425 09CA                     l2185 0B83  
                   l2089 17DC                     l2097 1781                     l2169 06F6  
                   l1811 0A99                     l2435 08AA                     l2283 0EB8  
                   l2275 0EA5                     l2611 0396                     l2523 00BF  
                   l2507 0052                     l2365 0B03                     l2437 08BC  
                   l2509 0066                     l1823 0AC0                     l1815 0AA5  
                   l1807 0A92                     l2359 1767                     l2391 0B43  
                   l2199 0BAF                     l1911 094D                     l2631 03E0  
                   l2623 03C3                     l1817 0AAA                     l2369 0B0C  
                   l2289 179E                     l1841 16E9                     l1921 0961  
                   l2617 03A7                     l2609 0316                     l2553 01A8  
                   l1827 0AD3                     l2387 0B33                     l1907 0946  
                   l2563 0204                     l2547 0188                     l2539 0130  
                   l2707 07A1                     l1829 0AC5                     l1845 16EF  
                   l1933 0982                     l1925 096F                     l2653 0503  
                   l2581 02C3                     l2661 0035                     l2493 1747  
                   l1943 0CD6                     l2399 0B56                     l1863 09DD  
                   l1919 0953                     l2647 04F4                     l2567 0220  
                   l2655 0508                     l2663 0517                     l1953 0CEC  
                   l1881 09FE                     l1929 097A                     l2577 026A  
                   l1971 0D19                     l1947 0CDD                     l1891 0A1F  
                   l2595 0309                     l2587 02C5                     l1965 0D04  
                   l1869 09E8                     l2693 078F                     l1975 0D25  
                   l1895 0A27                     l1887 0A14                     l1879 09F0  
                   l1993 0D65                     l1985 0D43                     l1977 0D2A  
                   l1979 0D2E                     l1997 0D77                     l1989 0D4F  
                   STR_1 087C                     STR_2 0880                     u2005 0A15  
                   u2215 0D05                     u2305 0D44                     u2065 0956  
                   u3115 0B4C                     u2245 0D1A                     u3205 08AF  
                   u2405 0C66                     u2085 0967                     u3055 0B13  
                   u2415 0C6E                     u2095 0970                     u2275 0D2F  
                   u3155 0993                     u3315 01D9                     u3085 0B34  
                   u2525 1784                     u3405 031F                     u1815 0A9E  
                   u3175 09AD                     u2455 0C8C                     u3185 09BE  
                   u2465 0C94                     u3425 03B0                     u3345 0202  
                   u1835 0AB9                     u2715 0BE3                     u3435 03BD  
                   u3275 00D7                     u3365 02C9                     u1855 0ACC  
                   u2655 0BB1                     u3455 0430                     u3375 02FF  
                   u2905 17AE                     u2745 0BFB                     u2665 0BC2  
                   u3465 04B0                     u3545 07F7                     u2835 0E96  
                   u2675 0BD0                     u1965 09F3                     u1895 0AE4  
                   u2935 0A40                     u3577 08A0                     u2865 0EAE  
                   u2785 0E29                     u1985 09FF                     u2955 0A4E  
                   u2795 0E58                     u1995 0A0B                     _RCIF 0065  
                   u2965 0A63                     u2975 0A75                     u2895 17A7  
                   _TXEN 04C5                     _TXIF 0064                     _main 0774  
           ___ftpack@arg 0020             ___ftpack@exp 0023                     btemp 007E  
                   _stop 00A0                     start 0010             _sprintf$1292 00B7  
      ___bmul@multiplier 0030             ___ftmul@cntr 003E             ___ftmul@sign 003F  
       ??_uart_send_text 0021             ___fttol@exp1 0053             ___fttol@lval 004F  
                  ?_main 0070          __end_of___awdiv 0A2C          __end_of___lbdiv 17DE  
        __end_of___ftadd 0DAE          __end_of___awmod 0987          __end_of___lbmod 179C  
        __end_of___ftneg 16B9                    _ANSEL 0188          __end_of___lldiv 0A8A  
        __end_of___ftmul 0CB3          ___awdiv@divisor 0026          __end_of___llmod 09D3  
        __end_of___ftsub 177D          __end_of___fttol 0B6D                    i1l122 0931  
                  i1l119 0906          ___awdiv@counter 002A                    _RCREG 001A  
                  _RCSTA 0018                    _TMR1H 000F                    _TMR1L 000E  
                  _SPBRG 0099                    _TRISD 0088                    _TRISE 0089  
                  _TXREG 0019             ___lltoft@exp 002C         __end_of_TMR1_ISR 093C  
        __end_of_dpowers 087C                    _scale 051C            ___ftpack@sign 0024  
                  main@i 0067                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 051C             ?_set_CHANNEL 0070  
        ___lbdiv@divisor 0026          ___lbdiv@counter 0028          __initialization 0013  
           __end_of_main 0800                   ??_main 0066            ___fttol@sign1 004E  
       ___llmod@dividend 0024                   ?_scale 0040                   _ADRESH 001E  
                 _ADRESL 009E         ___awdiv@dividend 0028         __end_of___ftpack 0AF6  
                 _ANSELH 0189         __end_of___lltoft 08CF         __end_of___lwtoft 171B  
       __end_of__powers_ 082D                   ___bmul 16E7                   ___ftge 08CF  
                 ___wmul 179C                ??___awdiv 002A                ??___lbdiv 0027  
              ??___ftadd 0050                ??___awmod 0024                ??___lbmod 0021  
              ??___ftneg 0023                ??___lldiv 0028                ??___ftmul 0037  
              ??___llmod 0028                ??___ftsub 005C                ??___fttol 004B  
       __end_of_init_ADC 08A8                   _buffer 00A3                   _fround 0EC1  
       ___awdiv@quotient 002C          ___awmod@divisor 0020          ___awmod@counter 0024  
                 _strcpy 1744    ___ftmul@f3_as_product 003B                   saved_w 007E  
              ??_sprintf 0060         ___lbdiv@dividend 0027          ___lbmod@divisor 0020  
__end_of__initialization 002D          ___lbmod@counter 0024               ___ftadd@f1 004A  
             ___ftadd@f2 004D               ___ftge@ff1 0020               ___ftge@ff2 0023  
             ___ftneg@f1 0020      ___bmul@multiplicand 002E               ___ftmul@f1 0031  
             ___ftmul@f2 0034               ___ftsub@f1 0059               ___ftsub@f2 0056  
             ___fttol@f1 0047           __pcstackCOMMON 0070             __pidataBANK1 172D  
              ?_TMR1_ISR 0070               ___lltoft@c 0028            __end_of_scale 0774  
       ___lbdiv@quotient 0029               ___lwtoft@c 0028               __div_to_l_ 0DAE  
        __div_to_l_@exp1 0033          __div_to_l_@cntr 0032     uart_send_text@buffer 0022  
                ??_scale 0043          __div_to_l_@quot 002E               __pbssBANK0 0069  
             __pbssBANK3 0190            _init_inttimer 171B            __div_to_l_@f1 0020  
          __div_to_l_@f2 0023               __pmaintext 0774                  ?___bmul 002E  
                ?___ftge 0020                  ?___wmul 0020               ??_TMR1_ISR 0070  
             __pintentry 0004                  ?_fround 0040                ?___ftpack 0020  
              ?___lltoft 0028                  ?_strcpy 0020                ?___lwtoft 0028  
             _config_HAL 16AB               __stringtab 0800           ?_init_inttimer 0070  
              ?_init_ADC 0070        __end_of__npowers_ 0854               _scale$1291 0043  
                ___awdiv 09D3                  ___lbdiv 17BD                  ___ftadd 0CB3  
                ___awmod 093C                  ___lbmod 177D                  ___ftneg 16B1  
                ___lldiv 0A2C                  ___ftmul 0C0E                  ___llmod 0987  
                ___ftsub 1760                  ___fttol 0AF6        uart_send_text@aux 0021  
             ??___ftpack 0025                _ANSELbits 0188                  _datoenv 0069  
             ??___lltoft 002C                  __ptext1 17DE                  __ptext2 16C1  
                __ptext3 16D7                  __ptext4 1744                  __ptext5 0031  
                __ptext6 051C                  __ptext7 093C                  __ptext8 09D3  
                __ptext9 0EC1               ??___lwtoft 002B                _T1CONbits 0010  
            ?__div_to_l_ 0020                  _dpowers 0854         ___awmod@dividend 0022  
                _sprintf 0031                  clrloop0 16BA     end_of_initialization 002D  
             ??_init_ADC 0022        __end_of_uart_init 16E7        __end_of_uart_send 16CA  
        ___lldiv@divisor 0020          ___lldiv@counter 002D                _RCSTAbits 0018  
         __tdiv_to_l_@f1 0020           __tdiv_to_l_@f2 0023            ??__tdiv_to_l_ 0026  
              _PORTDbits 0008              ?_config_HAL 0070         ___lbmod@dividend 0023  
              _TRISAbits 0085                _TRISCbits 0087          ??_init_inttimer 0020  
            ___lbmod@rem 0025                _TXSTAbits 0098              ___ftmul@exp 003A  
         __end_of___bmul 16F8           __end_of___ftge 08FC           __end_of___wmul 17BD  
            _BAUDCTLbits 0187           __end_of_fround 1000           __end_of_strcpy 1760  
    start_initialization 0013      __end_of__tdiv_to_l_ 0C0E          ___llmod@divisor 0020  
        ___llmod@counter 0029                 ??___bmul 002F                 ??___ftge 0026  
               ??___wmul 0024               init_fetch0 16F8              __pdataBANK1 00A0  
               ??_fround 0043            sprintf@tmpval 00C5                 ??_strcpy 0021  
             fround@prec 0049                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00B7              sprintf@flag 00BB              sprintf@eexp 00C3  
            sprintf@fval 00CA            ??_set_CHANNEL 0020              sprintf@prec 00BD  
               ?___awdiv 0026                 ?___lbdiv 0026                 ?___ftadd 004A  
               ?___awmod 0020                 ?___lbmod 0020                 ?___ftneg 0020  
               ?___lldiv 0020                 ?___ftmul 0031                 ?___llmod 0020  
               ?___ftsub 0056                __npowers_ 082D                 ?___fttol 0047  
              __pstrings 0800              __tdiv_to_l_ 0B6D             ??__div_to_l_ 0026  
         _uart_send_text 17DE                 ?_sprintf 005C        interrupt_function 0004  
         ___wmul@product 0024                clear_ram0 16B9                 _PIE1bits 008C  
               _PIR1bits 000C       __end_of__div_to_l_ 0EC1      __end_of_set_CHANNEL 16D7  
              _uart_init 16D7                _uart_send 16C1                 _TMR1_ISR 08FC  
 __end_of_uart_send_text 1800               _ADCON0bits 001F              __stringbase 0805  
             _ADCON1bits 009F        ___wmul@multiplier 0020              _contadorLed 006C  
           ??_config_HAL 0020       __end_of_config_HAL 16B1               ?_uart_init 0070  
             ?_uart_send 0070                 ___ftpack 0A8A              _fround$1290 0043  
            _fround$1289 0046       __end_of__stringtab 0806                 ___lltoft 08A8  
        ?_uart_send_text 0070                 ___lwtoft 1709               sprintf@val 00BF  
     set_CHANNEL@channel 0021                 __ptext10 177D                 __ptext11 17BD  
               __ptext20 0AF6                 __ptext12 0C0E                 __ptext21 1760  
               __ptext13 16E7                 __ptext30 0A8A                 __ptext22 0CB3  
               __ptext14 0B6D                 __ptext31 08FC                 __ptext23 16B1  
               __ptext15 0DAE                 __ptext24 08CF                 __ptext16 179C  
               __ptext25 171B                 __ptext17 08A8                 __ptext26 0884  
               __ptext18 0987                 __ptext27 16CA                 __ptext19 0A2C  
               __ptext28 16AB                 __ptext29 1709                 __powers_ 0806  
               _contador 006D    __end_of_init_inttimer 172D               strcpy@from 0020  
               _init_ADC 0884              _set_CHANNEL 16CA                 _muestras 0190  
             _INTCONbits 000B                 init_ram0 16FC                 scale@scl 0046  
               intlevel1 0000                sprintf@ap 00BA         __tdiv_to_l_@exp1 002E  
       __tdiv_to_l_@cntr 002D                sprintf@sp 00C9         __tdiv_to_l_@quot 0029  
       ___lldiv@dividend 0024                stringcode 0800               _OSCCONbits 008F  
            ??_uart_init 0020              ??_uart_send 0020             ?__tdiv_to_l_ 0020  
          uart_send@data 0020                 sprintf@c 00CD                 sprintf@f 005C  
       ___lldiv@quotient 0029                 strcpy@cp 0022                 strcpy@to 0021  
               stringdir 0800                 stringtab 0800  
